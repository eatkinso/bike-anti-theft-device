ARM GAS  /tmp/ccz9n1V5.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32wlxx_it.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.NMI_Handler,"ax",%progbits
  16              		.align	1
  17              		.global	NMI_Handler
  18              		.arch armv7e-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	NMI_Handler:
  25              	.LFB972:
  26              		.file 1 "Core/Src/stm32wlxx_it.c"
   1:Core/Src/stm32wlxx_it.c **** /* USER CODE BEGIN Header */
   2:Core/Src/stm32wlxx_it.c **** /**
   3:Core/Src/stm32wlxx_it.c ****   ******************************************************************************
   4:Core/Src/stm32wlxx_it.c ****   * @file    stm32wlxx_it.c
   5:Core/Src/stm32wlxx_it.c ****   * @brief   Interrupt Service Routines.
   6:Core/Src/stm32wlxx_it.c ****   ******************************************************************************
   7:Core/Src/stm32wlxx_it.c ****   * @attention
   8:Core/Src/stm32wlxx_it.c ****   *
   9:Core/Src/stm32wlxx_it.c ****   * <h2><center>&copy; Copyright (c) 2022 STMicroelectronics.
  10:Core/Src/stm32wlxx_it.c ****   * All rights reserved.</center></h2>
  11:Core/Src/stm32wlxx_it.c ****   *
  12:Core/Src/stm32wlxx_it.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Core/Src/stm32wlxx_it.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Core/Src/stm32wlxx_it.c ****   * the License. You may obtain a copy of the License at:
  15:Core/Src/stm32wlxx_it.c ****   *                             www.st.com/SLA0044
  16:Core/Src/stm32wlxx_it.c ****   *
  17:Core/Src/stm32wlxx_it.c ****   ******************************************************************************
  18:Core/Src/stm32wlxx_it.c ****   */
  19:Core/Src/stm32wlxx_it.c **** /* USER CODE END Header */
  20:Core/Src/stm32wlxx_it.c **** 
  21:Core/Src/stm32wlxx_it.c **** /* Includes ------------------------------------------------------------------*/
  22:Core/Src/stm32wlxx_it.c **** #include "main.h"
  23:Core/Src/stm32wlxx_it.c **** #include "stm32wlxx_it.h"
  24:Core/Src/stm32wlxx_it.c **** /* Private includes ----------------------------------------------------------*/
  25:Core/Src/stm32wlxx_it.c **** /* USER CODE BEGIN Includes */
  26:Core/Src/stm32wlxx_it.c **** #include "btrfid.h"
  27:Core/Src/stm32wlxx_it.c **** #include "btgps.h"
  28:Core/Src/stm32wlxx_it.c **** #include <string.h>
  29:Core/Src/stm32wlxx_it.c **** /* USER CODE END Includes */
  30:Core/Src/stm32wlxx_it.c **** 
  31:Core/Src/stm32wlxx_it.c **** /* Private typedef -----------------------------------------------------------*/
  32:Core/Src/stm32wlxx_it.c **** /* USER CODE BEGIN TD */
ARM GAS  /tmp/ccz9n1V5.s 			page 2


  33:Core/Src/stm32wlxx_it.c **** 
  34:Core/Src/stm32wlxx_it.c **** /* USER CODE END TD */
  35:Core/Src/stm32wlxx_it.c **** 
  36:Core/Src/stm32wlxx_it.c **** /* Private define ------------------------------------------------------------*/
  37:Core/Src/stm32wlxx_it.c **** /* USER CODE BEGIN PD */
  38:Core/Src/stm32wlxx_it.c **** 
  39:Core/Src/stm32wlxx_it.c **** /* USER CODE END PD */
  40:Core/Src/stm32wlxx_it.c **** 
  41:Core/Src/stm32wlxx_it.c **** /* Private macro -------------------------------------------------------------*/
  42:Core/Src/stm32wlxx_it.c **** /* USER CODE BEGIN PM */
  43:Core/Src/stm32wlxx_it.c **** 
  44:Core/Src/stm32wlxx_it.c **** /* USER CODE END PM */
  45:Core/Src/stm32wlxx_it.c **** 
  46:Core/Src/stm32wlxx_it.c **** /* Private variables ---------------------------------------------------------*/
  47:Core/Src/stm32wlxx_it.c **** /* USER CODE BEGIN PV */
  48:Core/Src/stm32wlxx_it.c **** 
  49:Core/Src/stm32wlxx_it.c **** /* USER CODE END PV */
  50:Core/Src/stm32wlxx_it.c **** 
  51:Core/Src/stm32wlxx_it.c **** /* Private function prototypes -----------------------------------------------*/
  52:Core/Src/stm32wlxx_it.c **** /* USER CODE BEGIN PFP */
  53:Core/Src/stm32wlxx_it.c **** 
  54:Core/Src/stm32wlxx_it.c **** /* USER CODE END PFP */
  55:Core/Src/stm32wlxx_it.c **** 
  56:Core/Src/stm32wlxx_it.c **** /* Private user code ---------------------------------------------------------*/
  57:Core/Src/stm32wlxx_it.c **** /* USER CODE BEGIN 0 */
  58:Core/Src/stm32wlxx_it.c **** 
  59:Core/Src/stm32wlxx_it.c **** /* USER CODE END 0 */
  60:Core/Src/stm32wlxx_it.c **** 
  61:Core/Src/stm32wlxx_it.c **** /* External variables --------------------------------------------------------*/
  62:Core/Src/stm32wlxx_it.c **** extern UART_HandleTypeDef hlpuart1;
  63:Core/Src/stm32wlxx_it.c **** extern UART_HandleTypeDef huart1;
  64:Core/Src/stm32wlxx_it.c **** /* USER CODE BEGIN EV */
  65:Core/Src/stm32wlxx_it.c **** extern statemachine_state_t mystate;
  66:Core/Src/stm32wlxx_it.c **** extern uint8_t irqtestbuf[13];
  67:Core/Src/stm32wlxx_it.c **** extern uint8_t rfidrawbuf[50];
  68:Core/Src/stm32wlxx_it.c **** extern uint8_t rfidmsgbuf[15];
  69:Core/Src/stm32wlxx_it.c **** extern uint32_t rfidstarttime;
  70:Core/Src/stm32wlxx_it.c **** extern TIM_HandleTypeDef htim2;
  71:Core/Src/stm32wlxx_it.c **** /* USER CODE END EV */
  72:Core/Src/stm32wlxx_it.c **** 
  73:Core/Src/stm32wlxx_it.c **** /******************************************************************************/
  74:Core/Src/stm32wlxx_it.c **** /*           Cortex Processor Interruption and Exception Handlers          */
  75:Core/Src/stm32wlxx_it.c **** /******************************************************************************/
  76:Core/Src/stm32wlxx_it.c **** /**
  77:Core/Src/stm32wlxx_it.c ****   * @brief This function handles Non maskable interrupt.
  78:Core/Src/stm32wlxx_it.c ****   */
  79:Core/Src/stm32wlxx_it.c **** void NMI_Handler(void)
  80:Core/Src/stm32wlxx_it.c **** {
  27              		.loc 1 80 1 view -0
  28              		.cfi_startproc
  29              		@ Volatile: function does not return.
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.L2:
  81:Core/Src/stm32wlxx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  82:Core/Src/stm32wlxx_it.c **** 
ARM GAS  /tmp/ccz9n1V5.s 			page 3


  83:Core/Src/stm32wlxx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  84:Core/Src/stm32wlxx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  85:Core/Src/stm32wlxx_it.c ****   while (1)
  34              		.loc 1 85 3 discriminator 1 view .LVU1
  86:Core/Src/stm32wlxx_it.c ****   {
  87:Core/Src/stm32wlxx_it.c ****   }
  35              		.loc 1 87 3 discriminator 1 view .LVU2
  85:Core/Src/stm32wlxx_it.c ****   {
  36              		.loc 1 85 9 discriminator 1 view .LVU3
  37 0000 FEE7     		b	.L2
  38              		.cfi_endproc
  39              	.LFE972:
  41              		.section	.text.HardFault_Handler,"ax",%progbits
  42              		.align	1
  43              		.global	HardFault_Handler
  44              		.syntax unified
  45              		.thumb
  46              		.thumb_func
  47              		.fpu softvfp
  49              	HardFault_Handler:
  50              	.LFB973:
  88:Core/Src/stm32wlxx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  89:Core/Src/stm32wlxx_it.c **** }
  90:Core/Src/stm32wlxx_it.c **** 
  91:Core/Src/stm32wlxx_it.c **** /**
  92:Core/Src/stm32wlxx_it.c ****   * @brief This function handles Hard fault interrupt.
  93:Core/Src/stm32wlxx_it.c ****   */
  94:Core/Src/stm32wlxx_it.c **** void HardFault_Handler(void)
  95:Core/Src/stm32wlxx_it.c **** {
  51              		.loc 1 95 1 view -0
  52              		.cfi_startproc
  53              		@ Volatile: function does not return.
  54              		@ args = 0, pretend = 0, frame = 0
  55              		@ frame_needed = 0, uses_anonymous_args = 0
  56              		@ link register save eliminated.
  57              	.L4:
  96:Core/Src/stm32wlxx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  97:Core/Src/stm32wlxx_it.c **** 
  98:Core/Src/stm32wlxx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  99:Core/Src/stm32wlxx_it.c ****   while (1)
  58              		.loc 1 99 3 discriminator 1 view .LVU5
 100:Core/Src/stm32wlxx_it.c ****   {
 101:Core/Src/stm32wlxx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
 102:Core/Src/stm32wlxx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
 103:Core/Src/stm32wlxx_it.c ****   }
  59              		.loc 1 103 3 discriminator 1 view .LVU6
  99:Core/Src/stm32wlxx_it.c ****   {
  60              		.loc 1 99 9 discriminator 1 view .LVU7
  61 0000 FEE7     		b	.L4
  62              		.cfi_endproc
  63              	.LFE973:
  65              		.section	.text.MemManage_Handler,"ax",%progbits
  66              		.align	1
  67              		.global	MemManage_Handler
  68              		.syntax unified
  69              		.thumb
  70              		.thumb_func
ARM GAS  /tmp/ccz9n1V5.s 			page 4


  71              		.fpu softvfp
  73              	MemManage_Handler:
  74              	.LFB974:
 104:Core/Src/stm32wlxx_it.c **** }
 105:Core/Src/stm32wlxx_it.c **** 
 106:Core/Src/stm32wlxx_it.c **** /**
 107:Core/Src/stm32wlxx_it.c ****   * @brief This function handles Memory management fault.
 108:Core/Src/stm32wlxx_it.c ****   */
 109:Core/Src/stm32wlxx_it.c **** void MemManage_Handler(void)
 110:Core/Src/stm32wlxx_it.c **** {
  75              		.loc 1 110 1 view -0
  76              		.cfi_startproc
  77              		@ Volatile: function does not return.
  78              		@ args = 0, pretend = 0, frame = 0
  79              		@ frame_needed = 0, uses_anonymous_args = 0
  80              		@ link register save eliminated.
  81              	.L6:
 111:Core/Src/stm32wlxx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 112:Core/Src/stm32wlxx_it.c **** 
 113:Core/Src/stm32wlxx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 114:Core/Src/stm32wlxx_it.c ****   while (1)
  82              		.loc 1 114 3 discriminator 1 view .LVU9
 115:Core/Src/stm32wlxx_it.c ****   {
 116:Core/Src/stm32wlxx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 117:Core/Src/stm32wlxx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 118:Core/Src/stm32wlxx_it.c ****   }
  83              		.loc 1 118 3 discriminator 1 view .LVU10
 114:Core/Src/stm32wlxx_it.c ****   {
  84              		.loc 1 114 9 discriminator 1 view .LVU11
  85 0000 FEE7     		b	.L6
  86              		.cfi_endproc
  87              	.LFE974:
  89              		.section	.text.BusFault_Handler,"ax",%progbits
  90              		.align	1
  91              		.global	BusFault_Handler
  92              		.syntax unified
  93              		.thumb
  94              		.thumb_func
  95              		.fpu softvfp
  97              	BusFault_Handler:
  98              	.LFB975:
 119:Core/Src/stm32wlxx_it.c **** }
 120:Core/Src/stm32wlxx_it.c **** 
 121:Core/Src/stm32wlxx_it.c **** /**
 122:Core/Src/stm32wlxx_it.c ****   * @brief This function handles Prefetch fault, memory access fault.
 123:Core/Src/stm32wlxx_it.c ****   */
 124:Core/Src/stm32wlxx_it.c **** void BusFault_Handler(void)
 125:Core/Src/stm32wlxx_it.c **** {
  99              		.loc 1 125 1 view -0
 100              		.cfi_startproc
 101              		@ Volatile: function does not return.
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 0, uses_anonymous_args = 0
 104              		@ link register save eliminated.
 105              	.L8:
 126:Core/Src/stm32wlxx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 127:Core/Src/stm32wlxx_it.c **** 
ARM GAS  /tmp/ccz9n1V5.s 			page 5


 128:Core/Src/stm32wlxx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 129:Core/Src/stm32wlxx_it.c ****   while (1)
 106              		.loc 1 129 3 discriminator 1 view .LVU13
 130:Core/Src/stm32wlxx_it.c ****   {
 131:Core/Src/stm32wlxx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 132:Core/Src/stm32wlxx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 133:Core/Src/stm32wlxx_it.c ****   }
 107              		.loc 1 133 3 discriminator 1 view .LVU14
 129:Core/Src/stm32wlxx_it.c ****   {
 108              		.loc 1 129 9 discriminator 1 view .LVU15
 109 0000 FEE7     		b	.L8
 110              		.cfi_endproc
 111              	.LFE975:
 113              		.section	.text.UsageFault_Handler,"ax",%progbits
 114              		.align	1
 115              		.global	UsageFault_Handler
 116              		.syntax unified
 117              		.thumb
 118              		.thumb_func
 119              		.fpu softvfp
 121              	UsageFault_Handler:
 122              	.LFB976:
 134:Core/Src/stm32wlxx_it.c **** }
 135:Core/Src/stm32wlxx_it.c **** 
 136:Core/Src/stm32wlxx_it.c **** /**
 137:Core/Src/stm32wlxx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 138:Core/Src/stm32wlxx_it.c ****   */
 139:Core/Src/stm32wlxx_it.c **** void UsageFault_Handler(void)
 140:Core/Src/stm32wlxx_it.c **** {
 123              		.loc 1 140 1 view -0
 124              		.cfi_startproc
 125              		@ Volatile: function does not return.
 126              		@ args = 0, pretend = 0, frame = 0
 127              		@ frame_needed = 0, uses_anonymous_args = 0
 128              		@ link register save eliminated.
 129              	.L10:
 141:Core/Src/stm32wlxx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 142:Core/Src/stm32wlxx_it.c **** 
 143:Core/Src/stm32wlxx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 144:Core/Src/stm32wlxx_it.c ****   while (1)
 130              		.loc 1 144 3 discriminator 1 view .LVU17
 145:Core/Src/stm32wlxx_it.c ****   {
 146:Core/Src/stm32wlxx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 147:Core/Src/stm32wlxx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 148:Core/Src/stm32wlxx_it.c ****   }
 131              		.loc 1 148 3 discriminator 1 view .LVU18
 144:Core/Src/stm32wlxx_it.c ****   {
 132              		.loc 1 144 9 discriminator 1 view .LVU19
 133 0000 FEE7     		b	.L10
 134              		.cfi_endproc
 135              	.LFE976:
 137              		.section	.text.SVC_Handler,"ax",%progbits
 138              		.align	1
 139              		.global	SVC_Handler
 140              		.syntax unified
 141              		.thumb
 142              		.thumb_func
ARM GAS  /tmp/ccz9n1V5.s 			page 6


 143              		.fpu softvfp
 145              	SVC_Handler:
 146              	.LFB977:
 149:Core/Src/stm32wlxx_it.c **** }
 150:Core/Src/stm32wlxx_it.c **** 
 151:Core/Src/stm32wlxx_it.c **** /**
 152:Core/Src/stm32wlxx_it.c ****   * @brief This function handles System service call via SWI instruction.
 153:Core/Src/stm32wlxx_it.c ****   */
 154:Core/Src/stm32wlxx_it.c **** void SVC_Handler(void)
 155:Core/Src/stm32wlxx_it.c **** {
 147              		.loc 1 155 1 view -0
 148              		.cfi_startproc
 149              		@ args = 0, pretend = 0, frame = 0
 150              		@ frame_needed = 0, uses_anonymous_args = 0
 151              		@ link register save eliminated.
 156:Core/Src/stm32wlxx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 157:Core/Src/stm32wlxx_it.c **** 
 158:Core/Src/stm32wlxx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 159:Core/Src/stm32wlxx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 160:Core/Src/stm32wlxx_it.c **** 
 161:Core/Src/stm32wlxx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 162:Core/Src/stm32wlxx_it.c **** }
 152              		.loc 1 162 1 view .LVU21
 153 0000 7047     		bx	lr
 154              		.cfi_endproc
 155              	.LFE977:
 157              		.section	.text.DebugMon_Handler,"ax",%progbits
 158              		.align	1
 159              		.global	DebugMon_Handler
 160              		.syntax unified
 161              		.thumb
 162              		.thumb_func
 163              		.fpu softvfp
 165              	DebugMon_Handler:
 166              	.LFB978:
 163:Core/Src/stm32wlxx_it.c **** 
 164:Core/Src/stm32wlxx_it.c **** /**
 165:Core/Src/stm32wlxx_it.c ****   * @brief This function handles Debug monitor.
 166:Core/Src/stm32wlxx_it.c ****   */
 167:Core/Src/stm32wlxx_it.c **** void DebugMon_Handler(void)
 168:Core/Src/stm32wlxx_it.c **** {
 167              		.loc 1 168 1 view -0
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 0
 170              		@ frame_needed = 0, uses_anonymous_args = 0
 171              		@ link register save eliminated.
 169:Core/Src/stm32wlxx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 170:Core/Src/stm32wlxx_it.c **** 
 171:Core/Src/stm32wlxx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 172:Core/Src/stm32wlxx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 173:Core/Src/stm32wlxx_it.c **** 
 174:Core/Src/stm32wlxx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 175:Core/Src/stm32wlxx_it.c **** }
 172              		.loc 1 175 1 view .LVU23
 173 0000 7047     		bx	lr
 174              		.cfi_endproc
 175              	.LFE978:
ARM GAS  /tmp/ccz9n1V5.s 			page 7


 177              		.section	.text.PendSV_Handler,"ax",%progbits
 178              		.align	1
 179              		.global	PendSV_Handler
 180              		.syntax unified
 181              		.thumb
 182              		.thumb_func
 183              		.fpu softvfp
 185              	PendSV_Handler:
 186              	.LFB979:
 176:Core/Src/stm32wlxx_it.c **** 
 177:Core/Src/stm32wlxx_it.c **** /**
 178:Core/Src/stm32wlxx_it.c ****   * @brief This function handles Pendable request for system service.
 179:Core/Src/stm32wlxx_it.c ****   */
 180:Core/Src/stm32wlxx_it.c **** void PendSV_Handler(void)
 181:Core/Src/stm32wlxx_it.c **** {
 187              		.loc 1 181 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
 182:Core/Src/stm32wlxx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 183:Core/Src/stm32wlxx_it.c **** 
 184:Core/Src/stm32wlxx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 185:Core/Src/stm32wlxx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 186:Core/Src/stm32wlxx_it.c **** 
 187:Core/Src/stm32wlxx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 188:Core/Src/stm32wlxx_it.c **** }
 192              		.loc 1 188 1 view .LVU25
 193 0000 7047     		bx	lr
 194              		.cfi_endproc
 195              	.LFE979:
 197              		.section	.text.SysTick_Handler,"ax",%progbits
 198              		.align	1
 199              		.global	SysTick_Handler
 200              		.syntax unified
 201              		.thumb
 202              		.thumb_func
 203              		.fpu softvfp
 205              	SysTick_Handler:
 206              	.LFB980:
 189:Core/Src/stm32wlxx_it.c **** 
 190:Core/Src/stm32wlxx_it.c **** /**
 191:Core/Src/stm32wlxx_it.c ****   * @brief This function handles System tick timer.
 192:Core/Src/stm32wlxx_it.c ****   */
 193:Core/Src/stm32wlxx_it.c **** void SysTick_Handler(void)
 194:Core/Src/stm32wlxx_it.c **** {
 207              		.loc 1 194 1 view -0
 208              		.cfi_startproc
 209              		@ args = 0, pretend = 0, frame = 0
 210              		@ frame_needed = 0, uses_anonymous_args = 0
 211 0000 08B5     		push	{r3, lr}
 212              	.LCFI0:
 213              		.cfi_def_cfa_offset 8
 214              		.cfi_offset 3, -8
 215              		.cfi_offset 14, -4
 195:Core/Src/stm32wlxx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 196:Core/Src/stm32wlxx_it.c **** 
ARM GAS  /tmp/ccz9n1V5.s 			page 8


 197:Core/Src/stm32wlxx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 198:Core/Src/stm32wlxx_it.c ****   HAL_IncTick();
 216              		.loc 1 198 3 view .LVU27
 217 0002 FFF7FEFF 		bl	HAL_IncTick
 218              	.LVL0:
 199:Core/Src/stm32wlxx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 200:Core/Src/stm32wlxx_it.c **** 
 201:Core/Src/stm32wlxx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 202:Core/Src/stm32wlxx_it.c **** }
 219              		.loc 1 202 1 is_stmt 0 view .LVU28
 220 0006 08BD     		pop	{r3, pc}
 221              		.cfi_endproc
 222              	.LFE980:
 224              		.section	.text.USART1_IRQHandler,"ax",%progbits
 225              		.align	1
 226              		.global	USART1_IRQHandler
 227              		.syntax unified
 228              		.thumb
 229              		.thumb_func
 230              		.fpu softvfp
 232              	USART1_IRQHandler:
 233              	.LFB981:
 203:Core/Src/stm32wlxx_it.c **** 
 204:Core/Src/stm32wlxx_it.c **** /******************************************************************************/
 205:Core/Src/stm32wlxx_it.c **** /* STM32WLxx Peripheral Interrupt Handlers                                    */
 206:Core/Src/stm32wlxx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 207:Core/Src/stm32wlxx_it.c **** /* For the available peripheral interrupt handler names,                      */
 208:Core/Src/stm32wlxx_it.c **** /* please refer to the startup file (startup_stm32wlxx.s).                    */
 209:Core/Src/stm32wlxx_it.c **** /******************************************************************************/
 210:Core/Src/stm32wlxx_it.c **** 
 211:Core/Src/stm32wlxx_it.c **** /**
 212:Core/Src/stm32wlxx_it.c ****   * @brief This function handles USART1 Interrupt.
 213:Core/Src/stm32wlxx_it.c ****   */
 214:Core/Src/stm32wlxx_it.c **** void USART1_IRQHandler(void)
 215:Core/Src/stm32wlxx_it.c **** {
 234              		.loc 1 215 1 is_stmt 1 view -0
 235              		.cfi_startproc
 236              		@ args = 0, pretend = 0, frame = 0
 237              		@ frame_needed = 0, uses_anonymous_args = 0
 238 0000 08B5     		push	{r3, lr}
 239              	.LCFI1:
 240              		.cfi_def_cfa_offset 8
 241              		.cfi_offset 3, -8
 242              		.cfi_offset 14, -4
 216:Core/Src/stm32wlxx_it.c ****   /* USER CODE BEGIN USART1_IRQn 0 */
 217:Core/Src/stm32wlxx_it.c **** 
 218:Core/Src/stm32wlxx_it.c ****   /* USER CODE END USART1_IRQn 0 */
 219:Core/Src/stm32wlxx_it.c ****   HAL_UART_IRQHandler(&huart1);
 243              		.loc 1 219 3 view .LVU30
 244 0002 0248     		ldr	r0, .L18
 245 0004 FFF7FEFF 		bl	HAL_UART_IRQHandler
 246              	.LVL1:
 220:Core/Src/stm32wlxx_it.c ****   /* USER CODE BEGIN USART1_IRQn 1 */
 221:Core/Src/stm32wlxx_it.c **** 
 222:Core/Src/stm32wlxx_it.c ****   /* USER CODE END USART1_IRQn 1 */
 223:Core/Src/stm32wlxx_it.c **** }
 247              		.loc 1 223 1 is_stmt 0 view .LVU31
ARM GAS  /tmp/ccz9n1V5.s 			page 9


 248 0008 08BD     		pop	{r3, pc}
 249              	.L19:
 250 000a 00BF     		.align	2
 251              	.L18:
 252 000c 00000000 		.word	huart1
 253              		.cfi_endproc
 254              	.LFE981:
 256              		.section	.text.LPUART1_IRQHandler,"ax",%progbits
 257              		.align	1
 258              		.global	LPUART1_IRQHandler
 259              		.syntax unified
 260              		.thumb
 261              		.thumb_func
 262              		.fpu softvfp
 264              	LPUART1_IRQHandler:
 265              	.LFB982:
 224:Core/Src/stm32wlxx_it.c **** 
 225:Core/Src/stm32wlxx_it.c **** /**
 226:Core/Src/stm32wlxx_it.c ****   * @brief This function handles LPUART1 Interrupt.
 227:Core/Src/stm32wlxx_it.c ****   */
 228:Core/Src/stm32wlxx_it.c **** void LPUART1_IRQHandler(void)
 229:Core/Src/stm32wlxx_it.c **** {
 266              		.loc 1 229 1 is_stmt 1 view -0
 267              		.cfi_startproc
 268              		@ args = 0, pretend = 0, frame = 0
 269              		@ frame_needed = 0, uses_anonymous_args = 0
 270 0000 10B5     		push	{r4, lr}
 271              	.LCFI2:
 272              		.cfi_def_cfa_offset 8
 273              		.cfi_offset 4, -8
 274              		.cfi_offset 14, -4
 230:Core/Src/stm32wlxx_it.c ****   /* USER CODE BEGIN LPUART1_IRQn 0 */
 231:Core/Src/stm32wlxx_it.c ****   /* USER CODE END LPUART1_IRQn 0 */
 232:Core/Src/stm32wlxx_it.c ****   HAL_UART_IRQHandler(&hlpuart1);
 275              		.loc 1 232 3 view .LVU33
 276 0002 1148     		ldr	r0, .L24
 277 0004 FFF7FEFF 		bl	HAL_UART_IRQHandler
 278              	.LVL2:
 233:Core/Src/stm32wlxx_it.c ****   /* USER CODE BEGIN LPUART1_IRQn 1 */
 234:Core/Src/stm32wlxx_it.c ****   rfidstarttime = __HAL_TIM_GET_COUNTER(&htim2);
 279              		.loc 1 234 3 view .LVU34
 280              		.loc 1 234 19 is_stmt 0 view .LVU35
 281 0008 104B     		ldr	r3, .L24+4
 282 000a 1B68     		ldr	r3, [r3]
 283 000c 5A6A     		ldr	r2, [r3, #36]
 284              		.loc 1 234 17 view .LVU36
 285 000e 104B     		ldr	r3, .L24+8
 286 0010 1A60     		str	r2, [r3]
 235:Core/Src/stm32wlxx_it.c ****   get_rfid_msg(rfidmsgbuf,rfidrawbuf);
 287              		.loc 1 235 3 is_stmt 1 view .LVU37
 288 0012 104C     		ldr	r4, .L24+12
 289 0014 1049     		ldr	r1, .L24+16
 290 0016 2046     		mov	r0, r4
 291 0018 FFF7FEFF 		bl	get_rfid_msg
 292              	.LVL3:
 236:Core/Src/stm32wlxx_it.c ****   if ((rfidmsgbuf[8] == 0xcc)&(rfidmsgbuf[9]==0xb9)){
 293              		.loc 1 236 3 view .LVU38
ARM GAS  /tmp/ccz9n1V5.s 			page 10


 294              		.loc 1 236 18 is_stmt 0 view .LVU39
 295 001c 227A     		ldrb	r2, [r4, #8]	@ zero_extendqisi2
 296              		.loc 1 236 42 view .LVU40
 297 001e 637A     		ldrb	r3, [r4, #9]	@ zero_extendqisi2
 298              		.loc 1 236 6 view .LVU41
 299 0020 CC2A     		cmp	r2, #204
 300 0022 08BF     		it	eq
 301 0024 B92B     		cmpeq	r3, #185
 302 0026 00D0     		beq	.L23
 303              	.L20:
 237:Core/Src/stm32wlxx_it.c **** 	  mystate=BT_UNLOCKED;
 238:Core/Src/stm32wlxx_it.c ****     memset(rfidrawbuf, 0, 50);
 239:Core/Src/stm32wlxx_it.c ****     memset(rfidmsgbuf, 0, 15);
 240:Core/Src/stm32wlxx_it.c ****   }
 241:Core/Src/stm32wlxx_it.c ****   /* USER CODE END LPUART1_IRQn 1 */
 242:Core/Src/stm32wlxx_it.c **** }
 304              		.loc 1 242 1 view .LVU42
 305 0028 10BD     		pop	{r4, pc}
 306              	.L23:
 237:Core/Src/stm32wlxx_it.c **** 	  mystate=BT_UNLOCKED;
 307              		.loc 1 237 4 is_stmt 1 view .LVU43
 237:Core/Src/stm32wlxx_it.c **** 	  mystate=BT_UNLOCKED;
 308              		.loc 1 237 11 is_stmt 0 view .LVU44
 309 002a 0C4B     		ldr	r3, .L24+20
 310 002c 0122     		movs	r2, #1
 311 002e 1A70     		strb	r2, [r3]
 238:Core/Src/stm32wlxx_it.c ****     memset(rfidmsgbuf, 0, 15);
 312              		.loc 1 238 5 is_stmt 1 view .LVU45
 313 0030 3222     		movs	r2, #50
 314 0032 0021     		movs	r1, #0
 315 0034 0848     		ldr	r0, .L24+16
 316 0036 FFF7FEFF 		bl	memset
 317              	.LVL4:
 239:Core/Src/stm32wlxx_it.c ****   }
 318              		.loc 1 239 5 view .LVU46
 319 003a 0022     		movs	r2, #0
 320 003c 2260     		str	r2, [r4]	@ unaligned
 321 003e 6260     		str	r2, [r4, #4]	@ unaligned
 322 0040 A260     		str	r2, [r4, #8]	@ unaligned
 323 0042 C4F80B20 		str	r2, [r4, #11]	@ unaligned
 324              		.loc 1 242 1 is_stmt 0 view .LVU47
 325 0046 EFE7     		b	.L20
 326              	.L25:
 327              		.align	2
 328              	.L24:
 329 0048 00000000 		.word	hlpuart1
 330 004c 00000000 		.word	htim2
 331 0050 00000000 		.word	rfidstarttime
 332 0054 00000000 		.word	rfidmsgbuf
 333 0058 00000000 		.word	rfidrawbuf
 334 005c 00000000 		.word	mystate
 335              		.cfi_endproc
 336              	.LFE982:
 338              		.text
 339              	.Letext0:
 340              		.file 2 "/home/eatkinso/Downloads/gcc-arm-none-eabi-10.3-2021.07/gcc-arm-none-eabi-10.3-2021.07/ar
 341              		.file 3 "/home/eatkinso/Downloads/gcc-arm-none-eabi-10.3-2021.07/gcc-arm-none-eabi-10.3-2021.07/ar
ARM GAS  /tmp/ccz9n1V5.s 			page 11


 342              		.file 4 "Drivers/CMSIS/Device/ST/STM32WLxx/Include/stm32wl55xx.h"
 343              		.file 5 "Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_hal_def.h"
 344              		.file 6 "Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_hal_dma.h"
 345              		.file 7 "Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_hal_tim.h"
 346              		.file 8 "Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_hal_uart.h"
 347              		.file 9 "Core/Inc/main.h"
 348              		.file 10 "Core/Inc/btrfid.h"
 349              		.file 11 "Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_hal.h"
 350              		.file 12 "Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_dma.h"
 351              		.file 13 "<built-in>"
ARM GAS  /tmp/ccz9n1V5.s 			page 12


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32wlxx_it.c
     /tmp/ccz9n1V5.s:16     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccz9n1V5.s:24     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccz9n1V5.s:42     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccz9n1V5.s:49     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccz9n1V5.s:66     .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccz9n1V5.s:73     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccz9n1V5.s:90     .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccz9n1V5.s:97     .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccz9n1V5.s:114    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccz9n1V5.s:121    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccz9n1V5.s:138    .text.SVC_Handler:0000000000000000 $t
     /tmp/ccz9n1V5.s:145    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccz9n1V5.s:158    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccz9n1V5.s:165    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccz9n1V5.s:178    .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccz9n1V5.s:185    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccz9n1V5.s:198    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccz9n1V5.s:205    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccz9n1V5.s:225    .text.USART1_IRQHandler:0000000000000000 $t
     /tmp/ccz9n1V5.s:232    .text.USART1_IRQHandler:0000000000000000 USART1_IRQHandler
     /tmp/ccz9n1V5.s:252    .text.USART1_IRQHandler:000000000000000c $d
     /tmp/ccz9n1V5.s:257    .text.LPUART1_IRQHandler:0000000000000000 $t
     /tmp/ccz9n1V5.s:264    .text.LPUART1_IRQHandler:0000000000000000 LPUART1_IRQHandler
     /tmp/ccz9n1V5.s:329    .text.LPUART1_IRQHandler:0000000000000048 $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_UART_IRQHandler
huart1
get_rfid_msg
memset
hlpuart1
htim2
rfidstarttime
rfidmsgbuf
rfidrawbuf
mystate
