ARM GAS  /tmp/cc16NMrK.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"bt_radio.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.btLoRaSetup,"ax",%progbits
  16              		.align	1
  17              		.global	btLoRaSetup
  18              		.arch armv7e-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	btLoRaSetup:
  25              	.LFB1116:
  26              		.file 1 "Core/Src/bt_radio.c"
   1:Core/Src/bt_radio.c **** /**
   2:Core/Src/bt_radio.c ****   ******************************************************************************
   3:Core/Src/bt_radio.c ****   * @file    bt_radio.c
   4:Core/Src/bt_radio.c ****   * @brief   This file provides code for the radio transactions for the LoRa bike tracker project. 
   5:Core/Src/bt_radio.c ****   ******************************************************************************
   6:Core/Src/bt_radio.c ****   * @attention
   7:Core/Src/bt_radio.c ****   *
   8:Core/Src/bt_radio.c ****   * Elizabeth Atkinson 
   9:Core/Src/bt_radio.c ****   * eatkinso@illinois.edu
  10:Core/Src/bt_radio.c ****   * April 2022
  11:Core/Src/bt_radio.c ****   *
  12:Core/Src/bt_radio.c ****   ******************************************************************************
  13:Core/Src/bt_radio.c ****   */
  14:Core/Src/bt_radio.c **** 
  15:Core/Src/bt_radio.c **** #include "bt_radio.h"
  16:Core/Src/bt_radio.c **** #include "radio.h"
  17:Core/Src/bt_radio.c **** #include "radio_fw.h"
  18:Core/Src/bt_radio.c **** #include "radio_driver.h"
  19:Core/Src/bt_radio.c **** #include "radio_conf.h"
  20:Core/Src/bt_radio.c **** #include "mw_log_conf.h"
  21:Core/Src/bt_radio.c **** #include "timer.h"
  22:Core/Src/bt_radio.c **** 
  23:Core/Src/bt_radio.c **** //IMPORTANT: ALWAYS COMMENT OUT LINES 1415, 1280 in radio.c. 
  24:Core/Src/bt_radio.c **** 
  25:Core/Src/bt_radio.c **** //// copied from radio.c to fix compilation error
  26:Core/Src/bt_radio.c **** #ifndef IRQ_TX_DBG
  27:Core/Src/bt_radio.c **** #define IRQ_TX_DBG ((uint16_t) 0)
  28:Core/Src/bt_radio.c **** #endif
  29:Core/Src/bt_radio.c **** /*can be overridden in radio_conf.h*/
  30:Core/Src/bt_radio.c **** #ifndef IRQ_RX_DBG
  31:Core/Src/bt_radio.c **** #define IRQ_RX_DBG ((uint16_t) 0)
  32:Core/Src/bt_radio.c **** #endif
ARM GAS  /tmp/cc16NMrK.s 			page 2


  33:Core/Src/bt_radio.c **** 
  34:Core/Src/bt_radio.c **** // LoRa Parameters
  35:Core/Src/bt_radio.c **** 
  36:Core/Src/bt_radio.c **** 
  37:Core/Src/bt_radio.c **** 
  38:Core/Src/bt_radio.c **** /*!
  39:Core/Src/bt_radio.c ****  * \brief Sets up the radio for TX and RX (channel, frequency, packet type, etc) for this project. 
  40:Core/Src/bt_radio.c ****  * \returns 0 on success, other on failure. 
  41:Core/Src/bt_radio.c ****  * 
  42:Core/Src/bt_radio.c ****  */
  43:Core/Src/bt_radio.c **** void btLoRaSetup(void){
  27              		.loc 1 43 23 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 08B5     		push	{r3, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 3, -8
  35              		.cfi_offset 14, -4
  44:Core/Src/bt_radio.c ****     /*****************
  45:Core/Src/bt_radio.c ****          Set TX config: 
  46:Core/Src/bt_radio.c ****     *****************/
  47:Core/Src/bt_radio.c ****    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
  36              		.loc 1 47 4 view .LVU1
  37 0002 FFF7FEFF 		bl	RFW_DeInit
  38              	.LVL0:
  48:Core/Src/bt_radio.c **** 
  49:Core/Src/bt_radio.c **** }
  39              		.loc 1 49 1 is_stmt 0 view .LVU2
  40 0006 08BD     		pop	{r3, pc}
  41              		.cfi_endproc
  42              	.LFE1116:
  44              		.section	.text.btLoRaListen,"ax",%progbits
  45              		.align	1
  46              		.global	btLoRaListen
  47              		.syntax unified
  48              		.thumb
  49              		.thumb_func
  50              		.fpu softvfp
  52              	btLoRaListen:
  53              	.LVL1:
  54              	.LFB1117:
  50:Core/Src/bt_radio.c **** 
  51:Core/Src/bt_radio.c **** /*
  52:Core/Src/bt_radio.c **** * adapted from RadioRx to set up RX for the bike tracker board; sets RF switch and then enters RX. 
  53:Core/Src/bt_radio.c **** * Note this function does not receive or save any data!! that must be done with the callback. 
  54:Core/Src/bt_radio.c **** */
  55:Core/Src/bt_radio.c **** void btLoRaListen(uint32_t ltimeout)
  56:Core/Src/bt_radio.c **** {
  55              		.loc 1 56 1 is_stmt 1 view -0
  56              		.cfi_startproc
  57              		@ args = 0, pretend = 0, frame = 0
  58              		@ frame_needed = 0, uses_anonymous_args = 0
  59              		.loc 1 56 1 is_stmt 0 view .LVU4
  60 0000 10B5     		push	{r4, lr}
  61              	.LCFI1:
ARM GAS  /tmp/cc16NMrK.s 			page 3


  62              		.cfi_def_cfa_offset 8
  63              		.cfi_offset 4, -8
  64              		.cfi_offset 14, -4
  65 0002 0446     		mov	r4, r0
  57:Core/Src/bt_radio.c ****     /* 
  58:Core/Src/bt_radio.c ****     if( 1UL == RFW_Is_Init( ) )
  59:Core/Src/bt_radio.c ****     {
  60:Core/Src/bt_radio.c ****         RFW_ReceiveInit( );
  61:Core/Src/bt_radio.c ****     }
  62:Core/Src/bt_radio.c ****     else
  63:Core/Src/bt_radio.c ****     {
  64:Core/Src/bt_radio.c ****         SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR 
  65:Core/Src/bt_radio.c ****                                 IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR 
  66:Core/Src/bt_radio.c ****                                 IRQ_RADIO_NONE,
  67:Core/Src/bt_radio.c ****                                 IRQ_RADIO_NONE );
  68:Core/Src/bt_radio.c ****     }
  69:Core/Src/bt_radio.c **** 
  70:Core/Src/bt_radio.c ****     if( ltimeout != 0 )
  71:Core/Src/bt_radio.c ****     {
  72:Core/Src/bt_radio.c ****         TimerSetValue( &RxTimeoutTimer, ltimeout );
  73:Core/Src/bt_radio.c ****         TimerStart( &RxTimeoutTimer );
  74:Core/Src/bt_radio.c ****     }
  75:Core/Src/bt_radio.c ****     // ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch 
  76:Core/Src/bt_radio.c ****     / switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle
  77:Core/Src/bt_radio.c ****     SubgRf.RxDcPreambleDetectTimeout = 0;
  78:Core/Src/bt_radio.c ****     // ST_WORKAROUND_END 
  79:Core/Src/bt_radio.c **** 
  80:Core/Src/bt_radio.c ****     if( SubgRf.RxContinuous == true )
  81:Core/Src/bt_radio.c ****     {
  82:Core/Src/bt_radio.c ****         SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
  83:Core/Src/bt_radio.c ****     }
  84:Core/Src/bt_radio.c ****     else
  85:Core/Src/bt_radio.c ****     {
  86:Core/Src/bt_radio.c ****         SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
  87:Core/Src/bt_radio.c ****     }
  88:Core/Src/bt_radio.c ****     /* RF switch configuration
  89:Core/Src/bt_radio.c ****     // For RX, set VC1 high, VC2 low.*/
  90:Core/Src/bt_radio.c ****     HAL_GPIO_WritePin(RFSW_VC1_GPIO_Port, RFSW_VC1_Pin, GPIO_PIN_SET);
  66              		.loc 1 90 5 is_stmt 1 view .LVU5
  67 0004 0122     		movs	r2, #1
  68 0006 0821     		movs	r1, #8
  69 0008 4FF09040 		mov	r0, #1207959552
  70              	.LVL2:
  71              		.loc 1 90 5 is_stmt 0 view .LVU6
  72 000c FFF7FEFF 		bl	HAL_GPIO_WritePin
  73              	.LVL3:
  91:Core/Src/bt_radio.c ****     HAL_GPIO_WritePin(RFSW_VC2_GPIO_Port, RFSW_VC2_Pin, GPIO_PIN_RESET);
  74              		.loc 1 91 5 is_stmt 1 view .LVU7
  75 0010 0022     		movs	r2, #0
  76 0012 0421     		movs	r1, #4
  77 0014 0348     		ldr	r0, .L5
  78 0016 FFF7FEFF 		bl	HAL_GPIO_WritePin
  79              	.LVL4:
  92:Core/Src/bt_radio.c ****     Radio.Rx(ltimeout);
  80              		.loc 1 92 5 view .LVU8
  81              		.loc 1 92 10 is_stmt 0 view .LVU9
  82 001a 034B     		ldr	r3, .L5+4
ARM GAS  /tmp/cc16NMrK.s 			page 4


  83 001c 5B6B     		ldr	r3, [r3, #52]
  84              		.loc 1 92 5 view .LVU10
  85 001e 2046     		mov	r0, r4
  86 0020 9847     		blx	r3
  87              	.LVL5:
  93:Core/Src/bt_radio.c **** }
  88              		.loc 1 93 1 view .LVU11
  89 0022 10BD     		pop	{r4, pc}
  90              	.LVL6:
  91              	.L6:
  92              		.loc 1 93 1 view .LVU12
  93              		.align	2
  94              	.L5:
  95 0024 00040048 		.word	1207960576
  96 0028 00000000 		.word	Radio
  97              		.cfi_endproc
  98              	.LFE1117:
 100              		.section	.text.btLoRaTx,"ax",%progbits
 101              		.align	1
 102              		.global	btLoRaTx
 103              		.syntax unified
 104              		.thumb
 105              		.thumb_func
 106              		.fpu softvfp
 108              	btLoRaTx:
 109              	.LVL7:
 110              	.LFB1118:
  94:Core/Src/bt_radio.c **** 
  95:Core/Src/bt_radio.c **** /*Adapted from 
  96:Core/Src/bt_radio.c **** * Adapted from RadioSend in radio.c. Sets RF switch, loads TX data into register, sets radio into T
  97:Core/Src/bt_radio.c **** */
  98:Core/Src/bt_radio.c **** void btLoRaTx(uint8_t *pData, uint8_t datalen){
 111              		.loc 1 98 47 is_stmt 1 view -0
 112              		.cfi_startproc
 113              		@ args = 0, pretend = 0, frame = 0
 114              		@ frame_needed = 0, uses_anonymous_args = 0
 115              		.loc 1 98 47 is_stmt 0 view .LVU14
 116 0000 38B5     		push	{r3, r4, r5, lr}
 117              	.LCFI2:
 118              		.cfi_def_cfa_offset 16
 119              		.cfi_offset 3, -16
 120              		.cfi_offset 4, -12
 121              		.cfi_offset 5, -8
 122              		.cfi_offset 14, -4
 123 0002 0446     		mov	r4, r0
 124 0004 0D46     		mov	r5, r1
  99:Core/Src/bt_radio.c ****     /* RF switch configuration */
 100:Core/Src/bt_radio.c ****     // For RX, set VC1 low, VC2 high. 
 101:Core/Src/bt_radio.c ****     HAL_GPIO_WritePin(RFSW_VC1_GPIO_Port, RFSW_VC1_Pin, GPIO_PIN_RESET);
 125              		.loc 1 101 5 is_stmt 1 view .LVU15
 126 0006 0022     		movs	r2, #0
 127 0008 0821     		movs	r1, #8
 128              	.LVL8:
 129              		.loc 1 101 5 is_stmt 0 view .LVU16
 130 000a 4FF09040 		mov	r0, #1207959552
 131              	.LVL9:
 132              		.loc 1 101 5 view .LVU17
ARM GAS  /tmp/cc16NMrK.s 			page 5


 133 000e FFF7FEFF 		bl	HAL_GPIO_WritePin
 134              	.LVL10:
 102:Core/Src/bt_radio.c ****     HAL_GPIO_WritePin(RFSW_VC2_GPIO_Port, RFSW_VC2_Pin, GPIO_PIN_SET);
 135              		.loc 1 102 5 is_stmt 1 view .LVU18
 136 0012 0122     		movs	r2, #1
 137 0014 0421     		movs	r1, #4
 138 0016 0448     		ldr	r0, .L9
 139 0018 FFF7FEFF 		bl	HAL_GPIO_WritePin
 140              	.LVL11:
 103:Core/Src/bt_radio.c ****     /*
 104:Core/Src/bt_radio.c ****     /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch 
 105:Core/Src/bt_radio.c ****     SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 106:Core/Src/bt_radio.c ****                             IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 107:Core/Src/bt_radio.c ****                             IRQ_RADIO_NONE,
 108:Core/Src/bt_radio.c ****                             IRQ_RADIO_NONE );
 109:Core/Src/bt_radio.c ****     /* ST_WORKAROUND_END */
 110:Core/Src/bt_radio.c **** 
 111:Core/Src/bt_radio.c ****     /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch 
 112:Core/Src/bt_radio.c ****     /* Set DBG pin 
 113:Core/Src/bt_radio.c ****     DBG_GPIO_RADIO_TX( SET );
 114:Core/Src/bt_radio.c ****     /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
 115:Core/Src/bt_radio.c ****     /* RegTxModulation = @address 0x0889 
 116:Core/Src/bt_radio.c ****     if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_B
 117:Core/Src/bt_radio.c ****     {
 118:Core/Src/bt_radio.c ****         SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) )
 119:Core/Src/bt_radio.c ****     }
 120:Core/Src/bt_radio.c ****     else
 121:Core/Src/bt_radio.c ****     {
 122:Core/Src/bt_radio.c ****         SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 123:Core/Src/bt_radio.c ****     }
 124:Core/Src/bt_radio.c ****     /* WORKAROUND END
 125:Core/Src/bt_radio.c ****     SubgRf.PacketParams.Params.LoRa.PayloadLength = datalen;
 126:Core/Src/bt_radio.c ****     SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 127:Core/Src/bt_radio.c ****     SUBGRF_SendPayload( pData, datalen, 0 );
 128:Core/Src/bt_radio.c ****     TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 129:Core/Src/bt_radio.c ****     TimerStart( &TxTimeoutTimer ); */
 130:Core/Src/bt_radio.c ****     
 131:Core/Src/bt_radio.c ****     Radio.Send(pData, datalen);
 141              		.loc 1 131 5 view .LVU19
 142              		.loc 1 131 10 is_stmt 0 view .LVU20
 143 001c 034B     		ldr	r3, .L9+4
 144 001e 9B6A     		ldr	r3, [r3, #40]
 145              		.loc 1 131 5 view .LVU21
 146 0020 2946     		mov	r1, r5
 147 0022 2046     		mov	r0, r4
 148 0024 9847     		blx	r3
 149              	.LVL12:
 132:Core/Src/bt_radio.c **** 
 133:Core/Src/bt_radio.c **** }...
 150              		.loc 1 133 1 view .LVU22
 151 0026 38BD     		pop	{r3, r4, r5, pc}
 152              	.LVL13:
 153              	.L10:
 154              		.loc 1 133 1 view .LVU23
 155              		.align	2
 156              	.L9:
 157 0028 00040048 		.word	1207960576
ARM GAS  /tmp/cc16NMrK.s 			page 6


 158 002c 00000000 		.word	Radio
 159              		.cfi_endproc
 160              	.LFE1118:
 162              		.text
 163              	.Letext0:
 164              		.file 2 "/home/eatkinso/Downloads/gcc-arm-none-eabi-10.3-2021.07/gcc-arm-none-eabi-10.3-2021.07/ar
 165              		.file 3 "/home/eatkinso/Downloads/gcc-arm-none-eabi-10.3-2021.07/gcc-arm-none-eabi-10.3-2021.07/ar
 166              		.file 4 "Drivers/CMSIS/Device/ST/STM32WLxx/Include/stm32wl55xx.h"
 167              		.file 5 "Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_hal_gpio.h"
 168              		.file 6 "Middlewares/Third_Party/SubGHz_Phy/radio.h"
 169              		.file 7 "Middlewares/Third_Party/SubGHz_Phy/radio_ex.h"
 170              		.file 8 "Middlewares/Third_Party/SubGHz_Phy/stm32_radio_driver/radio_fw.h"
 171              		.file 9 "Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_dma.h"
ARM GAS  /tmp/cc16NMrK.s 			page 7


DEFINED SYMBOLS
                            *ABS*:0000000000000000 bt_radio.c
     /tmp/cc16NMrK.s:16     .text.btLoRaSetup:0000000000000000 $t
     /tmp/cc16NMrK.s:24     .text.btLoRaSetup:0000000000000000 btLoRaSetup
     /tmp/cc16NMrK.s:45     .text.btLoRaListen:0000000000000000 $t
     /tmp/cc16NMrK.s:52     .text.btLoRaListen:0000000000000000 btLoRaListen
     /tmp/cc16NMrK.s:95     .text.btLoRaListen:0000000000000024 $d
     /tmp/cc16NMrK.s:101    .text.btLoRaTx:0000000000000000 $t
     /tmp/cc16NMrK.s:108    .text.btLoRaTx:0000000000000000 btLoRaTx
     /tmp/cc16NMrK.s:157    .text.btLoRaTx:0000000000000028 $d

UNDEFINED SYMBOLS
RFW_DeInit
HAL_GPIO_WritePin
Radio
