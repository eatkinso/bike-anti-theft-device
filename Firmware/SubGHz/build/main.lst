ARM GAS  /tmp/ccpaVry0.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.Error_Handler,"ax",%progbits
  16              		.align	1
  17              		.global	Error_Handler
  18              		.arch armv7e-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	Error_Handler:
  25              	.LFB1095:
  26              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2022 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "adc.h"
  22:Core/Src/main.c **** #include "rtc.h"
  23:Core/Src/main.c **** #include "subghz.h"
  24:Core/Src/main.c **** #include "app_subghz_phy.h"
  25:Core/Src/main.c **** #include "usart.h"
  26:Core/Src/main.c **** #include "gpio.h"
  27:Core/Src/main.c **** 
  28:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  29:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  30:Core/Src/main.c **** #include "bt_radio.h"
  31:Core/Src/main.c **** #include "radio.h"
  32:Core/Src/main.c **** #include "timer.h"
ARM GAS  /tmp/ccpaVry0.s 			page 2


  33:Core/Src/main.c **** #include "radio_driver.h"
  34:Core/Src/main.c **** 
  35:Core/Src/main.c **** /* USER CODE END Includes */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  38:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* USER CODE END PTD */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  43:Core/Src/main.c **** /* USER CODE BEGIN PD */
  44:Core/Src/main.c **** /* USER CODE END PD */
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  47:Core/Src/main.c **** /* USER CODE BEGIN PM */
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** /* USER CODE END PM */
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** /* USER CODE BEGIN PV */
  54:Core/Src/main.c **** 
  55:Core/Src/main.c **** /* USER CODE END PV */
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  58:Core/Src/main.c **** void SystemClock_Config(void);
  59:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  60:Core/Src/main.c **** 
  61:Core/Src/main.c **** /* USER CODE END PFP */
  62:Core/Src/main.c **** 
  63:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  64:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  65:Core/Src/main.c **** 
  66:Core/Src/main.c **** /* USER CODE END 0 */
  67:Core/Src/main.c **** 
  68:Core/Src/main.c **** /**
  69:Core/Src/main.c ****   * @brief  The application entry point.
  70:Core/Src/main.c ****   * @retval int
  71:Core/Src/main.c ****   */
  72:Core/Src/main.c **** int main(void)
  73:Core/Src/main.c **** {
  74:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  75:Core/Src/main.c **** 
  76:Core/Src/main.c ****   /* USER CODE END 1 */
  77:Core/Src/main.c **** 
  78:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  79:Core/Src/main.c **** 
  80:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  81:Core/Src/main.c ****   HAL_Init();
  82:Core/Src/main.c **** 
  83:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  84:Core/Src/main.c **** 
  85:Core/Src/main.c ****   /* USER CODE END Init */
  86:Core/Src/main.c **** 
  87:Core/Src/main.c ****   /* Configure the system clock */
  88:Core/Src/main.c ****   SystemClock_Config();
  89:Core/Src/main.c **** 
ARM GAS  /tmp/ccpaVry0.s 			page 3


  90:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
  91:Core/Src/main.c **** 
  92:Core/Src/main.c ****   /* USER CODE END SysInit */
  93:Core/Src/main.c **** 
  94:Core/Src/main.c ****   /* Initialize all configured peripherals */
  95:Core/Src/main.c ****   MX_SUBGHZ_Init();
  96:Core/Src/main.c ****   MX_GPIO_Init();
  97:Core/Src/main.c ****   MX_USART1_UART_Init();
  98:Core/Src/main.c ****   MX_ADC_Init();
  99:Core/Src/main.c ****   MX_SubGHz_Phy_Init();
 100:Core/Src/main.c ****   MX_RTC_Init();
 101:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 102:Core/Src/main.c ****   // btLoRaSetup();
 103:Core/Src/main.c ****   uint8_t dummydata[180] = {
 104:Core/Src/main.c ****     0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
 105:Core/Src/main.c ****     0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
 106:Core/Src/main.c ****     0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
 107:Core/Src/main.c ****     0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
 108:Core/Src/main.c ****     0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
 109:Core/Src/main.c ****     0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
 110:Core/Src/main.c ****     0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
 111:Core/Src/main.c ****     0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
 112:Core/Src/main.c ****     0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
 113:Core/Src/main.c ****     0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
 114:Core/Src/main.c ****     0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
 115:Core/Src/main.c ****     0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
 116:Core/Src/main.c ****     0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
 117:Core/Src/main.c ****     0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
 118:Core/Src/main.c ****     0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
 119:Core/Src/main.c ****     0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
 120:Core/Src/main.c ****     0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
 121:Core/Src/main.c ****     0, 1, 2, 3, 4, 5, 6, 7, 8, 9,};
 122:Core/Src/main.c ****   
 123:Core/Src/main.c ****   volatile RadioStatus_t radio_state;
 124:Core/Src/main.c ****   volatile RadioError_t radio_errors;
 125:Core/Src/main.c ****   /* USER CODE END 2 */
 126:Core/Src/main.c **** 
 127:Core/Src/main.c ****   /* Infinite loop */
 128:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 129:Core/Src/main.c ****   while (1)
 130:Core/Src/main.c ****   {
 131:Core/Src/main.c ****     /* USER CODE END WHILE */
 132:Core/Src/main.c ****     MX_SubGHz_Phy_Process();
 133:Core/Src/main.c **** 
 134:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 135:Core/Src/main.c ****   //  HAL_GPIO_WritePin(RFSW_VC1_GPIO_Port, RFSW_VC1_Pin, GPIO_PIN_RESET);
 136:Core/Src/main.c ****   //  HAL_GPIO_WritePin(RFSW_VC2_GPIO_Port, RFSW_VC2_Pin, GPIO_PIN_SET);
 137:Core/Src/main.c ****     SUBGRF_SetRfFrequency(904600000);
 138:Core/Src/main.c ****     SUBGRF_SetRfTxPower(17);
 139:Core/Src/main.c ****     SUBGRF_SetTxContinuousWave();
 140:Core/Src/main.c ****     radio_state = SUBGRF_GetStatus();
 141:Core/Src/main.c ****     radio_errors = SUBGRF_GetDeviceErrors();
 142:Core/Src/main.c **** 
 143:Core/Src/main.c ****   }
 144:Core/Src/main.c ****   /* USER CODE END 3 */
 145:Core/Src/main.c **** }
 146:Core/Src/main.c **** 
ARM GAS  /tmp/ccpaVry0.s 			page 4


 147:Core/Src/main.c **** /**
 148:Core/Src/main.c ****   * @brief System Clock Configuration
 149:Core/Src/main.c ****   * @retval None
 150:Core/Src/main.c ****   */
 151:Core/Src/main.c **** void SystemClock_Config(void)
 152:Core/Src/main.c **** {
 153:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 154:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 155:Core/Src/main.c **** 
 156:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 157:Core/Src/main.c ****   */
 158:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 159:Core/Src/main.c **** 
 160:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB busses clocks
 161:Core/Src/main.c ****   */
 162:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 163:Core/Src/main.c ****   RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 164:Core/Src/main.c ****   RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 165:Core/Src/main.c ****   RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 166:Core/Src/main.c ****   RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 167:Core/Src/main.c ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 168:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 169:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 170:Core/Src/main.c ****   {
 171:Core/Src/main.c ****     Error_Handler();
 172:Core/Src/main.c ****   }
 173:Core/Src/main.c **** 
 174:Core/Src/main.c ****   /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
 175:Core/Src/main.c ****   */
 176:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 177:Core/Src/main.c ****                               |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
 178:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK2;
 179:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 180:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 181:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 182:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 183:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 184:Core/Src/main.c **** 
 185:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 186:Core/Src/main.c ****   {
 187:Core/Src/main.c ****     Error_Handler();
 188:Core/Src/main.c ****   }
 189:Core/Src/main.c ****   HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_MSI, RCC_MCODIV_1);
 190:Core/Src/main.c **** }
 191:Core/Src/main.c **** 
 192:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 193:Core/Src/main.c **** 
 194:Core/Src/main.c **** /* USER CODE END 4 */
 195:Core/Src/main.c **** 
 196:Core/Src/main.c **** /**
 197:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 198:Core/Src/main.c ****   * @retval None
 199:Core/Src/main.c ****   */
 200:Core/Src/main.c **** void Error_Handler(void)
 201:Core/Src/main.c **** {
  27              		.loc 1 201 1 view -0
  28              		.cfi_startproc
ARM GAS  /tmp/ccpaVry0.s 			page 5


  29              		@ Volatile: function does not return.
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 202:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 203:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 204:Core/Src/main.c ****   __disable_irq();
  33              		.loc 1 204 3 view .LVU1
  34              	.LBB4:
  35              	.LBI4:
  36              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
ARM GAS  /tmp/ccpaVry0.s 			page 6


  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
ARM GAS  /tmp/ccpaVry0.s 			page 7


 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
ARM GAS  /tmp/ccpaVry0.s 			page 8


 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
  37              		.loc 2 207 27 view .LVU2
  38              	.LBB5:
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  39              		.loc 2 209 3 view .LVU3
  40              		.syntax unified
  41              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
  42 0000 72B6     		cpsid i
  43              	@ 0 "" 2
  44              		.thumb
ARM GAS  /tmp/ccpaVry0.s 			page 9


  45              		.syntax unified
  46              	.L2:
  47              	.LBE5:
  48              	.LBE4:
 205:Core/Src/main.c ****   while (1)
  49              		.loc 1 205 3 discriminator 1 view .LVU4
 206:Core/Src/main.c ****   {
 207:Core/Src/main.c ****   }
  50              		.loc 1 207 3 discriminator 1 view .LVU5
 205:Core/Src/main.c ****   while (1)
  51              		.loc 1 205 9 discriminator 1 view .LVU6
  52 0002 FEE7     		b	.L2
  53              		.cfi_endproc
  54              	.LFE1095:
  56              		.section	.text.SystemClock_Config,"ax",%progbits
  57              		.align	1
  58              		.global	SystemClock_Config
  59              		.syntax unified
  60              		.thumb
  61              		.thumb_func
  62              		.fpu softvfp
  64              	SystemClock_Config:
  65              	.LFB1094:
 152:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  66              		.loc 1 152 1 view -0
  67              		.cfi_startproc
  68              		@ args = 0, pretend = 0, frame = 104
  69              		@ frame_needed = 0, uses_anonymous_args = 0
  70 0000 00B5     		push	{lr}
  71              	.LCFI0:
  72              		.cfi_def_cfa_offset 4
  73              		.cfi_offset 14, -4
  74 0002 9BB0     		sub	sp, sp, #108
  75              	.LCFI1:
  76              		.cfi_def_cfa_offset 112
 153:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  77              		.loc 1 153 3 view .LVU8
 153:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  78              		.loc 1 153 22 is_stmt 0 view .LVU9
  79 0004 4822     		movs	r2, #72
  80 0006 0021     		movs	r1, #0
  81 0008 08A8     		add	r0, sp, #32
  82 000a FFF7FEFF 		bl	memset
  83              	.LVL0:
 154:Core/Src/main.c **** 
  84              		.loc 1 154 3 is_stmt 1 view .LVU10
 154:Core/Src/main.c **** 
  85              		.loc 1 154 22 is_stmt 0 view .LVU11
  86 000e 0023     		movs	r3, #0
  87 0010 0193     		str	r3, [sp, #4]
  88 0012 0293     		str	r3, [sp, #8]
  89 0014 0393     		str	r3, [sp, #12]
  90 0016 0493     		str	r3, [sp, #16]
  91 0018 0593     		str	r3, [sp, #20]
  92 001a 0693     		str	r3, [sp, #24]
  93 001c 0793     		str	r3, [sp, #28]
 158:Core/Src/main.c **** 
ARM GAS  /tmp/ccpaVry0.s 			page 10


  94              		.loc 1 158 3 is_stmt 1 view .LVU12
  95              	.LBB6:
 158:Core/Src/main.c **** 
  96              		.loc 1 158 3 view .LVU13
 158:Core/Src/main.c **** 
  97              		.loc 1 158 3 view .LVU14
  98 001e 1A49     		ldr	r1, .L9
  99 0020 0A68     		ldr	r2, [r1]
 100 0022 22F4C062 		bic	r2, r2, #1536
 101 0026 42F40072 		orr	r2, r2, #512
 102 002a 0A60     		str	r2, [r1]
 158:Core/Src/main.c **** 
 103              		.loc 1 158 3 view .LVU15
 104 002c 0A68     		ldr	r2, [r1]
 105 002e 02F4C062 		and	r2, r2, #1536
 106 0032 0092     		str	r2, [sp]
 158:Core/Src/main.c **** 
 107              		.loc 1 158 3 view .LVU16
 108 0034 009A     		ldr	r2, [sp]
 109              	.LBE6:
 158:Core/Src/main.c **** 
 110              		.loc 1 158 3 view .LVU17
 162:Core/Src/main.c ****   RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 111              		.loc 1 162 3 view .LVU18
 162:Core/Src/main.c ****   RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 112              		.loc 1 162 36 is_stmt 0 view .LVU19
 113 0036 2822     		movs	r2, #40
 114 0038 0892     		str	r2, [sp, #32]
 163:Core/Src/main.c ****   RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 115              		.loc 1 163 3 is_stmt 1 view .LVU20
 163:Core/Src/main.c ****   RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 116              		.loc 1 163 30 is_stmt 0 view .LVU21
 117 003a 0122     		movs	r2, #1
 118 003c 1092     		str	r2, [sp, #64]
 164:Core/Src/main.c ****   RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 119              		.loc 1 164 3 is_stmt 1 view .LVU22
 164:Core/Src/main.c ****   RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 120              		.loc 1 164 41 is_stmt 0 view .LVU23
 121 003e 1193     		str	r3, [sp, #68]
 165:Core/Src/main.c ****   RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 122              		.loc 1 165 3 is_stmt 1 view .LVU24
 165:Core/Src/main.c ****   RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 123              		.loc 1 165 35 is_stmt 0 view .LVU25
 124 0040 A021     		movs	r1, #160
 125 0042 1291     		str	r1, [sp, #72]
 166:Core/Src/main.c ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 126              		.loc 1 166 3 is_stmt 1 view .LVU26
 166:Core/Src/main.c ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 127              		.loc 1 166 28 is_stmt 0 view .LVU27
 128 0044 0F93     		str	r3, [sp, #60]
 167:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 129              		.loc 1 167 3 is_stmt 1 view .LVU28
 167:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 130              		.loc 1 167 30 is_stmt 0 view .LVU29
 131 0046 0E92     		str	r2, [sp, #56]
 168:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 132              		.loc 1 168 3 is_stmt 1 view .LVU30
ARM GAS  /tmp/ccpaVry0.s 			page 11


 168:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 133              		.loc 1 168 34 is_stmt 0 view .LVU31
 134 0048 1393     		str	r3, [sp, #76]
 169:Core/Src/main.c ****   {
 135              		.loc 1 169 3 is_stmt 1 view .LVU32
 169:Core/Src/main.c ****   {
 136              		.loc 1 169 7 is_stmt 0 view .LVU33
 137 004a 08A8     		add	r0, sp, #32
 138 004c FFF7FEFF 		bl	HAL_RCC_OscConfig
 139              	.LVL1:
 169:Core/Src/main.c ****   {
 140              		.loc 1 169 6 view .LVU34
 141 0050 B0B9     		cbnz	r0, .L7
 176:Core/Src/main.c ****                               |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
 142              		.loc 1 176 3 is_stmt 1 view .LVU35
 176:Core/Src/main.c ****                               |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
 143              		.loc 1 176 31 is_stmt 0 view .LVU36
 144 0052 4F23     		movs	r3, #79
 145 0054 0193     		str	r3, [sp, #4]
 179:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 146              		.loc 1 179 3 is_stmt 1 view .LVU37
 179:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 147              		.loc 1 179 34 is_stmt 0 view .LVU38
 148 0056 0023     		movs	r3, #0
 149 0058 0293     		str	r3, [sp, #8]
 180:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 150              		.loc 1 180 3 is_stmt 1 view .LVU39
 180:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 151              		.loc 1 180 35 is_stmt 0 view .LVU40
 152 005a 0393     		str	r3, [sp, #12]
 181:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 153              		.loc 1 181 3 is_stmt 1 view .LVU41
 181:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 154              		.loc 1 181 36 is_stmt 0 view .LVU42
 155 005c 0493     		str	r3, [sp, #16]
 182:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 156              		.loc 1 182 3 is_stmt 1 view .LVU43
 182:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 157              		.loc 1 182 36 is_stmt 0 view .LVU44
 158 005e 0593     		str	r3, [sp, #20]
 183:Core/Src/main.c **** 
 159              		.loc 1 183 3 is_stmt 1 view .LVU45
 183:Core/Src/main.c **** 
 160              		.loc 1 183 36 is_stmt 0 view .LVU46
 161 0060 0793     		str	r3, [sp, #28]
 185:Core/Src/main.c ****   {
 162              		.loc 1 185 3 is_stmt 1 view .LVU47
 185:Core/Src/main.c ****   {
 163              		.loc 1 185 7 is_stmt 0 view .LVU48
 164 0062 0121     		movs	r1, #1
 165 0064 01A8     		add	r0, sp, #4
 166 0066 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 167              	.LVL2:
 185:Core/Src/main.c ****   {
 168              		.loc 1 185 6 view .LVU49
 169 006a 58B9     		cbnz	r0, .L8
 189:Core/Src/main.c **** }
ARM GAS  /tmp/ccpaVry0.s 			page 12


 170              		.loc 1 189 3 is_stmt 1 view .LVU50
 171 006c 0022     		movs	r2, #0
 172 006e 4FF00071 		mov	r1, #33554432
 173 0072 4FF48070 		mov	r0, #256
 174 0076 FFF7FEFF 		bl	HAL_RCC_MCOConfig
 175              	.LVL3:
 190:Core/Src/main.c **** 
 176              		.loc 1 190 1 is_stmt 0 view .LVU51
 177 007a 1BB0     		add	sp, sp, #108
 178              	.LCFI2:
 179              		.cfi_remember_state
 180              		.cfi_def_cfa_offset 4
 181              		@ sp needed
 182 007c 5DF804FB 		ldr	pc, [sp], #4
 183              	.L7:
 184              	.LCFI3:
 185              		.cfi_restore_state
 171:Core/Src/main.c ****   }
 186              		.loc 1 171 5 is_stmt 1 view .LVU52
 187 0080 FFF7FEFF 		bl	Error_Handler
 188              	.LVL4:
 189              	.L8:
 187:Core/Src/main.c ****   }
 190              		.loc 1 187 5 view .LVU53
 191 0084 FFF7FEFF 		bl	Error_Handler
 192              	.LVL5:
 193              	.L10:
 194              		.align	2
 195              	.L9:
 196 0088 00040058 		.word	1476396032
 197              		.cfi_endproc
 198              	.LFE1094:
 200              		.section	.text.main,"ax",%progbits
 201              		.align	1
 202              		.global	main
 203              		.syntax unified
 204              		.thumb
 205              		.thumb_func
 206              		.fpu softvfp
 208              	main:
 209              	.LFB1093:
  73:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 210              		.loc 1 73 1 view -0
 211              		.cfi_startproc
 212              		@ Volatile: function does not return.
 213              		@ args = 0, pretend = 0, frame = 192
 214              		@ frame_needed = 0, uses_anonymous_args = 0
 215 0000 00B5     		push	{lr}
 216              	.LCFI4:
 217              		.cfi_def_cfa_offset 4
 218              		.cfi_offset 14, -4
 219 0002 B1B0     		sub	sp, sp, #196
 220              	.LCFI5:
 221              		.cfi_def_cfa_offset 200
  81:Core/Src/main.c **** 
 222              		.loc 1 81 3 view .LVU55
 223 0004 FFF7FEFF 		bl	HAL_Init
ARM GAS  /tmp/ccpaVry0.s 			page 13


 224              	.LVL6:
  88:Core/Src/main.c **** 
 225              		.loc 1 88 3 view .LVU56
 226 0008 FFF7FEFF 		bl	SystemClock_Config
 227              	.LVL7:
  95:Core/Src/main.c ****   MX_GPIO_Init();
 228              		.loc 1 95 3 view .LVU57
 229 000c FFF7FEFF 		bl	MX_SUBGHZ_Init
 230              	.LVL8:
  96:Core/Src/main.c ****   MX_USART1_UART_Init();
 231              		.loc 1 96 3 view .LVU58
 232 0010 FFF7FEFF 		bl	MX_GPIO_Init
 233              	.LVL9:
  97:Core/Src/main.c ****   MX_ADC_Init();
 234              		.loc 1 97 3 view .LVU59
 235 0014 FFF7FEFF 		bl	MX_USART1_UART_Init
 236              	.LVL10:
  98:Core/Src/main.c ****   MX_SubGHz_Phy_Init();
 237              		.loc 1 98 3 view .LVU60
 238 0018 FFF7FEFF 		bl	MX_ADC_Init
 239              	.LVL11:
  99:Core/Src/main.c ****   MX_RTC_Init();
 240              		.loc 1 99 3 view .LVU61
 241 001c FFF7FEFF 		bl	MX_SubGHz_Phy_Init
 242              	.LVL12:
 100:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 243              		.loc 1 100 3 view .LVU62
 244 0020 FFF7FEFF 		bl	MX_RTC_Init
 245              	.LVL13:
 103:Core/Src/main.c ****     0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
 246              		.loc 1 103 3 view .LVU63
 103:Core/Src/main.c ****     0, 1, 2, 3, 4, 5, 6, 7, 8, 9,
 247              		.loc 1 103 11 is_stmt 0 view .LVU64
 248 0024 B422     		movs	r2, #180
 249 0026 0B49     		ldr	r1, .L14
 250 0028 03A8     		add	r0, sp, #12
 251 002a FFF7FEFF 		bl	memcpy
 252              	.LVL14:
 253              	.L12:
 123:Core/Src/main.c ****   volatile RadioError_t radio_errors;
 254              		.loc 1 123 3 is_stmt 1 discriminator 1 view .LVU65
 124:Core/Src/main.c ****   /* USER CODE END 2 */
 255              		.loc 1 124 3 discriminator 1 view .LVU66
 129:Core/Src/main.c ****   {
 256              		.loc 1 129 3 discriminator 1 view .LVU67
 132:Core/Src/main.c **** 
 257              		.loc 1 132 5 discriminator 1 view .LVU68
 258 002e FFF7FEFF 		bl	MX_SubGHz_Phy_Process
 259              	.LVL15:
 137:Core/Src/main.c ****     SUBGRF_SetRfTxPower(17);
 260              		.loc 1 137 5 discriminator 1 view .LVU69
 261 0032 0948     		ldr	r0, .L14+4
 262 0034 FFF7FEFF 		bl	SUBGRF_SetRfFrequency
 263              	.LVL16:
 138:Core/Src/main.c ****     SUBGRF_SetTxContinuousWave();
 264              		.loc 1 138 5 discriminator 1 view .LVU70
 265 0038 1120     		movs	r0, #17
ARM GAS  /tmp/ccpaVry0.s 			page 14


 266 003a FFF7FEFF 		bl	SUBGRF_SetRfTxPower
 267              	.LVL17:
 139:Core/Src/main.c ****     radio_state = SUBGRF_GetStatus();
 268              		.loc 1 139 5 discriminator 1 view .LVU71
 269 003e FFF7FEFF 		bl	SUBGRF_SetTxContinuousWave
 270              	.LVL18:
 140:Core/Src/main.c ****     radio_errors = SUBGRF_GetDeviceErrors();
 271              		.loc 1 140 5 discriminator 1 view .LVU72
 140:Core/Src/main.c ****     radio_errors = SUBGRF_GetDeviceErrors();
 272              		.loc 1 140 19 is_stmt 0 discriminator 1 view .LVU73
 273 0042 FFF7FEFF 		bl	SUBGRF_GetStatus
 274              	.LVL19:
 275 0046 8DF80800 		strb	r0, [sp, #8]
 141:Core/Src/main.c **** 
 276              		.loc 1 141 5 is_stmt 1 discriminator 1 view .LVU74
 141:Core/Src/main.c **** 
 277              		.loc 1 141 20 is_stmt 0 discriminator 1 view .LVU75
 278 004a FFF7FEFF 		bl	SUBGRF_GetDeviceErrors
 279              	.LVL20:
 280 004e ADF80400 		strh	r0, [sp, #4]	@ movhi
 129:Core/Src/main.c ****   {
 281              		.loc 1 129 9 is_stmt 1 discriminator 1 view .LVU76
 282 0052 ECE7     		b	.L12
 283              	.L15:
 284              		.align	2
 285              	.L14:
 286 0054 00000000 		.word	.LANCHOR0
 287 0058 C019EB35 		.word	904600000
 288              		.cfi_endproc
 289              	.LFE1093:
 291              		.section	.rodata
 292              		.align	2
 293              		.set	.LANCHOR0,. + 0
 294              	.LC0:
 295 0000 00010203 		.ascii	"\000\001\002\003\004\005\006\007\010\011\000\001\002"
 295      04050607 
 295      08090001 
 295      02
 296 000d 03040506 		.ascii	"\003\004\005\006\007\010\011\000\001\002\003\004\005"
 296      07080900 
 296      01020304 
 296      05
 297 001a 06070809 		.ascii	"\006\007\010\011\000\001\002\003\004\005\006\007\010"
 297      00010203 
 297      04050607 
 297      08
 298 0027 09000102 		.ascii	"\011\000\001\002\003\004\005\006\007\010\011\000\001"
 298      03040506 
 298      07080900 
 298      01
 299 0034 02030405 		.ascii	"\002\003\004\005\006\007\010\011\000\001\002\003\004"
 299      06070809 
 299      00010203 
 299      04
 300 0041 05060708 		.ascii	"\005\006\007\010\011\000\001\002\003\004\005\006\007"
 300      09000102 
 300      03040506 
ARM GAS  /tmp/ccpaVry0.s 			page 15


 300      07
 301 004e 08090001 		.ascii	"\010\011\000\001\002\003\004\005\006\007\010\011\000"
 301      02030405 
 301      06070809 
 301      00
 302 005b 01020304 		.ascii	"\001\002\003\004\005\006\007\010\011\000\001\002\003"
 302      05060708 
 302      09000102 
 302      03
 303 0068 04050607 		.ascii	"\004\005\006\007\010\011\000\001\002\003\004\005\006"
 303      08090001 
 303      02030405 
 303      06
 304 0075 07080900 		.ascii	"\007\010\011\000\001\002\003\004\005\006\007\010\011"
 304      01020304 
 304      05060708 
 304      09
 305 0082 00010203 		.ascii	"\000\001\002\003\004\005\006\007\010\011\000\001\002"
 305      04050607 
 305      08090001 
 305      02
 306 008f 03040506 		.ascii	"\003\004\005\006\007\010\011\000\001\002\003\004\005"
 306      07080900 
 306      01020304 
 306      05
 307 009c 06070809 		.ascii	"\006\007\010\011\000\001\002\003\004\005\006\007\010"
 307      00010203 
 307      04050607 
 307      08
 308 00a9 09000102 		.ascii	"\011\000\001\002\003\004\005\006\007\010\011"
 308      03040506 
 308      070809
 309              		.text
 310              	.Letext0:
 311              		.file 3 "/home/eatkinso/Downloads/gcc-arm-none-eabi-10.3-2021.07/gcc-arm-none-eabi-10.3-2021.07/ar
 312              		.file 4 "/home/eatkinso/Downloads/gcc-arm-none-eabi-10.3-2021.07/gcc-arm-none-eabi-10.3-2021.07/ar
 313              		.file 5 "Drivers/CMSIS/Device/ST/STM32WLxx/Include/stm32wl55xx.h"
 314              		.file 6 "Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_hal_rcc.h"
 315              		.file 7 "Middlewares/Third_Party/SubGHz_Phy/stm32_radio_driver/radio_driver.h"
 316              		.file 8 "Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_dma.h"
 317              		.file 9 "Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_hal.h"
 318              		.file 10 "Core/Inc/subghz.h"
 319              		.file 11 "Core/Inc/gpio.h"
 320              		.file 12 "Core/Inc/usart.h"
 321              		.file 13 "Core/Inc/adc.h"
 322              		.file 14 "SubGHz_Phy/App/app_subghz_phy.h"
 323              		.file 15 "Core/Inc/rtc.h"
 324              		.file 16 "<built-in>"
 325              		.file 17 "Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_hal_def.h"
ARM GAS  /tmp/ccpaVry0.s 			page 16


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccpaVry0.s:16     .text.Error_Handler:0000000000000000 $t
     /tmp/ccpaVry0.s:24     .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccpaVry0.s:57     .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccpaVry0.s:64     .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccpaVry0.s:196    .text.SystemClock_Config:0000000000000088 $d
     /tmp/ccpaVry0.s:201    .text.main:0000000000000000 $t
     /tmp/ccpaVry0.s:208    .text.main:0000000000000000 main
     /tmp/ccpaVry0.s:286    .text.main:0000000000000054 $d
     /tmp/ccpaVry0.s:292    .rodata:0000000000000000 $d

UNDEFINED SYMBOLS
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_MCOConfig
HAL_Init
MX_SUBGHZ_Init
MX_GPIO_Init
MX_USART1_UART_Init
MX_ADC_Init
MX_SubGHz_Phy_Init
MX_RTC_Init
memcpy
MX_SubGHz_Phy_Process
SUBGRF_SetRfFrequency
SUBGRF_SetRfTxPower
SUBGRF_SetTxContinuousWave
SUBGRF_GetStatus
SUBGRF_GetDeviceErrors
