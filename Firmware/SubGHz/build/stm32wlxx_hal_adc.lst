ARM GAS  /tmp/ccN8TuGv.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32wlxx_hal_adc.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_ADC_MspInit,"ax",%progbits
  16              		.align	1
  17              		.weak	HAL_ADC_MspInit
  18              		.arch armv7e-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	HAL_ADC_MspInit:
  25              	.LVL0:
  26              	.LFB1095:
  27              		.file 1 "Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c"
   1:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /**
   2:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   ******************************************************************************
   3:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @file    stm32wlxx_hal_adc.c
   4:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @author  MCD Application Team
   5:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @brief   This file provides firmware functions to manage the following
   6:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *          functionalities of the Analog to Digital Converter (ADC)
   7:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *          peripheral:
   8:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *           + Peripheral Control functions
  10:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *           + Peripheral State functions
  11:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *          Other functions (extended functions) are available in file
  12:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *          "stm32wlxx_hal_adc_ex.c".
  13:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *
  14:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   ******************************************************************************
  15:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @attention
  16:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *
  17:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * Copyright (c) 2020 STMicroelectronics.
  18:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * All rights reserved.
  19:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *
  20:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * This software is licensed under terms that can be found in the LICENSE file
  21:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * in the root directory of this software component.
  22:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  23:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *
  24:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   ******************************************************************************
  25:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   @verbatim
  26:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   ==============================================================================
  27:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                      ##### ADC peripheral features #####
  28:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   ==============================================================================
  29:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   [..]
  30:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   (+) 12-bit, 10-bit, 8-bit or 6-bit configurable resolution.
  31:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
ARM GAS  /tmp/ccN8TuGv.s 			page 2


  32:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   (+) Interrupt generation at the end of regular conversion and in case of
  33:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       analog watchdog or overrun events.
  34:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
  35:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   (+) Single and continuous conversion modes.
  36:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
  37:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   (+) Scan mode for conversion of several channels sequentially.
  38:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
  39:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   (+) Data alignment with in-built data coherency.
  40:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
  41:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   (+) Programmable sampling time (common to group of channels)
  42:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
  43:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   (+) External trigger (timer or EXTI) with configurable polarity
  44:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
  45:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   (+) DMA request generation for transfer of conversions data of regular group.
  46:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
  47:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   (+) ADC calibration
  48:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
  49:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   (+) ADC conversion of regular group.
  50:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
  51:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   (+) ADC supply requirements: 1.62 V to 3.6 V.
  52:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
  53:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   (+) ADC input range: from Vref- (connected to Vssa) to Vref+ (connected to
  54:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       Vdda or to an external voltage reference).
  55:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
  56:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
  57:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                      ##### How to use this driver #####
  58:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   ==============================================================================
  59:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     [..]
  60:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
  61:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      *** Configuration of top level parameters related to ADC ***
  62:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      ============================================================
  63:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      [..]
  64:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
  65:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     (#) Enable the ADC interface
  66:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         (++) As prerequisite, ADC clock must be configured at RCC top level.
  67:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****              Caution: On STM32WL, ADC clock frequency max is 35MHz (refer
  68:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                       to device datasheet).
  69:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                       Therefore, ADC clock source from RCC and ADC clock
  70:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                       prescaler must be configured to remain below
  71:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                       this maximum frequency.
  72:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
  73:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         (++) Two clock settings are mandatory:
  74:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****              (+++) ADC clock (core clock, also possibly conversion clock).
  75:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
  76:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****              (+++) ADC clock (conversions clock).
  77:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    Four possible clock sources: synchronous clock from APB clock (same as ADC core 
  78:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    or asynchronous clock from RCC level: SYSCLK, HSI16, PLLPCLK.
  79:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
  80:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****              (+++) Example:
  81:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    Into HAL_ADC_MspInit() (recommended code location) or with
  82:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    other device clock parameters configuration:
  83:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                (+++) __HAL_RCC_ADC_CLK_ENABLE();                  (mandatory: core clock)
  84:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                (+++) __HAL_RCC_ADC_CLK_ENABLE();                  (mandatory)
  85:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
  86:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         (++) ADC clock source and clock prescaler are configured at ADC level with
  87:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****              parameter "ClockPrescaler" using function HAL_ADC_Init().
  88:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
ARM GAS  /tmp/ccN8TuGv.s 			page 3


  89:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     (#) ADC pins configuration
  90:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****          (++) Enable the clock for the ADC GPIOs
  91:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_ENABLE()
  92:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****          (++) Configure these ADC pins in analog mode
  93:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****               using function HAL_GPIO_Init()
  94:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
  95:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
  96:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****          (++) Configure the NVIC for ADC
  97:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
  98:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler()
  99:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****               into the function of corresponding ADC interruption vector
 100:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****               ADCx_IRQHandler().
 101:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 102:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 103:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****          (++) Configure the DMA (DMA channel, mode normal or circular, ...)
 104:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****               using function HAL_DMA_Init().
 105:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****          (++) Configure the NVIC for DMA
 106:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 107:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler()
 108:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****               into the function of corresponding DMA interruption vector
 109:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****               DMAx_Channelx_IRQHandler().
 110:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 111:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      *** Configuration of ADC, group regular, channels parameters ***
 112:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      ================================================================
 113:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      [..]
 114:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 115:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     (#) Configure the ADC parameters (resolution, data alignment, ...)
 116:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         and regular group parameters (conversion trigger, sequencer, ...)
 117:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         using function HAL_ADC_Init().
 118:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 119:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     (#) Configure the channels for regular group parameters (channel number,
 120:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         channel rank into sequencer, ..., into regular group)
 121:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         using function HAL_ADC_ConfigChannel().
 122:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 123:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     (#) Optionally, configure the analog watchdog parameters (channels
 124:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         monitored, thresholds, ...)
 125:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         using function HAL_ADC_AnalogWDGConfig().
 126:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 127:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      *** Execution of ADC conversions ***
 128:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      ====================================
 129:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      [..]
 130:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 131:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     (#) Optionally, perform an automatic ADC calibration to improve the
 132:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         conversion accuracy
 133:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         using function HAL_ADCEx_Calibration_Start().
 134:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 135:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     (#) ADC driver can be used among three modes: polling, interruption,
 136:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         transfer by DMA.
 137:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 138:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         (++) ADC conversion by polling:
 139:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 140:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                 using function HAL_ADC_Start()
 141:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           (+++) Wait for ADC conversion completion
 142:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                 using function HAL_ADC_PollForConversion()
 143:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           (+++) Retrieve conversion results
 144:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 145:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral
ARM GAS  /tmp/ccN8TuGv.s 			page 4


 146:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                 using function HAL_ADC_Stop()
 147:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 148:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         (++) ADC conversion by interruption:
 149:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 150:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                 using function HAL_ADC_Start_IT()
 151:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 152:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback()
 153:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                 (this function must be implemented in user program)
 154:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           (+++) Retrieve conversion results
 155:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 156:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral
 157:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                 using function HAL_ADC_Stop_IT()
 158:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 159:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         (++) ADC conversion with transfer by DMA:
 160:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 161:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                 using function HAL_ADC_Start_DMA()
 162:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 163:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback() or HAL_ADC_ConvHalfCpltCallback()
 164:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                 (these functions must be implemented in user program)
 165:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           (+++) Conversion results are automatically transferred by DMA into
 166:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                 destination variable address.
 167:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral
 168:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                 using function HAL_ADC_Stop_DMA()
 169:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 170:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      [..]
 171:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 172:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     (@) Callback functions must be implemented in user program:
 173:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       (+@) HAL_ADC_ErrorCallback()
 174:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       (+@) HAL_ADC_LevelOutOfWindowCallback() (callback of analog watchdog)
 175:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       (+@) HAL_ADC_ConvCpltCallback()
 176:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       (+@) HAL_ADC_ConvHalfCpltCallback
 177:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 178:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      *** Deinitialization of ADC ***
 179:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      ============================================================
 180:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      [..]
 181:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 182:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     (#) Disable the ADC interface
 183:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       (++) ADC clock can be hard reset and disabled at RCC top level.
 184:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         (++) Hard reset of ADC peripherals
 185:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****              using macro __ADCx_FORCE_RESET(), __ADCx_RELEASE_RESET().
 186:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         (++) ADC clock disable
 187:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****              using the equivalent macro/functions as configuration step.
 188:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****              (+++) Example:
 189:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    Into HAL_ADC_MspDeInit() (recommended code location) or with
 190:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    other device clock parameters configuration:
 191:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                (+++) RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_HSI14;
 192:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                (+++) RCC_OscInitStructure.HSI14State = RCC_HSI14_OFF; (if not used for system clock
 193:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                (+++) HAL_RCC_OscConfig(&RCC_OscInitStructure);
 194:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 195:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     (#) ADC pins configuration
 196:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****          (++) Disable the clock for the ADC GPIOs
 197:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_DISABLE()
 198:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 199:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 200:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****          (++) Disable the NVIC for ADC
 201:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 202:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
ARM GAS  /tmp/ccN8TuGv.s 			page 5


 203:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 204:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****          (++) Deinitialize the DMA
 205:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****               using function HAL_DMA_Init().
 206:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****          (++) Disable the NVIC for DMA
 207:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 208:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 209:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     [..]
 210:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 211:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     *** Callback registration ***
 212:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     =============================================
 213:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     [..]
 214:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 215:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      The compilation flag USE_HAL_ADC_REGISTER_CALLBACKS, when set to 1,
 216:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      allows the user to configure dynamically the driver callbacks.
 217:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      Use Functions HAL_ADC_RegisterCallback()
 218:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      to register an interrupt callback.
 219:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     [..]
 220:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 221:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      Function HAL_ADC_RegisterCallback() allows to register following callbacks:
 222:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****        (+) ConvCpltCallback               : ADC conversion complete callback
 223:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****        (+) ConvHalfCpltCallback           : ADC conversion DMA half-transfer callback
 224:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****        (+) LevelOutOfWindowCallback       : ADC analog watchdog 1 callback
 225:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****        (+) ErrorCallback                  : ADC error callback
 226:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****        (+) LevelOutOfWindow2Callback      : ADC analog watchdog 2 callback
 227:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****        (+) LevelOutOfWindow3Callback      : ADC analog watchdog 3 callback
 228:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****        (+) EndOfSamplingCallback          : ADC end of sampling callback
 229:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****        (+) MspInitCallback                : ADC Msp Init callback
 230:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****        (+) MspDeInitCallback              : ADC Msp DeInit callback
 231:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      This function takes as parameters the HAL peripheral handle, the Callback ID
 232:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      and a pointer to the user callback function.
 233:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     [..]
 234:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 235:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      Use function HAL_ADC_UnRegisterCallback to reset a callback to the default
 236:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      weak function.
 237:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     [..]
 238:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 239:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      HAL_ADC_UnRegisterCallback takes as parameters the HAL peripheral handle,
 240:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      and the Callback ID.
 241:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      This function allows to reset following callbacks:
 242:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****        (+) ConvCpltCallback               : ADC conversion complete callback
 243:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****        (+) ConvHalfCpltCallback           : ADC conversion DMA half-transfer callback
 244:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****        (+) LevelOutOfWindowCallback       : ADC analog watchdog 1 callback
 245:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****        (+) ErrorCallback                  : ADC error callback
 246:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****        (+) LevelOutOfWindow2Callback      : ADC analog watchdog 2 callback
 247:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****        (+) LevelOutOfWindow3Callback      : ADC analog watchdog 3 callback
 248:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****        (+) EndOfSamplingCallback          : ADC end of sampling callback
 249:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****        (+) MspInitCallback                : ADC Msp Init callback
 250:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****        (+) MspDeInitCallback              : ADC Msp DeInit callback
 251:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      [..]
 252:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 253:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      By default, after the HAL_ADC_Init() and when the state is HAL_ADC_STATE_RESET
 254:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      all callbacks are set to the corresponding weak functions:
 255:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      examples HAL_ADC_ConvCpltCallback(), HAL_ADC_ErrorCallback().
 256:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      Exception done for MspInit and MspDeInit functions that are
 257:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      reset to the legacy weak functions in the HAL_ADC_Init()/HAL_ADC_DeInit() only when
 258:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      these callbacks are null (not registered beforehand).
 259:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     [..]
ARM GAS  /tmp/ccN8TuGv.s 			page 6


 260:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 261:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      If MspInit or MspDeInit are not null, the HAL_ADC_Init()/HAL_ADC_DeInit()
 262:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      keep and use the user MspInit/MspDeInit callbacks (registered beforehand) whatever the state.
 263:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      [..]
 264:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 265:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      Callbacks can be registered/unregistered in HAL_ADC_STATE_READY state only.
 266:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      Exception done MspInit/MspDeInit functions that can be registered/unregistered
 267:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      in HAL_ADC_STATE_READY or HAL_ADC_STATE_RESET state,
 268:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      thus registered (user) MspInit/DeInit callbacks can be used during the Init/DeInit.
 269:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     [..]
 270:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 271:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      Then, the user first registers the MspInit/MspDeInit user callbacks
 272:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      using HAL_ADC_RegisterCallback() before calling HAL_ADC_DeInit()
 273:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      or HAL_ADC_Init() function.
 274:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      [..]
 275:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 276:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      When the compilation flag USE_HAL_ADC_REGISTER_CALLBACKS is set to 0 or
 277:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      not defined, the callback registration feature is not available and all callbacks
 278:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      are set to the corresponding weak functions.
 279:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 280:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   @endverbatim
 281:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
 282:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 283:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /* Includes ------------------------------------------------------------------*/
 284:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #include "stm32wlxx_hal.h"
 285:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 286:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /** @addtogroup STM32WLxx_HAL_Driver
 287:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @{
 288:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
 289:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 290:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /** @defgroup ADC ADC
 291:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @brief ADC HAL module driver
 292:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @{
 293:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
 294:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 295:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #ifdef HAL_ADC_MODULE_ENABLED
 296:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 297:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /* Private typedef -----------------------------------------------------------*/
 298:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /* Private define ------------------------------------------------------------*/
 299:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 300:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /** @defgroup ADC_Private_Constants ADC Private Constants
 301:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @{
 302:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
 303:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 304:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /* Fixed timeout values for ADC calibration, enable settling time, disable  */
 305:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /* settling time.                                                           */
 306:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /* Values defined to be higher than worst cases: low clock frequency,       */
 307:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /* maximum prescaler.                                                       */
 308:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /* Ex of profile low frequency : Clock source at 0.1 MHz, ADC clock         */
 309:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /* prescaler 4, sampling time 7.5 ADC clock cycles, resolution 12 bits.     */
 310:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /* Unit: ms                                                                 */
 311:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #define ADC_ENABLE_TIMEOUT              (2UL)
 312:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #define ADC_DISABLE_TIMEOUT             (2UL)
 313:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #define ADC_STOP_CONVERSION_TIMEOUT     (2UL)
 314:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #define ADC_CHANNEL_CONF_RDY_TIMEOUT    (1UL)
 315:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 316:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /* Register CHSELR bits corresponding to ranks 2 to 8 .                     */
ARM GAS  /tmp/ccN8TuGv.s 			page 7


 317:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #define ADC_CHSELR_SQ2_TO_SQ8           (ADC_CHSELR_SQ2 | ADC_CHSELR_SQ3 | ADC_CHSELR_SQ4 | \
 318:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                                          ADC_CHSELR_SQ5 | ADC_CHSELR_SQ6 | ADC_CHSELR_SQ7 | ADC_CHS
 319:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 320:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /**
 321:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @}
 322:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
 323:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 324:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /* Private macro -------------------------------------------------------------*/
 325:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /* Private variables ---------------------------------------------------------*/
 326:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /* Private function prototypes -----------------------------------------------*/
 327:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
 328:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @{
 329:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
 330:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma);
 331:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma);
 332:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** static void ADC_DMAError(DMA_HandleTypeDef *hdma);
 333:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /**
 334:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @}
 335:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
 336:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 337:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /* Exported functions ---------------------------------------------------------*/
 338:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 339:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /** @defgroup ADC_Exported_Functions ADC Exported Functions
 340:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @{
 341:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
 342:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 343:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group1 Initialization and de-initialization functions
 344:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @brief    ADC Initialization and Configuration functions
 345:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *
 346:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** @verbatim
 347:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****  ===============================================================================
 348:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****               ##### Initialization and de-initialization functions #####
 349:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****  ===============================================================================
 350:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     [..]  This section provides functions allowing to:
 351:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       (+) Initialize and configure the ADC.
 352:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       (+) De-initialize the ADC.
 353:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** @endverbatim
 354:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @{
 355:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
 356:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 357:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /**
 358:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @brief  Initialize the ADC peripheral and regular group according to
 359:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         parameters specified in structure "ADC_InitTypeDef".
 360:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @note   As prerequisite, ADC clock must be configured at RCC top level
 361:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         (refer to description of RCC configuration for ADC
 362:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         in header of this file).
 363:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
 364:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         This function initializes the ADC MSP (HAL_ADC_MspInit()) only when
 365:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         coming from ADC state reset. Following calls to this function can
 366:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         be used to reconfigure some parameters of ADC_InitTypeDef
 367:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         structure on the fly, without modifying MSP configuration. If ADC
 368:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         MSP has to be modified again, HAL_ADC_DeInit() must be called
 369:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         before HAL_ADC_Init().
 370:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
 371:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         For parameters constraints, see comments of structure
 372:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         "ADC_InitTypeDef".
 373:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @note   This function configures the ADC within 2 scopes: scope of entire
ARM GAS  /tmp/ccN8TuGv.s 			page 8


 374:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         ADC and scope of regular group. For parameters details, see comments
 375:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         of structure "ADC_InitTypeDef".
 376:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @param hadc ADC handle
 377:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @retval HAL status
 378:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
 379:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
 380:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** {
 381:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 382:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tmpCFGR1 = 0UL;
 383:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tmpCFGR2 = 0UL;
 384:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tmp_adc_reg_is_conversion_on_going;
 385:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0UL;
 386:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 387:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Check ADC handle */
 388:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   if (hadc == NULL)
 389:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 390:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     return HAL_ERROR;
 391:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 392:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 393:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Check the parameters */
 394:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 395:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 396:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 397:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 398:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 399:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 400:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 401:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 402:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 403:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 404:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 405:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 406:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoPowerOff));
 407:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon1));
 408:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon2));
 409:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 410:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   if (hadc->Init.OversamplingMode == ENABLE)
 411:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 412:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
 413:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
 414:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
 415:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 416:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));
 417:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 418:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 419:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 420:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 421:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 422:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 423:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 424:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 425:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 426:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 427:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 428:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* ADC group regular discontinuous mode can be enabled only if              */
 429:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* continuous mode is disabled.                                             */
 430:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == 
ARM GAS  /tmp/ccN8TuGv.s 			page 9


 431:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 432:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Actions performed only if ADC is coming from state reset:                */
 433:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* - Initialization of ADC MSP                                              */
 434:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   if (hadc->State == HAL_ADC_STATE_RESET)
 435:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 436:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
 437:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Init the ADC Callback settings */
 438:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak 
 439:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak 
 440:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak 
 441:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak 
 442:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak 
 443:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak 
 444:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak 
 445:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 446:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     if (hadc->MspInitCallback == NULL)
 447:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 448:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 449:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 450:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 451:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Init the low level hardware */
 452:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     hadc->MspInitCallback(hadc);
 453:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #else
 454:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Init the low level hardware */
 455:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     HAL_ADC_MspInit(hadc);
 456:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 457:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 458:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Set ADC error code to none */
 459:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 460:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 461:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Initialize Lock */
 462:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     hadc->Lock = HAL_UNLOCKED;
 463:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 464:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 465:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 466:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 467:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Enable ADC internal voltage regulator */
 468:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     LL_ADC_EnableInternalRegulator(hadc->Instance);
 469:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 470:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Delay for ADC stabilization time */
 471:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Wait loop initialization and execution */
 472:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Note: Variable divided by 2 to compensate partially              */
 473:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /*       CPU processing cycles, scaling in us split to not          */
 474:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /*       exceed 32 bits register capacity and handle low frequency. */
 475:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL
 476:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     while (wait_loop_index != 0UL)
 477:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 478:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       wait_loop_index--;
 479:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 480:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 481:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 482:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Verification that ADC voltage regulator is correctly enabled, whether    */
 483:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* or not ADC is coming from state reset (if any potential problem of       */
 484:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* clocking, voltage regulator would not be enabled).                       */
 485:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 486:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 487:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Update ADC state machine to error */
ARM GAS  /tmp/ccN8TuGv.s 			page 10


 488:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 489:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 490:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Set ADC error code to ADC peripheral internal error */
 491:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 492:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 493:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 494:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 495:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 496:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */
 497:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* correctly completed and if there is no conversion on going on regular    */
 498:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
 499:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* called to update a parameter on the fly).                                */
 500:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 501:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 502:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 503:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       && (tmp_adc_reg_is_conversion_on_going == 0UL)
 504:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      )
 505:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 506:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Set ADC state */
 507:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 508:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY,
 509:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                       HAL_ADC_STATE_BUSY_INTERNAL);
 510:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 511:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Configuration of common ADC parameters                                 */
 512:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 513:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Parameters update conditioned to ADC state:                            */
 514:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Parameters that can be updated only when ADC is disabled:              */
 515:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /*  - Internal voltage regulator (no parameter in HAL ADC init structure) */
 516:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /*  - Clock configuration                                                 */
 517:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /*  - ADC resolution                                                      */
 518:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /*  - Oversampling                                                        */
 519:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /*  - discontinuous mode                                                  */
 520:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /*  - LowPowerAutoWait mode                                               */
 521:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /*  - LowPowerAutoPowerOff mode                                           */
 522:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /*  - continuous conversion mode                                          */
 523:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /*  - overrun                                                             */
 524:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /*  - external trigger to start conversion                                */
 525:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /*  - external trigger polarity                                           */
 526:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /*  - data alignment                                                      */
 527:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /*  - resolution                                                          */
 528:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /*  - scan direction                                                      */
 529:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /*  - DMA continuous request                                              */
 530:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /*  - Trigger frequency mode                                              */
 531:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
 532:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /*       and disable phases are performed automatically by hardware       */
 533:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
 534:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 535:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 536:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Some parameters of this register are not reset, since they are set   */
 537:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* by other functions and must be kept in case of usage of this         */
 538:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* function on the fly (update of a parameter of ADC_InitTypeDef        */
 539:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* without needing to reconfigure all other ADC groups/channels         */
 540:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* parameters):                                                         */
 541:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /*   - internal measurement paths (VrefInt, ...)                        */
 542:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /*     (set into HAL_ADC_ConfigChannel() )                              */
 543:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 544:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       tmpCFGR1 |= (hadc->Init.Resolution                                          |
ARM GAS  /tmp/ccN8TuGv.s 			page 11


 545:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 546:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 547:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 548:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 549:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    hadc->Init.DataAlign                                           |
 550:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 551:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 552:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 553:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Update setting of discontinuous mode only if continuous mode is disabled */
 554:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       if (hadc->Init.DiscontinuousConvMode == ENABLE)
 555:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 556:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         if (hadc->Init.ContinuousConvMode == DISABLE)
 557:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
 558:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           /* Enable the selected ADC group regular discontinuous mode */
 559:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           tmpCFGR1 |= ADC_CFGR1_DISCEN;
 560:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
 561:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         else
 562:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
 563:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           /* ADC regular group discontinuous was intended to be enabled,        */
 564:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           /* but ADC regular group modes continuous and sequencer discontinuous */
 565:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           /* cannot be enabled simultaneously.                                  */
 566:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 567:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           /* Update ADC state machine to error */
 568:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 569:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 570:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           /* Set ADC error code to ADC peripheral internal error */
 571:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 572:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
 573:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
 574:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 575:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Enable external trigger if trigger selection is different of software  */
 576:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* start.                                                                 */
 577:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Note: This configuration keeps the hardware feature of parameter       */
 578:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
 579:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /*       software start.                                                  */
 580:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 581:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 582:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 583:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                      hadc->Init.ExternalTrigConvEdge);
 584:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
 585:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 586:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Update ADC configuration register with previous settings */
 587:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CFGR1,
 588:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                  ADC_CFGR1_RES     |
 589:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                  ADC_CFGR1_DISCEN  |
 590:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                  ADC_CFGR1_AUTOFF  |
 591:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                  ADC_CFGR1_WAIT    |
 592:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                  ADC_CFGR1_CONT    |
 593:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                  ADC_CFGR1_OVRMOD  |
 594:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                  ADC_CFGR1_EXTSEL  |
 595:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                  ADC_CFGR1_EXTEN   |
 596:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                  ADC_CFGR1_ALIGN   |
 597:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                  ADC_CFGR1_SCANDIR |
 598:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                  ADC_CFGR1_DMACFG,
 599:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                  tmpCFGR1);
 600:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 601:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
ARM GAS  /tmp/ccN8TuGv.s 			page 12


 602:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    hadc->Init.TriggerFrequencyMode
 603:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                   );
 604:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 605:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       if (hadc->Init.OversamplingMode == ENABLE)
 606:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 607:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         tmpCFGR2 |= (ADC_CFGR2_OVSE |
 608:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 609:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                      hadc->Init.Oversampling.Ratio         |
 610:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                      hadc->Init.Oversampling.RightBitShift |
 611:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                      hadc->Init.Oversampling.TriggeredMode
 612:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                     );
 613:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
 614:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 615:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CFGR2,
 616:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                  ADC_CFGR2_CKMODE |
 617:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                  ADC_CFGR2_LFTRIG |
 618:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                  ADC_CFGR2_OVSE   |
 619:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                  ADC_CFGR2_OVSR   |
 620:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                  ADC_CFGR2_OVSS   |
 621:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                  ADC_CFGR2_TOVS,
 622:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                  tmpCFGR2);
 623:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 624:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Configuration of ADC clock mode: asynchronous clock source           */
 625:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* with selectable prescaler.                                           */
 626:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 627:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 628:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 629:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 630:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         MODIFY_REG(ADC_COMMON->CCR,
 631:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    ADC_CCR_PRESC,
 632:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
 633:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
 634:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 635:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 636:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Channel sampling time configuration */
 637:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.S
 638:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.S
 639:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 640:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Configuration of regular group sequencer:                              */
 641:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* - if scan mode is disabled, regular channels sequence length is set to */
 642:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /*   0x00: 1 channel converted (channel on regular rank 1)                */
 643:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /*   Parameter "NbrOfConversion" is discarded.                            */
 644:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /*   Note: Scan mode is not present by hardware on this device, but       */
 645:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /*   emulated by software for alignment over all STM32 devices.           */
 646:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* - if scan mode is enabled, regular channels sequence length is set to  */
 647:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /*   parameter "NbrOfConversion".                                         */
 648:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /*   Channels must be configured into each rank using function            */
 649:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /*   "HAL_ADC_ConfigChannel()".                                           */
 650:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 651:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 652:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Set sequencer scan length by clearing ranks above rank 1             */
 653:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* and do not modify rank 1 value.                                      */
 654:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       SET_BIT(hadc->Instance->CHSELR,
 655:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****               ADC_CHSELR_SQ2_TO_SQ8);
 656:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 657:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 658:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
ARM GAS  /tmp/ccN8TuGv.s 			page 13


 659:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Count number of ranks available in HAL ADC handle variable */
 660:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       uint32_t ADCGroupRegularSequencerRanksCount;
 661:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 662:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Parse all ranks from 1 to 8 */
 663:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); AD
 664:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 665:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* Check each sequencer rank until value of end of sequence */
 666:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & 
 667:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****             ADC_CHSELR_SQ1)
 668:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
 669:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           break;
 670:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
 671:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
 672:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 673:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       if (ADCGroupRegularSequencerRanksCount == 1UL)
 674:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 675:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* Set ADC group regular sequencer:                                   */
 676:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* Set sequencer scan length by clearing ranks above rank 1           */
 677:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* and do not modify rank 1 value.                                    */
 678:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         SET_BIT(hadc->Instance->CHSELR,
 679:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                 ADC_CHSELR_SQ2_TO_SQ8);
 680:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
 681:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       else
 682:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 683:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* Set ADC group regular sequencer:                                   */
 684:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /*  - Set ADC group regular sequencer to value memorized              */
 685:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /*    in HAL ADC handle                                               */
 686:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /*    Note: This value maybe be initialized at a unknown value,       */
 687:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /*          therefore after the first call of "HAL_ADC_Init()",       */
 688:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /*          each rank corresponding to parameter "NbrOfConversion"    */
 689:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /*          must be set using "HAL_ADC_ConfigChannel()".              */
 690:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /*  - Set sequencer scan length by clearing ranks above maximum rank  */
 691:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /*    and do not modify other ranks value.                            */
 692:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         MODIFY_REG(hadc->Instance->CHSELR,
 693:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    ADC_CHSELR_SQ_ALL,
 694:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    (ADC_CHSELR_SQ2_TO_SQ8 << (((hadc->Init.NbrOfConversion - 1UL) * ADC_REGULAR_RAN
 695:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                   );
 696:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
 697:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 698:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 699:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Check back that ADC registers have effectively been configured to      */
 700:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* ensure of no potential problem of ADC core peripheral clocking.        */
 701:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 702:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       == hadc->Init.SamplingTimeCommon1)
 703:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 704:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Set ADC error code to none */
 705:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 706:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 707:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Set the ADC state */
 708:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 709:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 710:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                         HAL_ADC_STATE_READY);
 711:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 712:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     else
 713:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 714:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Update ADC state machine to error */
 715:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
ARM GAS  /tmp/ccN8TuGv.s 			page 14


 716:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 717:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                         HAL_ADC_STATE_ERROR_INTERNAL);
 718:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 719:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Set ADC error code to ADC peripheral internal error */
 720:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 721:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 722:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       tmp_hal_status = HAL_ERROR;
 723:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 724:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 725:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 726:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   else
 727:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 728:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Update ADC state machine to error */
 729:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 730:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 731:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 732:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 733:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 734:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   return tmp_hal_status;
 735:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
 736:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 737:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /**
 738:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @brief  Deinitialize the ADC peripheral registers to their default reset
 739:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         values, with deinitialization of the ADC MSP.
 740:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @note   For devices with several ADCs: reset of ADC common registers is done
 741:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         only if all ADCs sharing the same common group are disabled.
 742:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         (function "HAL_ADC_MspDeInit()" is also called under the same conditions:
 743:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         all ADC instances use the same core clock at RCC level, disabling
 744:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         the core clock reset all ADC instances).
 745:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         If this is not the case, reset of these common parameters reset is
 746:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         bypassed without error reporting: it can be the intended behavior in
 747:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         case of reset of a single ADC while the other ADCs sharing the same
 748:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         common group is still running.
 749:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @param hadc ADC handle
 750:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @retval HAL status
 751:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
 752:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
 753:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** {
 754:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 755:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 756:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Check ADC handle */
 757:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   if (hadc == NULL)
 758:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 759:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     return HAL_ERROR;
 760:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 761:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 762:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Check the parameters */
 763:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 764:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 765:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Set ADC state */
 766:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 767:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 768:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Stop potential conversion on going, on regular group */
 769:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
 770:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 771:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
 772:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
ARM GAS  /tmp/ccN8TuGv.s 			page 15


 773:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 774:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Disable the ADC peripheral */
 775:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
 776:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 777:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Check if ADC is effectively disabled */
 778:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 779:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 780:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Change ADC state */
 781:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       hadc->State = HAL_ADC_STATE_READY;
 782:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 783:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 784:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Disable ADC internal voltage regulator */
 785:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     LL_ADC_DisableInternalRegulator(hadc->Instance);
 786:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 787:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 788:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Note: HAL ADC deInit is done independently of ADC conversion stop        */
 789:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /*       and disable return status. In case of status fail, attempt to      */
 790:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /*       perform deinitialization anyway and it is up user code in          */
 791:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
 792:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /*       system RCC hard reset.                                             */
 793:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 794:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* ========== Reset ADC registers ========== */
 795:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Reset register IER */
 796:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 797:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                               ADC_IT_AWD1  | ADC_IT_OVR  |
 798:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                               ADC_IT_EOS   | ADC_IT_EOC  |
 799:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                               ADC_IT_EOSMP | ADC_IT_RDY));
 800:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 801:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Reset register ISR */
 802:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 803:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                               ADC_FLAG_AWD1  | ADC_FLAG_OVR  |
 804:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                               ADC_FLAG_EOS   | ADC_FLAG_EOC  |
 805:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                               ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 806:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 807:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Reset register CR */
 808:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
 809:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* "read-set": no direct reset applicable.                                */
 810:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 811:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Reset register CFGR1 */
 812:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1
 813:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                              ADC_CFGR1_AUTOFF  | ADC_CFGR1_WAIT   | ADC_CFGR1_CONT   | ADC_CFGR1_OV
 814:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                              ADC_CFGR1_EXTEN   | ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_RE
 815:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                              ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);
 816:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 817:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Reset register CFGR2 */
 818:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
 819:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /*       already done above.                                              */
 820:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 821:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 822:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Reset register SMPR */
 823:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 824:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 825:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Reset register TR1 */
 826:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 827:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 828:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Reset register CHSELR */
 829:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
ARM GAS  /tmp/ccN8TuGv.s 			page 16


 830:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 831:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Reset register DR */
 832:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* bits in access mode read only, no direct reset applicable */
 833:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 834:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Reset register CCR */
 835:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 836:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 837:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* ========== Hard reset ADC peripheral ========== */
 838:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Performs a global reset of the entire ADC peripheral: ADC state is     */
 839:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* forced to a similar state after device power-on.                       */
 840:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Note: A possible implementation is to add RCC bus reset of ADC         */
 841:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* (for example, using macro                                              */
 842:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /*  __HAL_RCC_ADC..._FORCE_RESET()/..._RELEASE_RESET()/..._CLK_DISABLE()) */
 843:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* in function "void HAL_ADC_MspDeInit(ADC_HandleTypeDef *hadc)":         */
 844:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
 845:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   if (hadc->MspDeInitCallback == NULL)
 846:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 847:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     hadc->MspDeInitCallback = HAL_ADC_MspDeInit; /* Legacy weak MspDeInit  */
 848:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 849:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 850:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* DeInit the low level hardware */
 851:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   hadc->MspDeInitCallback(hadc);
 852:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #else
 853:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* DeInit the low level hardware */
 854:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   HAL_ADC_MspDeInit(hadc);
 855:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 856:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 857:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Reset HAL ADC handle variable */
 858:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 859:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 860:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Set ADC error code to none */
 861:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   ADC_CLEAR_ERRORCODE(hadc);
 862:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 863:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Set ADC state */
 864:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   hadc->State = HAL_ADC_STATE_RESET;
 865:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 866:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 867:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 868:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   return tmp_hal_status;
 869:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
 870:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 871:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /**
 872:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @brief  Initialize the ADC MSP.
 873:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @param hadc ADC handle
 874:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @retval None
 875:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
 876:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** __weak void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
 877:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** {
  28              		.loc 1 877 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 878:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 879:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   UNUSED(hadc);
  33              		.loc 1 879 3 view .LVU1
 880:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
ARM GAS  /tmp/ccN8TuGv.s 			page 17


 881:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 882:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****             function HAL_ADC_MspInit must be implemented in the user file.
 883:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****    */
 884:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
  34              		.loc 1 884 1 is_stmt 0 view .LVU2
  35 0000 7047     		bx	lr
  36              		.cfi_endproc
  37              	.LFE1095:
  39              		.section	.text.HAL_ADC_Init,"ax",%progbits
  40              		.align	1
  41              		.global	HAL_ADC_Init
  42              		.syntax unified
  43              		.thumb
  44              		.thumb_func
  45              		.fpu softvfp
  47              	HAL_ADC_Init:
  48              	.LVL1:
  49              	.LFB1093:
 380:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  50              		.loc 1 380 1 is_stmt 1 view -0
  51              		.cfi_startproc
  52              		@ args = 0, pretend = 0, frame = 8
  53              		@ frame_needed = 0, uses_anonymous_args = 0
 380:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  54              		.loc 1 380 1 is_stmt 0 view .LVU4
  55 0000 70B5     		push	{r4, r5, r6, lr}
  56              	.LCFI0:
  57              		.cfi_def_cfa_offset 16
  58              		.cfi_offset 4, -16
  59              		.cfi_offset 5, -12
  60              		.cfi_offset 6, -8
  61              		.cfi_offset 14, -4
  62 0002 82B0     		sub	sp, sp, #8
  63              	.LCFI1:
  64              		.cfi_def_cfa_offset 24
 381:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tmpCFGR1 = 0UL;
  65              		.loc 1 381 3 is_stmt 1 view .LVU5
  66              	.LVL2:
 382:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tmpCFGR2 = 0UL;
  67              		.loc 1 382 3 view .LVU6
 383:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tmp_adc_reg_is_conversion_on_going;
  68              		.loc 1 383 3 view .LVU7
 384:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0UL;
  69              		.loc 1 384 3 view .LVU8
 385:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
  70              		.loc 1 385 3 view .LVU9
 385:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
  71              		.loc 1 385 17 is_stmt 0 view .LVU10
  72 0004 0023     		movs	r3, #0
  73 0006 0193     		str	r3, [sp, #4]
 388:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
  74              		.loc 1 388 3 is_stmt 1 view .LVU11
 388:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
  75              		.loc 1 388 6 is_stmt 0 view .LVU12
  76 0008 0028     		cmp	r0, #0
  77 000a 00F01B81 		beq	.L25
  78 000e 0446     		mov	r4, r0
ARM GAS  /tmp/ccN8TuGv.s 			page 18


 394:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
  79              		.loc 1 394 3 is_stmt 1 view .LVU13
 395:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
  80              		.loc 1 395 3 view .LVU14
 396:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  81              		.loc 1 396 3 view .LVU15
 397:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  82              		.loc 1 397 3 view .LVU16
 398:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  83              		.loc 1 398 3 view .LVU17
 399:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  84              		.loc 1 399 3 view .LVU18
 400:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  85              		.loc 1 400 3 view .LVU19
 401:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  86              		.loc 1 401 3 view .LVU20
 402:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  87              		.loc 1 402 3 view .LVU21
 403:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  88              		.loc 1 403 3 view .LVU22
 404:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  89              		.loc 1 404 3 view .LVU23
 405:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoPowerOff));
  90              		.loc 1 405 3 view .LVU24
 406:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon1));
  91              		.loc 1 406 3 view .LVU25
 407:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon2));
  92              		.loc 1 407 3 view .LVU26
 408:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
  93              		.loc 1 408 3 view .LVU27
 409:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   if (hadc->Init.OversamplingMode == ENABLE)
  94              		.loc 1 409 3 view .LVU28
 410:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
  95              		.loc 1 410 3 view .LVU29
 412:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
  96              		.loc 1 412 5 view .LVU30
 413:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  97              		.loc 1 413 5 view .LVU31
 414:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
  98              		.loc 1 414 5 view .LVU32
 416:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
  99              		.loc 1 416 3 view .LVU33
 418:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 100              		.loc 1 418 3 view .LVU34
 424:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 101              		.loc 1 424 7 view .LVU35
 430:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 102              		.loc 1 430 3 view .LVU36
 434:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 103              		.loc 1 434 3 view .LVU37
 434:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 104              		.loc 1 434 11 is_stmt 0 view .LVU38
 105 0010 836D     		ldr	r3, [r0, #88]
 434:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 106              		.loc 1 434 6 view .LVU39
 107 0012 BBB1     		cbz	r3, .L29
 108              	.LVL3:
ARM GAS  /tmp/ccN8TuGv.s 			page 19


 109              	.L4:
 465:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 110              		.loc 1 465 3 is_stmt 1 view .LVU40
 465:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 111              		.loc 1 465 7 is_stmt 0 view .LVU41
 112 0014 2268     		ldr	r2, [r4]
 113              	.LVL4:
 114              	.LBB151:
 115              	.LBI151:
 116              		.file 2 "Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h"
   1:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
   2:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   ******************************************************************************
   3:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @file    stm32wlxx_ll_adc.h
   4:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @author  MCD Application Team
   5:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief   Header file of ADC LL module.
   6:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   ******************************************************************************
   7:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @attention
   8:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *
   9:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * Copyright (c) 2020 STMicroelectronics.
  10:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * All rights reserved.
  11:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *
  12:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * in the root directory of this software component.
  14:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *
  16:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   ******************************************************************************
  17:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
  18:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
  19:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  20:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #ifndef STM32WLxx_LL_ADC_H
  21:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define STM32WLxx_LL_ADC_H
  22:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
  23:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #ifdef __cplusplus
  24:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** extern "C" {
  25:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #endif
  26:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
  27:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* Includes ------------------------------------------------------------------*/
  28:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #include "stm32wlxx.h"
  29:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
  30:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @addtogroup STM32WLxx_LL_Driver
  31:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
  32:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
  33:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
  34:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #if defined (ADC)
  35:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
  36:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL ADC
  37:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
  38:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
  39:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
  40:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* Private types -------------------------------------------------------------*/
  41:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* Private variables ---------------------------------------------------------*/
  42:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
  43:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* Private constants ---------------------------------------------------------*/
  44:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_Private_Constants ADC Private Constants
  45:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
  46:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
  47:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
ARM GAS  /tmp/ccN8TuGv.s 			page 20


  48:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* Internal mask for ADC group regular sequencer:                             */
  49:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* To select into literal LL_ADC_REG_RANK_x the relevant bits for:            */
  50:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* - sequencer rank bits position into the selected register                  */
  51:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
  52:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_REG_RANK_ID_SQRX_MASK          (ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0)
  53:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
  54:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* Definition of ADC group regular sequencer bits information to be inserted  */
  55:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* into ADC group regular sequencer ranks literals definition.                */
  56:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_REG_RANK_1_SQRX_BITOFFSET_POS  ( 0UL) /* Equivalent to bitfield "ADC_CHSELR_SQ1" positi
  57:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_REG_RANK_2_SQRX_BITOFFSET_POS  ( 4UL) /* Equivalent to bitfield "ADC_CHSELR_SQ2" positi
  58:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_REG_RANK_3_SQRX_BITOFFSET_POS  ( 8UL) /* Equivalent to bitfield "ADC_CHSELR_SQ3" positi
  59:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_REG_RANK_4_SQRX_BITOFFSET_POS  (12UL) /* Equivalent to bitfield "ADC_CHSELR_SQ4" positi
  60:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_REG_RANK_5_SQRX_BITOFFSET_POS  (16UL) /* Equivalent to bitfield "ADC_CHSELR_SQ5" positi
  61:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_REG_RANK_6_SQRX_BITOFFSET_POS  (20UL) /* Equivalent to bitfield "ADC_CHSELR_SQ6" positi
  62:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_REG_RANK_7_SQRX_BITOFFSET_POS  (24UL) /* Equivalent to bitfield "ADC_CHSELR_SQ7" positi
  63:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_REG_RANK_8_SQRX_BITOFFSET_POS  (28UL) /* Equivalent to bitfield "ADC_CHSELR_SQ8" positi
  64:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
  65:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
  66:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
  67:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* Internal mask for ADC group regular trigger:                               */
  68:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* To select into literal LL_ADC_REG_TRIG_x the relevant bits for:            */
  69:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* - regular trigger source                                                   */
  70:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* - regular trigger edge                                                     */
  71:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_REG_TRIG_EXT_EDGE_DEFAULT       (ADC_CFGR1_EXTEN_0) /* Trigger edge set to rising edge 
  72:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
  73:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* Mask containing trigger source masks for each of possible                  */
  74:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* trigger edge selection duplicated with shifts [0; 4; 8; 12]                */
  75:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* corresponding to {SW start; ext trigger; ext trigger; ext trigger}.        */
  76:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_REG_TRIG_SOURCE_MASK            (((LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTSEL) << (4U 
  77:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                              ((ADC_CFGR1_EXTSEL)                            << (4U 
  78:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                              ((ADC_CFGR1_EXTSEL)                            << (4U 
  79:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                              ((ADC_CFGR1_EXTSEL)                            << (4U 
  80:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
  81:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* Mask containing trigger edge masks for each of possible                    */
  82:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* trigger edge selection duplicated with shifts [0; 4; 8; 12]                */
  83:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* corresponding to {SW start; ext trigger; ext trigger; ext trigger}.        */
  84:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_REG_TRIG_EDGE_MASK              (((LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN) << (4U *
  85:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                              ((ADC_REG_TRIG_EXT_EDGE_DEFAULT)              << (4U *
  86:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                              ((ADC_REG_TRIG_EXT_EDGE_DEFAULT)              << (4U *
  87:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                              ((ADC_REG_TRIG_EXT_EDGE_DEFAULT)              << (4U *
  88:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
  89:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* Definition of ADC group regular trigger bits information.                  */
  90:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_REG_TRIG_EXTSEL_BITOFFSET_POS  ( 6UL) /* Equivalent to bitfield "ADC_CFGR1_EXTSEL" posi
  91:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_REG_TRIG_EXTEN_BITOFFSET_POS   (10UL) /* Equivalent to bitfield "ADC_CFGR1_EXTEN" posit
  92:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
  93:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
  94:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
  95:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* Internal mask for ADC channel:                                             */
  96:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* To select into literal LL_ADC_CHANNEL_x the relevant bits for:             */
  97:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* - channel identifier defined by number                                     */
  98:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* - channel identifier defined by bitfield                                   */
  99:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* - channel differentiation between external channels (connected to          */
 100:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /*   GPIO pins) and internal channels (connected to internal paths)           */
 101:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHANNEL_ID_NUMBER_MASK         (ADC_CFGR1_AWD1CH)
 102:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHANNEL_ID_BITFIELD_MASK       (ADC_CHSELR_CHSEL)
 103:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHANNEL_ID_NUMBER_MASK_SEQ     (ADC_CHSELR_SQ1 << ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) 
 104:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS (26UL)/* Equivalent to bitfield "ADC_CHANNEL_ID_NUMBER_
ARM GAS  /tmp/ccN8TuGv.s 			page 21


 105:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHANNEL_ID_MASK                (ADC_CHANNEL_ID_NUMBER_MASK | ADC_CHANNEL_ID_BITFIELD_MA
 106:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                             ADC_CHANNEL_ID_INTERNAL_CH_MASK)
 107:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* Equivalent mask of ADC_CHANNEL_NUMBER_MASK aligned on register LSB (bit 0) */
 108:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 (0x0000001FUL) /* Equivalent to shift: (ADC_CHANNEL_NUMB
 109:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 110:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* Channel differentiation between external and internal channels */
 111:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHANNEL_ID_INTERNAL_CH         (0x80000000UL) /* Marker of internal channel */
 112:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHANNEL_ID_INTERNAL_CH_MASK    (ADC_CHANNEL_ID_INTERNAL_CH)
 113:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 114:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* Definition of channels ID number information to be inserted into           */
 115:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* channels literals definition.                                              */
 116:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHANNEL_0_NUMBER               (0x00000000UL)
 117:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHANNEL_1_NUMBER               (ADC_CFGR1_AWD1CH_0)
 118:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHANNEL_2_NUMBER               (ADC_CFGR1_AWD1CH_1)
 119:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHANNEL_3_NUMBER               (ADC_CFGR1_AWD1CH_1 | ADC_CFGR1_AWD1CH_0)
 120:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHANNEL_4_NUMBER               (ADC_CFGR1_AWD1CH_2)
 121:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHANNEL_5_NUMBER               (ADC_CFGR1_AWD1CH_2 | ADC_CFGR1_AWD1CH_0)
 122:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHANNEL_6_NUMBER               (ADC_CFGR1_AWD1CH_2 | ADC_CFGR1_AWD1CH_1)
 123:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHANNEL_7_NUMBER               (ADC_CFGR1_AWD1CH_2 | ADC_CFGR1_AWD1CH_1 | ADC_CFGR1_AWD
 124:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHANNEL_8_NUMBER               (ADC_CFGR1_AWD1CH_3)
 125:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHANNEL_9_NUMBER               (ADC_CFGR1_AWD1CH_3 | ADC_CFGR1_AWD1CH_0)
 126:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHANNEL_10_NUMBER              (ADC_CFGR1_AWD1CH_3 | ADC_CFGR1_AWD1CH_1)
 127:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHANNEL_11_NUMBER              (ADC_CFGR1_AWD1CH_3 | ADC_CFGR1_AWD1CH_1 | ADC_CFGR1_AWD
 128:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHANNEL_12_NUMBER              (ADC_CFGR1_AWD1CH_3 | ADC_CFGR1_AWD1CH_2)
 129:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHANNEL_13_NUMBER              (ADC_CFGR1_AWD1CH_3 | ADC_CFGR1_AWD1CH_2 | ADC_CFGR1_AWD
 130:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHANNEL_14_NUMBER              (ADC_CFGR1_AWD1CH_3 | ADC_CFGR1_AWD1CH_2 | ADC_CFGR1_AWD
 131:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHANNEL_15_NUMBER              (ADC_CFGR1_AWD1CH_3 | ADC_CFGR1_AWD1CH_2 | \
 132:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                             ADC_CFGR1_AWD1CH_1 | ADC_CFGR1_AWD1CH_0)
 133:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHANNEL_16_NUMBER              (ADC_CFGR1_AWD1CH_4)
 134:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHANNEL_17_NUMBER              (ADC_CFGR1_AWD1CH_4 | ADC_CFGR1_AWD1CH_0)
 135:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHANNEL_18_NUMBER              (ADC_CFGR1_AWD1CH_4 | ADC_CFGR1_AWD1CH_1)
 136:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 137:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* Definition of channels ID bitfield information to be inserted into         */
 138:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* channels literals definition.                                              */
 139:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHANNEL_0_BITFIELD             (ADC_CHSELR_CHSEL0)
 140:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHANNEL_1_BITFIELD             (ADC_CHSELR_CHSEL1)
 141:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHANNEL_2_BITFIELD             (ADC_CHSELR_CHSEL2)
 142:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHANNEL_3_BITFIELD             (ADC_CHSELR_CHSEL3)
 143:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHANNEL_4_BITFIELD             (ADC_CHSELR_CHSEL4)
 144:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHANNEL_5_BITFIELD             (ADC_CHSELR_CHSEL5)
 145:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHANNEL_6_BITFIELD             (ADC_CHSELR_CHSEL6)
 146:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHANNEL_7_BITFIELD             (ADC_CHSELR_CHSEL7)
 147:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHANNEL_8_BITFIELD             (ADC_CHSELR_CHSEL8)
 148:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHANNEL_9_BITFIELD             (ADC_CHSELR_CHSEL9)
 149:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHANNEL_10_BITFIELD            (ADC_CHSELR_CHSEL10)
 150:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHANNEL_11_BITFIELD            (ADC_CHSELR_CHSEL11)
 151:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHANNEL_12_BITFIELD            (ADC_CHSELR_CHSEL12)
 152:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHANNEL_13_BITFIELD            (ADC_CHSELR_CHSEL13)
 153:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHANNEL_14_BITFIELD            (ADC_CHSELR_CHSEL14)
 154:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHANNEL_15_BITFIELD            (ADC_CHSELR_CHSEL15)
 155:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHANNEL_16_BITFIELD            (ADC_CHSELR_CHSEL16)
 156:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHANNEL_17_BITFIELD            (ADC_CHSELR_CHSEL17)
 157:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 158:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* Internal mask for ADC channel sampling time:                               */
 159:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* To select into literals LL_ADC_SAMPLINGTIME_x                              */
 160:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* the relevant bits for:                                                     */
 161:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* (concatenation of multiple bits used in register SMPR)                     */
ARM GAS  /tmp/ccN8TuGv.s 			page 22


 162:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* - ADC channels sampling time: setting channel wise, to map each channel    */
 163:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /*   on one of the common sampling time available.                            */
 164:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* - ADC channels common sampling time: set a sampling time into one of the   */
 165:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /*   common sampling time available.                                          */
 166:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_SAMPLING_TIME_CH_MASK          (ADC_CHANNEL_ID_BITFIELD_MASK << ADC_SMPR_SMPSEL0_BITOFF
 167:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_SAMPLING_TIME_SMP_MASK         (ADC_SMPR_SMP2 | ADC_SMPR_SMP1)
 168:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_SAMPLING_TIME_SMP_SHIFT_MASK   (ADC_SMPR_SMP2_BITOFFSET_POS | ADC_SMPR_SMP1_BITOFFSET_P
 169:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 170:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* Internal mask for ADC analog watchdog:                                     */
 171:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* To select into literals LL_ADC_AWD_CHANNELx_xxx the relevant bits for:     */
 172:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* (concatenation of multiple bits used in different analog watchdogs,        */
 173:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* (feature of several watchdogs not available on all STM32 families)).       */
 174:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* - analog watchdog 1: monitored channel defined by number,                  */
 175:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /*   selection of ADC group (ADC group regular).                              */
 176:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* - analog watchdog 2 and 3: monitored channel defined by bitfield, no       */
 177:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /*   selection on groups.                                                     */
 178:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 179:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* Internal register offset for ADC analog watchdog channel configuration */
 180:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_AWD_CR1_REGOFFSET              (0x00000000UL)
 181:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_AWD_CR2_REGOFFSET              (0x00100000UL)
 182:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_AWD_CR3_REGOFFSET              (0x00200000UL)
 183:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 184:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* Register offset gap between AWD1 and AWD2-AWD3 configuration registers */
 185:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* (Set separately as ADC_AWD_CRX_REGOFFSET to spare 32 bits space */
 186:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_AWD_CR12_REGOFFSETGAP_MASK     (ADC_AWD2CR_AWD2CH_0)
 187:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_AWD_CR12_REGOFFSETGAP_VAL      (0x00000024UL)
 188:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 189:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_AWD_CRX_REGOFFSET_MASK         (ADC_AWD_CR1_REGOFFSET | ADC_AWD_CR2_REGOFFSET | ADC_AWD
 190:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_AWD_CRX_REGOFFSET_BITOFFSET_POS (20UL)
 191:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 192:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_AWD_CR1_CHANNEL_MASK           (ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL
 193:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_AWD_CR23_CHANNEL_MASK          (ADC_AWD2CR_AWD2CH)
 194:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_AWD_CR_ALL_CHANNEL_MASK        (ADC_AWD_CR1_CHANNEL_MASK | ADC_AWD_CR23_CHANNEL_MASK)
 195:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 196:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_AWD_CRX_REGOFFSET_POS          (20UL) /* Position of bits ADC_AWD_CRx_REGOFFSET in ADC_
 197:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 198:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* Internal register offset for ADC analog watchdog threshold configuration */
 199:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_AWD_TR1_REGOFFSET              (ADC_AWD_CR1_REGOFFSET)
 200:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_AWD_TR2_REGOFFSET              (ADC_AWD_CR2_REGOFFSET)
 201:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_AWD_TR3_REGOFFSET              (ADC_AWD_CR3_REGOFFSET + (1UL << ADC_AWD_CRX_REGOFFSET_B
 202:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_AWD_TRX_REGOFFSET_MASK         (ADC_AWD_TR1_REGOFFSET | ADC_AWD_TR2_REGOFFSET | ADC_AWD
 203:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_AWD_TRX_REGOFFSET_POS          (ADC_AWD_CRX_REGOFFSET_POS)     /* Position of bits ADC_
 204:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_AWD_TRX_BIT_HIGH_MASK          (0x00010000UL)                   /* Selection of 1 bit t
 205:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_AWD_TRX_BIT_HIGH_POS           (16UL)                           /* Selection of 1 bit t
 206:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_AWD_TRX_BIT_HIGH_SHIFT4        (ADC_AWD_TRX_BIT_HIGH_POS - 4UL) /* Shift of bit ADC_AWD
 207:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_AWD_TRX_REGOFFSET_BITOFFSET_POS (20UL)
 208:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 209:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 210:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 211:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* ADC registers bits positions */
 212:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CFGR1_RES_BITOFFSET_POS        ( 3UL) /* Equivalent to bitfield "ADC_CFGR1_RES" positio
 213:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CFGR1_AWDSGL_BITOFFSET_POS     (22UL) /* Equivalent to bitfield "ADC_CFGR1_AWDSGL" posi
 214:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_TR1_HT1_BITOFFSET_POS          (16UL) /* Equivalent to bitfield "ADC_TR1_HT1" position 
 215:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHSELR_CHSEL0_BITOFFSET_POS    ( 0UL) /* Equivalent to bitfield "ADC_CHSELR_CHSEL0" pos
 216:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHSELR_CHSEL1_BITOFFSET_POS    ( 1UL) /* Equivalent to bitfield "ADC_CHSELR_CHSEL1" pos
 217:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHSELR_CHSEL2_BITOFFSET_POS    ( 2UL) /* Equivalent to bitfield "ADC_CHSELR_CHSEL2" pos
 218:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHSELR_CHSEL3_BITOFFSET_POS    ( 3UL) /* Equivalent to bitfield "ADC_CHSELR_CHSEL3" pos
ARM GAS  /tmp/ccN8TuGv.s 			page 23


 219:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHSELR_CHSEL4_BITOFFSET_POS    ( 4UL) /* Equivalent to bitfield "ADC_CHSELR_CHSEL4" pos
 220:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHSELR_CHSEL5_BITOFFSET_POS    ( 5UL) /* Equivalent to bitfield "ADC_CHSELR_CHSEL5" pos
 221:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHSELR_CHSEL6_BITOFFSET_POS    ( 6UL) /* Equivalent to bitfield "ADC_CHSELR_CHSEL6" pos
 222:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHSELR_CHSEL7_BITOFFSET_POS    ( 7UL) /* Equivalent to bitfield "ADC_CHSELR_CHSEL7" pos
 223:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHSELR_CHSEL8_BITOFFSET_POS    ( 8UL) /* Equivalent to bitfield "ADC_CHSELR_CHSEL8" pos
 224:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHSELR_CHSEL9_BITOFFSET_POS    ( 9UL) /* Equivalent to bitfield "ADC_CHSELR_CHSEL9" pos
 225:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHSELR_CHSEL10_BITOFFSET_POS   (10UL) /* Equivalent to bitfield "ADC_CHSELR_CHSEL10" po
 226:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHSELR_CHSEL11_BITOFFSET_POS   (11UL) /* Equivalent to bitfield "ADC_CHSELR_CHSEL11" po
 227:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHSELR_CHSEL12_BITOFFSET_POS   (12UL) /* Equivalent to bitfield "ADC_CHSELR_CHSEL12" po
 228:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHSELR_CHSEL13_BITOFFSET_POS   (13UL) /* Equivalent to bitfield "ADC_CHSELR_CHSEL13" po
 229:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHSELR_CHSEL14_BITOFFSET_POS   (14UL) /* Equivalent to bitfield "ADC_CHSELR_CHSEL14" po
 230:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHSELR_CHSEL15_BITOFFSET_POS   (15UL) /* Equivalent to bitfield "ADC_CHSELR_CHSEL15" po
 231:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHSELR_CHSEL16_BITOFFSET_POS   (16UL) /* Equivalent to bitfield "ADC_CHSELR_CHSEL16" po
 232:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHSELR_CHSEL17_BITOFFSET_POS   (17UL) /* Equivalent to bitfield "ADC_CHSELR_CHSEL17" po
 233:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CHSELR_CHSEL18_BITOFFSET_POS   (18UL) /* Equivalent to bitfield "ADC_CHSELR_CHSEL18" po
 234:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_SMPR_SMP1_BITOFFSET_POS        ( 0UL) /* Equivalent to bitfield "ADC_SMPR_SMP1" positio
 235:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_SMPR_SMP2_BITOFFSET_POS        ( 4UL) /* Equivalent to bitfield "ADC_SMPR_SMP2" positio
 236:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_SMPR_SMPSEL0_BITOFFSET_POS     ( 8UL) /* Equivalent to bitfield "ADC_SMPR_SMPSEL0" posi
 237:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 238:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 239:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* ADC registers bits groups */
 240:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define ADC_CR_BITS_PROPERTY_RS            (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_A
 241:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 242:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 243:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* ADC internal channels related definitions */
 244:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* Internal voltage reference VrefInt */
 245:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define VREFINT_CAL_ADDR                   ((uint16_t*) (0x1FFF75AAUL)) /* Internal voltage referen
 246:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define VREFINT_CAL_VREF                   ( 3300UL)                    /* Analog voltage reference
 247:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* Temperature sensor */
 248:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define TEMPSENSOR_CAL1_ADDR               ((uint16_t*) (0x1FFF75A8UL)) /* Internal temperature sen
 249:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define TEMPSENSOR_CAL2_ADDR               ((uint16_t*) (0x1FFF75C8UL)) /* Internal temperature sen
 250:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define TEMPSENSOR_CAL1_TEMP               (( int32_t)   30)            /* Internal temperature sen
 251:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define TEMPSENSOR_CAL2_TEMP               (( int32_t)  130)            /* Internal temperature sen
 252:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define TEMPSENSOR_CAL_VREFANALOG          ( 3300UL)                    /* Analog voltage reference
 253:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 254:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
 255:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
 256:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 257:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 258:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 259:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* Private macros ------------------------------------------------------------*/
 260:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_Private_Macros ADC Private Macros
 261:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
 262:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 263:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 264:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
 265:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Driver macro reserved for internal use: set a pointer to
 266:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         a register from a register basis from which an offset
 267:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         is applied.
 268:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  __REG__ Register basis from which the offset is applied.
 269:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  __REG_OFFFSET__ Offset to be applied (unit: number of registers).
 270:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Pointer to register address
 271:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 272:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define __ADC_PTR_REG_OFFSET(__REG__, __REG_OFFFSET__)                         \
 273:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   ((__IO uint32_t *)((uint32_t) ((uint32_t)(&(__REG__)) + ((__REG_OFFFSET__) << 2UL))))
 274:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 275:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
ARM GAS  /tmp/ccN8TuGv.s 			page 24


 276:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
 277:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 278:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 279:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 280:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* Exported types ------------------------------------------------------------*/
 281:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #if defined(USE_FULL_LL_DRIVER)
 282:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_ES_INIT ADC Exported Init structure
 283:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
 284:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 285:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 286:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
 287:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Structure definition of some features of ADC common parameters
 288:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         and multimode
 289:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (all ADC instances belonging to the same ADC common instance).
 290:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   The setting of these parameters by function @ref LL_ADC_CommonInit()
 291:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         is conditioned to ADC instances state (all ADC instances
 292:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         sharing the same ADC common instance):
 293:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         All ADC instances sharing the same ADC common instance must be
 294:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         disabled.
 295:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 296:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** typedef struct
 297:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 298:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   uint32_t CommonClock;                 /*!< Set parameter common to several ADC: Clock source and 
 299:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_COMMON
 300:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 301:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 302:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 303:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** } LL_ADC_CommonInitTypeDef;
 304:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 305:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
 306:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Structure definition of some features of ADC instance.
 307:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   These parameters have an impact on ADC scope: ADC instance.
 308:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to corresponding unitary functions into
 309:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @ref ADC_LL_EF_Configuration_ADC_Instance .
 310:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   The setting of these parameters by function @ref LL_ADC_Init()
 311:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         is conditioned to ADC state:
 312:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC instance must be disabled.
 313:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         This condition is applied to all ADC features, for efficiency
 314:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         and compatibility over all STM32 families. However, the different
 315:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         features can be set under different ADC state conditions
 316:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (setting possible with ADC enabled without conversion on going,
 317:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC enabled with conversion on going, ...)
 318:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Each feature can be updated afterwards with a unitary function
 319:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         and potentially with ADC in a different state than disabled,
 320:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         refer to description of each function for setting
 321:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         conditioned to ADC state.
 322:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 323:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** typedef struct
 324:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 325:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   uint32_t Clock;                       /*!< Set ADC instance clock source and prescaler.
 326:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_CLOCK_
 327:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                              @note On this STM32 series, this parameter has some cl
 328:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                                    ADC clock synchronous (from PCLK) with prescaler
 329:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                                    (APB prescaler configured inside the RCC must be
 330:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 331:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 332:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                              For more details, refer to description of this functio
ARM GAS  /tmp/ccN8TuGv.s 			page 25


 333:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 334:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   uint32_t Resolution;                  /*!< Set ADC resolution.
 335:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_RESOLU
 336:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 337:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 338:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 339:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   uint32_t DataAlignment;               /*!< Set ADC conversion data alignment.
 340:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_DATA_A
 341:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 342:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 343:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 344:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   uint32_t LowPowerMode;                /*!< Set ADC low power mode.
 345:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_LP_MOD
 346:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 347:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 348:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 349:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** } LL_ADC_InitTypeDef;
 350:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 351:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
 352:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Structure definition of some features of ADC group regular.
 353:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   These parameters have an impact on ADC scope: ADC group regular.
 354:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to corresponding unitary functions into
 355:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @ref ADC_LL_EF_Configuration_ADC_Group_Regular
 356:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (functions with prefix "REG").
 357:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   The setting of these parameters by function @ref LL_ADC_REG_Init()
 358:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         is conditioned to ADC state:
 359:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC instance must be disabled.
 360:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         This condition is applied to all ADC features, for efficiency
 361:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         and compatibility over all STM32 families. However, the different
 362:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         features can be set under different ADC state conditions
 363:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (setting possible with ADC enabled without conversion on going,
 364:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC enabled with conversion on going, ...)
 365:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Each feature can be updated afterwards with a unitary function
 366:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         and potentially with ADC in a different state than disabled,
 367:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         refer to description of each function for setting
 368:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         conditioned to ADC state.
 369:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 370:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** typedef struct
 371:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 372:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   uint32_t TriggerSource;               /*!< Set ADC group regular conversion trigger source: inter
 373:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_TR
 374:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                              @note On this STM32 series, setting trigger source to 
 375:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                                    (default setting for compatibility with some ADC
 376:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                                    In case of need to modify trigger edge, use func
 377:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 378:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 379:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 380:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   uint32_t SequencerLength;             /*!< Set ADC group regular sequencer length.
 381:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                              @note This parameter has an effect only if group regul
 382:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_SE
 383:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 384:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 385:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 386:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   uint32_t SequencerDiscont;            /*!< Set ADC group regular sequencer discontinuous mode: se
 387:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_SE
 388:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                              @note This parameter has an effect only if group regul
 389:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                                    (depending on the sequencer mode: scan length of
ARM GAS  /tmp/ccN8TuGv.s 			page 26


 390:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 391:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 392:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 393:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   uint32_t ContinuousMode;              /*!< Set ADC continuous conversion mode on ADC group regula
 394:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_CO
 395:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                              Note: It is not possible to enable both ADC group regu
 396:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 397:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 398:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 399:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   uint32_t DMATransfer;                 /*!< Set ADC group regular conversion data transfer: no tra
 400:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_DM
 401:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 402:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 403:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 404:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   uint32_t Overrun;                     /*!< Set ADC group regular behavior in case of overrun:
 405:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                              data preserved or overwritten.
 406:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_OV
 407:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 408:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 409:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 410:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** } LL_ADC_REG_InitTypeDef;
 411:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 412:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
 413:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
 414:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 415:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #endif /* USE_FULL_LL_DRIVER */
 416:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 417:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* Exported constants --------------------------------------------------------*/
 418:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_Exported_Constants ADC Exported Constants
 419:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
 420:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 421:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 422:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EC_FLAG ADC flags
 423:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief    Flags defines which can be used with LL_ADC_ReadReg function
 424:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
 425:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 426:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_FLAG_ADRDY                  ADC_ISR_ADRDY      /*!< ADC flag ADC instance ready */
 427:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_FLAG_CCRDY                  ADC_ISR_CCRDY      /*!< ADC flag ADC channel configurati
 428:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_FLAG_EOC                    ADC_ISR_EOC        /*!< ADC flag ADC group regular end o
 429:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_FLAG_EOS                    ADC_ISR_EOS        /*!< ADC flag ADC group regular end o
 430:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_FLAG_OVR                    ADC_ISR_OVR        /*!< ADC flag ADC group regular overr
 431:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_FLAG_EOSMP                  ADC_ISR_EOSMP      /*!< ADC flag ADC group regular end o
 432:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_FLAG_AWD1                   ADC_ISR_AWD1       /*!< ADC flag ADC analog watchdog 1 *
 433:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_FLAG_AWD2                   ADC_ISR_AWD2       /*!< ADC flag ADC analog watchdog 2 *
 434:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_FLAG_AWD3                   ADC_ISR_AWD3       /*!< ADC flag ADC analog watchdog 3 *
 435:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_FLAG_EOCAL                  ADC_ISR_EOCAL      /*!< ADC flag end of calibration */
 436:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
 437:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
 438:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 439:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 440:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EC_IT ADC interruptions for configuration (interruption enable or disable)
 441:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief    IT defines which can be used with LL_ADC_ReadReg and  LL_ADC_WriteReg functions
 442:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
 443:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 444:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_IT_ADRDY                    ADC_IER_ADRDYIE    /*!< ADC interruption ADC instance re
 445:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_IT_CCRDY                    ADC_IER_CCRDYIE    /*!< ADC interruption channel configu
 446:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_IT_EOC                      ADC_IER_EOCIE      /*!< ADC interruption ADC group regul
ARM GAS  /tmp/ccN8TuGv.s 			page 27


 447:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_IT_EOS                      ADC_IER_EOSIE      /*!< ADC interruption ADC group regul
 448:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_IT_OVR                      ADC_IER_OVRIE      /*!< ADC interruption ADC group regul
 449:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_IT_EOSMP                    ADC_IER_EOSMPIE    /*!< ADC interruption ADC group regul
 450:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_IT_AWD1                     ADC_IER_AWD1IE     /*!< ADC interruption ADC analog watc
 451:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_IT_AWD2                     ADC_IER_AWD2IE     /*!< ADC interruption ADC analog watc
 452:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_IT_AWD3                     ADC_IER_AWD3IE     /*!< ADC interruption ADC analog watc
 453:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_IT_EOCAL                    ADC_IER_EOCALIE    /*!< ADC interruption ADC end of cali
 454:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
 455:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
 456:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 457:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 458:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EC_REGISTERS  ADC registers compliant with specific purpose
 459:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
 460:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 461:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* List of ADC registers intended to be used (most commonly) with             */
 462:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* DMA transfer.                                                              */
 463:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* Refer to function @ref LL_ADC_DMA_GetRegAddr().                            */
 464:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_DMA_REG_REGULAR_DATA          (0x00000000UL) /* ADC group regular conversion data re
 465:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
 466:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
 467:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 468:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 469:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EC_COMMON_CLOCK_SOURCE  ADC common - Clock source
 470:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
 471:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 472:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV1            (0x00000000UL)                                        /*
 473:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV2            (ADC_CCR_PRESC_0)                                     /*
 474:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV4            (ADC_CCR_PRESC_1                  )                   /*
 475:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV6            (ADC_CCR_PRESC_1 | ADC_CCR_PRESC_0)                   /*
 476:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV8            (ADC_CCR_PRESC_2                                    ) /*
 477:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV10           (ADC_CCR_PRESC_2                   | ADC_CCR_PRESC_0) /*
 478:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV12           (ADC_CCR_PRESC_2 | ADC_CCR_PRESC_1                  ) /*
 479:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV16           (ADC_CCR_PRESC_2 | ADC_CCR_PRESC_1 | ADC_CCR_PRESC_0) /*
 480:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV32           (ADC_CCR_PRESC_3)                                     /*
 481:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV64           (ADC_CCR_PRESC_3 | ADC_CCR_PRESC_0)                   /*
 482:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV128          (ADC_CCR_PRESC_3 | ADC_CCR_PRESC_1)                   /*
 483:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV256          (ADC_CCR_PRESC_3 | ADC_CCR_PRESC_1 | ADC_CCR_PRESC_0) /*
 484:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
 485:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
 486:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 487:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 488:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EC_COMMON_PATH_INTERNAL  ADC common - Measurement path to internal channels
 489:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
 490:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 491:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* Note: Other measurement paths to internal channels may be available        */
 492:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /*       (connections to other peripherals).                                  */
 493:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /*       If they are not listed below, they do not require any specific       */
 494:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /*       path enable. In this case, Access to measurement path is done        */
 495:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /*       only by selecting the corresponding ADC internal channel.            */
 496:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_NONE          (0x00000000UL)         /*!< ADC measurement paths all di
 497:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_VREFINT       (ADC_CCR_VREFEN)       /*!< ADC measurement path to inte
 498:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_TEMPSENSOR    (ADC_CCR_TSEN)         /*!< ADC measurement path to inte
 499:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_VBAT          (ADC_CCR_VBATEN)       /*!< ADC measurement path to inte
 500:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
 501:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
 502:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 503:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
ARM GAS  /tmp/ccN8TuGv.s 			page 28


 504:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EC_CLOCK_SOURCE  ADC instance - Clock source
 505:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
 506:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 507:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_CLOCK_SYNC_PCLK_DIV4        (ADC_CFGR2_CKMODE_1)                                  /*
 508:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_CLOCK_SYNC_PCLK_DIV2        (ADC_CFGR2_CKMODE_0)                                  /*
 509:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_CLOCK_SYNC_PCLK_DIV1        (ADC_CFGR2_CKMODE_1 | ADC_CFGR2_CKMODE_0)             /*
 510:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC                 (0x00000000UL)                                        /*
 511:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
 512:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
 513:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 514:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 515:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EC_RESOLUTION  ADC instance - Resolution
 516:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
 517:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 518:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_RESOLUTION_12B              (0x00000000UL)                      /*!< ADC resolution 
 519:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_RESOLUTION_10B              (                  ADC_CFGR1_RES_0) /*!< ADC resolution 
 520:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_RESOLUTION_8B               (ADC_CFGR1_RES_1                  ) /*!< ADC resolution 
 521:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_RESOLUTION_6B               (ADC_CFGR1_RES_1 | ADC_CFGR1_RES_0) /*!< ADC resolution 
 522:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
 523:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
 524:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 525:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 526:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EC_DATA_ALIGN  ADC instance - Data alignment
 527:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
 528:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 529:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_DATA_ALIGN_RIGHT            (0x00000000UL)         /*!< ADC conversion data alignmen
 530:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_DATA_ALIGN_LEFT             (ADC_CFGR1_ALIGN)      /*!< ADC conversion data alignmen
 531:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
 532:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
 533:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 534:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 535:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EC_LP_MODE  ADC instance - Low power mode
 536:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
 537:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 538:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_LP_MODE_NONE                (0x00000000UL)                      /*!< No ADC low powe
 539:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_LP_AUTOWAIT                 (ADC_CFGR1_WAIT)                    /*!< ADC low power m
 540:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_LP_AUTOPOWEROFF             (ADC_CFGR1_AUTOFF)                  /*!< ADC low power m
 541:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_LP_AUTOWAIT_AUTOPOWEROFF    (ADC_CFGR1_WAIT | ADC_CFGR1_AUTOFF) /*!< ADC low power m
 542:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
 543:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
 544:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 545:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 546:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_TRIGGER_FREQ  ADC group regular - Trigger frequency mode
 547:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
 548:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 549:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_TRIGGER_FREQ_HIGH           (0x00000000UL)            /*!< ADC trigger frequency mod
 550:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_TRIGGER_FREQ_LOW            (ADC_CFGR2_LFTRIG)        /*!< ADC trigger frequency mod
 551:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
 552:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
 553:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 554:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 555:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EC_SAMPLINGTIME_COMMON  ADC instance - Sampling time common to a group of chan
 556:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
 557:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 558:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_COMMON_1       (ADC_SMPR_SMP1_BITOFFSET_POS)                           
 559:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_COMMON_2       (ADC_SMPR_SMP2_BITOFFSET_POS | ADC_SAMPLING_TIME_CH_MASK
 560:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
ARM GAS  /tmp/ccN8TuGv.s 			page 29


 561:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
 562:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 563:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 564:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EC_GROUPS  ADC instance - Groups
 565:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
 566:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 567:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_GROUP_REGULAR               (0x00000001UL) /*!< ADC group regular (available on all 
 568:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
 569:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
 570:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 571:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 572:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EC_CHANNEL  ADC instance - Channel number
 573:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
 574:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 575:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_CHANNEL_0                   (ADC_CHANNEL_0_NUMBER  | ADC_CHANNEL_0_BITFIELD ) /*!< A
 576:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_CHANNEL_1                   (ADC_CHANNEL_1_NUMBER  | ADC_CHANNEL_1_BITFIELD ) /*!< A
 577:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_CHANNEL_2                   (ADC_CHANNEL_2_NUMBER  | ADC_CHANNEL_2_BITFIELD ) /*!< A
 578:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_CHANNEL_3                   (ADC_CHANNEL_3_NUMBER  | ADC_CHANNEL_3_BITFIELD ) /*!< A
 579:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_CHANNEL_4                   (ADC_CHANNEL_4_NUMBER  | ADC_CHANNEL_4_BITFIELD ) /*!< A
 580:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_CHANNEL_5                   (ADC_CHANNEL_5_NUMBER  | ADC_CHANNEL_5_BITFIELD ) /*!< A
 581:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_CHANNEL_6                   (ADC_CHANNEL_6_NUMBER  | ADC_CHANNEL_6_BITFIELD ) /*!< A
 582:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_CHANNEL_7                   (ADC_CHANNEL_7_NUMBER  | ADC_CHANNEL_7_BITFIELD ) /*!< A
 583:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_CHANNEL_8                   (ADC_CHANNEL_8_NUMBER  | ADC_CHANNEL_8_BITFIELD ) /*!< A
 584:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_CHANNEL_9                   (ADC_CHANNEL_9_NUMBER  | ADC_CHANNEL_9_BITFIELD ) /*!< A
 585:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_CHANNEL_10                  (ADC_CHANNEL_10_NUMBER | ADC_CHANNEL_10_BITFIELD) /*!< A
 586:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_CHANNEL_11                  (ADC_CHANNEL_11_NUMBER | ADC_CHANNEL_11_BITFIELD) /*!< A
 587:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_CHANNEL_12                  (ADC_CHANNEL_12_NUMBER | ADC_CHANNEL_12_BITFIELD) /*!< A
 588:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_CHANNEL_13                  (ADC_CHANNEL_13_NUMBER | ADC_CHANNEL_13_BITFIELD) /*!< A
 589:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_CHANNEL_14                  (ADC_CHANNEL_14_NUMBER | ADC_CHANNEL_14_BITFIELD) /*!< A
 590:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_CHANNEL_15                  (ADC_CHANNEL_15_NUMBER | ADC_CHANNEL_15_BITFIELD) /*!< A
 591:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_CHANNEL_16                  (ADC_CHANNEL_16_NUMBER | ADC_CHANNEL_16_BITFIELD) /*!< A
 592:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_CHANNEL_17                  (ADC_CHANNEL_17_NUMBER | ADC_CHANNEL_17_BITFIELD) /*!< A
 593:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_CHANNEL_VREFINT             (LL_ADC_CHANNEL_13 | ADC_CHANNEL_ID_INTERNAL_CH)  /*!< A
 594:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_CHANNEL_TEMPSENSOR          (LL_ADC_CHANNEL_12 | ADC_CHANNEL_ID_INTERNAL_CH)  /*!< A
 595:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_CHANNEL_VBAT                (LL_ADC_CHANNEL_14 | ADC_CHANNEL_ID_INTERNAL_CH)  /*!< A
 596:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_CHANNEL_DACCH1              (LL_ADC_CHANNEL_17 | ADC_CHANNEL_ID_INTERNAL_CH)  /*!< A
 597:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
 598:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
 599:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 600:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 601:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_TRIGGER_SOURCE  ADC group regular - Trigger source
 602:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
 603:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 604:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_REG_TRIG_SOFTWARE           (0x00000000UL)                                          
 605:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_TRGO2     (                                                       
 606:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_CH4       (                                          ADC_CFGR1_EXT
 607:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM2_TRGO      (                     ADC_CFGR1_EXTSEL_1                
 608:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM2_CH4       (                     ADC_CFGR1_EXTSEL_1 | ADC_CFGR1_EXT
 609:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM2_CH3       (ADC_CFGR1_EXTSEL_2                      | ADC_CFGR1_EXT
 610:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_EXTI_LINE11    (ADC_CFGR1_EXTSEL_2 | ADC_CFGR1_EXTSEL_1 | ADC_CFGR1_EXT
 611:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
 612:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
 613:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 614:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 615:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_TRIGGER_EDGE  ADC group regular - Trigger edge
 616:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
 617:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
ARM GAS  /tmp/ccN8TuGv.s 			page 30


 618:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_RISING         (                    ADC_CFGR1_EXTEN_0) /*!< ADC group r
 619:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_FALLING        (ADC_CFGR1_EXTEN_1                    ) /*!< ADC group r
 620:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_RISINGFALLING  (ADC_CFGR1_EXTEN_1 | ADC_CFGR1_EXTEN_0) /*!< ADC group r
 621:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
 622:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
 623:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 624:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 625:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_CONTINUOUS_MODE  ADC group regular - Continuous mode
 626:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
 627:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 628:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_REG_CONV_SINGLE             (0x00000000UL)          /*!< ADC conversions are perform
 629:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_REG_CONV_CONTINUOUS         (ADC_CFGR1_CONT)        /*!< ADC conversions are perform
 630:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
 631:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
 632:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 633:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 634:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_DMA_TRANSFER  ADC group regular - DMA transfer of ADC conversion data
 635:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
 636:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 637:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_REG_DMA_TRANSFER_NONE       (0x00000000UL)                        /*!< ADC conversio
 638:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_REG_DMA_TRANSFER_LIMITED    (                   ADC_CFGR1_DMAEN)  /*!< ADC conversio
 639:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_REG_DMA_TRANSFER_UNLIMITED  (ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN)  /*!< ADC conversio
 640:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
 641:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
 642:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 643:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 644:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_OVR_DATA_BEHAVIOR  ADC group regular - Overrun behavior on conversion d
 645:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
 646:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 647:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_REG_OVR_DATA_PRESERVED      (0x00000000UL)         /*!< ADC group regular behavior i
 648:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_REG_OVR_DATA_OVERWRITTEN    (ADC_CFGR1_OVRMOD)     /*!< ADC group regular behavior i
 649:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
 650:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
 651:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 652:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 653:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_SEQ_MODE  ADC group regular - Sequencer configuration flexibility
 654:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
 655:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 656:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_REG_SEQ_FIXED               (0x00000000UL)         /*!< Sequencer configured to not 
 657:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_REG_SEQ_CONFIGURABLE        (ADC_CFGR1_CHSELRMOD)  /*!< Sequencer configured to full
 658:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
 659:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
 660:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 661:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 662:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_SEQ_SCAN_LENGTH  ADC group regular - Sequencer scan length
 663:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
 664:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 665:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_DISABLE        (ADC_CHSELR_SQ2)       /*!< ADC group regular sequencer 
 666:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS  (ADC_CHSELR_SQ3)       /*!< ADC group regular sequencer 
 667:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS  (ADC_CHSELR_SQ4)       /*!< ADC group regular sequencer 
 668:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS  (ADC_CHSELR_SQ5)       /*!< ADC group regular sequencer 
 669:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_5RANKS  (ADC_CHSELR_SQ6)       /*!< ADC group regular sequencer 
 670:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS  (ADC_CHSELR_SQ7)       /*!< ADC group regular sequencer 
 671:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_7RANKS  (ADC_CHSELR_SQ8)       /*!< ADC group regular sequencer 
 672:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS  (0x00000000UL)         /*!< ADC group regular sequencer 
 673:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
 674:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
ARM GAS  /tmp/ccN8TuGv.s 			page 31


 675:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 676:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 677:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_SEQ_SCAN_DIRECTION  ADC group regular - Sequencer scan direction
 678:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
 679:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 680:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_DIR_FORWARD    (0x00000000UL)         /*!< On this STM32 series, parame
 681:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD   (ADC_CFGR1_SCANDIR)    /*!< On this STM32 series, parame
 682:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
 683:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
 684:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 685:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 686:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_SEQ_DISCONT_MODE  ADC group regular - Sequencer discontinuous mode
 687:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
 688:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 689:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_DISABLE     (0x00000000UL)                                          
 690:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_1RANK       (ADC_CFGR1_DISCEN)                                      
 691:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
 692:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
 693:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 694:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 695:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_SEQ_RANKS  ADC group regular - Sequencer ranks
 696:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
 697:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 698:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_REG_RANK_1                  (ADC_REG_RANK_1_SQRX_BITOFFSET_POS)  /*!< ADC group regu
 699:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_REG_RANK_2                  (ADC_REG_RANK_2_SQRX_BITOFFSET_POS)  /*!< ADC group regu
 700:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_REG_RANK_3                  (ADC_REG_RANK_3_SQRX_BITOFFSET_POS)  /*!< ADC group regu
 701:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_REG_RANK_4                  (ADC_REG_RANK_4_SQRX_BITOFFSET_POS)  /*!< ADC group regu
 702:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_REG_RANK_5                  (ADC_REG_RANK_5_SQRX_BITOFFSET_POS)  /*!< ADC group regu
 703:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_REG_RANK_6                  (ADC_REG_RANK_6_SQRX_BITOFFSET_POS)  /*!< ADC group regu
 704:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_REG_RANK_7                  (ADC_REG_RANK_7_SQRX_BITOFFSET_POS)  /*!< ADC group regu
 705:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_REG_RANK_8                  (ADC_REG_RANK_8_SQRX_BITOFFSET_POS)  /*!< ADC group regu
 706:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
 707:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
 708:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 709:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 710:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EC_CHANNEL_SAMPLINGTIME  Channel - Sampling time
 711:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
 712:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 713:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_1CYCLE_5       (0x00000000UL)                                        /*
 714:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_3CYCLES_5      (ADC_SMPR_SMP1_0)                                     /*
 715:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_7CYCLES_5      (ADC_SMPR_SMP1_1)                                     /*
 716:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_12CYCLES_5     (ADC_SMPR_SMP1_1 | ADC_SMPR_SMP1_0)                   /*
 717:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_19CYCLES_5     (ADC_SMPR_SMP1_2)                                     /*
 718:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_39CYCLES_5     (ADC_SMPR_SMP1_2 | ADC_SMPR_SMP1_0)                   /*
 719:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_79CYCLES_5     (ADC_SMPR_SMP1_2 | ADC_SMPR_SMP1_1)                   /*
 720:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_160CYCLES_5    (ADC_SMPR_SMP1_2 | ADC_SMPR_SMP1_1 | ADC_SMPR_SMP1_0) /*
 721:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
 722:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
 723:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 724:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 725:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EC_AWD_NUMBER Analog watchdog - Analog watchdog number
 726:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
 727:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 728:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_AWD1                        (ADC_AWD_CR1_CHANNEL_MASK  | ADC_AWD_CR1_REGOFFSET) /*!<
 729:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_AWD2                        (ADC_AWD_CR23_CHANNEL_MASK | ADC_AWD_CR2_REGOFFSET) /*!<
 730:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_AWD3                        (ADC_AWD_CR23_CHANNEL_MASK | ADC_AWD_CR3_REGOFFSET) /*!<
 731:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
ARM GAS  /tmp/ccN8TuGv.s 			page 32


 732:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
 733:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 734:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 735:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EC_AWD_CHANNELS  Analog watchdog - Monitored channels
 736:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
 737:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 738:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_AWD_DISABLE                 (0x00000000UL)                                          
 739:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_AWD_ALL_CHANNELS_REG        (ADC_AWD_CR23_CHANNEL_MASK                         | ADC
 740:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_0_REG           ((LL_ADC_CHANNEL_0  & ADC_CHANNEL_ID_MASK)         | ADC
 741:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_1_REG           ((LL_ADC_CHANNEL_1  & ADC_CHANNEL_ID_MASK)         | ADC
 742:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_2_REG           ((LL_ADC_CHANNEL_2  & ADC_CHANNEL_ID_MASK)         | ADC
 743:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_3_REG           ((LL_ADC_CHANNEL_3  & ADC_CHANNEL_ID_MASK)         | ADC
 744:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_4_REG           ((LL_ADC_CHANNEL_4  & ADC_CHANNEL_ID_MASK)         | ADC
 745:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_5_REG           ((LL_ADC_CHANNEL_5  & ADC_CHANNEL_ID_MASK)         | ADC
 746:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_6_REG           ((LL_ADC_CHANNEL_6  & ADC_CHANNEL_ID_MASK)         | ADC
 747:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_7_REG           ((LL_ADC_CHANNEL_7  & ADC_CHANNEL_ID_MASK)         | ADC
 748:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_8_REG           ((LL_ADC_CHANNEL_8  & ADC_CHANNEL_ID_MASK)         | ADC
 749:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_9_REG           ((LL_ADC_CHANNEL_9  & ADC_CHANNEL_ID_MASK)         | ADC
 750:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_10_REG          ((LL_ADC_CHANNEL_10 & ADC_CHANNEL_ID_MASK)         | ADC
 751:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_11_REG          ((LL_ADC_CHANNEL_11 & ADC_CHANNEL_ID_MASK)         | ADC
 752:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_12_REG          ((LL_ADC_CHANNEL_12 & ADC_CHANNEL_ID_MASK)         | ADC
 753:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_13_REG          ((LL_ADC_CHANNEL_13 & ADC_CHANNEL_ID_MASK)         | ADC
 754:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_14_REG          ((LL_ADC_CHANNEL_14 & ADC_CHANNEL_ID_MASK)         | ADC
 755:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_15_REG          ((LL_ADC_CHANNEL_15 & ADC_CHANNEL_ID_MASK)         | ADC
 756:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_16_REG          ((LL_ADC_CHANNEL_16 & ADC_CHANNEL_ID_MASK)         | ADC
 757:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_17_REG          ((LL_ADC_CHANNEL_17 & ADC_CHANNEL_ID_MASK)         | ADC
 758:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_AWD_CH_VREFINT_REG          ((LL_ADC_CHANNEL_VREFINT    & ADC_CHANNEL_ID_MASK) | ADC
 759:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_AWD_CH_TEMPSENSOR_REG       ((LL_ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_ID_MASK) | ADC
 760:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_AWD_CH_VBAT_REG             ((LL_ADC_CHANNEL_VBAT       & ADC_CHANNEL_ID_MASK) | ADC
 761:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_AWD_CH_DACCH1_REG           ((LL_ADC_CHANNEL_DACCH1     & ADC_CHANNEL_ID_MASK) | ADC
 762:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
 763:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
 764:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 765:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 766:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EC_AWD_THRESHOLDS  Analog watchdog - Thresholds
 767:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
 768:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 769:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_AWD_THRESHOLD_HIGH          (ADC_TR1_HT1              ) /*!< ADC analog watchdog thr
 770:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_AWD_THRESHOLD_LOW           (              ADC_TR1_LT1) /*!< ADC analog watchdog thr
 771:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_AWD_THRESHOLDS_HIGH_LOW     (ADC_TR1_HT1 | ADC_TR1_LT1) /*!< ADC analog watchdog bot
 772:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
 773:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
 774:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 775:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 776:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EC_OVS_SCOPE  Oversampling - Oversampling scope
 777:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
 778:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 779:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_OVS_DISABLE                 (0x00000000UL)                                        /*
 780:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_OVS_GRP_REGULAR_CONTINUED   (                                    ADC_CFGR2_OVSE)  /*
 781:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
 782:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
 783:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 784:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 785:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EC_OVS_DISCONT_MODE  Oversampling - Discontinuous mode
 786:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
 787:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 788:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_OVS_REG_CONT                (0x00000000UL)         /*!< ADC oversampling discontinuo
ARM GAS  /tmp/ccN8TuGv.s 			page 33


 789:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_OVS_REG_DISCONT             (ADC_CFGR2_TOVS)       /*!< ADC oversampling discontinuo
 790:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
 791:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
 792:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 793:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 794:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EC_OVS_RATIO  Oversampling - Ratio
 795:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
 796:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 797:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_OVS_RATIO_2                 (0x00000000UL)                                          
 798:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_OVS_RATIO_4                 (                                      ADC_CFGR2_OVSR_0)
 799:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_OVS_RATIO_8                 (                   ADC_CFGR2_OVSR_1                   )
 800:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_OVS_RATIO_16                (                   ADC_CFGR2_OVSR_1 | ADC_CFGR2_OVSR_0)
 801:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_OVS_RATIO_32                (ADC_CFGR2_OVSR_2                                      )
 802:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_OVS_RATIO_64                (ADC_CFGR2_OVSR_2                    | ADC_CFGR2_OVSR_0)
 803:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_OVS_RATIO_128               (ADC_CFGR2_OVSR_2 | ADC_CFGR2_OVSR_1                   )
 804:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_OVS_RATIO_256               (ADC_CFGR2_OVSR_2 | ADC_CFGR2_OVSR_1 | ADC_CFGR2_OVSR_0)
 805:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
 806:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
 807:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 808:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 809:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EC_OVS_SHIFT  Oversampling - Data shift
 810:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
 811:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 812:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_NONE              (0x00000000UL)                                          
 813:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_1           (                                                       
 814:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_2           (                                      ADC_CFGR2_OVSS_1 
 815:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_3           (                                      ADC_CFGR2_OVSS_1 
 816:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_4           (                   ADC_CFGR2_OVSS_2                    
 817:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_5           (                   ADC_CFGR2_OVSS_2                    
 818:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_6           (                   ADC_CFGR2_OVSS_2 | ADC_CFGR2_OVSS_1 
 819:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_7           (                   ADC_CFGR2_OVSS_2 | ADC_CFGR2_OVSS_1 
 820:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_8           (ADC_CFGR2_OVSS_3                                       
 821:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
 822:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
 823:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 824:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 825:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EC_HELPER_MACRO  Definitions of constants used by helper macro
 826:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
 827:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 828:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_TEMPERATURE_CALC_ERROR     ((int16_t)0x7FFF) /* Temperature calculation error using 
 829:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
 830:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
 831:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 832:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 833:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EC_HW_DELAYS  Definitions of ADC hardware constraints delays
 834:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Only ADC peripheral HW delays are defined in ADC LL driver driver,
 835:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         not timeout values.
 836:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         For details on delays values, refer to descriptions in source code
 837:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         above each literal definition.
 838:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
 839:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 840:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 841:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* Note: Only ADC peripheral HW delays are defined in ADC LL driver driver,   */
 842:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /*       not timeout values.                                                  */
 843:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /*       Timeout values for ADC operations are dependent to device clock      */
 844:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /*       configuration (system clock versus ADC clock),                       */
 845:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /*       and therefore must be defined in user application.                   */
ARM GAS  /tmp/ccN8TuGv.s 			page 34


 846:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /*       Indications for estimation of ADC timeout delays, for this           */
 847:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /*       STM32 series:                                                        */
 848:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /*       - ADC calibration time: maximum delay is 82/fADC.                    */
 849:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /*         (refer to device datasheet, parameter "tCAL")                      */
 850:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /*       - ADC enable time: maximum delay is 1 conversion cycle.              */
 851:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /*         (refer to device datasheet, parameter "tSTAB")                     */
 852:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /*       - ADC disable time: maximum delay should be a few ADC clock cycles   */
 853:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /*       - ADC stop conversion time: maximum delay should be a few ADC clock  */
 854:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /*         cycles                                                             */
 855:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /*       - ADC conversion time: duration depending on ADC clock and ADC       */
 856:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /*         configuration.                                                     */
 857:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /*         (refer to device reference manual, section "Timing")               */
 858:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 859:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* Delay for ADC stabilization time (ADC voltage regulator start-up time)     */
 860:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* Delay set to maximum value (refer to device datasheet,                     */
 861:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* parameter "tADCVREG_STUP").                                                */
 862:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* Unit: us                                                                   */
 863:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_DELAY_INTERNAL_REGUL_STAB_US ( 20UL)  /*!< Delay for ADC stabilization time (ADC vol
 864:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 865:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* Delay for internal voltage reference stabilization time.                   */
 866:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* Delay set to maximum value (refer to device datasheet,                     */
 867:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* parameter "tstart_vrefint").                                               */
 868:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* Unit: us                                                                   */
 869:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_DELAY_VREFINT_STAB_US           ( 12UL)  /*!< Delay for internal voltage reference s
 870:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 871:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* Delay for temperature sensor stabilization time.                           */
 872:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* Literal set to maximum value (refer to device datasheet,                   */
 873:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* parameter "tSTART").                                                       */
 874:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* Unit: us                                                                   */
 875:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_DELAY_TEMPSENSOR_STAB_US        (120UL)  /*!< Delay for temperature sensor stabiliza
 876:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US ( 15UL)  /*!< Delay for temperature sensor buffer st
 877:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 878:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* Delay required between ADC end of calibration and ADC enable.              */
 879:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* Note: On this STM32 series, a minimum number of ADC clock cycles           */
 880:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /*       are required between ADC end of calibration and ADC enable.          */
 881:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /*       Wait time can be computed in user application by waiting for the     */
 882:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /*       equivalent number of CPU cycles, by taking into account              */
 883:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /*       ratio of CPU clock versus ADC clock prescalers.                      */
 884:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* Unit: ADC clock cycles.                                                    */
 885:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_DELAY_CALIB_ENABLE_ADC_CYCLES   (  2UL)  /*!< Delay required between ADC end of cali
 886:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 887:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
 888:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
 889:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 890:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 891:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
 892:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
 893:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 894:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 895:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 896:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* Exported macro ------------------------------------------------------------*/
 897:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_Exported_Macros ADC Exported Macros
 898:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
 899:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 900:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 901:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EM_WRITE_READ Common write and read registers Macros
 902:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
ARM GAS  /tmp/ccN8TuGv.s 			page 35


 903:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 904:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 905:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
 906:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Write a value in ADC register
 907:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  __INSTANCE__ ADC Instance
 908:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  __REG__ Register to be written
 909:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  __VALUE__ Value to be written in the register
 910:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
 911:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 912:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE
 913:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 914:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
 915:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Read a value in ADC register
 916:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  __INSTANCE__ ADC Instance
 917:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  __REG__ Register to be read
 918:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Register value
 919:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 920:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define LL_ADC_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 921:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
 922:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
 923:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 924:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 925:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EM_HELPER_MACRO ADC helper macro
 926:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
 927:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 928:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 929:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
 930:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Helper macro to get ADC channel number in decimal format
 931:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         from literals LL_ADC_CHANNEL_x.
 932:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Example:
 933:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           __LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_CHANNEL_4)
 934:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           will return decimal number "4".
 935:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   The input can be a value from functions where a channel
 936:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         number is returned, either defined with number
 937:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         or with bitfield (only one bit must be set).
 938:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
 939:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
 940:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
 941:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
 942:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
 943:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
 944:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
 945:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
 946:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
 947:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
 948:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
 949:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
 950:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
 951:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
 952:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
 953:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
 954:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15         (1)
 955:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16         (1)
 956:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17         (1)
 957:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT
 958:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR
 959:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT
ARM GAS  /tmp/ccN8TuGv.s 			page 36


 960:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DACCH1
 961:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *
 962:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (1) On STM32WL, parameter can be set in ADC group sequencer
 963:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             only if sequencer is set in mode "not fully configurable",
 964:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
 965:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Value between Min_Data=0 and Max_Data=18
 966:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
 967:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #if defined(CORE_CM0PLUS)
 968:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define __LL_ADC_CHANNEL_TO_DECIMAL_NB(__CHANNEL__)                                                
 969:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   ((((__CHANNEL__) & ADC_CHANNEL_ID_BITFIELD_MASK) == 0UL) ?                                       
 970:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****    (                                                                                               
 971:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****        ((__CHANNEL__) & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS         
 972:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****    )                                                                                               
 973:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****    :                                                                                               
 974:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****    ((((__CHANNEL__) & ADC_CHANNEL_0_BITFIELD) == ADC_CHANNEL_0_BITFIELD) ? (0UL) :                 
 975:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****     ((((__CHANNEL__) & ADC_CHANNEL_1_BITFIELD) == ADC_CHANNEL_1_BITFIELD) ? (1UL) :                
 976:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****      ((((__CHANNEL__) & ADC_CHANNEL_2_BITFIELD) == ADC_CHANNEL_2_BITFIELD) ? (2UL) :               
 977:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****       ((((__CHANNEL__) & ADC_CHANNEL_3_BITFIELD) == ADC_CHANNEL_3_BITFIELD) ? (3UL) :              
 978:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****        ((((__CHANNEL__) & ADC_CHANNEL_4_BITFIELD) == ADC_CHANNEL_4_BITFIELD) ? (4UL) :             
 979:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****         ((((__CHANNEL__) & ADC_CHANNEL_5_BITFIELD) == ADC_CHANNEL_5_BITFIELD) ? (5UL) :            
 980:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****          ((((__CHANNEL__) & ADC_CHANNEL_6_BITFIELD) == ADC_CHANNEL_6_BITFIELD) ? (6UL) :           
 981:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****           ((((__CHANNEL__) & ADC_CHANNEL_7_BITFIELD) == ADC_CHANNEL_7_BITFIELD) ? (7UL) :          
 982:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****            ((((__CHANNEL__) & ADC_CHANNEL_8_BITFIELD) == ADC_CHANNEL_8_BITFIELD) ? (8UL) :         
 983:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****             ((((__CHANNEL__) & ADC_CHANNEL_9_BITFIELD) == ADC_CHANNEL_9_BITFIELD) ? (9UL) :        
 984:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              ((((__CHANNEL__) & ADC_CHANNEL_10_BITFIELD) == ADC_CHANNEL_10_BITFIELD) ? (10UL) :    
 985:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****               ((((__CHANNEL__) & ADC_CHANNEL_11_BITFIELD) == ADC_CHANNEL_11_BITFIELD) ? (11UL) :   
 986:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                ((((__CHANNEL__) & ADC_CHANNEL_12_BITFIELD) == ADC_CHANNEL_12_BITFIELD) ? (12UL) :  
 987:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                 ((((__CHANNEL__) & ADC_CHANNEL_13_BITFIELD) == ADC_CHANNEL_13_BITFIELD) ? (13UL) : 
 988:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                  ((((__CHANNEL__) & ADC_CHANNEL_14_BITFIELD) == ADC_CHANNEL_14_BITFIELD) ? (14UL) :
 989:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                   ((((__CHANNEL__) & ADC_CHANNEL_15_BITFIELD) == ADC_CHANNEL_15_BITFIELD) ? (15UL) 
 990:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                    ((((__CHANNEL__) & ADC_CHANNEL_16_BITFIELD) == ADC_CHANNEL_16_BITFIELD) ? (16UL)
 991:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                     ((((__CHANNEL__) & ADC_CHANNEL_17_BITFIELD) == ADC_CHANNEL_17_BITFIELD) ? (17UL
 992:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                      (0UL))))))))))))))))))))
 993:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 994:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #else
 995:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define __LL_ADC_CHANNEL_TO_DECIMAL_NB(__CHANNEL__)                                        \
 996:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   ((((__CHANNEL__) & ADC_CHANNEL_ID_BITFIELD_MASK) == 0UL) ?                               \
 997:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****    (                                                                                       \
 998:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****        ((__CHANNEL__) & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS \
 999:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****    )                                                                                       \
1000:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****    :                                                                                       \
1001:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****    (                                                                                       \
1002:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****        (uint32_t)POSITION_VAL((__CHANNEL__))                                               \
1003:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****    )                                                                                       \
1004:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   )
1005:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #endif /* CORE_CM0PLUS */
1006:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
1007:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
1008:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Helper macro to get ADC channel in literal format LL_ADC_CHANNEL_x
1009:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         from number in decimal format.
1010:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Example:
1011:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           __LL_ADC_DECIMAL_NB_TO_CHANNEL(4)
1012:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           will return a data equivalent to "LL_ADC_CHANNEL_4".
1013:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  __DECIMAL_NB__ Value between Min_Data=0 and Max_Data=18
1014:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1015:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
1016:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
ARM GAS  /tmp/ccN8TuGv.s 			page 37


1017:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
1018:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
1019:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
1020:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
1021:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1022:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1023:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1024:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1025:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1026:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1027:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1028:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1029:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1030:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15         (1)
1031:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16         (1)
1032:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17         (1)
1033:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT    (2)
1034:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR (2)
1035:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT       (2)
1036:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DACCH1     (2)
1037:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *
1038:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (1) On STM32WL, parameter can be set in ADC group sequencer
1039:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             only if sequencer is set in mode "not fully configurable",
1040:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().\n
1041:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (2) For ADC channel read back from ADC register,
1042:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             comparison with internal channel parameter to be done
1043:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
1044:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
1045:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define __LL_ADC_DECIMAL_NB_TO_CHANNEL(__DECIMAL_NB__)                         \
1046:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   (((__DECIMAL_NB__) << ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) |                 \
1047:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****    (ADC_CHSELR_CHSEL0 << (__DECIMAL_NB__)))
1048:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
1049:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
1050:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Helper macro to determine whether the selected channel
1051:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         corresponds to literal definitions of driver.
1052:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   The different literal definitions of ADC channels are:
1053:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - ADC internal channel:
1054:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           LL_ADC_CHANNEL_VREFINT, LL_ADC_CHANNEL_TEMPSENSOR, ...
1055:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - ADC external channel (channel connected to a GPIO pin):
1056:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...
1057:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   The channel parameter must be a value defined from literal
1058:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         definition of a ADC internal channel (LL_ADC_CHANNEL_VREFINT,
1059:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         LL_ADC_CHANNEL_TEMPSENSOR, ...),
1060:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC external channel (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...),
1061:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         must not be a value from functions where a channel number is
1062:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         returned from ADC registers,
1063:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         because internal and external channels share the same channel
1064:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         number in ADC registers. The differentiation is made only with
1065:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         parameters definitions of driver.
1066:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1067:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
1068:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
1069:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
1070:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
1071:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
1072:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
1073:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
ARM GAS  /tmp/ccN8TuGv.s 			page 38


1074:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1075:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1076:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1077:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1078:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1079:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1080:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1081:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1082:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15         (1)
1083:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16         (1)
1084:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17         (1)
1085:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT
1086:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR
1087:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT
1088:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DACCH1
1089:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *
1090:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (1) On STM32WL, parameter can be set in ADC group sequencer
1091:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             only if sequencer is set in mode "not fully configurable",
1092:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
1093:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Value "0" if the channel corresponds to a parameter definition of a ADC external channe
1094:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Value "1" if the channel corresponds to a parameter definition of a ADC internal channe
1095:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
1096:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define __LL_ADC_IS_CHANNEL_INTERNAL(__CHANNEL__)                              \
1097:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   (((__CHANNEL__) & ADC_CHANNEL_ID_INTERNAL_CH_MASK) != 0UL)
1098:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
1099:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
1100:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Helper macro to convert a channel defined from parameter
1101:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         definition of a ADC internal channel (LL_ADC_CHANNEL_VREFINT,
1102:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         LL_ADC_CHANNEL_TEMPSENSOR, ...),
1103:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         to its equivalent parameter definition of a ADC external channel
1104:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...).
1105:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   The channel parameter can be, additionally to a value
1106:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         defined from parameter definition of a ADC internal channel
1107:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (LL_ADC_CHANNEL_VREFINT, LL_ADC_CHANNEL_TEMPSENSOR, ...),
1108:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         a value defined from parameter definition of
1109:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC external channel (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...)
1110:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         or a value from functions where a channel number is returned
1111:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         from ADC registers.
1112:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1113:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
1114:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
1115:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
1116:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
1117:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
1118:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
1119:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1120:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1121:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1122:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1123:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1124:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1125:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1126:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1127:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1128:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15         (1)
1129:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16         (1)
1130:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17         (1)
ARM GAS  /tmp/ccN8TuGv.s 			page 39


1131:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT
1132:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR
1133:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT
1134:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DACCH1
1135:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *
1136:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (1) On STM32WL, parameter can be set in ADC group sequencer
1137:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             only if sequencer is set in mode "not fully configurable",
1138:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
1139:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1140:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
1141:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
1142:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
1143:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
1144:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
1145:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
1146:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1147:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1148:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1149:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1150:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1151:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1152:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1153:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1154:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1155:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1156:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1157:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1158:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
1159:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL(__CHANNEL__)                     \
1160:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   ((__CHANNEL__) & ~ADC_CHANNEL_ID_INTERNAL_CH_MASK)
1161:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
1162:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
1163:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Helper macro to determine whether the internal channel
1164:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         selected is available on the ADC instance selected.
1165:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   The channel parameter must be a value defined from parameter
1166:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         definition of a ADC internal channel (LL_ADC_CHANNEL_VREFINT,
1167:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         LL_ADC_CHANNEL_TEMPSENSOR, ...),
1168:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         must not be a value defined from parameter definition of
1169:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC external channel (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...)
1170:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         or a value from functions where a channel number is
1171:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         returned from ADC registers,
1172:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         because internal and external channels share the same channel
1173:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         number in ADC registers. The differentiation is made only with
1174:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         parameters definitions of driver.
1175:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  __ADC_INSTANCE__ ADC instance
1176:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1177:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT
1178:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR
1179:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT
1180:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DACCH1
1181:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Value "0" if the internal channel selected is not available on the ADC instance selecte
1182:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Value "1" if the internal channel selected is available on the ADC instance selected.
1183:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
1184:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define __LL_ADC_IS_CHANNEL_INTERNAL_AVAILABLE(__ADC_INSTANCE__, __CHANNEL__)  \
1185:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   (((__CHANNEL__) == LL_ADC_CHANNEL_VREFINT)    ||                             \
1186:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****    ((__CHANNEL__) == LL_ADC_CHANNEL_TEMPSENSOR) ||                             \
1187:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****    ((__CHANNEL__) == LL_ADC_CHANNEL_VBAT))
ARM GAS  /tmp/ccN8TuGv.s 			page 40


1188:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
1189:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
1190:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Helper macro to define ADC analog watchdog parameter:
1191:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         define a single channel to monitor with analog watchdog
1192:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         from sequencer channel and groups definition.
1193:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_SetAnalogWDMonitChannels().
1194:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Example:
1195:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           LL_ADC_SetAnalogWDMonitChannels(
1196:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             ADC1, LL_ADC_AWD1,
1197:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             __LL_ADC_ANALOGWD_CHANNEL_GROUP(LL_ADC_CHANNEL4, LL_ADC_GROUP_REGULAR))
1198:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1199:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
1200:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
1201:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
1202:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
1203:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
1204:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
1205:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1206:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1207:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1208:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1209:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1210:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1211:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1212:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1213:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1214:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15         (1)
1215:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16         (1)
1216:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17         (1)
1217:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT    (2)
1218:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR (2)
1219:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT       (2)
1220:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DACCH1     (2)
1221:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *
1222:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (1) On STM32WL, parameter can be set in ADC group sequencer
1223:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             only if sequencer is set in mode "not fully configurable",
1224:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().\n
1225:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (2) For ADC channel read back from ADC register,
1226:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             comparison with internal channel parameter to be done
1227:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
1228:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  __GROUP__ This parameter can be one of the following values:
1229:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_GROUP_REGULAR
1230:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1231:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_DISABLE
1232:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG
1233:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG
1234:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG
1235:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG
1236:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG
1237:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG
1238:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG
1239:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG
1240:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG
1241:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG
1242:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG
1243:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG
1244:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG
ARM GAS  /tmp/ccN8TuGv.s 			page 41


1245:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG
1246:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG
1247:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG
1248:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG
1249:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG
1250:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG
1251:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_REG
1252:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_REG
1253:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_REG
1254:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DACCH1_REG
1255:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
1256:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define __LL_ADC_ANALOGWD_CHANNEL_GROUP(__CHANNEL__, __GROUP__)                                    
1257:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   (((__CHANNEL__) & ADC_CHANNEL_ID_MASK) | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL)
1258:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
1259:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
1260:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Helper macro to set the value of ADC analog watchdog threshold high
1261:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         or low in function of ADC resolution, when ADC resolution is
1262:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         different of 12 bits.
1263:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_ConfigAnalogWDThresholds()
1264:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         or @ref LL_ADC_SetAnalogWDThresholds().
1265:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Example, with a ADC resolution of 8 bits, to set the value of
1266:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         analog watchdog threshold high (on 8 bits):
1267:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           LL_ADC_SetAnalogWDThresholds
1268:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *            (< ADCx param >,
1269:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION(LL_ADC_RESOLUTION_8B, <threshold_value_8
1270:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *            );
1271:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
1272:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
1273:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
1274:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
1275:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
1276:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  __AWD_THRESHOLD__ Value between Min_Data=0x000 and Max_Data=0xFFF
1277:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
1278:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
1279:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION(__ADC_RESOLUTION__, __AWD_THRESHOLD__) \
1280:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   ((__AWD_THRESHOLD__) << ((__ADC_RESOLUTION__) >> (ADC_CFGR1_RES_BITOFFSET_POS - 1U )))
1281:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
1282:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
1283:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Helper macro to get the value of ADC analog watchdog threshold high
1284:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         or low in function of ADC resolution, when ADC resolution is
1285:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         different of 12 bits.
1286:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_GetAnalogWDThresholds().
1287:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Example, with a ADC resolution of 8 bits, to get the value of
1288:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         analog watchdog threshold high (on 8 bits):
1289:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           < threshold_value_6_bits > = __LL_ADC_ANALOGWD_GET_THRESHOLD_RESOLUTION
1290:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *            (LL_ADC_RESOLUTION_8B,
1291:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             LL_ADC_GetAnalogWDThresholds(<ADCx param>, LL_ADC_AWD_THRESHOLD_HIGH)
1292:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *            );
1293:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
1294:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
1295:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
1296:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
1297:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
1298:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  __AWD_THRESHOLD_12_BITS__ Value between Min_Data=0x000 and Max_Data=0xFFF
1299:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
1300:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
1301:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define __LL_ADC_ANALOGWD_GET_THRESHOLD_RESOLUTION(__ADC_RESOLUTION__, __AWD_THRESHOLD_12_BITS__) \
ARM GAS  /tmp/ccN8TuGv.s 			page 42


1302:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   ((__AWD_THRESHOLD_12_BITS__) >> ((__ADC_RESOLUTION__) >> (ADC_CFGR1_RES_BITOFFSET_POS - 1U )))
1303:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
1304:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
1305:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Helper macro to get the ADC analog watchdog threshold high
1306:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         or low from raw value containing both thresholds concatenated.
1307:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_GetAnalogWDThresholds().
1308:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Example, to get analog watchdog threshold high from the register raw value:
1309:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           __LL_ADC_ANALOGWD_THRESHOLDS_HIGH_LOW(LL_ADC_AWD_THRESHOLD_HIGH, <raw_value_with_both
1310:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  __AWD_THRESHOLD_TYPE__ This parameter can be one of the following values:
1311:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_HIGH
1312:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_LOW
1313:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  __AWD_THRESHOLDS__ Value between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
1314:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
1315:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
1316:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define __LL_ADC_ANALOGWD_THRESHOLDS_HIGH_LOW(__AWD_THRESHOLD_TYPE__, __AWD_THRESHOLDS__)       \
1317:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   (((__AWD_THRESHOLDS__) >> (((__AWD_THRESHOLD_TYPE__) & ADC_AWD_TRX_BIT_HIGH_MASK) >> ADC_AWD_TRX_
1318:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
1319:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
1320:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Helper macro to select the ADC common instance
1321:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         to which is belonging the selected ADC instance.
1322:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   ADC common register instance can be used for:
1323:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - Set parameters common to several ADC instances
1324:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - Multimode (for devices with several ADC instances)
1325:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to functions having argument "ADCxy_COMMON" as parameter.
1326:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  __ADCx__ ADC instance
1327:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval ADC common register instance
1328:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
1329:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define __LL_ADC_COMMON_INSTANCE(__ADCx__)                                     \
1330:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   (ADC_COMMON)
1331:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
1332:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
1333:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Helper macro to check if all ADC instances sharing the same
1334:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC common instance are disabled.
1335:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   This check is required by functions with setting conditioned to
1336:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC state:
1337:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
1338:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to functions having argument "ADCxy_COMMON" as parameter.
1339:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On devices with only 1 ADC common instance, parameter of this macro
1340:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         is useless and can be ignored (parameter kept for compatibility
1341:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         with devices featuring several ADC common instances).
1342:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  __ADCXY_COMMON__ ADC common instance
1343:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
1344:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Value "0" if all ADC instances sharing the same ADC common instance
1345:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         are disabled.
1346:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Value "1" if at least one ADC instance sharing the same ADC common instance
1347:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         is enabled.
1348:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
1349:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__ADCXY_COMMON__)              \
1350:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   LL_ADC_IsEnabled(ADC)
1351:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
1352:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
1353:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Helper macro to define the ADC conversion data full-scale digital
1354:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         value corresponding to the selected ADC resolution.
1355:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   ADC conversion data full-scale corresponds to voltage range
1356:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         determined by analog voltage references Vref+ and Vref-
1357:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (refer to reference manual).
1358:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
ARM GAS  /tmp/ccN8TuGv.s 			page 43


1359:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
1360:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
1361:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
1362:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
1363:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval ADC conversion data full-scale digital value (unit: digital value of ADC conversion dat
1364:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
1365:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define __LL_ADC_DIGITAL_SCALE(__ADC_RESOLUTION__)                             \
1366:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   (0xFFFUL >> ((__ADC_RESOLUTION__) >> (ADC_CFGR1_RES_BITOFFSET_POS - 1UL)))
1367:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
1368:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
1369:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Helper macro to convert the ADC conversion data from
1370:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         a resolution to another resolution.
1371:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  __DATA__ ADC conversion data to be converted
1372:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  __ADC_RESOLUTION_CURRENT__ Resolution of the data to be converted
1373:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         This parameter can be one of the following values:
1374:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
1375:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
1376:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
1377:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
1378:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  __ADC_RESOLUTION_TARGET__ Resolution of the data after conversion
1379:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         This parameter can be one of the following values:
1380:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
1381:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
1382:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
1383:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
1384:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval ADC conversion data to the requested resolution
1385:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
1386:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define __LL_ADC_CONVERT_DATA_RESOLUTION(__DATA__,\
1387:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                          __ADC_RESOLUTION_CURRENT__,\
1388:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                          __ADC_RESOLUTION_TARGET__)          \
1389:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** (((__DATA__)                                                                 \
1390:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   << ((__ADC_RESOLUTION_CURRENT__) >> (ADC_CFGR1_RES_BITOFFSET_POS - 1UL)))  \
1391:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****  >> ((__ADC_RESOLUTION_TARGET__) >> (ADC_CFGR1_RES_BITOFFSET_POS - 1UL))     \
1392:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** )
1393:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
1394:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
1395:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Helper macro to calculate the voltage (unit: mVolt)
1396:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         corresponding to a ADC conversion data (unit: digital value).
1397:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Analog reference voltage (Vref+) must be either known from
1398:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         user board environment or can be calculated using ADC measurement
1399:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         and ADC helper macro @ref __LL_ADC_CALC_VREFANALOG_VOLTAGE().
1400:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  __VREFANALOG_VOLTAGE__ Analog reference voltage (unit: mV)
1401:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  __ADC_DATA__ ADC conversion data (resolution 12 bits)
1402:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *                       (unit: digital value).
1403:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
1404:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
1405:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
1406:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
1407:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
1408:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval ADC conversion data equivalent voltage value (unit: mVolt)
1409:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
1410:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define __LL_ADC_CALC_DATA_TO_VOLTAGE(__VREFANALOG_VOLTAGE__,\
1411:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                       __ADC_DATA__,\
1412:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                       __ADC_RESOLUTION__)                    \
1413:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** ((__ADC_DATA__) * (__VREFANALOG_VOLTAGE__)                                   \
1414:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****  / __LL_ADC_DIGITAL_SCALE(__ADC_RESOLUTION__)                                \
1415:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** )
ARM GAS  /tmp/ccN8TuGv.s 			page 44


1416:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
1417:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
1418:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Helper macro to calculate analog reference voltage (Vref+)
1419:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (unit: mVolt) from ADC conversion data of internal voltage
1420:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         reference VrefInt.
1421:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Computation is using VrefInt calibration value
1422:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         stored in system memory for each device during production.
1423:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   This voltage depends on user board environment: voltage level
1424:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         connected to pin Vref+.
1425:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         On devices with small package, the pin Vref+ is not present
1426:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         and internally bonded to pin Vdda.
1427:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, calibration data of internal voltage reference
1428:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         VrefInt corresponds to a resolution of 12 bits,
1429:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         this is the recommended ADC resolution to convert voltage of
1430:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         internal voltage reference VrefInt.
1431:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Otherwise, this macro performs the processing to scale
1432:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC conversion data to 12 bits.
1433:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  __VREFINT_ADC_DATA__ ADC conversion data (resolution 12 bits)
1434:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         of internal voltage reference VrefInt (unit: digital value).
1435:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
1436:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
1437:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
1438:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
1439:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
1440:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Analog reference voltage (unit: mV)
1441:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
1442:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define __LL_ADC_CALC_VREFANALOG_VOLTAGE(__VREFINT_ADC_DATA__,\
1443:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                          __ADC_RESOLUTION__)                 \
1444:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** (((uint32_t)(*VREFINT_CAL_ADDR) * VREFINT_CAL_VREF)                          \
1445:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****  / __LL_ADC_CONVERT_DATA_RESOLUTION((__VREFINT_ADC_DATA__),                  \
1446:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                     (__ADC_RESOLUTION__),                    \
1447:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                     LL_ADC_RESOLUTION_12B)                   \
1448:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** )
1449:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
1450:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
1451:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Helper macro to calculate the temperature (unit: degree Celsius)
1452:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         from ADC conversion data of internal temperature sensor.
1453:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Computation is using temperature sensor calibration values
1454:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         stored in system memory for each device during production.
1455:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Calculation formula:
1456:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           Temperature = ((TS_ADC_DATA - TS_CAL1)
1457:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *                           * (TS_CAL2_TEMP - TS_CAL1_TEMP))
1458:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *                         / (TS_CAL2 - TS_CAL1) + TS_CAL1_TEMP
1459:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           with TS_ADC_DATA = temperature sensor raw data measured by ADC
1460:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *                Avg_Slope = (TS_CAL2 - TS_CAL1)
1461:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *                            / (TS_CAL2_TEMP - TS_CAL1_TEMP)
1462:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *                TS_CAL1   = equivalent TS_ADC_DATA at temperature
1463:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *                            TEMP_DEGC_CAL1 (calibrated in factory)
1464:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *                TS_CAL2   = equivalent TS_ADC_DATA at temperature
1465:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *                            TEMP_DEGC_CAL2 (calibrated in factory)
1466:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Caution: Calculation relevancy under reserve that calibration
1467:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *                  parameters are correct (address and data).
1468:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *                  To calculate temperature using temperature sensor
1469:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *                  datasheet typical values (generic values less, therefore
1470:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *                  less accurate than calibrated values),
1471:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *                  use helper macro @ref __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS().
1472:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   As calculation input, the analog reference voltage (Vref+) must be
ARM GAS  /tmp/ccN8TuGv.s 			page 45


1473:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         defined as it impacts the ADC LSB equivalent voltage.
1474:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Analog reference voltage (Vref+) must be either known from
1475:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         user board environment or can be calculated using ADC measurement
1476:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         and ADC helper macro @ref __LL_ADC_CALC_VREFANALOG_VOLTAGE().
1477:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, calibration data of temperature sensor
1478:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         corresponds to a resolution of 12 bits,
1479:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         this is the recommended ADC resolution to convert voltage of
1480:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         temperature sensor.
1481:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Otherwise, this macro performs the processing to scale
1482:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC conversion data to 12 bits.
1483:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  __VREFANALOG_VOLTAGE__  Analog reference voltage (unit: mV)
1484:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  __TEMPSENSOR_ADC_DATA__ ADC conversion data of internal
1485:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *                                 temperature sensor (unit: digital value).
1486:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  __ADC_RESOLUTION__      ADC resolution at which internal temperature
1487:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *                                 sensor voltage has been measured.
1488:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         This parameter can be one of the following values:
1489:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
1490:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
1491:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
1492:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
1493:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Temperature (unit: degree Celsius)
1494:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         In case or error, value LL_ADC_TEMPERATURE_CALC_ERROR is returned (inconsistent tempera
1495:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
1496:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define __LL_ADC_CALC_TEMPERATURE(__VREFANALOG_VOLTAGE__,\
1497:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                   __TEMPSENSOR_ADC_DATA__,\
1498:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                   __ADC_RESOLUTION__)\
1499:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** ((((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0) ?        \
1500:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   (((( ((int32_t)((__LL_ADC_CONVERT_DATA_RESOLUTION((__TEMPSENSOR_ADC_DATA__),     \
1501:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                                     (__ADC_RESOLUTION__),          \
1502:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                                     LL_ADC_RESOLUTION_12B)         \
1503:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                    * (__VREFANALOG_VOLTAGE__))                                     \
1504:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                   / TEMPSENSOR_CAL_VREFANALOG)                                     \
1505:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****         - (int32_t) *TEMPSENSOR_CAL1_ADDR)                                         \
1506:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****      ) * (int32_t)(TEMPSENSOR_CAL2_TEMP - TEMPSENSOR_CAL1_TEMP)                    \
1507:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****     ) / (int32_t)((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) \
1508:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****    ) + TEMPSENSOR_CAL1_TEMP                                                        \
1509:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   )                                                                                \
1510:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   :                                                                                \
1511:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   ((int32_t)LL_ADC_TEMPERATURE_CALC_ERROR)                                         \
1512:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** )
1513:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
1514:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
1515:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Helper macro to calculate the temperature (unit: degree Celsius)
1516:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         from ADC conversion data of internal temperature sensor.
1517:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Computation is using temperature sensor typical values
1518:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (refer to device datasheet).
1519:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Calculation formula:
1520:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           Temperature = (TS_TYP_CALx_VOLT(uV) - TS_ADC_DATA * Conversion_uV)
1521:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *                         / Avg_Slope + CALx_TEMP
1522:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           with TS_ADC_DATA      = temperature sensor raw data measured by ADC
1523:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *                                   (unit: digital value)
1524:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *                Avg_Slope        = temperature sensor slope
1525:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *                                   (unit: uV/Degree Celsius)
1526:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *                TS_TYP_CALx_VOLT = temperature sensor digital value at
1527:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *                                   temperature CALx_TEMP (unit: mV)
1528:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Caution: Calculation relevancy under reserve the temperature sensor
1529:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *                  of the current device has characteristics in line with
ARM GAS  /tmp/ccN8TuGv.s 			page 46


1530:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *                  datasheet typical values.
1531:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *                  If temperature sensor calibration values are available on
1532:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *                  on this device (presence of macro __LL_ADC_CALC_TEMPERATURE()),
1533:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *                  temperature calculation will be more accurate using
1534:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *                  helper macro @ref __LL_ADC_CALC_TEMPERATURE().
1535:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   As calculation input, the analog reference voltage (Vref+) must be
1536:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         defined as it impacts the ADC LSB equivalent voltage.
1537:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Analog reference voltage (Vref+) must be either known from
1538:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         user board environment or can be calculated using ADC measurement
1539:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         and ADC helper macro @ref __LL_ADC_CALC_VREFANALOG_VOLTAGE().
1540:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   ADC measurement data must correspond to a resolution of 12 bits
1541:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (full scale digital value 4095). If not the case, the data must be
1542:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         preliminarily rescaled to an equivalent resolution of 12 bits.
1543:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  __TEMPSENSOR_TYP_AVGSLOPE__   Device datasheet data: Temperature sensor slope typical v
1544:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *                                       On STM32WL, refer to device datasheet parameter "Avg_Slop
1545:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  __TEMPSENSOR_TYP_CALX_V__     Device datasheet data: Temperature sensor voltage typical
1546:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *                                       On STM32WL, refer to device datasheet parameter "V30" (co
1547:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  __TEMPSENSOR_CALX_TEMP__      Device datasheet data: Temperature at which temperature s
1548:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  __VREFANALOG_VOLTAGE__        Analog voltage reference (Vref+) voltage (unit: mV)
1549:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  __TEMPSENSOR_ADC_DATA__       ADC conversion data of internal temperature sensor (unit:
1550:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  __ADC_RESOLUTION__            ADC resolution at which internal temperature sensor volta
1551:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         This parameter can be one of the following values:
1552:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
1553:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
1554:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
1555:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
1556:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Temperature (unit: degree Celsius)
1557:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
1558:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** #define __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(__TEMPSENSOR_TYP_AVGSLOPE__,\
1559:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                              __TEMPSENSOR_TYP_CALX_V__,\
1560:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                              __TEMPSENSOR_CALX_TEMP__,\
1561:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                              __VREFANALOG_VOLTAGE__,\
1562:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                              __TEMPSENSOR_ADC_DATA__,\
1563:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                              __ADC_RESOLUTION__)            \
1564:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** (((((int32_t)((((__TEMPSENSOR_ADC_DATA__) * (__VREFANALOG_VOLTAGE__))       \
1565:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                / __LL_ADC_DIGITAL_SCALE(__ADC_RESOLUTION__))                \
1566:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****               * 1000UL)                                                     \
1567:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****     -                                                                       \
1568:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****     (int32_t)(((__TEMPSENSOR_TYP_CALX_V__))                                 \
1569:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****               * 1000UL)                                                     \
1570:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****    )                                                                        \
1571:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   ) / (int32_t)(__TEMPSENSOR_TYP_AVGSLOPE__)                                \
1572:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****  ) + (int32_t)(__TEMPSENSOR_CALX_TEMP__)                                    \
1573:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** )
1574:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
1575:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
1576:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
1577:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
1578:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
1579:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
1580:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
1581:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
1582:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
1583:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
1584:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* Exported functions --------------------------------------------------------*/
1585:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_Exported_Functions ADC Exported Functions
1586:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
ARM GAS  /tmp/ccN8TuGv.s 			page 47


1587:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
1588:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
1589:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EF_DMA_Management ADC DMA management
1590:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
1591:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
1592:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /* Note: LL ADC functions to set DMA transfer are located into sections of    */
1593:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /*       configuration of ADC instance, groups and multimode (if available):  */
1594:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /*       @ref LL_ADC_REG_SetDMATransfer(), ...                                */
1595:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
1596:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
1597:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Function to help to configure DMA transfer from ADC: retrieve the
1598:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC register address from ADC instance and a list of ADC registers
1599:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         intended to be used (most commonly) with DMA transfer.
1600:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   These ADC registers are data registers:
1601:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         when ADC conversion data is available in ADC data registers,
1602:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC generates a DMA transfer request.
1603:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   This macro is intended to be used with LL DMA driver, refer to
1604:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         function "LL_DMA_ConfigAddresses()".
1605:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Example:
1606:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           LL_DMA_ConfigAddresses(DMA1,
1607:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *                                  LL_DMA_CHANNEL_1,
1608:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *                                  LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA),
1609:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *                                  (uint32_t)&< array or variable >,
1610:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *                                  LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
1611:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   For devices with several ADC: in multimode, some devices
1612:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         use a different data register outside of ADC instance scope
1613:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (common data register). This macro manages this register difference,
1614:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         only ADC instance has to be set as parameter.
1615:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll DR       DATA           LL_ADC_DMA_GetRegAddr
1616:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
1617:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  Register This parameter can be one of the following values:
1618:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_DMA_REG_REGULAR_DATA
1619:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval ADC register address
1620:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
1621:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
1622:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
1623:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* Prevent unused argument(s) compilation warning */
1624:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   (void)(Register);
1625:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
1626:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* Retrieve address of register DR */
1627:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return (uint32_t) &(ADCx->DR);
1628:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
1629:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
1630:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
1631:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
1632:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
1633:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
1634:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Common Configuration of ADC hierarchical scope: common to
1635:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
1636:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
1637:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
1638:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
1639:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Set parameter common to several ADC: Clock source and prescaler.
1640:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
1641:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC state:
1642:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
1643:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         This check can be done with function @ref LL_ADC_IsEnabled() for each
ARM GAS  /tmp/ccN8TuGv.s 			page 48


1644:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC instance or by using helper macro helper macro
1645:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @ref __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE().
1646:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CCR      PRESC          LL_ADC_SetCommonClock
1647:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
1648:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
1649:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  CommonClock This parameter can be one of the following values:
1650:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV1   (1)
1651:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV2   (1)
1652:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV4   (1)
1653:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV6   (1)
1654:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV8   (1)
1655:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV10  (1)
1656:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV12  (1)
1657:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV16  (1)
1658:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV32  (1)
1659:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV64  (1)
1660:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128 (1)
1661:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256 (1)
1662:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *
1663:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (1) ADC common clock asynchronous prescaler is applied to
1664:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             each ADC instance if the corresponding ADC instance clock
1665:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             is set to clock source asynchronous.
1666:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             (refer to function @ref LL_ADC_SetClock() ).
1667:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
1668:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
1669:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
1670:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
1671:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
1672:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
1673:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
1674:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
1675:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get parameter common to several ADC: Clock source and prescaler.
1676:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CCR      PRESC          LL_ADC_GetCommonClock
1677:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
1678:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
1679:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1680:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV1   (1)
1681:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV2   (1)
1682:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV4   (1)
1683:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV6   (1)
1684:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV8   (1)
1685:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV10  (1)
1686:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV12  (1)
1687:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV16  (1)
1688:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV32  (1)
1689:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV64  (1)
1690:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128 (1)
1691:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256 (1)
1692:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *
1693:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (1) ADC common clock asynchronous prescaler is applied to
1694:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             each ADC instance if the corresponding ADC instance clock
1695:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             is set to clock source asynchronous.
1696:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             (refer to function @ref LL_ADC_SetClock() ).
1697:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
1698:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON)
1699:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
1700:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
ARM GAS  /tmp/ccN8TuGv.s 			page 49


1701:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
1702:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
1703:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
1704:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Set parameter common to several ADC: measurement path to
1705:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         internal channels (VrefInt, temperature sensor, ...).
1706:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Configure all paths (overwrite current configuration).
1707:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   One or several values can be selected.
1708:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Example: (LL_ADC_PATH_INTERNAL_VREFINT |
1709:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *                   LL_ADC_PATH_INTERNAL_TEMPSENSOR)
1710:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         The values not selected are removed from configuration.
1711:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Stabilization time of measurement path to internal channel:
1712:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         After enabling internal paths, before starting ADC conversion,
1713:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         a delay is required for internal voltage reference and
1714:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         temperature sensor stabilization time.
1715:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to device datasheet.
1716:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_VREFINT_STAB_US.
1717:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to literals @ref LL_ADC_DELAY_TEMPSENSOR_STAB_US,
1718:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @ref LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US.
1719:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   ADC internal channel sampling time constraint:
1720:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         For ADC conversion of internal channels,
1721:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         a sampling time minimum value is required.
1722:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to device datasheet.
1723:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
1724:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC state:
1725:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
1726:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         This check can be done with function @ref LL_ADC_IsEnabled() for each
1727:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC instance or by using helper macro helper macro
1728:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @ref __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE().
1729:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CCR      VREFEN         LL_ADC_SetCommonPathInternalCh\n
1730:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CCR      TSEN           LL_ADC_SetCommonPathInternalCh\n
1731:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CCR      VBATEN         LL_ADC_SetCommonPathInternalCh
1732:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
1733:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
1734:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  PathInternal This parameter can be a combination of the following values:
1735:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
1736:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
1737:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
1738:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
1739:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
1740:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
1741:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t Path
1742:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
1743:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
1744:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
1745:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
1746:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
1747:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Set parameter common to several ADC: measurement path to
1748:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         internal channels (VrefInt, temperature sensor, ...).
1749:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Add paths to the current configuration.
1750:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   One or several values can be selected.
1751:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Example: (LL_ADC_PATH_INTERNAL_VREFINT |
1752:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *                   LL_ADC_PATH_INTERNAL_TEMPSENSOR)
1753:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Stabilization time of measurement path to internal channel:
1754:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         After enabling internal paths, before starting ADC conversion,
1755:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         a delay is required for internal voltage reference and
1756:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         temperature sensor stabilization time.
1757:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to device datasheet.
ARM GAS  /tmp/ccN8TuGv.s 			page 50


1758:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_VREFINT_STAB_US.
1759:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to literals @ref LL_ADC_DELAY_TEMPSENSOR_STAB_US,
1760:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @ref LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US.
1761:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   ADC internal channel sampling time constraint:
1762:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         For ADC conversion of internal channels,
1763:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         a sampling time minimum value is required.
1764:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to device datasheet.
1765:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
1766:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC state:
1767:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
1768:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         This check can be done with function @ref LL_ADC_IsEnabled() for each
1769:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC instance or by using helper macro helper macro
1770:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @ref __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE().
1771:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CCR      VREFEN         LL_ADC_SetCommonPathInternalChAdd\n
1772:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CCR      TSEN           LL_ADC_SetCommonPathInternalChAdd\n
1773:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CCR      VBATEN         LL_ADC_SetCommonPathInternalChAdd
1774:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
1775:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
1776:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  PathInternal This parameter can be a combination of the following values:
1777:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
1778:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
1779:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
1780:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
1781:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
1782:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
1783:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetCommonPathInternalChAdd(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t P
1784:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
1785:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   SET_BIT(ADCxy_COMMON->CCR, PathInternal);
1786:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
1787:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
1788:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
1789:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Set parameter common to several ADC: measurement path to
1790:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         internal channels (VrefInt, temperature sensor, ...).
1791:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Remove paths to the current configuration.
1792:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   One or several values can be selected.
1793:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Example: (LL_ADC_PATH_INTERNAL_VREFINT |
1794:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *                   LL_ADC_PATH_INTERNAL_TEMPSENSOR)
1795:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
1796:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC state:
1797:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
1798:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         This check can be done with function @ref LL_ADC_IsEnabled() for each
1799:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC instance or by using helper macro helper macro
1800:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @ref __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE().
1801:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CCR      VREFEN         LL_ADC_SetCommonPathInternalChRem\n
1802:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CCR      TSEN           LL_ADC_SetCommonPathInternalChRem\n
1803:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CCR      VBATEN         LL_ADC_SetCommonPathInternalChRem
1804:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
1805:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
1806:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  PathInternal This parameter can be a combination of the following values:
1807:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
1808:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
1809:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
1810:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
1811:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
1812:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
1813:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetCommonPathInternalChRem(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t P
1814:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
ARM GAS  /tmp/ccN8TuGv.s 			page 51


1815:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   CLEAR_BIT(ADCxy_COMMON->CCR, PathInternal);
1816:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
1817:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
1818:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
1819:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get parameter common to several ADC: measurement path to internal
1820:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         channels (VrefInt, temperature sensor, ...).
1821:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   One or several values can be selected.
1822:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Example: (LL_ADC_PATH_INTERNAL_VREFINT |
1823:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *                   LL_ADC_PATH_INTERNAL_TEMPSENSOR)
1824:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CCR      VREFEN         LL_ADC_GetCommonPathInternalCh\n
1825:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CCR      TSEN           LL_ADC_GetCommonPathInternalCh\n
1826:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CCR      VBATEN         LL_ADC_GetCommonPathInternalCh
1827:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
1828:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
1829:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Returned value can be a combination of the following values:
1830:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
1831:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
1832:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
1833:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
1834:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
1835:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
1836:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
1837:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
1838:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
1839:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
1840:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
1841:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
1842:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
1843:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
1844:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Instance Configuration of ADC hierarchical scope: ADC ins
1845:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
1846:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
1847:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
1848:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
1849:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Set ADC instance clock source and prescaler.
1850:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
1851:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC state:
1852:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC must be disabled.
1853:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CFGR2    CKMODE         LL_ADC_SetClock
1854:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
1855:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ClockSource This parameter can be one of the following values:
1856:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV4
1857:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV2
1858:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV1 (2)
1859:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC (1)
1860:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *
1861:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (1) Asynchronous clock prescaler can be configured using
1862:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             function @ref LL_ADC_SetCommonClock().\n
1863:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (2) Caution: This parameter has some clock ratio constraints:
1864:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             This configuration must be enabled only if PCLK has a 50%
1865:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             duty clock cycle (APB prescaler configured inside the RCC
1866:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             must be bypassed and the system clock must by 50% duty
1867:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             cycle).
1868:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             Refer to reference manual.
1869:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
1870:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
1871:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetClock(ADC_TypeDef *ADCx, uint32_t ClockSource)
ARM GAS  /tmp/ccN8TuGv.s 			page 52


1872:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
1873:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_CKMODE, ClockSource);
1874:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
1875:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
1876:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
1877:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get ADC instance clock source and prescaler.
1878:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CFGR2    CKMODE         LL_ADC_GetClock
1879:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
1880:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1881:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV4
1882:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV2
1883:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV1 (2)
1884:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC (1)
1885:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *
1886:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (1) Asynchronous clock prescaler can be retrieved using
1887:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             function @ref LL_ADC_GetCommonClock().\n
1888:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (2) Caution: This parameter has some clock ratio constraints:
1889:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             This configuration must be enabled only if PCLK has a 50%
1890:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             duty clock cycle (APB prescaler configured inside the RCC
1891:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             must be bypassed and the system clock must by 50% duty
1892:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             cycle).
1893:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             Refer to reference manual.
1894:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
1895:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetClock(ADC_TypeDef *ADCx)
1896:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
1897:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
1898:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
1899:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
1900:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
1901:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Set ADC calibration factor in the mode single-ended
1902:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         or differential (for devices with differential mode available).
1903:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   This function is intended to set calibration parameters
1904:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         without having to perform a new calibration using
1905:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @ref LL_ADC_StartCalibration().
1906:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
1907:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC state:
1908:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC must be enabled, without calibration on going, without conversion
1909:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         on going on group regular.
1910:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CALFACT  CALFACT        LL_ADC_SetCalibrationFactor
1911:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
1912:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  CalibrationFactor Value between Min_Data=0x00 and Max_Data=0x7F
1913:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
1914:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
1915:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetCalibrationFactor(ADC_TypeDef *ADCx, uint32_t CalibrationFactor)
1916:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
1917:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   MODIFY_REG(ADCx->CALFACT,
1918:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              ADC_CALFACT_CALFACT,
1919:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              CalibrationFactor);
1920:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
1921:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
1922:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
1923:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get ADC calibration factor in the mode single-ended
1924:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         or differential (for devices with differential mode available).
1925:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Calibration factors are set by hardware after performing
1926:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         a calibration run using function @ref LL_ADC_StartCalibration().
1927:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CALFACT  CALFACT        LL_ADC_GetCalibrationFactor
1928:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
ARM GAS  /tmp/ccN8TuGv.s 			page 53


1929:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x7F
1930:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
1931:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetCalibrationFactor(ADC_TypeDef *ADCx)
1932:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
1933:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
1934:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
1935:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
1936:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
1937:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Set ADC resolution.
1938:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to reference manual for alignments formats
1939:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         dependencies to ADC resolutions.
1940:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
1941:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC state:
1942:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC must be disabled.
1943:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CFGR1    RES            LL_ADC_SetResolution
1944:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
1945:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  Resolution This parameter can be one of the following values:
1946:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
1947:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
1948:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
1949:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
1950:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
1951:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
1952:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
1953:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
1954:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, Resolution);
1955:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
1956:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
1957:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
1958:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get ADC resolution.
1959:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to reference manual for alignments formats
1960:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         dependencies to ADC resolutions.
1961:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CFGR1    RES            LL_ADC_GetResolution
1962:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
1963:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1964:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
1965:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
1966:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
1967:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
1968:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
1969:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetResolution(ADC_TypeDef *ADCx)
1970:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
1971:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_RES));
1972:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
1973:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
1974:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
1975:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Set ADC conversion data alignment.
1976:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Refer to reference manual for alignments formats
1977:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         dependencies to ADC resolutions.
1978:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
1979:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC state:
1980:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC must be disabled.
1981:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CFGR1    ALIGN          LL_ADC_SetDataAlignment
1982:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
1983:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  DataAlignment This parameter can be one of the following values:
1984:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_DATA_ALIGN_RIGHT
1985:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_DATA_ALIGN_LEFT
ARM GAS  /tmp/ccN8TuGv.s 			page 54


1986:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
1987:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
1988:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetDataAlignment(ADC_TypeDef *ADCx, uint32_t DataAlignment)
1989:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
1990:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_ALIGN, DataAlignment);
1991:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
1992:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
1993:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
1994:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get ADC conversion data alignment.
1995:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Refer to reference manual for alignments formats
1996:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         dependencies to ADC resolutions.
1997:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CFGR1    ALIGN          LL_ADC_GetDataAlignment
1998:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
1999:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2000:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_DATA_ALIGN_RIGHT
2001:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_DATA_ALIGN_LEFT
2002:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
2003:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetDataAlignment(ADC_TypeDef *ADCx)
2004:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
2005:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_ALIGN));
2006:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
2007:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
2008:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
2009:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Set ADC low power mode.
2010:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Description of ADC low power modes:
2011:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - ADC low power mode "auto wait": Dynamic low power mode,
2012:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           ADC conversions occurrences are limited to the minimum necessary
2013:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           in order to reduce power consumption.
2014:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           New ADC conversion starts only when the previous
2015:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           unitary conversion data (for ADC group regular)
2016:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           has been retrieved by user software.
2017:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           In the meantime, ADC remains idle: does not performs any
2018:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           other conversion.
2019:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           This mode allows to automatically adapt the ADC conversions
2020:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           triggers to the speed of the software that reads the data.
2021:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           Moreover, this avoids risk of overrun for low frequency
2022:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           applications.
2023:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           How to use this low power mode:
2024:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           - It is not recommended to use with interruption or DMA
2025:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             since these modes have to clear immediately the EOC flag
2026:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             (by CPU to free the IRQ pending event or by DMA).
2027:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             Auto wait will work but fort a very short time, discarding
2028:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             its intended benefit (except specific case of high load of CPU
2029:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             or DMA transfers which can justify usage of auto wait).
2030:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           - Do use with polling: 1. Start conversion,
2031:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             2. Later on, when conversion data is needed: poll for end of
2032:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             conversion  to ensure that conversion is completed and
2033:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             retrieve ADC conversion data. This will trig another
2034:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             ADC conversion start.
2035:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - ADC low power mode "auto power-off" (feature available on
2036:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           this device if parameter LL_ADC_LP_AUTOPOWEROFF is available):
2037:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           the ADC automatically powers-off after a conversion and
2038:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           automatically wakes up when a new conversion is triggered
2039:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           (with startup time between trigger and start of sampling).
2040:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           This feature can be combined with low power mode "auto wait".
2041:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   With ADC low power mode "auto wait", the ADC conversion data read
2042:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         is corresponding to previous ADC conversion start, independently
ARM GAS  /tmp/ccN8TuGv.s 			page 55


2043:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         of delay during which ADC was idle.
2044:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Therefore, the ADC conversion data may be outdated: does not
2045:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         correspond to the current voltage level on the selected
2046:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC channel.
2047:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
2048:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC state:
2049:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC must be disabled.
2050:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CFGR1    WAIT           LL_ADC_SetLowPowerMode\n
2051:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CFGR1    AUTOFF         LL_ADC_SetLowPowerMode
2052:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
2053:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  LowPowerMode This parameter can be one of the following values:
2054:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_MODE_NONE
2055:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_AUTOWAIT
2056:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_AUTOPOWEROFF
2057:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_AUTOWAIT_AUTOPOWEROFF
2058:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
2059:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
2060:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetLowPowerMode(ADC_TypeDef *ADCx, uint32_t LowPowerMode)
2061:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
2062:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR1, (ADC_CFGR1_WAIT | ADC_CFGR1_AUTOFF), LowPowerMode);
2063:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
2064:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
2065:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
2066:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get ADC low power mode:
2067:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Description of ADC low power modes:
2068:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - ADC low power mode "auto wait": Dynamic low power mode,
2069:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           ADC conversions occurrences are limited to the minimum necessary
2070:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           in order to reduce power consumption.
2071:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           New ADC conversion starts only when the previous
2072:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           unitary conversion data (for ADC group regular)
2073:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           has been retrieved by user software.
2074:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           In the meantime, ADC remains idle: does not performs any
2075:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           other conversion.
2076:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           This mode allows to automatically adapt the ADC conversions
2077:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           triggers to the speed of the software that reads the data.
2078:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           Moreover, this avoids risk of overrun for low frequency
2079:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           applications.
2080:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           How to use this low power mode:
2081:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           - It is not recommended to use with interruption or DMA
2082:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             since these modes have to clear immediately the EOC flag
2083:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             (by CPU to free the IRQ pending event or by DMA).
2084:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             Auto wait will work but fort a very short time, discarding
2085:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             its intended benefit (except specific case of high load of CPU
2086:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             or DMA transfers which can justify usage of auto wait).
2087:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           - Do use with polling: 1. Start conversion,
2088:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             2. Later on, when conversion data is needed: poll for end of
2089:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             conversion  to ensure that conversion is completed and
2090:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             retrieve ADC conversion data. This will trig another
2091:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             ADC conversion start.
2092:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - ADC low power mode "auto power-off" (feature available on
2093:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           this device if parameter LL_ADC_LP_AUTOPOWEROFF is available):
2094:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           the ADC automatically powers-off after a conversion and
2095:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           automatically wakes up when a new conversion is triggered
2096:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           (with startup time between trigger and start of sampling).
2097:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           This feature can be combined with low power mode "auto wait".
2098:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   With ADC low power mode "auto wait", the ADC conversion data read
2099:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         is corresponding to previous ADC conversion start, independently
ARM GAS  /tmp/ccN8TuGv.s 			page 56


2100:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         of delay during which ADC was idle.
2101:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Therefore, the ADC conversion data may be outdated: does not
2102:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         correspond to the current voltage level on the selected
2103:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC channel.
2104:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CFGR1    WAIT           LL_ADC_GetLowPowerMode\n
2105:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CFGR1    AUTOFF         LL_ADC_GetLowPowerMode
2106:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
2107:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2108:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_MODE_NONE
2109:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_AUTOWAIT
2110:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_AUTOPOWEROFF
2111:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_AUTOWAIT_AUTOPOWEROFF
2112:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
2113:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetLowPowerMode(ADC_TypeDef *ADCx)
2114:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
2115:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR1, (ADC_CFGR1_WAIT | ADC_CFGR1_AUTOFF)));
2116:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
2117:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
2118:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
2119:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Set ADC trigger frequency mode.
2120:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   ADC trigger frequency mode must be set to low frequency when
2121:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         a duration is exceeded before ADC conversion start trigger event
2122:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (between ADC enable and ADC conversion start trigger event
2123:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         or between two ADC conversion start trigger event).
2124:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Duration value: Refer to device datasheet, parameter "tIdle".
2125:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   When ADC trigger frequency mode is set to low frequency,
2126:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         some rearm cycles are inserted before performing ADC conversion
2127:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         start, inducing a delay of 2 ADC clock cycles.
2128:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Usage of ADC trigger frequency mode with ADC low power mode:
2129:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - Low power mode auto wait: Only the first ADC conversion
2130:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           start trigger inserts the rearm delay.
2131:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - Low power mode auto power-off: ADC trigger frequency mode
2132:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           is discarded.
2133:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
2134:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC state:
2135:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC must be disabled.
2136:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CFGR2    LFTRIG         LL_ADC_SetTriggerFrequencyMode
2137:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
2138:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  TriggerFrequencyMode This parameter can be one of the following values:
2139:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_TRIGGER_FREQ_HIGH
2140:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_TRIGGER_FREQ_LOW
2141:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
2142:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
2143:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetTriggerFrequencyMode(ADC_TypeDef *ADCx, uint32_t TriggerFrequencyMod
2144:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
2145:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_LFTRIG, TriggerFrequencyMode);
2146:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
2147:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
2148:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
2149:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get ADC trigger frequency mode.
2150:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CFGR2    LFTRIG         LL_ADC_GetTriggerFrequencyMode
2151:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
2152:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2153:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_TRIGGER_FREQ_HIGH
2154:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_TRIGGER_FREQ_LOW
2155:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
2156:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetTriggerFrequencyMode(ADC_TypeDef *ADCx)
ARM GAS  /tmp/ccN8TuGv.s 			page 57


2157:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
2158:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_LFTRIG));
2159:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
2160:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
2161:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
2162:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Set sampling time common to a group of channels.
2163:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Unit: ADC clock cycles.
2164:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, sampling time scope is on ADC instance:
2165:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Sampling time common to all channels.
2166:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (on some other STM32 families, sampling time is channel wise)
2167:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   In case of internal channel (VrefInt, TempSensor, ...) to be
2168:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         converted:
2169:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         sampling time constraints must be respected (sampling time can be
2170:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         adjusted in function of ADC clock frequency and sampling time
2171:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         setting).
2172:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to device datasheet for timings values (parameters TS_vrefint,
2173:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         TS_temp, ...).
2174:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Conversion time is the addition of sampling time and processing time.
2175:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         On this STM32 series, ADC processing time is:
2176:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - 12.5 ADC clock cycles at ADC resolution 12 bits
2177:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - 10.5 ADC clock cycles at ADC resolution 10 bits
2178:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - 8.5 ADC clock cycles at ADC resolution 8 bits
2179:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - 6.5 ADC clock cycles at ADC resolution 6 bits
2180:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   In case of ADC conversion of internal channel (VrefInt,
2181:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         temperature sensor, ...), a sampling time minimum value
2182:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         is required.
2183:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to device datasheet.
2184:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
2185:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC state:
2186:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
2187:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         on group regular.
2188:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll SMPR     SMP1           LL_ADC_SetSamplingTimeCommonChannels\n
2189:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll SMPR     SMP2           LL_ADC_SetSamplingTimeCommonChannels
2190:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
2191:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  SamplingTimeY This parameter can be one of the following values:
2192:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
2193:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
2194:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  SamplingTime This parameter can be one of the following values:
2195:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_1CYCLE_5
2196:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_3CYCLES_5
2197:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_7CYCLES_5
2198:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_12CYCLES_5
2199:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_19CYCLES_5
2200:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
2201:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
2202:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
2203:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
2204:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
2205:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY
2206:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                                           uint32_t SamplingTime)
2207:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
2208:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   MODIFY_REG(ADCx->SMPR,
2209:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
2210:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
2211:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
2212:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
2213:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
ARM GAS  /tmp/ccN8TuGv.s 			page 58


2214:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get sampling time common to a group of channels.
2215:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Unit: ADC clock cycles.
2216:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, sampling time scope is on ADC instance:
2217:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Sampling time common to all channels.
2218:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (on some other STM32 families, sampling time is channel wise)
2219:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Conversion time is the addition of sampling time and processing time.
2220:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to reference manual for ADC processing time of
2221:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         this STM32 series.
2222:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll SMPR     SMP1           LL_ADC_GetSamplingTimeCommonChannels\n
2223:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll SMPR     SMP2           LL_ADC_GetSamplingTimeCommonChannels
2224:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
2225:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  SamplingTimeY This parameter can be one of the following values:
2226:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
2227:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
2228:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2229:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_1CYCLE_5
2230:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_3CYCLES_5
2231:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_7CYCLES_5
2232:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_12CYCLES_5
2233:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_19CYCLES_5
2234:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
2235:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
2236:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
2237:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
2238:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingT
2239:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
2240:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_S
2241:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                     >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
2242:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
2243:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
2244:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
2245:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
2246:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
2247:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
2248:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Group_Regular Configuration of ADC hierarchical scope: gr
2249:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
2250:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
2251:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
2252:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
2253:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Set ADC group regular conversion trigger source:
2254:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         internal (SW start) or from external peripheral (timer event,
2255:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         external interrupt line).
2256:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, setting trigger source to external trigger
2257:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         also set trigger polarity to rising edge
2258:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (default setting for compatibility with some ADC on other
2259:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         STM32 families having this setting set by HW default value).
2260:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         In case of need to modify trigger edge, use
2261:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         function @ref LL_ADC_REG_SetTriggerEdge().
2262:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, ADC trigger frequency mode must be set
2263:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         in function of frequency of ADC group regular conversion trigger.
2264:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to description of function
2265:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @ref LL_ADC_SetTriggerFrequencyMode().
2266:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Availability of parameters of trigger sources from timer
2267:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         depends on timers availability on the selected device.
2268:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
2269:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC state:
2270:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC must be disabled.
ARM GAS  /tmp/ccN8TuGv.s 			page 59


2271:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CFGR1    EXTSEL         LL_ADC_REG_SetTriggerSource\n
2272:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CFGR1    EXTEN          LL_ADC_REG_SetTriggerSource
2273:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
2274:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  TriggerSource This parameter can be one of the following values:
2275:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_SOFTWARE
2276:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_TRGO2
2277:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH4
2278:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_TRGO
2279:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_CH3
2280:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_CH4
2281:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_EXTI_LINE11
2282:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
2283:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
2284:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetTriggerSource(ADC_TypeDef *ADCx, uint32_t TriggerSource)
2285:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
2286:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
2287:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
2288:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
2289:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
2290:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get ADC group regular conversion trigger source:
2291:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         internal (SW start) or from external peripheral (timer event,
2292:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         external interrupt line).
2293:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   To determine whether group regular trigger source is
2294:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         internal (SW start) or external, without detail
2295:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         of which peripheral is selected as external trigger,
2296:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (equivalent to
2297:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         "if(LL_ADC_REG_GetTriggerSource(ADC1) == LL_ADC_REG_TRIG_SOFTWARE)")
2298:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         use function @ref LL_ADC_REG_IsTriggerSourceSWStart.
2299:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Availability of parameters of trigger sources from timer
2300:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         depends on timers availability on the selected device.
2301:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CFGR1    EXTSEL         LL_ADC_REG_GetTriggerSource\n
2302:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CFGR1    EXTEN          LL_ADC_REG_GetTriggerSource
2303:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
2304:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2305:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_SOFTWARE
2306:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_TRGO2
2307:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH4
2308:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_TRGO
2309:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_CH3
2310:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_CH4
2311:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_EXTI_LINE11
2312:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
2313:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetTriggerSource(ADC_TypeDef *ADCx)
2314:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
2315:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   __IO uint32_t trigger_source = READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTSEL | ADC_CFGR1_EXTEN);
2316:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
2317:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* Value for shift of {0; 4; 8; 12} depending on value of bitfield          */
2318:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* corresponding to ADC_CFGR1_EXTEN {0; 1; 2; 3}.                           */
2319:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   uint32_t shift_exten = ((trigger_source & ADC_CFGR1_EXTEN) >> (ADC_REG_TRIG_EXTEN_BITOFFSET_POS -
2320:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
2321:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* Set bitfield corresponding to ADC_CFGR1_EXTEN and ADC_CFGR1_EXTSEL       */
2322:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* to match with triggers literals definition.                              */
2323:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return ((trigger_source
2324:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****            & (ADC_REG_TRIG_SOURCE_MASK >> shift_exten) & ADC_CFGR1_EXTSEL)
2325:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****           | ((ADC_REG_TRIG_EDGE_MASK >> shift_exten) & ADC_CFGR1_EXTEN)
2326:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****          );
2327:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
ARM GAS  /tmp/ccN8TuGv.s 			page 60


2328:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
2329:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
2330:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get ADC group regular conversion trigger source internal (SW start)
2331:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         or external.
2332:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   In case of group regular trigger source set to external trigger,
2333:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         to determine which peripheral is selected as external trigger,
2334:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         use function @ref LL_ADC_REG_GetTriggerSource().
2335:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CFGR1    EXTEN          LL_ADC_REG_IsTriggerSourceSWStart
2336:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
2337:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Value "0" if trigger source external trigger
2338:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Value "1" if trigger source SW start.
2339:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
2340:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
2341:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
2342:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) 
2343:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
2344:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
2345:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
2346:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Set ADC group regular conversion trigger polarity.
2347:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Applicable only for trigger source set to external trigger.
2348:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
2349:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC state:
2350:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC must be disabled.
2351:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CFGR1    EXTEN          LL_ADC_REG_SetTriggerEdge
2352:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
2353:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ExternalTriggerEdge This parameter can be one of the following values:
2354:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_RISING
2355:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_FALLING
2356:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_RISINGFALLING
2357:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
2358:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
2359:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetTriggerEdge(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
2360:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
2361:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN, ExternalTriggerEdge);
2362:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
2363:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
2364:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
2365:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get ADC group regular conversion trigger polarity.
2366:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Applicable only for trigger source set to external trigger.
2367:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CFGR1    EXTEN          LL_ADC_REG_GetTriggerEdge
2368:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
2369:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2370:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_RISING
2371:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_FALLING
2372:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_RISINGFALLING
2373:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
2374:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetTriggerEdge(ADC_TypeDef *ADCx)
2375:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
2376:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN));
2377:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
2378:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
2379:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
2380:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Set ADC group regular sequencer configuration flexibility.
2381:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, ADC group regular sequencer both modes
2382:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         "fully configurable" or "not fully configurable" are
2383:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         available:
2384:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - sequencer configured to fully configurable:
ARM GAS  /tmp/ccN8TuGv.s 			page 61


2385:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           sequencer length and each rank
2386:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           affectation to a channel are configurable.
2387:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           Refer to description of function
2388:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           @ref LL_ADC_REG_SetSequencerLength().
2389:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - sequencer configured to not fully configurable:
2390:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
2391:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           are fixed by channel HW number.
2392:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           Refer to description of function
2393:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           @ref LL_ADC_REG_SetSequencerChannels().
2394:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, after modifying sequencer (functions
2395:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @ref LL_ADC_REG_SetSequencerLength()
2396:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @ref LL_ADC_REG_SetSequencerRanks(), ...)
2397:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         it is mandatory to wait for the assertion of CCRDY flag
2398:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Otherwise, some actions may be ignored.
2399:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to description of @ref LL_ADC_IsActiveFlag_CCRDY
2400:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         for more details.
2401:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
2402:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC state:
2403:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC must be disabled.
2404:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CFGR     CHSELRMOD      LL_ADC_REG_SetSequencerConfigurable
2405:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
2406:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  Configurability This parameter can be one of the following values:
2407:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_FIXED
2408:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_CONFIGURABLE
2409:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
2410:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
2411:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerConfigurable(ADC_TypeDef *ADCx, uint32_t Configurabilit
2412:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
2413:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_CHSELRMOD, Configurability);
2414:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
2415:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
2416:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
2417:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get ADC group regular sequencer configuration flexibility.
2418:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, ADC group regular sequencer both modes
2419:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         "fully configurable" or "not fully configurable" are
2420:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         available:
2421:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - sequencer configured to fully configurable:
2422:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           sequencer length and each rank
2423:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           affectation to a channel are configurable.
2424:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           Refer to description of function
2425:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           @ref LL_ADC_REG_SetSequencerLength().
2426:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - sequencer configured to not fully configurable:
2427:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
2428:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           are fixed by channel HW number.
2429:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           Refer to description of function
2430:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           @ref LL_ADC_REG_SetSequencerChannels().
2431:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CFGR     CHSELRMOD      LL_ADC_REG_SetSequencerConfigurable
2432:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
2433:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2434:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_FIXED
2435:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_CONFIGURABLE
2436:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
2437:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetSequencerConfigurable(ADC_TypeDef *ADCx)
2438:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
2439:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_CHSELRMOD));
2440:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
2441:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
ARM GAS  /tmp/ccN8TuGv.s 			page 62


2442:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
2443:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Set ADC group regular sequencer length and scan direction.
2444:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Description of ADC group regular sequencer features:
2445:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - For devices with sequencer fully configurable
2446:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           (function "LL_ADC_REG_SetSequencerRanks()" available):
2447:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
2448:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           are configurable.
2449:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           This function performs configuration of:
2450:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           - Sequence length: Number of ranks in the scan sequence.
2451:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           - Sequence direction: Unless specified in parameters, sequencer
2452:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             scan direction is forward (from rank 1 to rank n).
2453:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           Sequencer ranks are selected using
2454:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           function "LL_ADC_REG_SetSequencerRanks()".
2455:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - For devices with sequencer not fully configurable
2456:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           (function "LL_ADC_REG_SetSequencerChannels()" available):
2457:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
2458:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           are defined by channel number.
2459:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           This function performs configuration of:
2460:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           - Sequence length: Number of ranks in the scan sequence is
2461:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             defined by number of channels set in the sequence,
2462:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             rank of each channel is fixed by channel HW number.
2463:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             (channel 0 fixed on rank 0, channel 1 fixed on rank1, ...).
2464:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           - Sequence direction: Unless specified in parameters, sequencer
2465:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             scan direction is forward (from lowest channel number to
2466:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             highest channel number).
2467:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           Sequencer ranks are selected using
2468:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           function "LL_ADC_REG_SetSequencerChannels()".
2469:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           To set scan direction differently, refer to function
2470:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           @ref LL_ADC_REG_SetSequencerScanDirection().
2471:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, ADC group regular sequencer both modes
2472:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         "fully configurable" or "not fully configurable"
2473:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         are available, they can be chosen using
2474:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         function @ref LL_ADC_REG_SetSequencerConfigurable().
2475:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, after modifying sequencer (functions
2476:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @ref LL_ADC_REG_SetSequencerLength()
2477:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @ref LL_ADC_REG_SetSequencerRanks(), ...)
2478:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         it is mandatory to wait for the assertion of CCRDY flag
2479:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         using @ref LL_ADC_IsActiveFlag_CCRDY().
2480:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Otherwise, some actions may be ignored.
2481:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to description of @ref LL_ADC_IsActiveFlag_CCRDY
2482:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         for more details.
2483:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Sequencer disabled is equivalent to sequencer of 1 rank:
2484:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC conversion on only 1 channel.
2485:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
2486:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC state:
2487:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
2488:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         on group regular.
2489:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CHSELR   SQ1            LL_ADC_REG_SetSequencerLength\n
2490:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   SQ2            LL_ADC_REG_SetSequencerLength\n
2491:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   SQ3            LL_ADC_REG_SetSequencerLength\n
2492:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   SQ4            LL_ADC_REG_SetSequencerLength\n
2493:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   SQ5            LL_ADC_REG_SetSequencerLength\n
2494:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   SQ6            LL_ADC_REG_SetSequencerLength\n
2495:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   SQ7            LL_ADC_REG_SetSequencerLength\n
2496:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   SQ8            LL_ADC_REG_SetSequencerLength
2497:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
2498:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  SequencerNbRanks This parameter can be one of the following values:
ARM GAS  /tmp/ccN8TuGv.s 			page 63


2499:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_DISABLE
2500:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS
2501:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS
2502:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS
2503:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_5RANKS
2504:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS
2505:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_7RANKS
2506:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS
2507:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
2508:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
2509:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
2510:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
2511:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   SET_BIT(ADCx->CHSELR, SequencerNbRanks);
2512:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
2513:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
2514:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
2515:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get ADC group regular sequencer length and scan direction.
2516:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Description of ADC group regular sequencer features:
2517:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - For devices with sequencer fully configurable
2518:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           (function "LL_ADC_REG_SetSequencerRanks()" available):
2519:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
2520:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           are configurable.
2521:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           This function retrieves:
2522:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           - Sequence length: Number of ranks in the scan sequence.
2523:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           - Sequence direction: Unless specified in parameters, sequencer
2524:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             scan direction is forward (from rank 1 to rank n).
2525:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           Sequencer ranks are selected using
2526:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           function "LL_ADC_REG_SetSequencerRanks()".
2527:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - For devices with sequencer not fully configurable
2528:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           (function "LL_ADC_REG_SetSequencerChannels()" available):
2529:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
2530:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           are defined by channel number.
2531:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           This function retrieves:
2532:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           - Sequence length: Number of ranks in the scan sequence is
2533:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             defined by number of channels set in the sequence,
2534:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             rank of each channel is fixed by channel HW number.
2535:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             (channel 0 fixed on rank 0, channel 1 fixed on rank1, ...).
2536:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           - Sequence direction: Unless specified in parameters, sequencer
2537:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             scan direction is forward (from lowest channel number to
2538:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             highest channel number).
2539:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           Sequencer ranks are selected using
2540:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           function "LL_ADC_REG_SetSequencerChannels()".
2541:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *          To set scan direction differently, refer to function
2542:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *          @ref LL_ADC_REG_SetSequencerScanDirection().
2543:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, ADC group regular sequencer both modes
2544:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         "fully configurable" or "not fully configurable"
2545:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         are available, they can be chosen using
2546:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         function @ref LL_ADC_REG_SetSequencerConfigurable().
2547:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Sequencer disabled is equivalent to sequencer of 1 rank:
2548:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC conversion on only 1 channel.
2549:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CHSELR   SQ1            LL_ADC_REG_GetSequencerLength\n
2550:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   SQ2            LL_ADC_REG_GetSequencerLength\n
2551:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   SQ3            LL_ADC_REG_GetSequencerLength\n
2552:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   SQ4            LL_ADC_REG_GetSequencerLength\n
2553:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   SQ5            LL_ADC_REG_GetSequencerLength\n
2554:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   SQ6            LL_ADC_REG_GetSequencerLength\n
2555:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   SQ7            LL_ADC_REG_GetSequencerLength\n
ARM GAS  /tmp/ccN8TuGv.s 			page 64


2556:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   SQ8            LL_ADC_REG_GetSequencerLength
2557:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
2558:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2559:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_DISABLE
2560:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS
2561:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS
2562:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS
2563:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_5RANKS
2564:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS
2565:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_7RANKS
2566:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS
2567:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
2568:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetSequencerLength(ADC_TypeDef *ADCx)
2569:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
2570:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   __IO uint32_t channels_ranks = READ_BIT(ADCx->CHSELR, ADC_CHSELR_SQ_ALL);
2571:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   uint32_t sequencer_length = LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS;
2572:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   uint32_t rank_index;
2573:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   uint32_t rank_shifted;
2574:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
2575:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* Parse register for end of sequence identifier */
2576:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* Note: Value "0xF0UL" corresponds to bitfield of sequencer 2nd rank
2577:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****            (ADC_CHSELR_SQ2), value "4" to length of end of sequence
2578:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****            identifier (0xF) */
2579:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   for (rank_index = 0U; rank_index <= (28U - 4U); rank_index += 4U)
2580:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   {
2581:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****     rank_shifted = (uint32_t)(0xF0UL << rank_index);
2582:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****     if ((channels_ranks & rank_shifted) == rank_shifted)
2583:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****     {
2584:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****       sequencer_length = rank_shifted;
2585:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****       break;
2586:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****     }
2587:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   }
2588:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
2589:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return sequencer_length;
2590:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
2591:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
2592:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
2593:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Set ADC group regular sequencer scan direction.
2594:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, parameter relevant only is sequencer is set
2595:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         to mode not fully configurable,
2596:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
2597:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On some other STM32 series, this setting is not available and
2598:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         the default scan direction is forward.
2599:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, after modifying sequencer (functions
2600:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @ref LL_ADC_REG_SetSequencerLength()
2601:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @ref LL_ADC_REG_SetSequencerRanks(), ...)
2602:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         it is mandatory to wait for the assertion of CCRDY flag
2603:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         using @ref LL_ADC_IsActiveFlag_CCRDY().
2604:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Otherwise, some actions may be ignored.
2605:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to description of @ref LL_ADC_IsActiveFlag_CCRDY
2606:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         for more details.
2607:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
2608:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC state:
2609:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC must be disabled.
2610:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CFGR1    SCANDIR        LL_ADC_REG_SetSequencerScanDirection
2611:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
2612:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ScanDirection This parameter can be one of the following values:
ARM GAS  /tmp/ccN8TuGv.s 			page 65


2613:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_FORWARD
2614:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD
2615:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
2616:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
2617:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerScanDirection(ADC_TypeDef *ADCx, uint32_t ScanDirection
2618:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
2619:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
2620:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
2621:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
2622:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
2623:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get ADC group regular sequencer scan direction.
2624:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, parameter relevant only is sequencer is set
2625:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         to mode not fully configurable,
2626:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
2627:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On some other STM32 families, this setting is not available and
2628:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         the default scan direction is forward.
2629:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CFGR1    SCANDIR        LL_ADC_REG_GetSequencerScanDirection
2630:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
2631:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2632:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_FORWARD
2633:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD
2634:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
2635:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetSequencerScanDirection(ADC_TypeDef *ADCx)
2636:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
2637:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_SCANDIR));
2638:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
2639:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
2640:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
2641:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Set ADC group regular sequencer discontinuous mode:
2642:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         sequence subdivided and scan conversions interrupted every selected
2643:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         number of ranks.
2644:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   It is not possible to enable both ADC group regular
2645:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         continuous mode and sequencer discontinuous mode.
2646:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
2647:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC state:
2648:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC must be disabled.
2649:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CFGR1    DISCEN         LL_ADC_REG_SetSequencerDiscont\n
2650:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
2651:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  SeqDiscont This parameter can be one of the following values:
2652:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_DISABLE
2653:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_1RANK
2654:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
2655:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
2656:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerDiscont(ADC_TypeDef *ADCx, uint32_t SeqDiscont)
2657:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
2658:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DISCEN, SeqDiscont);
2659:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
2660:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
2661:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
2662:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get ADC group regular sequencer discontinuous mode:
2663:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         sequence subdivided and scan conversions interrupted every selected
2664:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         number of ranks.
2665:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CFGR1    DISCEN         LL_ADC_REG_GetSequencerDiscont\n
2666:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
2667:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2668:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_DISABLE
2669:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_1RANK
ARM GAS  /tmp/ccN8TuGv.s 			page 66


2670:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
2671:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetSequencerDiscont(ADC_TypeDef *ADCx)
2672:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
2673:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DISCEN));
2674:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
2675:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
2676:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
2677:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Set ADC group regular sequence: channel on the selected
2678:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         scan sequence rank.
2679:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   This function performs configuration of:
2680:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - Channels ordering into each rank of scan sequence:
2681:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           whatever channel can be placed into whatever rank.
2682:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, ADC group regular sequencer is
2683:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         fully configurable: sequencer length and each rank
2684:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         affectation to a channel are configurable.
2685:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to description of function @ref LL_ADC_REG_SetSequencerLength().
2686:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
2687:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
2688:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, to measure internal channels (VrefInt,
2689:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         TempSensor, ...), measurement paths to internal channels must be
2690:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         enabled separately.
2691:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         This can be done using function @ref LL_ADC_SetCommonPathInternalCh().
2692:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, after modifying sequencer (functions
2693:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @ref LL_ADC_REG_SetSequencerLength()
2694:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @ref LL_ADC_REG_SetSequencerRanks(), ...)
2695:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         it is mandatory to wait for the assertion of CCRDY flag
2696:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         using @ref LL_ADC_IsActiveFlag_CCRDY().
2697:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Otherwise, some actions may be ignored.
2698:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to description of @ref LL_ADC_IsActiveFlag_CCRDY
2699:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         for more details.
2700:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
2701:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC state:
2702:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
2703:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         on group regular.
2704:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CHSELR   SQ1            LL_ADC_REG_SetSequencerRanks\n
2705:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   SQ2            LL_ADC_REG_SetSequencerRanks\n
2706:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   SQ3            LL_ADC_REG_SetSequencerRanks\n
2707:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   SQ4            LL_ADC_REG_SetSequencerRanks\n
2708:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   SQ5            LL_ADC_REG_SetSequencerRanks\n
2709:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   SQ6            LL_ADC_REG_SetSequencerRanks\n
2710:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   SQ7            LL_ADC_REG_SetSequencerRanks\n
2711:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   SQ8            LL_ADC_REG_SetSequencerRanks
2712:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
2713:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
2714:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_1
2715:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_2
2716:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_3
2717:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_4
2718:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_5
2719:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_6
2720:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_7
2721:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_8
2722:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
2723:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
2724:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
2725:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
2726:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
ARM GAS  /tmp/ccN8TuGv.s 			page 67


2727:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
2728:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
2729:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
2730:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
2731:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
2732:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
2733:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
2734:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
2735:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
2736:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
2737:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
2738:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15         (1)
2739:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16         (1)
2740:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17         (1)
2741:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT
2742:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR
2743:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT
2744:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DACCH1
2745:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *
2746:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (1) On STM32WL, parameter can be set in ADC group sequencer
2747:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             only if sequencer is set in mode "not fully configurable",
2748:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
2749:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
2750:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
2751:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channe
2752:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
2753:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* Set bits with content of parameter "Channel" with bits position          */
2754:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* in register depending on parameter "Rank".                               */
2755:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* Parameters "Rank" and "Channel" are used with masks because containing   */
2756:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* other bits reserved for other purpose.                                   */
2757:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   MODIFY_REG(ADCx->CHSELR,
2758:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
2759:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) <<
2760:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
2761:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
2762:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
2763:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get ADC group regular sequence: channel on the selected
2764:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         scan sequence rank.
2765:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, ADC group regular sequencer is
2766:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         fully configurable: sequencer length and each rank
2767:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         affectation to a channel are configurable.
2768:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to description of function @ref LL_ADC_REG_SetSequencerLength().
2769:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
2770:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
2771:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Usage of the returned channel number:
2772:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - To reinject this channel into another function LL_ADC_xxx:
2773:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           the returned channel number is only partly formatted on definition
2774:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           of literals LL_ADC_CHANNEL_x. Therefore, it has to be compared
2775:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           with parts of literals LL_ADC_CHANNEL_x or using
2776:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           helper macro @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
2777:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           Then the selected literal LL_ADC_CHANNEL_x can be used
2778:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           as parameter for another function.
2779:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - To get the channel number in decimal format:
2780:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           process the returned value with the helper macro
2781:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
2782:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CHSELR   SQ1            LL_ADC_REG_GetSequencerRanks\n
2783:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   SQ2            LL_ADC_REG_GetSequencerRanks\n
ARM GAS  /tmp/ccN8TuGv.s 			page 68


2784:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   SQ3            LL_ADC_REG_GetSequencerRanks\n
2785:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   SQ4            LL_ADC_REG_GetSequencerRanks\n
2786:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   SQ5            LL_ADC_REG_GetSequencerRanks\n
2787:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   SQ6            LL_ADC_REG_GetSequencerRanks\n
2788:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   SQ7            LL_ADC_REG_GetSequencerRanks\n
2789:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   SQ8            LL_ADC_REG_GetSequencerRanks
2790:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
2791:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
2792:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_1
2793:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_2
2794:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_3
2795:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_4
2796:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_5
2797:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_6
2798:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_7
2799:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_8
2800:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2801:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
2802:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
2803:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
2804:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
2805:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
2806:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
2807:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
2808:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
2809:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
2810:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
2811:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
2812:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
2813:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
2814:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
2815:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
2816:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15         (1)
2817:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16         (1)
2818:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17         (1)
2819:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT    (2)
2820:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR (2)
2821:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT       (2)
2822:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DACCH1     (2)
2823:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *
2824:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (1) On STM32WL, parameter can be set in ADC group sequencer
2825:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             only if sequencer is set in mode "not fully configurable",
2826:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().\n
2827:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (2) For ADC channel read back from ADC register,
2828:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             comparison with internal channel parameter to be done
2829:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
2830:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
2831:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank)
2832:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
2833:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return (uint32_t)((READ_BIT(ADCx->CHSELR,
2834:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK))
2835:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                      >> (Rank & ADC_REG_RANK_ID_SQRX_MASK)
2836:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                     ) << (ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
2837:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                    );
2838:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
2839:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
2840:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
ARM GAS  /tmp/ccN8TuGv.s 			page 69


2841:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Set ADC group regular sequence: channel on rank corresponding to
2842:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         channel number.
2843:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   This function performs:
2844:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - Channels ordering into each rank of scan sequence:
2845:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           rank of each channel is fixed by channel HW number
2846:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           (channel 0 fixed on rank 0, channel 1 fixed on rank1, ...).
2847:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - Set channels selected by overwriting the current sequencer
2848:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           configuration.
2849:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, ADC group regular sequencer both modes
2850:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         "fully configurable" or "not fully configurable"
2851:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         are available, they can be chosen using
2852:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         function @ref LL_ADC_REG_SetSequencerConfigurable().
2853:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         This function can be used with setting "not fully configurable".
2854:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to description of functions @ref LL_ADC_REG_SetSequencerConfigurable()
2855:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         and @ref LL_ADC_REG_SetSequencerLength().
2856:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, after modifying sequencer (functions
2857:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @ref LL_ADC_REG_SetSequencerLength()
2858:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @ref LL_ADC_REG_SetSequencerRanks(), ...)
2859:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         it is mandatory to wait for the assertion of CCRDY flag
2860:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         using @ref LL_ADC_IsActiveFlag_CCRDY().
2861:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Otherwise, some actions may be ignored.
2862:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to description of @ref LL_ADC_IsActiveFlag_CCRDY
2863:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         for more details.
2864:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
2865:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
2866:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, to measure internal channels (VrefInt,
2867:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         TempSensor, ...), measurement paths to internal channels must be
2868:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         enabled separately.
2869:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         This can be done using function @ref LL_ADC_SetCommonPathInternalCh().
2870:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
2871:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC state:
2872:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
2873:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         on group regular.
2874:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   One or several values can be selected.
2875:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Example: (LL_ADC_CHANNEL_4 | LL_ADC_CHANNEL_12 | ...)
2876:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CHSELR   CHSEL0         LL_ADC_REG_SetSequencerChannels\n
2877:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL1         LL_ADC_REG_SetSequencerChannels\n
2878:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL2         LL_ADC_REG_SetSequencerChannels\n
2879:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL3         LL_ADC_REG_SetSequencerChannels\n
2880:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL4         LL_ADC_REG_SetSequencerChannels\n
2881:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL5         LL_ADC_REG_SetSequencerChannels\n
2882:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL6         LL_ADC_REG_SetSequencerChannels\n
2883:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL7         LL_ADC_REG_SetSequencerChannels\n
2884:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL8         LL_ADC_REG_SetSequencerChannels\n
2885:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL9         LL_ADC_REG_SetSequencerChannels\n
2886:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL10        LL_ADC_REG_SetSequencerChannels\n
2887:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL11        LL_ADC_REG_SetSequencerChannels\n
2888:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL12        LL_ADC_REG_SetSequencerChannels\n
2889:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL13        LL_ADC_REG_SetSequencerChannels\n
2890:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL14        LL_ADC_REG_SetSequencerChannels\n
2891:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL15        LL_ADC_REG_SetSequencerChannels\n
2892:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL16        LL_ADC_REG_SetSequencerChannels\n
2893:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL17        LL_ADC_REG_SetSequencerChannels\n
2894:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL18        LL_ADC_REG_SetSequencerChannels
2895:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
2896:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  Channel This parameter can be a combination of the following values:
2897:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
ARM GAS  /tmp/ccN8TuGv.s 			page 70


2898:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
2899:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
2900:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
2901:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
2902:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
2903:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
2904:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
2905:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
2906:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
2907:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
2908:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
2909:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
2910:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
2911:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
2912:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15         (1)
2913:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16         (1)
2914:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17         (1)
2915:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT
2916:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR
2917:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT
2918:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DACCH1
2919:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *
2920:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (1) On STM32WL, parameter can be set in ADC group sequencer
2921:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             only if sequencer is set in mode "not fully configurable",
2922:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
2923:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
2924:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
2925:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerChannels(ADC_TypeDef *ADCx, uint32_t Channel)
2926:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
2927:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* Parameter "Channel" is used with masks because containing                */
2928:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* other bits reserved for other purpose.                                   */
2929:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
2930:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
2931:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
2932:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
2933:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Add channel to ADC group regular sequence: channel on rank corresponding to
2934:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         channel number.
2935:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   This function performs:
2936:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - Channels ordering into each rank of scan sequence:
2937:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           rank of each channel is fixed by channel HW number
2938:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           (channel 0 fixed on rank 0, channel 1 fixed on rank1, ...).
2939:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - Set channels selected by adding them to the current sequencer
2940:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           configuration.
2941:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, ADC group regular sequencer both modes
2942:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         "fully configurable" or "not fully configurable"
2943:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         are available, they can be chosen using
2944:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         function @ref LL_ADC_REG_SetSequencerConfigurable().
2945:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         This function can be used with setting "not fully configurable".
2946:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to description of functions @ref LL_ADC_REG_SetSequencerConfigurable()
2947:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         and @ref LL_ADC_REG_SetSequencerLength().
2948:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, after modifying sequencer (functions
2949:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @ref LL_ADC_REG_SetSequencerLength()
2950:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @ref LL_ADC_REG_SetSequencerRanks(), ...)
2951:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         it is mandatory to wait for the assertion of CCRDY flag
2952:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         using @ref LL_ADC_IsActiveFlag_CCRDY().
2953:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Otherwise, some actions may be ignored.
2954:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to description of @ref LL_ADC_IsActiveFlag_CCRDY
ARM GAS  /tmp/ccN8TuGv.s 			page 71


2955:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         for more details.
2956:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
2957:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
2958:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, to measure internal channels (VrefInt,
2959:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         TempSensor, ...), measurement paths to internal channels must be
2960:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         enabled separately.
2961:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         This can be done using function @ref LL_ADC_SetCommonPathInternalCh().
2962:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
2963:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC state:
2964:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
2965:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         on group regular.
2966:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   One or several values can be selected.
2967:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Example: (LL_ADC_CHANNEL_4 | LL_ADC_CHANNEL_12 | ...)
2968:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CHSELR   CHSEL0         LL_ADC_REG_SetSequencerChAdd\n
2969:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL1         LL_ADC_REG_SetSequencerChAdd\n
2970:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL2         LL_ADC_REG_SetSequencerChAdd\n
2971:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL3         LL_ADC_REG_SetSequencerChAdd\n
2972:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL4         LL_ADC_REG_SetSequencerChAdd\n
2973:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL5         LL_ADC_REG_SetSequencerChAdd\n
2974:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL6         LL_ADC_REG_SetSequencerChAdd\n
2975:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL7         LL_ADC_REG_SetSequencerChAdd\n
2976:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL8         LL_ADC_REG_SetSequencerChAdd\n
2977:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL9         LL_ADC_REG_SetSequencerChAdd\n
2978:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL10        LL_ADC_REG_SetSequencerChAdd\n
2979:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL11        LL_ADC_REG_SetSequencerChAdd\n
2980:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL12        LL_ADC_REG_SetSequencerChAdd\n
2981:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL13        LL_ADC_REG_SetSequencerChAdd\n
2982:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL14        LL_ADC_REG_SetSequencerChAdd\n
2983:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL15        LL_ADC_REG_SetSequencerChAdd\n
2984:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL16        LL_ADC_REG_SetSequencerChAdd\n
2985:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL17        LL_ADC_REG_SetSequencerChAdd\n
2986:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL18        LL_ADC_REG_SetSequencerChAdd
2987:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
2988:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  Channel This parameter can be a combination of the following values:
2989:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
2990:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
2991:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
2992:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
2993:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
2994:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
2995:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
2996:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
2997:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
2998:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
2999:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
3000:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
3001:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
3002:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
3003:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
3004:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15         (1)
3005:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16         (1)
3006:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17         (1)
3007:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT
3008:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR
3009:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT
3010:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DACCH1
3011:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *
ARM GAS  /tmp/ccN8TuGv.s 			page 72


3012:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (1) On STM32WL, parameter can be set in ADC group sequencer
3013:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             only if sequencer is set in mode "not fully configurable",
3014:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
3015:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
3016:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
3017:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
3018:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
3019:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* Parameter "Channel" is used with masks because containing                */
3020:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* other bits reserved for other purpose.                                   */
3021:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
3022:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
3023:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
3024:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
3025:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Remove channel to ADC group regular sequence: channel on rank corresponding to
3026:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         channel number.
3027:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   This function performs:
3028:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - Channels ordering into each rank of scan sequence:
3029:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           rank of each channel is fixed by channel HW number
3030:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           (channel 0 fixed on rank 0, channel 1 fixed on rank1, ...).
3031:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - Set channels selected by removing them to the current sequencer
3032:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           configuration.
3033:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, ADC group regular sequencer both modes
3034:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         "fully configurable" or "not fully configurable"
3035:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         are available, they can be chosen using
3036:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         function @ref LL_ADC_REG_SetSequencerConfigurable().
3037:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         This function can be used with setting "not fully configurable".
3038:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to description of functions @ref LL_ADC_REG_SetSequencerConfigurable()
3039:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         and @ref LL_ADC_REG_SetSequencerLength().
3040:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, after modifying sequencer (functions
3041:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @ref LL_ADC_REG_SetSequencerLength()
3042:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @ref LL_ADC_REG_SetSequencerRanks(), ...)
3043:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         it is mandatory to wait for the assertion of CCRDY flag
3044:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         using @ref LL_ADC_IsActiveFlag_CCRDY().
3045:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Otherwise, some actions may be ignored.
3046:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to description of @ref LL_ADC_IsActiveFlag_CCRDY
3047:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         for more details.
3048:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
3049:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
3050:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, to measure internal channels (VrefInt,
3051:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         TempSensor, ...), measurement paths to internal channels must be
3052:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         enabled separately.
3053:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         This can be done using function @ref LL_ADC_SetCommonPathInternalCh().
3054:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3055:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC state:
3056:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3057:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         on group regular.
3058:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   One or several values can be selected.
3059:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Example: (LL_ADC_CHANNEL_4 | LL_ADC_CHANNEL_12 | ...)
3060:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CHSELR   CHSEL0         LL_ADC_REG_SetSequencerChRem\n
3061:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL1         LL_ADC_REG_SetSequencerChRem\n
3062:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL2         LL_ADC_REG_SetSequencerChRem\n
3063:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL3         LL_ADC_REG_SetSequencerChRem\n
3064:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL4         LL_ADC_REG_SetSequencerChRem\n
3065:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL5         LL_ADC_REG_SetSequencerChRem\n
3066:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL6         LL_ADC_REG_SetSequencerChRem\n
3067:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL7         LL_ADC_REG_SetSequencerChRem\n
3068:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL8         LL_ADC_REG_SetSequencerChRem\n
ARM GAS  /tmp/ccN8TuGv.s 			page 73


3069:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL9         LL_ADC_REG_SetSequencerChRem\n
3070:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL10        LL_ADC_REG_SetSequencerChRem\n
3071:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL11        LL_ADC_REG_SetSequencerChRem\n
3072:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL12        LL_ADC_REG_SetSequencerChRem\n
3073:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL13        LL_ADC_REG_SetSequencerChRem\n
3074:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL14        LL_ADC_REG_SetSequencerChRem\n
3075:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL15        LL_ADC_REG_SetSequencerChRem\n
3076:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL16        LL_ADC_REG_SetSequencerChRem\n
3077:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL17        LL_ADC_REG_SetSequencerChRem\n
3078:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL18        LL_ADC_REG_SetSequencerChRem
3079:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
3080:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  Channel This parameter can be a combination of the following values:
3081:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
3082:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
3083:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
3084:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
3085:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
3086:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
3087:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
3088:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
3089:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
3090:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
3091:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
3092:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
3093:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
3094:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
3095:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
3096:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15         (1)
3097:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16         (1)
3098:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17         (1)
3099:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT
3100:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR
3101:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT
3102:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DACCH1
3103:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *
3104:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (1) On STM32WL, parameter can be set in ADC group sequencer
3105:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             only if sequencer is set in mode "not fully configurable",
3106:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
3107:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
3108:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
3109:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
3110:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
3111:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* Parameter "Channel" is used with masks because containing                */
3112:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* other bits reserved for other purpose.                                   */
3113:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
3114:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
3115:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
3116:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
3117:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get ADC group regular sequence: channel on rank corresponding to
3118:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         channel number.
3119:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   This function performs:
3120:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - Channels order reading into each rank of scan sequence:
3121:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           rank of each channel is fixed by channel HW number
3122:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           (channel 0 fixed on rank 0, channel 1 fixed on rank1, ...).
3123:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, ADC group regular sequencer both modes
3124:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         "fully configurable" or "not fully configurable"
3125:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         are available, they can be chosen using
ARM GAS  /tmp/ccN8TuGv.s 			page 74


3126:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         function @ref LL_ADC_REG_SetSequencerConfigurable().
3127:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         This function can be used with setting "not fully configurable".
3128:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to description of functions @ref LL_ADC_REG_SetSequencerConfigurable()
3129:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         and @ref LL_ADC_REG_SetSequencerLength().
3130:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
3131:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
3132:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, to measure internal channels (VrefInt,
3133:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         TempSensor, ...), measurement paths to internal channels must be
3134:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         enabled separately.
3135:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         This can be done using function @ref LL_ADC_SetCommonPathInternalCh().
3136:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3137:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC state:
3138:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3139:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         on group regular.
3140:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   One or several values can be retrieved.
3141:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Example: (LL_ADC_CHANNEL_4 | LL_ADC_CHANNEL_12 | ...)
3142:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CHSELR   CHSEL0         LL_ADC_REG_GetSequencerChannels\n
3143:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL1         LL_ADC_REG_GetSequencerChannels\n
3144:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL2         LL_ADC_REG_GetSequencerChannels\n
3145:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL3         LL_ADC_REG_GetSequencerChannels\n
3146:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL4         LL_ADC_REG_GetSequencerChannels\n
3147:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL5         LL_ADC_REG_GetSequencerChannels\n
3148:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL6         LL_ADC_REG_GetSequencerChannels\n
3149:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL7         LL_ADC_REG_GetSequencerChannels\n
3150:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL8         LL_ADC_REG_GetSequencerChannels\n
3151:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL9         LL_ADC_REG_GetSequencerChannels\n
3152:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL10        LL_ADC_REG_GetSequencerChannels\n
3153:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL11        LL_ADC_REG_GetSequencerChannels\n
3154:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL12        LL_ADC_REG_GetSequencerChannels\n
3155:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL13        LL_ADC_REG_GetSequencerChannels\n
3156:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL14        LL_ADC_REG_GetSequencerChannels\n
3157:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL15        LL_ADC_REG_GetSequencerChannels\n
3158:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL16        LL_ADC_REG_GetSequencerChannels\n
3159:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL17        LL_ADC_REG_GetSequencerChannels\n
3160:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CHSELR   CHSEL18        LL_ADC_REG_GetSequencerChannels
3161:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
3162:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Returned value can be a combination of the following values:
3163:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
3164:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
3165:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
3166:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
3167:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
3168:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
3169:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
3170:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
3171:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
3172:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
3173:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
3174:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
3175:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
3176:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
3177:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
3178:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15         (1)
3179:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16         (1)
3180:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17         (1)
3181:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT
3182:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR
ARM GAS  /tmp/ccN8TuGv.s 			page 75


3183:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT
3184:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DACCH1
3185:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *
3186:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (1) On STM32WL, parameter can be set in ADC group sequencer
3187:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             only if sequencer is set in mode "not fully configurable",
3188:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
3189:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
3190:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetSequencerChannels(ADC_TypeDef *ADCx)
3191:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
3192:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   uint32_t channels_bitfield = (uint32_t)READ_BIT(ADCx->CHSELR, ADC_CHSELR_CHSEL);
3193:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
3194:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return ((((channels_bitfield & ADC_CHSELR_CHSEL0) >> ADC_CHSELR_CHSEL0_BITOFFSET_POS) * LL_ADC_CH
3195:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****           | (((channels_bitfield & ADC_CHSELR_CHSEL1) >> ADC_CHSELR_CHSEL1_BITOFFSET_POS) * LL_ADC_
3196:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****           | (((channels_bitfield & ADC_CHSELR_CHSEL2) >> ADC_CHSELR_CHSEL2_BITOFFSET_POS) * LL_ADC_
3197:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****           | (((channels_bitfield & ADC_CHSELR_CHSEL3) >> ADC_CHSELR_CHSEL3_BITOFFSET_POS) * LL_ADC_
3198:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****           | (((channels_bitfield & ADC_CHSELR_CHSEL4) >> ADC_CHSELR_CHSEL4_BITOFFSET_POS) * LL_ADC_
3199:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****           | (((channels_bitfield & ADC_CHSELR_CHSEL5) >> ADC_CHSELR_CHSEL5_BITOFFSET_POS) * LL_ADC_
3200:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****           | (((channels_bitfield & ADC_CHSELR_CHSEL6) >> ADC_CHSELR_CHSEL6_BITOFFSET_POS) * LL_ADC_
3201:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****           | (((channels_bitfield & ADC_CHSELR_CHSEL7) >> ADC_CHSELR_CHSEL7_BITOFFSET_POS) * LL_ADC_
3202:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****           | (((channels_bitfield & ADC_CHSELR_CHSEL8) >> ADC_CHSELR_CHSEL8_BITOFFSET_POS) * LL_ADC_
3203:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****           | (((channels_bitfield & ADC_CHSELR_CHSEL9) >> ADC_CHSELR_CHSEL9_BITOFFSET_POS) * LL_ADC_
3204:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****           | (((channels_bitfield & ADC_CHSELR_CHSEL10) >> ADC_CHSELR_CHSEL10_BITOFFSET_POS) * LL_AD
3205:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****           | (((channels_bitfield & ADC_CHSELR_CHSEL11) >> ADC_CHSELR_CHSEL11_BITOFFSET_POS) * LL_AD
3206:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****           | (((channels_bitfield & ADC_CHSELR_CHSEL12) >> ADC_CHSELR_CHSEL12_BITOFFSET_POS) * LL_AD
3207:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****           | (((channels_bitfield & ADC_CHSELR_CHSEL13) >> ADC_CHSELR_CHSEL13_BITOFFSET_POS) * LL_AD
3208:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****           | (((channels_bitfield & ADC_CHSELR_CHSEL14) >> ADC_CHSELR_CHSEL14_BITOFFSET_POS) * LL_AD
3209:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****           | (((channels_bitfield & ADC_CHSELR_CHSEL15) >> ADC_CHSELR_CHSEL15_BITOFFSET_POS) * LL_AD
3210:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****           | (((channels_bitfield & ADC_CHSELR_CHSEL16) >> ADC_CHSELR_CHSEL16_BITOFFSET_POS) * LL_AD
3211:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****           | (((channels_bitfield & ADC_CHSELR_CHSEL17) >> ADC_CHSELR_CHSEL17_BITOFFSET_POS) * LL_AD
3212:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****          );
3213:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
3214:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
3215:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
3216:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Set ADC continuous conversion mode on ADC group regular.
3217:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Description of ADC continuous conversion mode:
3218:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - single mode: one conversion per trigger
3219:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - continuous mode: after the first trigger, following
3220:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           conversions launched successively automatically.
3221:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   It is not possible to enable both ADC group regular
3222:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         continuous mode and sequencer discontinuous mode.
3223:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3224:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC state:
3225:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC must be disabled.
3226:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CFGR1    CONT           LL_ADC_REG_SetContinuousMode
3227:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
3228:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  Continuous This parameter can be one of the following values:
3229:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_SINGLE
3230:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_CONTINUOUS
3231:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
3232:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
3233:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetContinuousMode(ADC_TypeDef *ADCx, uint32_t Continuous)
3234:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
3235:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_CONT, Continuous);
3236:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
3237:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
3238:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
3239:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get ADC continuous conversion mode on ADC group regular.
ARM GAS  /tmp/ccN8TuGv.s 			page 76


3240:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Description of ADC continuous conversion mode:
3241:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - single mode: one conversion per trigger
3242:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - continuous mode: after the first trigger, following
3243:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           conversions launched successively automatically.
3244:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CFGR1    CONT           LL_ADC_REG_GetContinuousMode
3245:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
3246:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3247:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_SINGLE
3248:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_CONTINUOUS
3249:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
3250:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetContinuousMode(ADC_TypeDef *ADCx)
3251:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
3252:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_CONT));
3253:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
3254:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
3255:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
3256:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Set ADC group regular conversion data transfer: no transfer or
3257:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         transfer by DMA, and DMA requests mode.
3258:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   If transfer by DMA selected, specifies the DMA requests
3259:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         mode:
3260:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - Limited mode (One shot mode): DMA transfer requests are stopped
3261:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           when number of DMA data transfers (number of
3262:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           ADC conversions) is reached.
3263:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode non-circular.
3264:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - Unlimited mode: DMA transfer requests are unlimited,
3265:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           whatever number of DMA data transfers (number of
3266:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           ADC conversions).
3267:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode circular.
3268:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   If ADC DMA requests mode is set to unlimited and DMA is set to
3269:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         mode non-circular:
3270:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         when DMA transfers size will be reached, DMA will stop transfers of
3271:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC conversions data ADC will raise an overrun error
3272:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *        (overrun flag and interruption if enabled).
3273:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   To configure DMA source address (peripheral address),
3274:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         use function @ref LL_ADC_DMA_GetRegAddr().
3275:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3276:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC state:
3277:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC must be disabled.
3278:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CFGR1    DMAEN          LL_ADC_REG_SetDMATransfer\n
3279:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CFGR1    DMACFG         LL_ADC_REG_SetDMATransfer
3280:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
3281:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  DMATransfer This parameter can be one of the following values:
3282:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
3283:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
3284:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
3285:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
3286:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
3287:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetDMATransfer(ADC_TypeDef *ADCx, uint32_t DMATransfer)
3288:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
3289:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
3290:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
3291:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
3292:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
3293:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get ADC group regular conversion data transfer: no transfer or
3294:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         transfer by DMA, and DMA requests mode.
3295:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   If transfer by DMA selected, specifies the DMA requests
3296:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         mode:
ARM GAS  /tmp/ccN8TuGv.s 			page 77


3297:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - Limited mode (One shot mode): DMA transfer requests are stopped
3298:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           when number of DMA data transfers (number of
3299:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           ADC conversions) is reached.
3300:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode non-circular.
3301:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - Unlimited mode: DMA transfer requests are unlimited,
3302:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           whatever number of DMA data transfers (number of
3303:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           ADC conversions).
3304:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode circular.
3305:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   If ADC DMA requests mode is set to unlimited and DMA is set to
3306:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         mode non-circular:
3307:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         when DMA transfers size will be reached, DMA will stop transfers of
3308:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC conversions data ADC will raise an overrun error
3309:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (overrun flag and interruption if enabled).
3310:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   To configure DMA source address (peripheral address),
3311:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         use function @ref LL_ADC_DMA_GetRegAddr().
3312:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CFGR1    DMAEN          LL_ADC_REG_GetDMATransfer\n
3313:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CFGR1    DMACFG         LL_ADC_REG_GetDMATransfer
3314:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
3315:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3316:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
3317:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
3318:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
3319:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
3320:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
3321:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
3322:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
3323:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
3324:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
3325:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
3326:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Set ADC group regular behavior in case of overrun:
3327:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         data preserved or overwritten.
3328:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Compatibility with devices without feature overrun:
3329:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         other devices without this feature have a behavior
3330:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         equivalent to data overwritten.
3331:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         The default setting of overrun is data preserved.
3332:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Therefore, for compatibility with all devices, parameter
3333:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         overrun should be set to data overwritten.
3334:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3335:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC state:
3336:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC must be disabled.
3337:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CFGR1    OVRMOD         LL_ADC_REG_SetOverrun
3338:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
3339:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  Overrun This parameter can be one of the following values:
3340:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_OVR_DATA_PRESERVED
3341:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_OVR_DATA_OVERWRITTEN
3342:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
3343:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
3344:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetOverrun(ADC_TypeDef *ADCx, uint32_t Overrun)
3345:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
3346:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_OVRMOD, Overrun);
3347:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
3348:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
3349:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
3350:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get ADC group regular behavior in case of overrun:
3351:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         data preserved or overwritten.
3352:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CFGR1    OVRMOD         LL_ADC_REG_GetOverrun
3353:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
ARM GAS  /tmp/ccN8TuGv.s 			page 78


3354:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3355:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_OVR_DATA_PRESERVED
3356:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_OVR_DATA_OVERWRITTEN
3357:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
3358:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetOverrun(ADC_TypeDef *ADCx)
3359:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
3360:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_OVRMOD));
3361:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
3362:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
3363:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
3364:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
3365:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
3366:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
3367:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_Channels Configuration of ADC hierarchical scope: channels
3368:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
3369:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
3370:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
3371:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
3372:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Set sampling time of the selected ADC channel
3373:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Unit: ADC clock cycles.
3374:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this device, sampling time is on channel scope: independently
3375:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         of channel mapped on ADC group regular or injected.
3376:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   In case of internal channel (VrefInt, TempSensor, ...) to be
3377:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         converted:
3378:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         sampling time constraints must be respected (sampling time can be
3379:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         adjusted in function of ADC clock frequency and sampling time
3380:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         setting).
3381:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to device datasheet for timings values (parameters TS_vrefint,
3382:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         TS_temp, ...).
3383:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Conversion time is the addition of sampling time and processing time.
3384:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to reference manual for ADC processing time of
3385:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         this STM32 series.
3386:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   In case of ADC conversion of internal channel (VrefInt,
3387:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         temperature sensor, ...), a sampling time minimum value
3388:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         is required.
3389:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to device datasheet.
3390:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3391:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC state:
3392:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3393:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         on group regular.
3394:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll SMPR     SMPSEL0        LL_ADC_SetChannelSamplingTime\n
3395:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         SMPR     SMPSEL1        LL_ADC_SetChannelSamplingTime\n
3396:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         SMPR     SMPSEL2        LL_ADC_SetChannelSamplingTime\n
3397:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         SMPR     SMPSEL3        LL_ADC_SetChannelSamplingTime\n
3398:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         SMPR     SMPSEL4        LL_ADC_SetChannelSamplingTime\n
3399:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         SMPR     SMPSEL5        LL_ADC_SetChannelSamplingTime\n
3400:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         SMPR     SMPSEL6        LL_ADC_SetChannelSamplingTime\n
3401:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         SMPR     SMPSEL7        LL_ADC_SetChannelSamplingTime\n
3402:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         SMPR     SMPSEL8        LL_ADC_SetChannelSamplingTime\n
3403:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         SMPR     SMPSEL9        LL_ADC_SetChannelSamplingTime\n
3404:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         SMPR     SMPSEL10       LL_ADC_SetChannelSamplingTime\n
3405:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         SMPR     SMPSEL11       LL_ADC_SetChannelSamplingTime\n
3406:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         SMPR     SMPSEL12       LL_ADC_SetChannelSamplingTime\n
3407:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         SMPR     SMPSEL13       LL_ADC_SetChannelSamplingTime\n
3408:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         SMPR     SMPSEL14       LL_ADC_SetChannelSamplingTime\n
3409:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         SMPR     SMPSEL15       LL_ADC_SetChannelSamplingTime\n
3410:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         SMPR     SMPSEL16       LL_ADC_SetChannelSamplingTime\n
ARM GAS  /tmp/ccN8TuGv.s 			page 79


3411:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         SMPR     SMPSEL17       LL_ADC_SetChannelSamplingTime\n
3412:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         SMPR     SMPSEL18       LL_ADC_SetChannelSamplingTime
3413:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
3414:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  Channel This parameter can be a combination of the following values:
3415:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
3416:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
3417:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
3418:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
3419:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
3420:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
3421:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
3422:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
3423:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
3424:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
3425:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
3426:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
3427:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
3428:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
3429:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
3430:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15         (1)
3431:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16         (1)
3432:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17         (1)
3433:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT
3434:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR
3435:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT
3436:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DACCH1
3437:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *
3438:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (1) On STM32WL, parameter can be set in ADC group sequencer
3439:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             only if sequencer is set in mode "not fully configurable",
3440:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
3441:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  SamplingTimeY This parameter can be one of the following values:
3442:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
3443:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
3444:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
3445:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
3446:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t Sa
3447:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
3448:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* Parameter "Channel" is used with masks because containing                */
3449:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* other bits reserved for other purpose.                                   */
3450:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   MODIFY_REG(ADCx->SMPR,
3451:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
3452:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MA
3453:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****             );
3454:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
3455:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
3456:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
3457:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get sampling time of the selected ADC channel
3458:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Unit: ADC clock cycles.
3459:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this device, sampling time is on channel scope: independently
3460:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         of channel mapped on ADC group regular or injected.
3461:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Conversion time is the addition of sampling time and processing time.
3462:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to reference manual for ADC processing time of
3463:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         this STM32 series.
3464:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll SMPR     SMPSEL0        LL_ADC_GetChannelSamplingTime\n
3465:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         SMPR     SMPSEL1        LL_ADC_GetChannelSamplingTime\n
3466:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         SMPR     SMPSEL2        LL_ADC_GetChannelSamplingTime\n
3467:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         SMPR     SMPSEL3        LL_ADC_GetChannelSamplingTime\n
ARM GAS  /tmp/ccN8TuGv.s 			page 80


3468:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         SMPR     SMPSEL4        LL_ADC_GetChannelSamplingTime\n
3469:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         SMPR     SMPSEL5        LL_ADC_GetChannelSamplingTime\n
3470:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         SMPR     SMPSEL6        LL_ADC_GetChannelSamplingTime\n
3471:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         SMPR     SMPSEL7        LL_ADC_GetChannelSamplingTime\n
3472:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         SMPR     SMPSEL8        LL_ADC_GetChannelSamplingTime\n
3473:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         SMPR     SMPSEL9        LL_ADC_GetChannelSamplingTime\n
3474:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         SMPR     SMPSEL10       LL_ADC_GetChannelSamplingTime\n
3475:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         SMPR     SMPSEL11       LL_ADC_GetChannelSamplingTime\n
3476:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         SMPR     SMPSEL12       LL_ADC_GetChannelSamplingTime\n
3477:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         SMPR     SMPSEL13       LL_ADC_GetChannelSamplingTime\n
3478:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         SMPR     SMPSEL14       LL_ADC_GetChannelSamplingTime\n
3479:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         SMPR     SMPSEL15       LL_ADC_GetChannelSamplingTime\n
3480:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         SMPR     SMPSEL16       LL_ADC_GetChannelSamplingTime\n
3481:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         SMPR     SMPSEL17       LL_ADC_GetChannelSamplingTime\n
3482:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         SMPR     SMPSEL18       LL_ADC_GetChannelSamplingTime
3483:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
3484:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
3485:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
3486:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
3487:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
3488:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
3489:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
3490:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
3491:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
3492:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
3493:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
3494:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
3495:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
3496:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
3497:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
3498:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
3499:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
3500:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15         (1)
3501:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16         (1)
3502:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17         (1)
3503:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT
3504:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR
3505:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT
3506:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DACCH1
3507:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *
3508:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (1) On STM32WL, parameter can be set in ADC group sequencer
3509:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             only if sequencer is set in mode "not fully configurable",
3510:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
3511:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3512:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
3513:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
3514:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
3515:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel)
3516:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
3517:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   __IO uint32_t smpr = READ_REG(ADCx->SMPR);
3518:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
3519:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* Retrieve sampling time bit corresponding to the selected channel            */
3520:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* and shift it to position 0.                                                 */
3521:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   uint32_t smp_channel_posbit0 = ((smpr & ADC_SAMPLING_TIME_CH_MASK)
3522:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                   >> ((((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NU
3523:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                       0x1FUL));
3524:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
ARM GAS  /tmp/ccN8TuGv.s 			page 81


3525:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* Select sampling time bitfield depending on sampling time bit value 0 or 1.  */
3526:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return ((~(smp_channel_posbit0) * LL_ADC_SAMPLINGTIME_COMMON_1)
3527:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****           | (smp_channel_posbit0 * LL_ADC_SAMPLINGTIME_COMMON_2));
3528:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
3529:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
3530:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
3531:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
3532:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
3533:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
3534:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_AnalogWatchdog Configuration of ADC transversal scope: an
3535:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
3536:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
3537:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
3538:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
3539:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Set ADC analog watchdog monitored channels:
3540:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         a single channel, multiple channels or all channels,
3541:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         on ADC group regular.
3542:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Once monitored channels are selected, analog watchdog
3543:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         is enabled.
3544:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   In case of need to define a single channel to monitor
3545:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         with analog watchdog from sequencer channel definition,
3546:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         use helper macro @ref __LL_ADC_ANALOGWD_CHANNEL_GROUP().
3547:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, there are 2 kinds of analog watchdog
3548:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         instance:
3549:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - AWD standard (instance AWD1):
3550:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
3551:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           - groups monitored: ADC group regular.
3552:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
3553:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             ADC resolution configured).
3554:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - AWD flexible (instances AWD2, AWD3):
3555:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           - channels monitored: flexible on channels monitored, selection is
3556:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             channel wise, from from 1 to all channels.
3557:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             Specificity of this analog watchdog: Multiple channels can
3558:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             be selected. For example:
3559:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             (LL_ADC_AWD_CHANNEL4_REG_INJ | LL_ADC_AWD_CHANNEL5_REG_INJ | ...)
3560:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           - groups monitored: not selection possible (monitoring on both
3561:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             groups regular and injected).
3562:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             Channels selected are monitored on groups regular and injected:
3563:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG_INJ (do not use parameters
3564:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG and LL_ADC_AWD_CHANNELxx_INJ)
3565:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
3566:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             ADC resolution configured).
3567:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3568:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC state:
3569:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC must be disabled.
3570:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CFGR1    AWD1CH         LL_ADC_SetAnalogWDMonitChannels\n
3571:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CFGR1    AWD1SGL        LL_ADC_SetAnalogWDMonitChannels\n
3572:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CFGR1    AWD1EN         LL_ADC_SetAnalogWDMonitChannels\n
3573:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         AWD2CR   AWD2CH         LL_ADC_SetAnalogWDMonitChannels\n
3574:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         AWD3CR   AWD3CH         LL_ADC_SetAnalogWDMonitChannels
3575:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
3576:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
3577:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
3578:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2
3579:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3
3580:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  AWDChannelGroup This parameter can be one of the following values:
3581:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_DISABLE
ARM GAS  /tmp/ccN8TuGv.s 			page 82


3582:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG
3583:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG
3584:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG
3585:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG
3586:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG
3587:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG
3588:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG
3589:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG
3590:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG
3591:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG
3592:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG
3593:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG
3594:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG
3595:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG
3596:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG
3597:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG
3598:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG
3599:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG
3600:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG
3601:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_REG
3602:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_REG
3603:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_REG
3604:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DACCH1_REG
3605:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
3606:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
3607:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWD
3608:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
3609:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
3610:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* in register and register position depending on parameter "AWDy".         */
3611:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
3612:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* containing other bits reserved for other purpose.                        */
3613:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   __IO uint32_t *preg;
3614:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
3615:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   if (AWDy == LL_ADC_AWD1)
3616:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   {
3617:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****     preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR1, 0UL);
3618:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   }
3619:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   else
3620:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   {
3621:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****     preg = __ADC_PTR_REG_OFFSET(ADCx->AWD2CR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK)) >> (ADC_AWD_CRX
3622:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   }
3623:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
3624:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   MODIFY_REG(*preg,
3625:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
3626:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              AWDChannelGroup & AWDy);
3627:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
3628:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
3629:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
3630:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get ADC analog watchdog monitored channel.
3631:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Usage of the returned channel number:
3632:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - To reinject this channel into another function LL_ADC_xxx:
3633:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           the returned channel number is only partly formatted on definition
3634:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           of literals LL_ADC_CHANNEL_x. Therefore, it has to be compared
3635:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           with parts of literals LL_ADC_CHANNEL_x or using
3636:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           helper macro @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
3637:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           Then the selected literal LL_ADC_CHANNEL_x can be used
3638:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           as parameter for another function.
ARM GAS  /tmp/ccN8TuGv.s 			page 83


3639:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - To get the channel number in decimal format:
3640:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           process the returned value with the helper macro
3641:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
3642:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           Applicable only when the analog watchdog is set to monitor
3643:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           one channel.
3644:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, there are 2 kinds of analog watchdog
3645:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         instance:
3646:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - AWD standard (instance AWD1):
3647:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
3648:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           - groups monitored: ADC group regular.
3649:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
3650:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             ADC resolution configured).
3651:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - AWD flexible (instances AWD2, AWD3):
3652:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           - channels monitored: flexible on channels monitored, selection is
3653:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             channel wise, from from 1 to all channels.
3654:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             Specificity of this analog watchdog: Multiple channels can
3655:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             be selected. For example:
3656:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             (LL_ADC_AWD_CHANNEL4_REG_INJ | LL_ADC_AWD_CHANNEL5_REG_INJ | ...)
3657:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           - groups monitored: not selection possible (monitoring on both
3658:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             groups regular and injected).
3659:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             Channels selected are monitored on groups regular and injected:
3660:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG_INJ (do not use parameters
3661:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG and LL_ADC_AWD_CHANNELxx_INJ)
3662:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
3663:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             ADC resolution configured).
3664:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3665:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC state:
3666:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3667:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         on group regular.
3668:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CFGR1    AWD1CH         LL_ADC_GetAnalogWDMonitChannels\n
3669:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CFGR1    AWD1SGL        LL_ADC_GetAnalogWDMonitChannels\n
3670:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CFGR1    AWD1EN         LL_ADC_GetAnalogWDMonitChannels\n
3671:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         AWD2CR   AWD2CH         LL_ADC_GetAnalogWDMonitChannels\n
3672:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         AWD3CR   AWD3CH         LL_ADC_GetAnalogWDMonitChannels
3673:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
3674:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
3675:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
3676:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2 (1)
3677:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3 (1)
3678:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *
3679:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (1) On this AWD number, monitored channel can be retrieved
3680:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             if only 1 channel is programmed (or none or all channels).
3681:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             This function cannot retrieve monitored channel if
3682:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             multiple channels are programmed simultaneously
3683:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             by bitfield.
3684:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3685:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_DISABLE
3686:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG
3687:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG
3688:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG
3689:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG
3690:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG
3691:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG
3692:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG
3693:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG
3694:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG
3695:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG
ARM GAS  /tmp/ccN8TuGv.s 			page 84


3696:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG
3697:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG
3698:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG
3699:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG
3700:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG
3701:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG
3702:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG
3703:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG
3704:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG
3705:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
3706:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy)
3707:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
3708:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR1, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> A
3709:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                              + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * ADC_AWD_C
3710:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
3711:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   uint32_t analog_wd_monit_channels = (READ_BIT(*preg, AWDy) & AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK);
3712:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
3713:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* If "analog_wd_monit_channels" == 0, then the selected AWD is disabled       */
3714:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* (parameter value LL_ADC_AWD_DISABLE).                                    */
3715:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* Else, the selected AWD is enabled and is monitoring a group of channels  */
3716:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* or a single channel.                                                     */
3717:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   if (analog_wd_monit_channels != 0UL)
3718:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   {
3719:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****     if (AWDy == LL_ADC_AWD1)
3720:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****     {
3721:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****       if ((analog_wd_monit_channels & ADC_CFGR1_AWD1SGL) == 0UL)
3722:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****       {
3723:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****         /* AWD monitoring a group of channels */
3724:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****         analog_wd_monit_channels = ((analog_wd_monit_channels
3725:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                      | (ADC_AWD_CR23_CHANNEL_MASK)
3726:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                     )
3727:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                     & (~(ADC_CFGR1_AWD1CH))
3728:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                    );
3729:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****       }
3730:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****       else
3731:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****       {
3732:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****         /* AWD monitoring a single channel */
3733:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****         analog_wd_monit_channels = (analog_wd_monit_channels
3734:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                     | (ADC_AWD2CR_AWD2CH_0 << (analog_wd_monit_channels >> ADC_CFGR
3735:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                    );
3736:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****       }
3737:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****     }
3738:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****     else
3739:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****     {
3740:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****       if ((analog_wd_monit_channels & ADC_AWD_CR23_CHANNEL_MASK) == ADC_AWD_CR23_CHANNEL_MASK)
3741:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****       {
3742:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****         /* AWD monitoring a group of channels */
3743:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****         analog_wd_monit_channels = (ADC_AWD_CR23_CHANNEL_MASK
3744:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                     | (ADC_CFGR1_AWD1EN)
3745:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                    );
3746:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****       }
3747:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****       else
3748:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****       {
3749:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****         /* AWD monitoring a single channel */
3750:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****         /* AWD monitoring a group of channels */
3751:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****         analog_wd_monit_channels = (analog_wd_monit_channels
3752:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                     | (ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL)
ARM GAS  /tmp/ccN8TuGv.s 			page 85


3753:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                     | (__LL_ADC_CHANNEL_TO_DECIMAL_NB(analog_wd_monit_channels) << 
3754:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                    );
3755:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****       }
3756:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****     }
3757:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   }
3758:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
3759:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return analog_wd_monit_channels;
3760:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
3761:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
3762:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
3763:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Set ADC analog watchdog thresholds value of both thresholds
3764:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         high and low.
3765:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   If value of only one threshold high or low must be set,
3766:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         use function @ref LL_ADC_SetAnalogWDThresholds().
3767:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   In case of ADC resolution different of 12 bits,
3768:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         analog watchdog thresholds data require a specific shift.
3769:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Use helper macro @ref __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION().
3770:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, there are 2 kinds of analog watchdog
3771:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         instance:
3772:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - AWD standard (instance AWD1):
3773:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
3774:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           - groups monitored: ADC group regular.
3775:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
3776:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             ADC resolution configured).
3777:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - AWD flexible (instances AWD2, AWD3):
3778:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           - channels monitored: flexible on channels monitored, selection is
3779:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             channel wise, from from 1 to all channels.
3780:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             Specificity of this analog watchdog: Multiple channels can
3781:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             be selected. For example:
3782:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             (LL_ADC_AWD_CHANNEL4_REG_INJ | LL_ADC_AWD_CHANNEL5_REG_INJ | ...)
3783:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           - groups monitored: not selection possible (monitoring on both
3784:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             groups regular and injected).
3785:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             Channels selected are monitored on groups regular and injected:
3786:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG_INJ (do not use parameters
3787:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG and LL_ADC_AWD_CHANNELxx_INJ)
3788:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
3789:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             ADC resolution configured).
3790:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   If ADC oversampling is enabled, ADC analog watchdog thresholds are
3791:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         impacted: the comparison of analog watchdog thresholds is done on
3792:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         oversampling final computation (after ratio and shift application):
3793:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC data register bitfield [15:4] (12 most significant bits).
3794:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Examples:
3795:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - Oversampling ratio and shift selected to have ADC conversion data
3796:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           on 12 bits (ratio 16 and shift 4, or ratio 32 and shift 5, ...):
3797:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           ADC analog watchdog thresholds must be divided by 16.
3798:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - Oversampling ratio and shift selected to have ADC conversion data
3799:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           on 14 bits (ratio 16 and shift 2, or ratio 32 and shift 3, ...):
3800:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           ADC analog watchdog thresholds must be divided by 4.
3801:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - Oversampling ratio and shift selected to have ADC conversion data
3802:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           on 16 bits (ratio 16 and shift none, or ratio 32 and shift 1, ...):
3803:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           ADC analog watchdog thresholds match directly to ADC data register.
3804:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3805:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC state:
3806:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3807:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         on group regular.
3808:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll TR1      HT1            LL_ADC_ConfigAnalogWDThresholds\n
3809:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         TR2      HT2            LL_ADC_ConfigAnalogWDThresholds\n
ARM GAS  /tmp/ccN8TuGv.s 			page 86


3810:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         TR3      HT3            LL_ADC_ConfigAnalogWDThresholds\n
3811:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         TR1      LT1            LL_ADC_ConfigAnalogWDThresholds\n
3812:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         TR2      LT2            LL_ADC_ConfigAnalogWDThresholds\n
3813:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         TR3      LT3            LL_ADC_ConfigAnalogWDThresholds
3814:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
3815:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
3816:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
3817:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2
3818:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3
3819:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  AWDThresholdHighValue Value between Min_Data=0x000 and Max_Data=0xFFF
3820:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
3821:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
3822:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
3823:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWD
3824:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                                      uint32_t AWDThresholdLowValue)
3825:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
3826:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
3827:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* position in register and register position depending on parameter        */
3828:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* "AWDy".                                                                  */
3829:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
3830:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* containing other bits reserved for other purpose.                        */
3831:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK)) >> (
3832:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
3833:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   MODIFY_REG(*preg,
3834:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              ADC_TR1_HT1 | ADC_TR1_LT1,
3835:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
3836:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
3837:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
3838:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
3839:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Set ADC analog watchdog threshold value of threshold
3840:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         high or low.
3841:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   If values of both thresholds high or low must be set,
3842:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         use function @ref LL_ADC_ConfigAnalogWDThresholds().
3843:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   In case of ADC resolution different of 12 bits,
3844:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         analog watchdog thresholds data require a specific shift.
3845:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Use helper macro @ref __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION().
3846:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, there are 2 kinds of analog watchdog
3847:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         instance:
3848:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - AWD standard (instance AWD1):
3849:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
3850:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           - groups monitored: ADC group regular.
3851:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
3852:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             ADC resolution configured).
3853:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - AWD flexible (instances AWD2, AWD3):
3854:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           - channels monitored: flexible on channels monitored, selection is
3855:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             channel wise, from from 1 to all channels.
3856:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             Specificity of this analog watchdog: Multiple channels can
3857:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             be selected. For example:
3858:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             (LL_ADC_AWD_CHANNEL4_REG_INJ | LL_ADC_AWD_CHANNEL5_REG_INJ | ...)
3859:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           - groups monitored: not selection possible (monitoring on both
3860:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             groups regular and injected).
3861:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             Channels selected are monitored on groups regular and injected:
3862:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG_INJ (do not use parameters
3863:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG and LL_ADC_AWD_CHANNELxx_INJ)
3864:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
3865:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *             ADC resolution configured).
3866:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   If ADC oversampling is enabled, ADC analog watchdog thresholds are
ARM GAS  /tmp/ccN8TuGv.s 			page 87


3867:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         impacted: the comparison of analog watchdog thresholds is done on
3868:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         oversampling final computation (after ratio and shift application):
3869:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC data register bitfield [15:4] (12 most significant bits).
3870:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Examples:
3871:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - Oversampling ratio and shift selected to have ADC conversion data
3872:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           on 12 bits (ratio 16 and shift 4, or ratio 32 and shift 5, ...):
3873:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           ADC analog watchdog thresholds must be divided by 16.
3874:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - Oversampling ratio and shift selected to have ADC conversion data
3875:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           on 14 bits (ratio 16 and shift 2, or ratio 32 and shift 3, ...):
3876:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           ADC analog watchdog thresholds must be divided by 4.
3877:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - Oversampling ratio and shift selected to have ADC conversion data
3878:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           on 16 bits (ratio 16 and shift none, or ratio 32 and shift 1, ...):
3879:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           ADC analog watchdog thresholds match directly to ADC data register.
3880:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is not conditioned to
3881:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC state:
3882:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC can be disabled, enabled with or without conversion on going
3883:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         on ADC group regular.
3884:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll TR1      HT1            LL_ADC_SetAnalogWDThresholds\n
3885:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         TR2      HT2            LL_ADC_SetAnalogWDThresholds\n
3886:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         TR3      HT3            LL_ADC_SetAnalogWDThresholds\n
3887:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         TR1      LT1            LL_ADC_SetAnalogWDThresholds\n
3888:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         TR2      LT2            LL_ADC_SetAnalogWDThresholds\n
3889:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         TR3      LT3            LL_ADC_SetAnalogWDThresholds
3890:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
3891:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
3892:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
3893:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2
3894:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3
3895:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  AWDThresholdsHighLow This parameter can be one of the following values:
3896:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_HIGH
3897:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_LOW
3898:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  AWDThresholdValue Value between Min_Data=0x000 and Max_Data=0xFFF
3899:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
3900:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
3901:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThr
3902:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                                   uint32_t AWDThresholdValue)
3903:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
3904:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* Set bits with content of parameter "AWDThresholdValue" with bits         */
3905:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* position in register and register position depending on parameters       */
3906:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* "AWDThresholdsHighLow" and "AWDy".                                       */
3907:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* Parameters "AWDy" and "AWDThresholdValue" are used with masks because    */
3908:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* containing other bits reserved for other purpose.                        */
3909:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1,
3910:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                              (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK)) >> (ADC_AWD_TRX
3911:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                              + ((ADC_AWD_CR3_REGOFFSET & AWDy) >> (ADC_AWD_CRX_REGO
3912:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
3913:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   MODIFY_REG(*preg,
3914:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              AWDThresholdsHighLow,
3915:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              AWDThresholdValue << ((AWDThresholdsHighLow & ADC_AWD_TRX_BIT_HIGH_MASK) >> ADC_AWD_TR
3916:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
3917:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
3918:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
3919:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get ADC analog watchdog threshold value of threshold high,
3920:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         threshold low or raw data with ADC thresholds high and low
3921:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         concatenated.
3922:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   If raw data with ADC thresholds high and low is retrieved,
3923:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         the data of each threshold high or low can be isolated
ARM GAS  /tmp/ccN8TuGv.s 			page 88


3924:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         using helper macro:
3925:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @ref __LL_ADC_ANALOGWD_THRESHOLDS_HIGH_LOW().
3926:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   In case of ADC resolution different of 12 bits,
3927:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         analog watchdog thresholds data require a specific shift.
3928:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Use helper macro @ref __LL_ADC_ANALOGWD_GET_THRESHOLD_RESOLUTION().
3929:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll TR1      HT1            LL_ADC_GetAnalogWDThresholds\n
3930:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         TR2      HT2            LL_ADC_GetAnalogWDThresholds\n
3931:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         TR3      HT3            LL_ADC_GetAnalogWDThresholds\n
3932:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         TR1      LT1            LL_ADC_GetAnalogWDThresholds\n
3933:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         TR2      LT2            LL_ADC_GetAnalogWDThresholds\n
3934:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         TR3      LT3            LL_ADC_GetAnalogWDThresholds
3935:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
3936:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
3937:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
3938:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2
3939:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3
3940:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  AWDThresholdsHighLow This parameter can be one of the following values:
3941:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_HIGH
3942:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_LOW
3943:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLDS_HIGH_LOW
3944:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
3945:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
3946:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AW
3947:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
3948:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* Set bits with content of parameter "AWDThresholdValue" with bits         */
3949:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* position in register and register position depending on parameters       */
3950:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* "AWDThresholdsHighLow" and "AWDy".                                       */
3951:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* Parameters "AWDy" and "AWDThresholdValue" are used with masks because    */
3952:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* containing other bits reserved for other purpose.                        */
3953:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1,
3954:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                                    (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK)) >> (ADC_A
3955:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                                    + ((ADC_AWD_CR3_REGOFFSET & AWDy) >> (ADC_AWD_CR
3956:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
3957:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return (uint32_t)(READ_BIT(*preg,
3958:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                              (AWDThresholdsHighLow | ADC_TR1_LT1))
3959:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                     >> (((AWDThresholdsHighLow & ADC_AWD_TRX_BIT_HIGH_MASK) >> ADC_AWD_TRX_BIT_HIGH
3960:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                         & ~(AWDThresholdsHighLow & ADC_TR1_LT1)));
3961:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
3962:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
3963:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
3964:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
3965:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
3966:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
3967:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_oversampling Configuration of ADC transversal scope: over
3968:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
3969:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
3970:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
3971:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
3972:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Set ADC oversampling scope.
3973:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
3974:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC state:
3975:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC must be disabled.
3976:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CFGR2    OVSE           LL_ADC_SetOverSamplingScope
3977:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
3978:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  OvsScope This parameter can be one of the following values:
3979:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_DISABLE
3980:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
ARM GAS  /tmp/ccN8TuGv.s 			page 89


3981:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
3982:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
3983:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
3984:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
3985:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
3986:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
3987:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
3988:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
3989:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get ADC oversampling scope.
3990:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CFGR2    OVSE           LL_ADC_GetOverSamplingScope
3991:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
3992:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3993:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_DISABLE
3994:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
3995:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
3996:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOverSamplingScope(ADC_TypeDef *ADCx)
3997:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
3998:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_OVSE));
3999:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4000:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4001:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4002:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Set ADC oversampling discontinuous mode (triggered mode)
4003:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         on the selected ADC group.
4004:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Number of oversampled conversions are done either in:
4005:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - continuous mode (all conversions of oversampling ratio
4006:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           are done from 1 trigger)
4007:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - discontinuous mode (each conversion of oversampling ratio
4008:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           needs a trigger)
4009:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4010:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC state:
4011:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC must be disabled.
4012:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CFGR2    TOVS           LL_ADC_SetOverSamplingDiscont
4013:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4014:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  OverSamplingDiscont This parameter can be one of the following values:
4015:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_REG_CONT
4016:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_REG_DISCONT
4017:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
4018:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4019:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOverSamplingDiscont(ADC_TypeDef *ADCx, uint32_t OverSamplingDiscont)
4020:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4021:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_TOVS, OverSamplingDiscont);
4022:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4023:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4024:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4025:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get ADC oversampling discontinuous mode (triggered mode)
4026:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         on the selected ADC group.
4027:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Number of oversampled conversions are done either in:
4028:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - continuous mode (all conversions of oversampling ratio
4029:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           are done from 1 trigger)
4030:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - discontinuous mode (each conversion of oversampling ratio
4031:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           needs a trigger)
4032:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CFGR2    TOVS           LL_ADC_GetOverSamplingDiscont
4033:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4034:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4035:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_REG_CONT
4036:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_REG_DISCONT
4037:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
ARM GAS  /tmp/ccN8TuGv.s 			page 90


4038:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOverSamplingDiscont(ADC_TypeDef *ADCx)
4039:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4040:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_TOVS));
4041:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4042:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4043:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4044:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Set ADC oversampling
4045:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   This function set the 2 items of oversampling configuration:
4046:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - ratio
4047:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - shift
4048:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4049:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC state:
4050:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC must be disabled.
4051:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CFGR2    OVSS           LL_ADC_ConfigOverSamplingRatioShift\n
4052:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         CFGR2    OVSR           LL_ADC_ConfigOverSamplingRatioShift
4053:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4054:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  Ratio This parameter can be one of the following values:
4055:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_2
4056:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_4
4057:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_8
4058:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_16
4059:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_32
4060:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_64
4061:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_128
4062:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_256
4063:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  Shift This parameter can be one of the following values:
4064:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_NONE
4065:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_1
4066:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_2
4067:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_3
4068:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_4
4069:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_5
4070:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_6
4071:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_7
4072:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_8
4073:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
4074:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4075:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ConfigOverSamplingRatioShift(ADC_TypeDef *ADCx, uint32_t Ratio, uint32_
4076:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4077:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | Ratio));
4078:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4079:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4080:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4081:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get ADC oversampling ratio
4082:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CFGR2    OVSR           LL_ADC_GetOverSamplingRatio
4083:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4084:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Ratio This parameter can be one of the following values:
4085:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_2
4086:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_4
4087:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_8
4088:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_16
4089:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_32
4090:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_64
4091:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_128
4092:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_256
4093:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4094:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOverSamplingRatio(ADC_TypeDef *ADCx)
ARM GAS  /tmp/ccN8TuGv.s 			page 91


4095:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4096:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_OVSR));
4097:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4098:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4099:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4100:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get ADC oversampling shift
4101:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CFGR2    OVSS           LL_ADC_GetOverSamplingShift
4102:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4103:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Shift This parameter can be one of the following values:
4104:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_NONE
4105:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_1
4106:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_2
4107:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_3
4108:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_4
4109:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_5
4110:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_6
4111:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_7
4112:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_8
4113:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4114:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOverSamplingShift(ADC_TypeDef *ADCx)
4115:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4116:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_OVSS));
4117:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4118:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4119:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4120:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
4121:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4122:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4123:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EF_Operation_ADC_Instance Operation on ADC hierarchical scope: ADC instance
4124:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
4125:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4126:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4127:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4128:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Enable ADC instance internal voltage regulator.
4129:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, there are three possibilities to enable
4130:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         the voltage regulator:
4131:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - by enabling it manually
4132:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           using function @ref LL_ADC_EnableInternalRegulator().
4133:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - by launching a calibration
4134:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           using function @ref LL_ADC_StartCalibration().
4135:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - by enabling the ADC
4136:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           using function @ref LL_ADC_Enable().
4137:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, after ADC internal voltage regulator enable,
4138:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         a delay for ADC internal voltage regulator stabilization
4139:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         is required before performing a ADC calibration or ADC enable.
4140:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to device datasheet, parameter "tADCVREG_STUP".
4141:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_INTERNAL_REGUL_STAB_US.
4142:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4143:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC state:
4144:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC must be ADC disabled.
4145:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
4146:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4147:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
4148:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4149:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
4150:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4151:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
ARM GAS  /tmp/ccN8TuGv.s 			page 92


4152:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
4153:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
4154:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
4155:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
4156:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              ADC_CR_ADVREGEN);
4157:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4158:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4159:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4160:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Disable ADC internal voltage regulator.
4161:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4162:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC state:
4163:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC must be ADC disabled.
4164:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
4165:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4166:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
4167:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4168:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
4169:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4170:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
4171:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4172:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4173:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4174:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get the selected ADC instance internal voltage regulator state.
4175:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
4176:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4177:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
4178:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4179:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
 117              		.loc 2 4179 26 is_stmt 1 view .LVU42
 118              	.LBB152:
4180:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4181:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 119              		.loc 2 4181 3 view .LVU43
 120              		.loc 2 4181 12 is_stmt 0 view .LVU44
 121 0016 9368     		ldr	r3, [r2, #8]
 122              		.loc 2 4181 76 view .LVU45
 123 0018 13F0805F 		tst	r3, #268435456
 124 001c 1FD1     		bne	.L5
 125              	.LVL5:
 126              		.loc 2 4181 76 view .LVU46
 127              	.LBE152:
 128              	.LBE151:
 468:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 129              		.loc 1 468 5 is_stmt 1 view .LVU47
 130              	.LBB153:
 131              	.LBI153:
4149:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 132              		.loc 2 4149 22 view .LVU48
 133              	.LBB154:
4154:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 134              		.loc 2 4154 3 view .LVU49
 135 001e 9368     		ldr	r3, [r2, #8]
 136 0020 23F01043 		bic	r3, r3, #-1879048192
 137 0024 23F01703 		bic	r3, r3, #23
 138 0028 43F08053 		orr	r3, r3, #268435456
 139 002c 9360     		str	r3, [r2, #8]
 140              	.LVL6:
ARM GAS  /tmp/ccN8TuGv.s 			page 93


4154:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 141              		.loc 2 4154 3 is_stmt 0 view .LVU50
 142              	.LBE154:
 143              	.LBE153:
 475:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     while (wait_loop_index != 0UL)
 144              		.loc 1 475 5 is_stmt 1 view .LVU51
 475:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     while (wait_loop_index != 0UL)
 145              		.loc 1 475 89 is_stmt 0 view .LVU52
 146 002e 864B     		ldr	r3, .L35
 147 0030 1B68     		ldr	r3, [r3]
 148 0032 9B09     		lsrs	r3, r3, #6
 149 0034 854A     		ldr	r2, .L35+4
 150 0036 A2FB0323 		umull	r2, r3, r2, r3
 151 003a 9B09     		lsrs	r3, r3, #6
 475:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     while (wait_loop_index != 0UL)
 152              		.loc 1 475 109 view .LVU53
 153 003c 0133     		adds	r3, r3, #1
 475:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     while (wait_loop_index != 0UL)
 154              		.loc 1 475 69 view .LVU54
 155 003e 5B00     		lsls	r3, r3, #1
 475:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     while (wait_loop_index != 0UL)
 156              		.loc 1 475 21 view .LVU55
 157 0040 0193     		str	r3, [sp, #4]
 476:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 158              		.loc 1 476 5 is_stmt 1 view .LVU56
 476:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 159              		.loc 1 476 11 is_stmt 0 view .LVU57
 160 0042 09E0     		b	.L6
 161              	.LVL7:
 162              	.L29:
 455:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 163              		.loc 1 455 5 is_stmt 1 view .LVU58
 164 0044 FFF7FEFF 		bl	HAL_ADC_MspInit
 165              	.LVL8:
 459:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 166              		.loc 1 459 5 view .LVU59
 167 0048 0023     		movs	r3, #0
 168 004a E365     		str	r3, [r4, #92]
 462:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 169              		.loc 1 462 5 view .LVU60
 462:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 170              		.loc 1 462 16 is_stmt 0 view .LVU61
 171 004c 84F85430 		strb	r3, [r4, #84]
 172 0050 E0E7     		b	.L4
 173              	.L7:
 478:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 174              		.loc 1 478 7 is_stmt 1 view .LVU62
 478:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 175              		.loc 1 478 22 is_stmt 0 view .LVU63
 176 0052 019B     		ldr	r3, [sp, #4]
 177 0054 013B     		subs	r3, r3, #1
 178 0056 0193     		str	r3, [sp, #4]
 179              	.L6:
 476:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 180              		.loc 1 476 11 is_stmt 1 view .LVU64
 476:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 181              		.loc 1 476 28 is_stmt 0 view .LVU65
ARM GAS  /tmp/ccN8TuGv.s 			page 94


 182 0058 019B     		ldr	r3, [sp, #4]
 476:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 183              		.loc 1 476 11 view .LVU66
 184 005a 002B     		cmp	r3, #0
 185 005c F9D1     		bne	.L7
 186              	.L5:
 485:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 187              		.loc 1 485 3 is_stmt 1 view .LVU67
 485:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 188              		.loc 1 485 7 is_stmt 0 view .LVU68
 189 005e 2268     		ldr	r2, [r4]
 190              	.LVL9:
 191              	.LBB155:
 192              	.LBI155:
4179:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 193              		.loc 2 4179 26 is_stmt 1 view .LVU69
 194              	.LBB156:
 195              		.loc 2 4181 3 view .LVU70
 196              		.loc 2 4181 12 is_stmt 0 view .LVU71
 197 0060 9368     		ldr	r3, [r2, #8]
 198              		.loc 2 4181 76 view .LVU72
 199 0062 13F0805F 		tst	r3, #268435456
 200 0066 40F09C80 		bne	.L26
 201              	.LVL10:
 202              		.loc 2 4181 76 view .LVU73
 203              	.LBE156:
 204              	.LBE155:
 488:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 205              		.loc 1 488 5 is_stmt 1 view .LVU74
 206 006a A36D     		ldr	r3, [r4, #88]
 207 006c 43F01003 		orr	r3, r3, #16
 208 0070 A365     		str	r3, [r4, #88]
 491:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 209              		.loc 1 491 5 view .LVU75
 210 0072 E36D     		ldr	r3, [r4, #92]
 211 0074 43F00103 		orr	r3, r3, #1
 212 0078 E365     		str	r3, [r4, #92]
 493:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 213              		.loc 1 493 5 view .LVU76
 214              	.LVL11:
 493:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 215              		.loc 1 493 20 is_stmt 0 view .LVU77
 216 007a 0120     		movs	r0, #1
 217              	.LVL12:
 218              	.L8:
 500:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 219              		.loc 1 500 3 is_stmt 1 view .LVU78
 220              	.LBB157:
 221              	.LBI157:
4182:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4183:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4184:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4185:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Enable the selected ADC instance.
4186:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, after ADC enable, a delay for
4187:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC internal analog stabilization is required before performing a
4188:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC conversion start.
4189:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to device datasheet, parameter tSTAB.
ARM GAS  /tmp/ccN8TuGv.s 			page 95


4190:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, flag LL_ADC_FLAG_ADRDY is raised when the ADC
4191:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         is enabled and when conversion clock is active.
4192:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (not only core clock: this ADC has a dual clock domain)
4193:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4194:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC state:
4195:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC must be ADC disabled and ADC internal voltage regulator enabled.
4196:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CR       ADEN           LL_ADC_Enable
4197:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4198:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
4199:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4200:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
4201:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4202:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
4203:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
4204:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
4205:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
4206:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
4207:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              ADC_CR_ADEN);
4208:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4209:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4210:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4211:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Disable the selected ADC instance.
4212:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4213:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC state:
4214:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC must be not disabled. Must be enabled without conversion on going
4215:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         on group regular.
4216:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CR       ADDIS          LL_ADC_Disable
4217:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4218:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
4219:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4220:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
4221:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4222:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
4223:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
4224:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
4225:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
4226:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
4227:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              ADC_CR_ADDIS);
4228:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4229:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4230:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4231:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get the selected ADC instance enable state.
4232:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, flag LL_ADC_FLAG_ADRDY is raised when the ADC
4233:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         is enabled and when conversion clock is active.
4234:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (not only core clock: this ADC has a dual clock domain)
4235:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CR       ADEN           LL_ADC_IsEnabled
4236:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4237:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval 0: ADC is disabled, 1: ADC is enabled.
4238:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4239:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
4240:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4241:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
4242:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4243:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4244:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4245:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get the selected ADC instance disable state.
4246:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
ARM GAS  /tmp/ccN8TuGv.s 			page 96


4247:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4248:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval 0: no ADC disable command on going.
4249:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4250:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
4251:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4252:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
4253:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4254:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4255:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4256:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Start ADC calibration in the mode single-ended
4257:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         or differential (for devices with differential mode available).
4258:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, a minimum number of ADC clock cycles
4259:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         are required between ADC end of calibration and ADC enable.
4260:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_CALIB_ENABLE_ADC_CYCLES.
4261:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   In case of usage of ADC with DMA transfer:
4262:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         On this STM32 series, ADC DMA transfer request should be disabled
4263:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         during calibration:
4264:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Calibration factor is available in data register
4265:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         and also transferred by DMA.
4266:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         To not insert ADC calibration factor among ADC conversion data
4267:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         in array variable, DMA transfer must be disabled during
4268:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         calibration.
4269:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (DMA transfer setting backup and disable before calibration,
4270:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         DMA transfer setting restore after calibration.
4271:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to functions @ref LL_ADC_REG_GetDMATransfer(),
4272:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @ref LL_ADC_REG_SetDMATransfer() ).
4273:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   In case of usage of feature auto power-off:
4274:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         This mode must be disabled during calibration
4275:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Refer to function @ref LL_ADC_SetLowPowerMode().
4276:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4277:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC state:
4278:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC must be ADC disabled.
4279:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CR       ADCAL          LL_ADC_StartCalibration
4280:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4281:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
4282:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4283:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
4284:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4285:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
4286:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
4287:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
4288:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
4289:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
4290:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              ADC_CR_ADCAL);
4291:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4292:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4293:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4294:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get ADC calibration state.
4295:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
4296:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4297:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval 0: calibration complete, 1: calibration in progress.
4298:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4299:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
4300:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4301:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
4302:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4303:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
ARM GAS  /tmp/ccN8TuGv.s 			page 97


4304:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4305:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
4306:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4307:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4308:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EF_Operation_ADC_Group_Regular Operation on ADC hierarchical scope: group regu
4309:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
4310:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4311:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4312:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4313:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Start ADC group regular conversion.
4314:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, this function is relevant for both
4315:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         internal trigger (SW start) and external trigger:
4316:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - If ADC trigger has been set to software start, ADC conversion
4317:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           starts immediately.
4318:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         - If ADC trigger has been set to external trigger, ADC conversion
4319:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           will start at next trigger event (on the selected trigger edge)
4320:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *           following the ADC start conversion command.
4321:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4322:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC state:
4323:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC must be enabled without conversion on going on group regular,
4324:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         without conversion stop command on going on group regular,
4325:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         without ADC disable command on going.
4326:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
4327:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4328:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
4329:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4330:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
4331:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4332:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
4333:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
4334:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
4335:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
4336:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
4337:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              ADC_CR_ADSTART);
4338:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4339:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4340:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4341:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Stop ADC group regular conversion.
4342:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, setting of this feature is conditioned to
4343:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC state:
4344:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC must be enabled with conversion on going on group regular,
4345:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         without ADC disable command on going.
4346:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
4347:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4348:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
4349:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4350:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
4351:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4352:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
4353:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
4354:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
4355:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
4356:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
4357:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              ADC_CR_ADSTP);
4358:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4359:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4360:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
ARM GAS  /tmp/ccN8TuGv.s 			page 98


4361:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get ADC group regular conversion state.
4362:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
4363:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4364:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval 0: no conversion is on going on ADC group regular.
4365:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4366:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
 222              		.loc 2 4366 26 view .LVU79
 223              	.LBB158:
4367:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4368:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 224              		.loc 2 4368 3 view .LVU80
 225              		.loc 2 4368 12 is_stmt 0 view .LVU81
 226 007c 9368     		ldr	r3, [r2, #8]
 227              		.loc 2 4368 74 view .LVU82
 228 007e 13F00403 		ands	r3, r3, #4
 229 0082 00D0     		beq	.L9
 230 0084 0123     		movs	r3, #1
 231              	.L9:
 232              	.LVL13:
 233              		.loc 2 4368 74 view .LVU83
 234              	.LBE158:
 235              	.LBE157:
 502:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       && (tmp_adc_reg_is_conversion_on_going == 0UL)
 236              		.loc 1 502 3 is_stmt 1 view .LVU84
 502:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       && (tmp_adc_reg_is_conversion_on_going == 0UL)
 237              		.loc 1 502 13 is_stmt 0 view .LVU85
 238 0086 A16D     		ldr	r1, [r4, #88]
 502:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       && (tmp_adc_reg_is_conversion_on_going == 0UL)
 239              		.loc 1 502 6 view .LVU86
 240 0088 11F0100F 		tst	r1, #16
 241 008c 40F0D380 		bne	.L10
 503:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      )
 242              		.loc 1 503 7 view .LVU87
 243 0090 002B     		cmp	r3, #0
 244 0092 40F0D080 		bne	.L10
 507:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY,
 245              		.loc 1 507 5 is_stmt 1 view .LVU88
 246 0096 A16D     		ldr	r1, [r4, #88]
 247 0098 21F48171 		bic	r1, r1, #258
 248 009c 41F00201 		orr	r1, r1, #2
 249 00a0 A165     		str	r1, [r4, #88]
 534:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 250              		.loc 1 534 5 view .LVU89
 251              	.LVL14:
 252              	.LBB159:
 253              	.LBI159:
4239:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 254              		.loc 2 4239 26 view .LVU90
 255              	.LBB160:
4241:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 256              		.loc 2 4241 3 view .LVU91
4241:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 257              		.loc 2 4241 12 is_stmt 0 view .LVU92
 258 00a2 9168     		ldr	r1, [r2, #8]
4241:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 259              		.loc 2 4241 68 view .LVU93
 260 00a4 11F0010F 		tst	r1, #1
ARM GAS  /tmp/ccN8TuGv.s 			page 99


 261 00a8 51D1     		bne	.L11
 262              	.LVL15:
4241:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 263              		.loc 2 4241 68 view .LVU94
 264              	.LBE160:
 265              	.LBE159:
 544:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 266              		.loc 1 544 7 is_stmt 1 view .LVU95
 544:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 267              		.loc 1 544 30 is_stmt 0 view .LVU96
 268 00aa A168     		ldr	r1, [r4, #8]
 545:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 269              		.loc 1 545 20 view .LVU97
 270 00ac 257E     		ldrb	r5, [r4, #24]	@ zero_extendqisi2
 544:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 271              		.loc 1 544 83 view .LVU98
 272 00ae 41EA8531 		orr	r1, r1, r5, lsl #14
 546:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 273              		.loc 1 546 20 view .LVU99
 274 00b2 657E     		ldrb	r5, [r4, #25]	@ zero_extendqisi2
 545:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 275              		.loc 1 545 83 view .LVU100
 276 00b4 41EAC531 		orr	r1, r1, r5, lsl #15
 547:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 277              		.loc 1 547 20 view .LVU101
 278 00b8 A67E     		ldrb	r6, [r4, #26]	@ zero_extendqisi2
 546:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 279              		.loc 1 546 83 view .LVU102
 280 00ba 41EA4631 		orr	r1, r1, r6, lsl #13
 548:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    hadc->Init.DataAlign                                           |
 281              		.loc 1 548 20 view .LVU103
 282 00be 256B     		ldr	r5, [r4, #48]
 283 00c0 0DB1     		cbz	r5, .L12
 284 00c2 4FF48055 		mov	r5, #4096
 285              	.L12:
 547:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 286              		.loc 1 547 83 view .LVU104
 287 00c6 2943     		orrs	r1, r1, r5
 549:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 288              		.loc 1 549 30 view .LVU105
 289 00c8 E568     		ldr	r5, [r4, #12]
 548:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    hadc->Init.DataAlign                                           |
 290              		.loc 1 548 83 view .LVU106
 291 00ca 2943     		orrs	r1, r1, r5
 550:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 292              		.loc 1 550 20 view .LVU107
 293 00cc 2569     		ldr	r5, [r4, #16]
 294 00ce 002D     		cmp	r5, #0
 295 00d0 69DB     		blt	.L30
 296 00d2 4FF40015 		mov	r5, #2097152
 297              	.L13:
 549:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 298              		.loc 1 549 83 view .LVU108
 299 00d6 2943     		orrs	r1, r1, r5
 551:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 300              		.loc 1 551 20 view .LVU109
 301 00d8 94F82C50 		ldrb	r5, [r4, #44]	@ zero_extendqisi2
ARM GAS  /tmp/ccN8TuGv.s 			page 100


 550:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 302              		.loc 1 550 83 view .LVU110
 303 00dc 41EA4501 		orr	r1, r1, r5, lsl #1
 304              	.LVL16:
 554:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 305              		.loc 1 554 7 is_stmt 1 view .LVU111
 554:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 306              		.loc 1 554 21 is_stmt 0 view .LVU112
 307 00e0 94F82050 		ldrb	r5, [r4, #32]	@ zero_extendqisi2
 554:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 308              		.loc 1 554 10 view .LVU113
 309 00e4 012D     		cmp	r5, #1
 310 00e6 61D0     		beq	.L31
 311              	.L14:
 580:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 312              		.loc 1 580 7 is_stmt 1 view .LVU114
 580:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 313              		.loc 1 580 21 is_stmt 0 view .LVU115
 314 00e8 656A     		ldr	r5, [r4, #36]
 580:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 315              		.loc 1 580 10 view .LVU116
 316 00ea 25B1     		cbz	r5, .L16
 582:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                      hadc->Init.ExternalTrigConvEdge);
 317              		.loc 1 582 9 is_stmt 1 view .LVU117
 582:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                      hadc->Init.ExternalTrigConvEdge);
 318              		.loc 1 582 51 is_stmt 0 view .LVU118
 319 00ec 05F4E075 		and	r5, r5, #448
 583:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
 320              		.loc 1 583 32 view .LVU119
 321 00f0 A66A     		ldr	r6, [r4, #40]
 582:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                      hadc->Init.ExternalTrigConvEdge);
 322              		.loc 1 582 71 view .LVU120
 323 00f2 3543     		orrs	r5, r5, r6
 582:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                      hadc->Init.ExternalTrigConvEdge);
 324              		.loc 1 582 18 view .LVU121
 325 00f4 2943     		orrs	r1, r1, r5
 326              	.LVL17:
 327              	.L16:
 587:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                  ADC_CFGR1_RES     |
 328              		.loc 1 587 7 is_stmt 1 view .LVU122
 329 00f6 D568     		ldr	r5, [r2, #12]
 330 00f8 25F4FE3C 		bic	ip, r5, #130048
 331 00fc 2CF4FF7C 		bic	ip, ip, #510
 332 0100 4CEA0101 		orr	r1, ip, r1
 333              	.LVL18:
 587:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                  ADC_CFGR1_RES     |
 334              		.loc 1 587 7 is_stmt 0 view .LVU123
 335 0104 D160     		str	r1, [r2, #12]
 601:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    hadc->Init.TriggerFrequencyMode
 336              		.loc 1 601 7 is_stmt 1 view .LVU124
 601:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    hadc->Init.TriggerFrequencyMode
 337              		.loc 1 601 31 is_stmt 0 view .LVU125
 338 0106 6268     		ldr	r2, [r4, #4]
 601:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    hadc->Init.TriggerFrequencyMode
 339              		.loc 1 601 47 view .LVU126
 340 0108 02F04042 		and	r2, r2, #-1073741824
 602:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                   );
ARM GAS  /tmp/ccN8TuGv.s 			page 101


 341              		.loc 1 602 30 view .LVU127
 342 010c E16C     		ldr	r1, [r4, #76]
 601:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    hadc->Init.TriggerFrequencyMode
 343              		.loc 1 601 67 view .LVU128
 344 010e 42EA0105 		orr	r5, r2, r1
 345              	.LVL19:
 605:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 346              		.loc 1 605 7 is_stmt 1 view .LVU129
 605:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 347              		.loc 1 605 21 is_stmt 0 view .LVU130
 348 0112 94F83C10 		ldrb	r1, [r4, #60]	@ zero_extendqisi2
 605:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 349              		.loc 1 605 10 view .LVU131
 350 0116 0129     		cmp	r1, #1
 351 0118 55D0     		beq	.L32
 352              	.L17:
 615:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                  ADC_CFGR2_CKMODE |
 353              		.loc 1 615 7 is_stmt 1 view .LVU132
 354 011a 2268     		ldr	r2, [r4]
 355 011c 1669     		ldr	r6, [r2, #16]
 356 011e 4C49     		ldr	r1, .L35+8
 357 0120 3140     		ands	r1, r1, r6
 358 0122 2943     		orrs	r1, r1, r5
 359 0124 1161     		str	r1, [r2, #16]
 626:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 360              		.loc 1 626 7 view .LVU133
 626:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 361              		.loc 1 626 23 is_stmt 0 view .LVU134
 362 0126 6268     		ldr	r2, [r4, #4]
 626:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 363              		.loc 1 626 10 view .LVU135
 364 0128 B2F1404F 		cmp	r2, #-1073741824
 365 012c 0FD0     		beq	.L11
 626:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 366              		.loc 1 626 69 discriminator 1 view .LVU136
 367 012e B2F1804F 		cmp	r2, #1073741824
 368 0132 0CD0     		beq	.L11
 627:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 369              		.loc 1 627 69 view .LVU137
 370 0134 B2F1004F 		cmp	r2, #-2147483648
 371 0138 09D0     		beq	.L11
 630:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    ADC_CCR_PRESC,
 372              		.loc 1 630 9 is_stmt 1 view .LVU138
 373 013a 464D     		ldr	r5, .L35+12
 374              	.LVL20:
 630:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    ADC_CCR_PRESC,
 375              		.loc 1 630 9 is_stmt 0 view .LVU139
 376 013c D5F80817 		ldr	r1, [r5, #1800]
 377 0140 21F47011 		bic	r1, r1, #3932160
 378 0144 02F47012 		and	r2, r2, #3932160
 379 0148 0A43     		orrs	r2, r2, r1
 380 014a C5F80827 		str	r2, [r5, #1800]
 381              	.L11:
 637:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.S
 382              		.loc 1 637 5 is_stmt 1 view .LVU140
 383 014e 2568     		ldr	r5, [r4]
 384 0150 626B     		ldr	r2, [r4, #52]
ARM GAS  /tmp/ccN8TuGv.s 			page 102


 385              	.LVL21:
 386              	.LBB161:
 387              	.LBI161:
2205:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                                           uint32_t SamplingTime)
 388              		.loc 2 2205 22 view .LVU141
 389              	.LBB162:
2208:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
 390              		.loc 2 2208 3 view .LVU142
 391 0152 6969     		ldr	r1, [r5, #20]
 392 0154 21F00701 		bic	r1, r1, #7
 393 0158 0A43     		orrs	r2, r2, r1
 394              	.LVL22:
2208:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
 395              		.loc 2 2208 3 is_stmt 0 view .LVU143
 396 015a 6A61     		str	r2, [r5, #20]
 397              	.LVL23:
2208:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
 398              		.loc 2 2208 3 view .LVU144
 399              	.LBE162:
 400              	.LBE161:
 638:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 401              		.loc 1 638 5 is_stmt 1 view .LVU145
 402 015c 2168     		ldr	r1, [r4]
 403 015e A56B     		ldr	r5, [r4, #56]
 404              	.LVL24:
 405              	.LBB163:
 406              	.LBI163:
2205:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                                           uint32_t SamplingTime)
 407              		.loc 2 2205 22 view .LVU146
 408              	.LBB164:
2208:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
 409              		.loc 2 2208 3 view .LVU147
 410 0160 4A69     		ldr	r2, [r1, #20]
 411 0162 22F07002 		bic	r2, r2, #112
 412 0166 42EA0512 		orr	r2, r2, r5, lsl #4
 413 016a 4A61     		str	r2, [r1, #20]
 414              	.LVL25:
2208:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
 415              		.loc 2 2208 3 is_stmt 0 view .LVU148
 416              	.LBE164:
 417              	.LBE163:
 650:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 418              		.loc 1 650 5 is_stmt 1 view .LVU149
 650:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 419              		.loc 1 650 19 is_stmt 0 view .LVU150
 420 016c 2269     		ldr	r2, [r4, #16]
 650:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 421              		.loc 1 650 8 view .LVU151
 422 016e 002A     		cmp	r2, #0
 423 0170 33D1     		bne	.L18
 654:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****               ADC_CHSELR_SQ2_TO_SQ8);
 424              		.loc 1 654 7 is_stmt 1 view .LVU152
 425 0172 2268     		ldr	r2, [r4]
 426 0174 936A     		ldr	r3, [r2, #40]
 427              	.LVL26:
 654:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****               ADC_CHSELR_SQ2_TO_SQ8);
 428              		.loc 1 654 7 is_stmt 0 view .LVU153
ARM GAS  /tmp/ccN8TuGv.s 			page 103


 429 0176 63F00F03 		orn	r3, r3, #15
 430 017a 9362     		str	r3, [r2, #40]
 431              	.L19:
 701:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       == hadc->Init.SamplingTimeCommon1)
 432              		.loc 1 701 5 is_stmt 1 view .LVU154
 701:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       == hadc->Init.SamplingTimeCommon1)
 433              		.loc 1 701 8 is_stmt 0 view .LVU155
 434 017c 2368     		ldr	r3, [r4]
 435              	.LVL27:
 436              	.LBB165:
 437              	.LBI165:
2238:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 438              		.loc 2 2238 26 is_stmt 1 view .LVU156
 439              	.LBB166:
2240:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                     >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 440              		.loc 2 2240 3 view .LVU157
2240:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                     >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 441              		.loc 2 2240 22 is_stmt 0 view .LVU158
 442 017e 5B69     		ldr	r3, [r3, #20]
 443              	.LVL28:
2240:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                     >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 444              		.loc 2 2240 22 view .LVU159
 445 0180 03F00703 		and	r3, r3, #7
 446              	.LVL29:
2240:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                     >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 447              		.loc 2 2240 22 view .LVU160
 448              	.LBE166:
 449              	.LBE165:
 702:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 450              		.loc 1 702 20 view .LVU161
 451 0184 626B     		ldr	r2, [r4, #52]
 701:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       == hadc->Init.SamplingTimeCommon1)
 452              		.loc 1 701 7 view .LVU162
 453 0186 9A42     		cmp	r2, r3
 454 0188 4CD0     		beq	.L33
 715:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 455              		.loc 1 715 7 is_stmt 1 view .LVU163
 456 018a A36D     		ldr	r3, [r4, #88]
 457 018c 23F01203 		bic	r3, r3, #18
 458 0190 43F01003 		orr	r3, r3, #16
 459 0194 A365     		str	r3, [r4, #88]
 720:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 460              		.loc 1 720 7 view .LVU164
 461 0196 E36D     		ldr	r3, [r4, #92]
 462 0198 43F00103 		orr	r3, r3, #1
 463 019c E365     		str	r3, [r4, #92]
 722:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 464              		.loc 1 722 7 view .LVU165
 465              	.LVL30:
 722:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 466              		.loc 1 722 22 is_stmt 0 view .LVU166
 467 019e 0120     		movs	r0, #1
 468 01a0 4EE0     		b	.L3
 469              	.LVL31:
 470              	.L26:
 381:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tmpCFGR1 = 0UL;
 471              		.loc 1 381 21 view .LVU167
ARM GAS  /tmp/ccN8TuGv.s 			page 104


 472 01a2 0020     		movs	r0, #0
 473 01a4 6AE7     		b	.L8
 474              	.LVL32:
 475              	.L30:
 550:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 476              		.loc 1 550 20 discriminator 1 view .LVU168
 477 01a6 25F00045 		bic	r5, r5, #-2147483648
 478 01aa 94E7     		b	.L13
 479              	.LVL33:
 480              	.L31:
 556:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
 481              		.loc 1 556 9 is_stmt 1 view .LVU169
 556:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
 482              		.loc 1 556 12 is_stmt 0 view .LVU170
 483 01ac 16B9     		cbnz	r6, .L15
 559:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
 484              		.loc 1 559 11 is_stmt 1 view .LVU171
 559:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
 485              		.loc 1 559 20 is_stmt 0 view .LVU172
 486 01ae 41F48031 		orr	r1, r1, #65536
 487              	.LVL34:
 559:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
 488              		.loc 1 559 20 view .LVU173
 489 01b2 99E7     		b	.L14
 490              	.L15:
 568:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 491              		.loc 1 568 11 is_stmt 1 view .LVU174
 492 01b4 A56D     		ldr	r5, [r4, #88]
 493 01b6 45F02005 		orr	r5, r5, #32
 494 01ba A565     		str	r5, [r4, #88]
 571:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
 495              		.loc 1 571 11 view .LVU175
 496 01bc E56D     		ldr	r5, [r4, #92]
 497 01be 45F00105 		orr	r5, r5, #1
 498 01c2 E565     		str	r5, [r4, #92]
 499 01c4 90E7     		b	.L14
 500              	.LVL35:
 501              	.L32:
 607:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 502              		.loc 1 607 9 view .LVU176
 609:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                      hadc->Init.Oversampling.RightBitShift |
 503              		.loc 1 609 45 is_stmt 0 view .LVU177
 504 01c6 216C     		ldr	r1, [r4, #64]
 608:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                      hadc->Init.Oversampling.Ratio         |
 505              		.loc 1 608 69 view .LVU178
 506 01c8 0A43     		orrs	r2, r2, r1
 610:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                      hadc->Init.Oversampling.TriggeredMode
 507              		.loc 1 610 45 view .LVU179
 508 01ca 616C     		ldr	r1, [r4, #68]
 609:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                      hadc->Init.Oversampling.RightBitShift |
 509              		.loc 1 609 60 view .LVU180
 510 01cc 0A43     		orrs	r2, r2, r1
 611:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                     );
 511              		.loc 1 611 45 view .LVU181
 512 01ce A16C     		ldr	r1, [r4, #72]
 610:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                      hadc->Init.Oversampling.TriggeredMode
 513              		.loc 1 610 60 view .LVU182
ARM GAS  /tmp/ccN8TuGv.s 			page 105


 514 01d0 0A43     		orrs	r2, r2, r1
 607:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 515              		.loc 1 607 18 view .LVU183
 516 01d2 2A43     		orrs	r2, r2, r5
 517 01d4 42F00105 		orr	r5, r2, #1
 518              	.LVL36:
 607:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 519              		.loc 1 607 18 view .LVU184
 520 01d8 9FE7     		b	.L17
 521              	.LVL37:
 522              	.L18:
 657:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 523              		.loc 1 657 10 is_stmt 1 view .LVU185
 657:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 524              		.loc 1 657 13 is_stmt 0 view .LVU186
 525 01da B2F5001F 		cmp	r2, #2097152
 526 01de CDD1     		bne	.L19
 527              	.LVL38:
 528              	.L20:
 529              	.LBB167:
 663:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 530              		.loc 1 663 54 is_stmt 1 discriminator 1 view .LVU187
 663:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 531              		.loc 1 663 7 is_stmt 0 discriminator 1 view .LVU188
 532 01e0 072B     		cmp	r3, #7
 533 01e2 08D8     		bhi	.L21
 666:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****             ADC_CHSELR_SQ1)
 534              		.loc 1 666 9 is_stmt 1 view .LVU189
 666:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****             ADC_CHSELR_SQ1)
 535              		.loc 1 666 19 is_stmt 0 view .LVU190
 536 01e4 226E     		ldr	r2, [r4, #96]
 666:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****             ADC_CHSELR_SQ1)
 537              		.loc 1 666 90 view .LVU191
 538 01e6 9900     		lsls	r1, r3, #2
 666:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****             ADC_CHSELR_SQ1)
 539              		.loc 1 666 51 view .LVU192
 540 01e8 CA40     		lsrs	r2, r2, r1
 666:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****             ADC_CHSELR_SQ1)
 541              		.loc 1 666 98 view .LVU193
 542 01ea 02F00F02 		and	r2, r2, #15
 666:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****             ADC_CHSELR_SQ1)
 543              		.loc 1 666 12 view .LVU194
 544 01ee 0F2A     		cmp	r2, #15
 545 01f0 01D0     		beq	.L21
 663:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 546              		.loc 1 663 98 is_stmt 1 discriminator 2 view .LVU195
 663:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 547              		.loc 1 663 132 is_stmt 0 discriminator 2 view .LVU196
 548 01f2 0133     		adds	r3, r3, #1
 549              	.LVL39:
 663:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 550              		.loc 1 663 132 discriminator 2 view .LVU197
 551 01f4 F4E7     		b	.L20
 552              	.L21:
 673:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 553              		.loc 1 673 7 is_stmt 1 view .LVU198
 673:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
ARM GAS  /tmp/ccN8TuGv.s 			page 106


 554              		.loc 1 673 10 is_stmt 0 view .LVU199
 555 01f6 012B     		cmp	r3, #1
 556 01f8 0ED0     		beq	.L34
 692:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    ADC_CHSELR_SQ_ALL,
 557              		.loc 1 692 9 is_stmt 1 view .LVU200
 558 01fa 2168     		ldr	r1, [r4]
 559 01fc 8B6A     		ldr	r3, [r1, #40]
 560              	.LVL40:
 692:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    ADC_CHSELR_SQ_ALL,
 561              		.loc 1 692 9 is_stmt 0 view .LVU201
 562 01fe E369     		ldr	r3, [r4, #28]
 563 0200 013B     		subs	r3, r3, #1
 564 0202 9B00     		lsls	r3, r3, #2
 565 0204 03F01C03 		and	r3, r3, #28
 566 0208 6FF00F02 		mvn	r2, #15
 567 020c 02FA03F3 		lsl	r3, r2, r3
 568 0210 226E     		ldr	r2, [r4, #96]
 569 0212 1343     		orrs	r3, r3, r2
 570 0214 8B62     		str	r3, [r1, #40]
 571 0216 B1E7     		b	.L19
 572              	.LVL41:
 573              	.L34:
 678:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                 ADC_CHSELR_SQ2_TO_SQ8);
 574              		.loc 1 678 9 is_stmt 1 view .LVU202
 575 0218 2268     		ldr	r2, [r4]
 576 021a 936A     		ldr	r3, [r2, #40]
 577              	.LVL42:
 678:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                 ADC_CHSELR_SQ2_TO_SQ8);
 578              		.loc 1 678 9 is_stmt 0 view .LVU203
 579 021c 63F00F03 		orn	r3, r3, #15
 580 0220 9362     		str	r3, [r2, #40]
 581 0222 ABE7     		b	.L19
 582              	.L33:
 678:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                 ADC_CHSELR_SQ2_TO_SQ8);
 583              		.loc 1 678 9 view .LVU204
 584              	.LBE167:
 705:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 585              		.loc 1 705 7 is_stmt 1 view .LVU205
 586 0224 0023     		movs	r3, #0
 587 0226 E365     		str	r3, [r4, #92]
 708:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 588              		.loc 1 708 7 view .LVU206
 589 0228 A36D     		ldr	r3, [r4, #88]
 590 022a 23F00303 		bic	r3, r3, #3
 591 022e 43F00103 		orr	r3, r3, #1
 592 0232 A365     		str	r3, [r4, #88]
 593 0234 04E0     		b	.L3
 594              	.LVL43:
 595              	.L10:
 729:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 596              		.loc 1 729 5 view .LVU207
 597 0236 A36D     		ldr	r3, [r4, #88]
 598              	.LVL44:
 729:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 599              		.loc 1 729 5 is_stmt 0 view .LVU208
 600 0238 43F01003 		orr	r3, r3, #16
 601 023c A365     		str	r3, [r4, #88]
ARM GAS  /tmp/ccN8TuGv.s 			page 107


 731:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 602              		.loc 1 731 5 is_stmt 1 view .LVU209
 603              	.LVL45:
 731:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 604              		.loc 1 731 20 is_stmt 0 view .LVU210
 605 023e 0120     		movs	r0, #1
 606              	.LVL46:
 607              	.L3:
 735:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 608              		.loc 1 735 1 view .LVU211
 609 0240 02B0     		add	sp, sp, #8
 610              	.LCFI2:
 611              		.cfi_remember_state
 612              		.cfi_def_cfa_offset 16
 613              		@ sp needed
 614 0242 70BD     		pop	{r4, r5, r6, pc}
 615              	.LVL47:
 616              	.L25:
 617              	.LCFI3:
 618              		.cfi_restore_state
 390:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 619              		.loc 1 390 12 view .LVU212
 620 0244 0120     		movs	r0, #1
 621              	.LVL48:
 390:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 622              		.loc 1 390 12 view .LVU213
 623 0246 FBE7     		b	.L3
 624              	.L36:
 625              		.align	2
 626              	.L35:
 627 0248 00000000 		.word	SystemCoreClock
 628 024c 632D3E05 		.word	87960931
 629 0250 02FCFF1F 		.word	536869890
 630 0254 00200140 		.word	1073815552
 631              		.cfi_endproc
 632              	.LFE1093:
 634              		.section	.text.HAL_ADC_MspDeInit,"ax",%progbits
 635              		.align	1
 636              		.weak	HAL_ADC_MspDeInit
 637              		.syntax unified
 638              		.thumb
 639              		.thumb_func
 640              		.fpu softvfp
 642              	HAL_ADC_MspDeInit:
 643              	.LVL49:
 644              	.LFB1096:
 885:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 886:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /**
 887:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @brief  DeInitialize the ADC MSP.
 888:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @param hadc ADC handle
 889:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @note   All ADC instances use the same core clock at RCC level, disabling
 890:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         the core clock reset all ADC instances).
 891:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @retval None
 892:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
 893:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** __weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef *hadc)
 894:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** {
 645              		.loc 1 894 1 is_stmt 1 view -0
ARM GAS  /tmp/ccN8TuGv.s 			page 108


 646              		.cfi_startproc
 647              		@ args = 0, pretend = 0, frame = 0
 648              		@ frame_needed = 0, uses_anonymous_args = 0
 649              		@ link register save eliminated.
 895:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 896:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   UNUSED(hadc);
 650              		.loc 1 896 3 view .LVU215
 897:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 898:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 899:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****             function HAL_ADC_MspDeInit must be implemented in the user file.
 900:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****    */
 901:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
 651              		.loc 1 901 1 is_stmt 0 view .LVU216
 652 0000 7047     		bx	lr
 653              		.cfi_endproc
 654              	.LFE1096:
 656              		.section	.text.HAL_ADC_PollForConversion,"ax",%progbits
 657              		.align	1
 658              		.global	HAL_ADC_PollForConversion
 659              		.syntax unified
 660              		.thumb
 661              		.thumb_func
 662              		.fpu softvfp
 664              	HAL_ADC_PollForConversion:
 665              	.LVL50:
 666              	.LFB1099:
 902:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 903:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
 904:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /**
 905:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @brief  Register a User ADC Callback
 906:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         To be used instead of the weak predefined callback
 907:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @param  hadc Pointer to a ADC_HandleTypeDef structure that contains
 908:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *                the configuration information for the specified ADC.
 909:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @param  CallbackID ID of the callback to be registered
 910:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         This parameter can be one of the following values:
 911:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_COMPLETE_CB_ID      ADC conversion complete callback ID
 912:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_HALF_CB_ID          ADC conversion DMA half-transfer call
 913:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID    ADC analog watchdog 1 callback ID
 914:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *          @arg @ref HAL_ADC_ERROR_CB_ID                    ADC error callback ID
 915:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID    ADC analog watchdog 2 callback ID
 916:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID    ADC analog watchdog 3 callback ID
 917:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *          @arg @ref HAL_ADC_END_OF_SAMPLING_CB_ID          ADC end of sampling callback ID
 918:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID                  ADC Msp Init callback ID
 919:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID                ADC Msp DeInit callback ID
 920:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID MspInit callback ID
 921:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID MspDeInit callback ID
 922:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @param  pCallback pointer to the Callback function
 923:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @retval HAL status
 924:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
 925:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_RegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef Callb
 926:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                                            pADC_CallbackTypeDef pCallback)
 927:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** {
 928:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   HAL_StatusTypeDef status = HAL_OK;
 929:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 930:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   if (pCallback == NULL)
 931:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 932:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Update the error code */
ARM GAS  /tmp/ccN8TuGv.s 			page 109


 933:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 934:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 935:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     return HAL_ERROR;
 936:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 937:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 938:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
 939:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 940:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     switch (CallbackID)
 941:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 942:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
 943:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         hadc->ConvCpltCallback = pCallback;
 944:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         break;
 945:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 946:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       case HAL_ADC_CONVERSION_HALF_CB_ID :
 947:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         hadc->ConvHalfCpltCallback = pCallback;
 948:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         break;
 949:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 950:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
 951:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         hadc->LevelOutOfWindowCallback = pCallback;
 952:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         break;
 953:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 954:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       case HAL_ADC_ERROR_CB_ID :
 955:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         hadc->ErrorCallback = pCallback;
 956:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         break;
 957:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 958:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID :
 959:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         hadc->LevelOutOfWindow2Callback = pCallback;
 960:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         break;
 961:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 962:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID :
 963:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         hadc->LevelOutOfWindow3Callback = pCallback;
 964:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         break;
 965:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 966:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       case HAL_ADC_END_OF_SAMPLING_CB_ID :
 967:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         hadc->EndOfSamplingCallback = pCallback;
 968:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         break;
 969:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 970:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
 971:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         hadc->MspInitCallback = pCallback;
 972:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         break;
 973:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 974:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
 975:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         hadc->MspDeInitCallback = pCallback;
 976:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         break;
 977:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 978:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       default :
 979:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* Update the error code */
 980:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 981:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 982:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* Return error status */
 983:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         status = HAL_ERROR;
 984:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         break;
 985:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 986:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 987:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   else if (HAL_ADC_STATE_RESET == hadc->State)
 988:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 989:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     switch (CallbackID)
ARM GAS  /tmp/ccN8TuGv.s 			page 110


 990:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 991:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
 992:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         hadc->MspInitCallback = pCallback;
 993:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         break;
 994:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 995:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
 996:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         hadc->MspDeInitCallback = pCallback;
 997:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         break;
 998:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 999:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       default :
1000:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* Update the error code */
1001:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1002:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1003:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* Return error status */
1004:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         status = HAL_ERROR;
1005:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         break;
1006:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
1007:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
1008:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   else
1009:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
1010:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Update the error code */
1011:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1012:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1013:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Return error status */
1014:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     status =  HAL_ERROR;
1015:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
1016:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1017:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   return status;
1018:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
1019:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1020:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /**
1021:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @brief  Unregister a ADC Callback
1022:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         ADC callback is redirected to the weak predefined callback
1023:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @param  hadc Pointer to a ADC_HandleTypeDef structure that contains
1024:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *                the configuration information for the specified ADC.
1025:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @param  CallbackID ID of the callback to be unregistered
1026:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         This parameter can be one of the following values:
1027:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_COMPLETE_CB_ID      ADC conversion complete callback ID
1028:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_HALF_CB_ID          ADC conversion DMA half-transfer call
1029:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID    ADC analog watchdog 1 callback ID
1030:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *          @arg @ref HAL_ADC_ERROR_CB_ID                    ADC error callback ID
1031:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID    ADC analog watchdog 2 callback ID
1032:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID    ADC analog watchdog 3 callback ID
1033:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *          @arg @ref HAL_ADC_END_OF_SAMPLING_CB_ID          ADC end of sampling callback ID
1034:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID                  ADC Msp Init callback ID
1035:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID                ADC Msp DeInit callback ID
1036:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID MspInit callback ID
1037:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID MspDeInit callback ID
1038:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @retval HAL status
1039:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
1040:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_UnRegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef Cal
1041:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** {
1042:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   HAL_StatusTypeDef status = HAL_OK;
1043:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1044:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   if ((hadc->State & HAL_ADC_STATE_READY) != 0)
1045:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
1046:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     switch (CallbackID)
ARM GAS  /tmp/ccN8TuGv.s 			page 111


1047:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
1048:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
1049:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         hadc->ConvCpltCallback = HAL_ADC_ConvCpltCallback;
1050:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         break;
1051:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1052:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       case HAL_ADC_CONVERSION_HALF_CB_ID :
1053:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         hadc->ConvHalfCpltCallback = HAL_ADC_ConvHalfCpltCallback;
1054:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         break;
1055:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1056:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
1057:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         hadc->LevelOutOfWindowCallback = HAL_ADC_LevelOutOfWindowCallback;
1058:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         break;
1059:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1060:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       case HAL_ADC_ERROR_CB_ID :
1061:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         hadc->ErrorCallback = HAL_ADC_ErrorCallback;
1062:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         break;
1063:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1064:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID :
1065:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         hadc->LevelOutOfWindow2Callback = HAL_ADCEx_LevelOutOfWindow2Callback;
1066:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         break;
1067:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1068:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID :
1069:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         hadc->LevelOutOfWindow3Callback = HAL_ADCEx_LevelOutOfWindow3Callback;
1070:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         break;
1071:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1072:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       case HAL_ADC_END_OF_SAMPLING_CB_ID :
1073:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         hadc->EndOfSamplingCallback = HAL_ADCEx_EndOfSamplingCallback;
1074:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         break;
1075:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1076:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
1077:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit              */
1078:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         break;
1079:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1080:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
1081:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         hadc->MspDeInitCallback = HAL_ADC_MspDeInit; /* Legacy weak MspDeInit            */
1082:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         break;
1083:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1084:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       default :
1085:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* Update the error code */
1086:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1087:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1088:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* Return error status */
1089:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         status =  HAL_ERROR;
1090:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         break;
1091:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
1092:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
1093:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   else if (HAL_ADC_STATE_RESET == hadc->State)
1094:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
1095:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     switch (CallbackID)
1096:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
1097:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
1098:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         hadc->MspInitCallback = HAL_ADC_MspInit;                   /* Legacy weak MspInit          
1099:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         break;
1100:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1101:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
1102:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         hadc->MspDeInitCallback = HAL_ADC_MspDeInit;               /* Legacy weak MspDeInit        
1103:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         break;
ARM GAS  /tmp/ccN8TuGv.s 			page 112


1104:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1105:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       default :
1106:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* Update the error code */
1107:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1108:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1109:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* Return error status */
1110:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         status =  HAL_ERROR;
1111:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         break;
1112:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
1113:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
1114:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   else
1115:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
1116:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Update the error code */
1117:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1118:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1119:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Return error status */
1120:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     status =  HAL_ERROR;
1121:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
1122:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1123:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   return status;
1124:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
1125:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1126:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1127:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1128:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /**
1129:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @}
1130:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
1131:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1132:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group2 ADC Input and Output operation functions
1133:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *  @brief    ADC IO operation functions
1134:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *
1135:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** @verbatim
1136:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****  ===============================================================================
1137:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                       ##### IO operation functions #####
1138:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****  ===============================================================================
1139:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     [..]  This section provides functions allowing to:
1140:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       (+) Start conversion of regular group.
1141:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       (+) Stop conversion of regular group.
1142:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       (+) Poll for conversion complete on regular group.
1143:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       (+) Poll for conversion event.
1144:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       (+) Get result of regular channel conversion.
1145:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       (+) Start conversion of regular group and enable interruptions.
1146:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       (+) Stop conversion of regular group and disable interruptions.
1147:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       (+) Handle ADC interrupt request
1148:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       (+) Start conversion of regular group and enable DMA transfer.
1149:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       (+) Stop conversion of regular group and disable ADC DMA transfer.
1150:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** @endverbatim
1151:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @{
1152:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
1153:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1154:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /**
1155:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @brief  Enable ADC, start conversion of regular group.
1156:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @note   Interruptions enabled in this function: None.
1157:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @param hadc ADC handle
1158:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @retval HAL status
1159:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
1160:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
ARM GAS  /tmp/ccN8TuGv.s 			page 113


1161:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** {
1162:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
1163:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1164:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Check the parameters */
1165:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1166:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1167:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
1168:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
1169:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
1170:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     __HAL_LOCK(hadc);
1171:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1172:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Enable the ADC peripheral */
1173:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     tmp_hal_status = ADC_Enable(hadc);
1174:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1175:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
1176:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1177:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
1178:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Set ADC state                                                        */
1179:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
1180:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
1181:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1182:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
1183:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
1184:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1185:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Set ADC error code */
1186:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Reset all ADC error code fields */
1187:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
1188:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1189:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Clear ADC group regular conversion flag and overrun flag               */
1190:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC operations) */
1191:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
1192:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1193:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Process unlocked */
1194:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1195:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1196:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       __HAL_UNLOCK(hadc);
1197:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1198:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
1199:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
1200:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
1201:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* trigger event.                                                       */
1202:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Start ADC group regular conversion */
1203:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       LL_ADC_REG_StartConversion(hadc->Instance);
1204:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
1205:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     else
1206:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
1207:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       __HAL_UNLOCK(hadc);
1208:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
1209:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
1210:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   else
1211:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
1212:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
1213:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
1214:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1215:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   return tmp_hal_status;
1216:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
1217:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
ARM GAS  /tmp/ccN8TuGv.s 			page 114


1218:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /**
1219:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected channels in
1220:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         case of auto_injection mode), disable ADC peripheral.
1221:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @note:  ADC peripheral disable is forcing stop of potential
1222:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         conversion on injected group. If injected group is under use, it
1223:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
1224:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @param hadc ADC handle
1225:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @retval HAL status.
1226:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
1227:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
1228:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** {
1229:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
1230:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1231:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Check the parameters */
1232:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1233:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1234:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   __HAL_LOCK(hadc);
1235:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1236:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* 1. Stop potential conversion on going, on ADC group regular */
1237:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
1238:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1239:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
1240:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
1241:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
1242:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
1243:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
1244:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1245:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Check if ADC is effectively disabled */
1246:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1247:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
1248:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Set ADC state */
1249:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1250:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
1251:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                         HAL_ADC_STATE_READY);
1252:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
1253:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
1254:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1255:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1256:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1257:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   return tmp_hal_status;
1258:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
1259:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1260:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /**
1261:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @brief  Wait for regular group conversion to be completed.
1262:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @note   ADC conversion flags EOS (end of sequence) and EOC (end of
1263:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         conversion) are cleared by this function, with an exception:
1264:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         if low power feature "LowPowerAutoWait" is enabled, flags are
1265:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         not cleared to not interfere with this feature until data register
1266:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         is read using function HAL_ADC_GetValue().
1267:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @note   This function cannot be used in a particular setup: ADC configured
1268:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         in DMA mode and polling for end of each conversion (ADC init
1269:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         parameter "EOCSelection" set to ADC_EOC_SINGLE_CONV).
1270:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         In this case, DMA resets the flag EOC and polling cannot be
1271:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         performed on each conversion. Nevertheless, polling can still
1272:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         be performed on the complete sequence (ADC init
1273:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         parameter "EOCSelection" set to ADC_EOC_SEQ_CONV).
1274:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @param hadc ADC handle
ARM GAS  /tmp/ccN8TuGv.s 			page 115


1275:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @param Timeout Timeout value in millisecond.
1276:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @retval HAL status
1277:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
1278:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
1279:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** {
 667              		.loc 1 1279 1 is_stmt 1 view -0
 668              		.cfi_startproc
 669              		@ args = 0, pretend = 0, frame = 0
 670              		@ frame_needed = 0, uses_anonymous_args = 0
 671              		.loc 1 1279 1 is_stmt 0 view .LVU218
 672 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 673              	.LCFI4:
 674              		.cfi_def_cfa_offset 24
 675              		.cfi_offset 3, -24
 676              		.cfi_offset 4, -20
 677              		.cfi_offset 5, -16
 678              		.cfi_offset 6, -12
 679              		.cfi_offset 7, -8
 680              		.cfi_offset 14, -4
 681 0002 0446     		mov	r4, r0
 682 0004 0D46     		mov	r5, r1
1280:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tickstart;
 683              		.loc 1 1280 3 is_stmt 1 view .LVU219
1281:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tmp_flag_end;
 684              		.loc 1 1281 3 view .LVU220
1282:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1283:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Check the parameters */
1284:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 685              		.loc 1 1284 3 view .LVU221
1285:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1286:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* If end of conversion selected to end of sequence conversions */
1287:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 686              		.loc 1 1287 3 view .LVU222
 687              		.loc 1 1287 17 is_stmt 0 view .LVU223
 688 0006 4669     		ldr	r6, [r0, #20]
 689              		.loc 1 1287 6 view .LVU224
 690 0008 082E     		cmp	r6, #8
 691 000a 05D0     		beq	.L39
1288:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
1289:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     tmp_flag_end = ADC_FLAG_EOS;
1290:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
1291:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* If end of conversion selected to end of unitary conversion */
1292:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   else /* ADC_EOC_SINGLE_CONV */
1293:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
1294:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Verification that ADC configuration is compliant with polling for      */
1295:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* each conversion:                                                       */
1296:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
1297:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* several ranks and polling for end of each conversion.                  */
1298:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* For code simplicity sake, this particular case is generalized to       */
1299:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* ADC configured in DMA mode and and polling for end of each conversion. */
1300:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 692              		.loc 1 1300 5 is_stmt 1 view .LVU225
 693              		.loc 1 1300 14 is_stmt 0 view .LVU226
 694 000c 0368     		ldr	r3, [r0]
 695              		.loc 1 1300 24 view .LVU227
 696 000e DB68     		ldr	r3, [r3, #12]
 697              		.loc 1 1300 8 view .LVU228
ARM GAS  /tmp/ccN8TuGv.s 			page 116


 698 0010 13F0010F 		tst	r3, #1
 699 0014 1ED1     		bne	.L50
1301:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
1302:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Update ADC state machine to error */
1303:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1304:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1305:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       return HAL_ERROR;
1306:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
1307:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     else
1308:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
1309:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       tmp_flag_end = (ADC_FLAG_EOC);
 700              		.loc 1 1309 20 view .LVU229
 701 0016 0426     		movs	r6, #4
 702              	.L39:
 703              	.LVL51:
1310:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
1311:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
1312:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1313:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Get tick count */
1314:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   tickstart = HAL_GetTick();
 704              		.loc 1 1314 3 is_stmt 1 view .LVU230
 705              		.loc 1 1314 15 is_stmt 0 view .LVU231
 706 0018 FFF7FEFF 		bl	HAL_GetTick
 707              	.LVL52:
 708              		.loc 1 1314 15 view .LVU232
 709 001c 0746     		mov	r7, r0
 710              	.LVL53:
1315:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1316:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Wait until End of unitary conversion or sequence conversions flag is raised */
1317:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 711              		.loc 1 1317 3 is_stmt 1 view .LVU233
 712              	.L42:
 713              		.loc 1 1317 9 view .LVU234
 714              		.loc 1 1317 15 is_stmt 0 view .LVU235
 715 001e 2368     		ldr	r3, [r4]
 716              		.loc 1 1317 25 view .LVU236
 717 0020 1A68     		ldr	r2, [r3]
 718              		.loc 1 1317 9 view .LVU237
 719 0022 3242     		tst	r2, r6
 720 0024 1CD1     		bne	.L51
1318:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
1319:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
1320:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     if (Timeout != HAL_MAX_DELAY)
 721              		.loc 1 1320 5 is_stmt 1 view .LVU238
 722              		.loc 1 1320 8 is_stmt 0 view .LVU239
 723 0026 B5F1FF3F 		cmp	r5, #-1
 724 002a F8D0     		beq	.L42
1321:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
1322:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 725              		.loc 1 1322 7 is_stmt 1 view .LVU240
 726              		.loc 1 1322 13 is_stmt 0 view .LVU241
 727 002c FFF7FEFF 		bl	HAL_GetTick
 728              	.LVL54:
 729              		.loc 1 1322 27 view .LVU242
 730 0030 C31B     		subs	r3, r0, r7
 731              		.loc 1 1322 10 view .LVU243
 732 0032 AB42     		cmp	r3, r5
ARM GAS  /tmp/ccN8TuGv.s 			page 117


 733 0034 01D8     		bhi	.L43
 734              		.loc 1 1322 51 discriminator 1 view .LVU244
 735 0036 002D     		cmp	r5, #0
 736 0038 F1D1     		bne	.L42
 737              	.L43:
1323:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
1324:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* New check to avoid false timeout detection in case of preemption */
1325:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 738              		.loc 1 1325 9 is_stmt 1 view .LVU245
 739              		.loc 1 1325 18 is_stmt 0 view .LVU246
 740 003a 2368     		ldr	r3, [r4]
 741              		.loc 1 1325 28 view .LVU247
 742 003c 1B68     		ldr	r3, [r3]
 743              		.loc 1 1325 12 view .LVU248
 744 003e 3342     		tst	r3, r6
 745 0040 EDD1     		bne	.L42
1326:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
1327:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           /* Update ADC state machine to timeout */
1328:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 746              		.loc 1 1328 11 is_stmt 1 view .LVU249
 747 0042 A36D     		ldr	r3, [r4, #88]
 748 0044 43F00403 		orr	r3, r3, #4
 749 0048 A365     		str	r3, [r4, #88]
1329:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1330:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           __HAL_UNLOCK(hadc);
 750              		.loc 1 1330 11 view .LVU250
 751              		.loc 1 1330 11 view .LVU251
 752 004a 0023     		movs	r3, #0
 753 004c 84F85430 		strb	r3, [r4, #84]
 754              		.loc 1 1330 11 view .LVU252
1331:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1332:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           return HAL_TIMEOUT;
 755              		.loc 1 1332 11 view .LVU253
 756              		.loc 1 1332 18 is_stmt 0 view .LVU254
 757 0050 0320     		movs	r0, #3
 758 0052 28E0     		b	.L40
 759              	.LVL55:
 760              	.L50:
1303:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 761              		.loc 1 1303 7 is_stmt 1 view .LVU255
 762 0054 836D     		ldr	r3, [r0, #88]
 763 0056 43F02003 		orr	r3, r3, #32
 764 005a 8365     		str	r3, [r0, #88]
1305:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 765              		.loc 1 1305 7 view .LVU256
1305:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 766              		.loc 1 1305 14 is_stmt 0 view .LVU257
 767 005c 0120     		movs	r0, #1
 768              	.LVL56:
1305:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 769              		.loc 1 1305 14 view .LVU258
 770 005e 22E0     		b	.L40
 771              	.LVL57:
 772              	.L51:
1333:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
1334:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
1335:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
ARM GAS  /tmp/ccN8TuGv.s 			page 118


1336:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
1337:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1338:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Update ADC state machine */
1339:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 773              		.loc 1 1339 3 is_stmt 1 view .LVU259
 774 0060 A26D     		ldr	r2, [r4, #88]
 775 0062 42F40072 		orr	r2, r2, #512
 776 0066 A265     		str	r2, [r4, #88]
1340:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1341:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Determine whether any further conversion upcoming on group regular       */
1342:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* by external trigger, continuous mode or scan sequence on going.          */
1343:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 777              		.loc 1 1343 3 view .LVU260
 778              	.LVL58:
 779              	.LBB168:
 780              	.LBI168:
2340:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 781              		.loc 2 2340 26 view .LVU261
 782              	.LBB169:
2342:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 783              		.loc 2 2342 3 view .LVU262
2342:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 784              		.loc 2 2342 12 is_stmt 0 view .LVU263
 785 0068 DA68     		ldr	r2, [r3, #12]
2342:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 786              		.loc 2 2342 106 view .LVU264
 787 006a 12F4406F 		tst	r2, #3072
 788 006e 15D1     		bne	.L45
 789              	.LVL59:
2342:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 790              		.loc 2 2342 106 view .LVU265
 791              	.LBE169:
 792              	.LBE168:
1344:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       && (hadc->Init.ContinuousConvMode == DISABLE)
 793              		.loc 1 1344 21 view .LVU266
 794 0070 A27E     		ldrb	r2, [r4, #26]	@ zero_extendqisi2
 795              		.loc 1 1344 7 view .LVU267
 796 0072 9AB9     		cbnz	r2, .L45
1345:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      )
1346:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
1347:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Check whether end of sequence is reached */
1348:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 797              		.loc 1 1348 5 is_stmt 1 view .LVU268
 798              		.loc 1 1348 9 is_stmt 0 view .LVU269
 799 0074 1A68     		ldr	r2, [r3]
 800              		.loc 1 1348 8 view .LVU270
 801 0076 12F0080F 		tst	r2, #8
 802 007a 0FD0     		beq	.L45
1349:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
1350:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
1351:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* ADSTART==0 (no conversion on going)                                  */
1352:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 803              		.loc 1 1352 7 is_stmt 1 view .LVU271
 804              	.LVL60:
 805              	.LBB170:
 806              	.LBI170:
4366:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
ARM GAS  /tmp/ccN8TuGv.s 			page 119


 807              		.loc 2 4366 26 view .LVU272
 808              	.LBB171:
 809              		.loc 2 4368 3 view .LVU273
 810              		.loc 2 4368 12 is_stmt 0 view .LVU274
 811 007c 9A68     		ldr	r2, [r3, #8]
 812              		.loc 2 4368 74 view .LVU275
 813 007e 12F0040F 		tst	r2, #4
 814 0082 11D1     		bne	.L46
 815              	.LVL61:
 816              		.loc 2 4368 74 view .LVU276
 817              	.LBE171:
 818              	.LBE170:
1353:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
1354:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* Disable ADC end of single conversion interrupt on group regular */
1355:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* Note: Overrun interrupt was enabled with EOC interrupt in          */
1356:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* HAL_Start_IT(), but is not disabled here because can be used       */
1357:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* by overrun IRQ process below.                                      */
1358:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 819              		.loc 1 1358 9 is_stmt 1 view .LVU277
 820 0084 5A68     		ldr	r2, [r3, #4]
 821 0086 22F00C02 		bic	r2, r2, #12
 822 008a 5A60     		str	r2, [r3, #4]
1359:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1360:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* Set ADC state */
1361:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State,
 823              		.loc 1 1361 9 view .LVU278
 824 008c A36D     		ldr	r3, [r4, #88]
 825 008e 23F48073 		bic	r3, r3, #256
 826 0092 23F00103 		bic	r3, r3, #1
 827 0096 43F00103 		orr	r3, r3, #1
 828 009a A365     		str	r3, [r4, #88]
 829              	.L45:
1362:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                           HAL_ADC_STATE_REG_BUSY,
1363:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                           HAL_ADC_STATE_READY);
1364:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
1365:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       else
1366:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
1367:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* Change ADC state to error state */
1368:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1369:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1370:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* Set ADC error code to ADC peripheral internal error */
1371:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
1372:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
1373:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
1374:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
1375:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1376:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Clear end of conversion flag of regular group if low power feature       */
1377:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
1378:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* until data register is read using function HAL_ADC_GetValue().           */
1379:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   if (hadc->Init.LowPowerAutoWait == DISABLE)
 830              		.loc 1 1379 3 view .LVU279
 831              		.loc 1 1379 17 is_stmt 0 view .LVU280
 832 009c 207E     		ldrb	r0, [r4, #24]	@ zero_extendqisi2
 833              		.loc 1 1379 6 view .LVU281
 834 009e 60B9     		cbnz	r0, .L48
1380:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
1381:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Clear regular group conversion flag */
ARM GAS  /tmp/ccN8TuGv.s 			page 120


1382:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 835              		.loc 1 1382 5 is_stmt 1 view .LVU282
 836 00a0 2368     		ldr	r3, [r4]
 837 00a2 0C22     		movs	r2, #12
 838 00a4 1A60     		str	r2, [r3]
 839              	.LVL62:
 840              	.L40:
1383:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
1384:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1385:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Return function status */
1386:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   return HAL_OK;
1387:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
 841              		.loc 1 1387 1 is_stmt 0 view .LVU283
 842 00a6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 843              	.LVL63:
 844              	.L46:
1368:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 845              		.loc 1 1368 9 is_stmt 1 view .LVU284
 846 00a8 A36D     		ldr	r3, [r4, #88]
 847 00aa 43F02003 		orr	r3, r3, #32
 848 00ae A365     		str	r3, [r4, #88]
1371:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
 849              		.loc 1 1371 9 view .LVU285
 850 00b0 E36D     		ldr	r3, [r4, #92]
 851 00b2 43F00103 		orr	r3, r3, #1
 852 00b6 E365     		str	r3, [r4, #92]
 853 00b8 F0E7     		b	.L45
 854              	.L48:
1386:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
 855              		.loc 1 1386 10 is_stmt 0 view .LVU286
 856 00ba 0020     		movs	r0, #0
 857 00bc F3E7     		b	.L40
 858              		.cfi_endproc
 859              	.LFE1099:
 861              		.section	.text.HAL_ADC_PollForEvent,"ax",%progbits
 862              		.align	1
 863              		.global	HAL_ADC_PollForEvent
 864              		.syntax unified
 865              		.thumb
 866              		.thumb_func
 867              		.fpu softvfp
 869              	HAL_ADC_PollForEvent:
 870              	.LVL64:
 871              	.LFB1100:
1388:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1389:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /**
1390:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @brief  Poll for ADC event.
1391:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @param hadc ADC handle
1392:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @param EventType the ADC event type.
1393:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *          This parameter can be one of the following values:
1394:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *            @arg @ref ADC_EOSMP_EVENT  ADC End of Sampling event
1395:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *            @arg @ref ADC_AWD1_EVENT   ADC Analog watchdog 1 event (main analog watchdog, presen
1396:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *            @arg @ref ADC_AWD2_EVENT   ADC Analog watchdog 2 event (additional analog watchdog, 
1397:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *            @arg @ref ADC_AWD3_EVENT   ADC Analog watchdog 3 event (additional analog watchdog, 
1398:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *            @arg @ref ADC_OVR_EVENT    ADC Overrun event
1399:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @param Timeout Timeout value in millisecond.
1400:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @note   The relevant flag is cleared if found to be set, except for ADC_FLAG_OVR.
ARM GAS  /tmp/ccN8TuGv.s 			page 121


1401:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         Indeed, the latter is reset only if hadc->Init.Overrun field is set
1402:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         to ADC_OVR_DATA_OVERWRITTEN. Otherwise, data register may be potentially overwritten
1403:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         by a new converted data as soon as OVR is cleared.
1404:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         To reset OVR flag once the preserved data is retrieved, the user can resort
1405:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         to macro __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1406:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @retval HAL status
1407:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
1408:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef *hadc, uint32_t EventType, uint32_t Timeou
1409:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** {
 872              		.loc 1 1409 1 is_stmt 1 view -0
 873              		.cfi_startproc
 874              		@ args = 0, pretend = 0, frame = 0
 875              		@ frame_needed = 0, uses_anonymous_args = 0
 876              		.loc 1 1409 1 is_stmt 0 view .LVU288
 877 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 878              	.LCFI5:
 879              		.cfi_def_cfa_offset 24
 880              		.cfi_offset 4, -24
 881              		.cfi_offset 5, -20
 882              		.cfi_offset 6, -16
 883              		.cfi_offset 7, -12
 884              		.cfi_offset 8, -8
 885              		.cfi_offset 14, -4
 886 0004 0646     		mov	r6, r0
 887 0006 0D46     		mov	r5, r1
 888 0008 1746     		mov	r7, r2
1410:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tickstart;
 889              		.loc 1 1410 3 is_stmt 1 view .LVU289
1411:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1412:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Check the parameters */
1413:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 890              		.loc 1 1413 3 view .LVU290
1414:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_EVENT_TYPE(EventType));
 891              		.loc 1 1414 3 view .LVU291
1415:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1416:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Get tick count */
1417:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   tickstart = HAL_GetTick();
 892              		.loc 1 1417 3 view .LVU292
 893              		.loc 1 1417 15 is_stmt 0 view .LVU293
 894 000a FFF7FEFF 		bl	HAL_GetTick
 895              	.LVL65:
 896              		.loc 1 1417 15 view .LVU294
 897 000e 8046     		mov	r8, r0
 898              	.LVL66:
1418:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1419:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Check selected event flag */
1420:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   while (__HAL_ADC_GET_FLAG(hadc, EventType) == 0UL)
 899              		.loc 1 1420 3 is_stmt 1 view .LVU295
 900              	.L54:
 901              		.loc 1 1420 9 view .LVU296
 902              		.loc 1 1420 10 is_stmt 0 view .LVU297
 903 0010 3368     		ldr	r3, [r6]
 904 0012 1C68     		ldr	r4, [r3]
 905              		.loc 1 1420 9 view .LVU298
 906 0014 35EA0402 		bics	r2, r5, r4
 907 0018 18D0     		beq	.L66
1421:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
ARM GAS  /tmp/ccN8TuGv.s 			page 122


1422:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
1423:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     if (Timeout != HAL_MAX_DELAY)
 908              		.loc 1 1423 5 is_stmt 1 view .LVU299
 909              		.loc 1 1423 8 is_stmt 0 view .LVU300
 910 001a B7F1FF3F 		cmp	r7, #-1
 911 001e F7D0     		beq	.L54
1424:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
1425:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 912              		.loc 1 1425 7 is_stmt 1 view .LVU301
 913              		.loc 1 1425 13 is_stmt 0 view .LVU302
 914 0020 FFF7FEFF 		bl	HAL_GetTick
 915              	.LVL67:
 916              		.loc 1 1425 27 view .LVU303
 917 0024 A0EB0803 		sub	r3, r0, r8
 918              		.loc 1 1425 10 view .LVU304
 919 0028 BB42     		cmp	r3, r7
 920 002a 01D8     		bhi	.L55
 921              		.loc 1 1425 51 discriminator 1 view .LVU305
 922 002c 002F     		cmp	r7, #0
 923 002e EFD1     		bne	.L54
 924              	.L55:
1426:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
1427:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* New check to avoid false timeout detection in case of preemption */
1428:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         if (__HAL_ADC_GET_FLAG(hadc, EventType) == 0UL)
 925              		.loc 1 1428 9 is_stmt 1 view .LVU306
 926              		.loc 1 1428 13 is_stmt 0 view .LVU307
 927 0030 3368     		ldr	r3, [r6]
 928 0032 1B68     		ldr	r3, [r3]
 929              		.loc 1 1428 12 view .LVU308
 930 0034 35EA0303 		bics	r3, r5, r3
 931 0038 EAD0     		beq	.L54
1429:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
1430:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           /* Update ADC state machine to timeout */
1431:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 932              		.loc 1 1431 11 is_stmt 1 view .LVU309
 933 003a B36D     		ldr	r3, [r6, #88]
 934 003c 43F00403 		orr	r3, r3, #4
 935 0040 B365     		str	r3, [r6, #88]
1432:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1433:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           __HAL_UNLOCK(hadc);
 936              		.loc 1 1433 11 view .LVU310
 937              		.loc 1 1433 11 view .LVU311
 938 0042 0023     		movs	r3, #0
 939 0044 86F85430 		strb	r3, [r6, #84]
 940              		.loc 1 1433 11 view .LVU312
1434:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1435:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           return HAL_TIMEOUT;
 941              		.loc 1 1435 11 view .LVU313
 942              		.loc 1 1435 18 is_stmt 0 view .LVU314
 943 0048 0320     		movs	r0, #3
 944 004a 22E0     		b	.L56
 945              	.L66:
1436:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
1437:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
1438:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
1439:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
1440:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
ARM GAS  /tmp/ccN8TuGv.s 			page 123


1441:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   switch (EventType)
 946              		.loc 1 1441 3 is_stmt 1 view .LVU315
 947 004c B5F5807F 		cmp	r5, #256
 948 0050 21D0     		beq	.L58
 949 0052 0BD8     		bhi	.L59
 950 0054 022D     		cmp	r5, #2
 951 0056 15D0     		beq	.L60
 952 0058 802D     		cmp	r5, #128
 953 005a 25D1     		bne	.L62
1442:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
1443:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* End Of Sampling event */
1444:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     case ADC_EOSMP_EVENT:
1445:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Set ADC state */
1446:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
1447:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1448:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Clear the End Of Sampling flag */
1449:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
1450:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1451:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       break;
1452:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1453:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Analog watchdog (level out of window) event */
1454:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Note: In case of several analog watchdog enabled, if needed to know      */
1455:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* which one triggered and on which ADCx, test ADC state of analog watchdog */
1456:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* flags HAL_ADC_STATE_AWD1/2/3 using function "HAL_ADC_GetState()".        */
1457:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* For example:                                                             */
1458:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /*  " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "          */
1459:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /*  " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD2) != 0UL) "          */
1460:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /*  " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD3) != 0UL) "          */
1461:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1462:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Check analog watchdog 1 flag */
1463:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     case ADC_AWD_EVENT:
1464:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Set ADC state */
1465:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 954              		.loc 1 1465 7 view .LVU316
 955 005c B26D     		ldr	r2, [r6, #88]
 956 005e 42F48032 		orr	r2, r2, #65536
 957 0062 B265     		str	r2, [r6, #88]
1466:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1467:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Clear ADC analog watchdog flag */
1468:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 958              		.loc 1 1468 7 view .LVU317
 959 0064 8022     		movs	r2, #128
 960 0066 1A60     		str	r2, [r3]
1469:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1470:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       break;
 961              		.loc 1 1470 7 view .LVU318
1471:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1472:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Check analog watchdog 2 flag */
1473:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     case ADC_AWD2_EVENT:
1474:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Set ADC state */
1475:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
1476:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1477:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Clear ADC analog watchdog flag */
1478:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
1479:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1480:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       break;
1481:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
ARM GAS  /tmp/ccN8TuGv.s 			page 124


1482:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Check analog watchdog 3 flag */
1483:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     case ADC_AWD3_EVENT:
1484:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Set ADC state */
1485:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
1486:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1487:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Clear ADC analog watchdog flag */
1488:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
1489:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1490:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       break;
1491:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1492:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Overrun event */
1493:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     default: /* Case ADC_OVR_EVENT */
1494:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* If overrun is set to overwrite previous data, overrun event is not     */
1495:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* considered as an error.                                                */
1496:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* (cf ref manual "Managing conversions without using the DMA and without */
1497:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* overrun ")                                                             */
1498:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
1499:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
1500:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* Set ADC state */
1501:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
1502:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1503:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* Set ADC error code to overrun */
1504:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
1505:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
1506:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       else
1507:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
1508:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* Clear ADC Overrun flag only if Overrun is set to ADC_OVR_DATA_OVERWRITTEN
1509:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****            otherwise, data register is potentially overwritten by new converted data as soon
1510:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****            as OVR is cleared. */
1511:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1512:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
1513:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       break;
1514:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
1515:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1516:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Return function status */
1517:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   return HAL_OK;
 962              		.loc 1 1517 10 is_stmt 0 view .LVU319
 963 0068 0020     		movs	r0, #0
1470:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 964              		.loc 1 1470 7 view .LVU320
 965 006a 12E0     		b	.L56
 966              	.L59:
1441:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 967              		.loc 1 1441 3 view .LVU321
 968 006c B5F5007F 		cmp	r5, #512
 969 0070 1AD1     		bne	.L62
1485:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 970              		.loc 1 1485 7 is_stmt 1 view .LVU322
 971 0072 B26D     		ldr	r2, [r6, #88]
 972 0074 42F48022 		orr	r2, r2, #262144
 973 0078 B265     		str	r2, [r6, #88]
1488:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 974              		.loc 1 1488 7 view .LVU323
 975 007a 4FF40072 		mov	r2, #512
 976 007e 1A60     		str	r2, [r3]
1490:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 977              		.loc 1 1490 7 view .LVU324
ARM GAS  /tmp/ccN8TuGv.s 			page 125


 978              		.loc 1 1517 10 is_stmt 0 view .LVU325
 979 0080 0020     		movs	r0, #0
1490:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 980              		.loc 1 1490 7 view .LVU326
 981 0082 06E0     		b	.L56
 982              	.L60:
1446:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 983              		.loc 1 1446 7 is_stmt 1 view .LVU327
 984 0084 B26D     		ldr	r2, [r6, #88]
 985 0086 42F40062 		orr	r2, r2, #2048
 986 008a B265     		str	r2, [r6, #88]
1449:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 987              		.loc 1 1449 7 view .LVU328
 988 008c 0222     		movs	r2, #2
 989 008e 1A60     		str	r2, [r3]
1451:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 990              		.loc 1 1451 7 view .LVU329
 991              		.loc 1 1517 10 is_stmt 0 view .LVU330
 992 0090 0020     		movs	r0, #0
 993              	.L56:
1518:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
 994              		.loc 1 1518 1 view .LVU331
 995 0092 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 996              	.LVL68:
 997              	.L58:
1475:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 998              		.loc 1 1475 7 is_stmt 1 view .LVU332
 999 0096 B26D     		ldr	r2, [r6, #88]
 1000 0098 42F40032 		orr	r2, r2, #131072
 1001 009c B265     		str	r2, [r6, #88]
1478:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 1002              		.loc 1 1478 7 view .LVU333
 1003 009e 4FF48072 		mov	r2, #256
 1004 00a2 1A60     		str	r2, [r3]
1480:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 1005              		.loc 1 1480 7 view .LVU334
1517:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
 1006              		.loc 1 1517 10 is_stmt 0 view .LVU335
 1007 00a4 0020     		movs	r0, #0
1480:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 1008              		.loc 1 1480 7 view .LVU336
 1009 00a6 F4E7     		b	.L56
 1010              	.L62:
1498:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 1011              		.loc 1 1498 7 is_stmt 1 view .LVU337
1498:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 1012              		.loc 1 1498 21 is_stmt 0 view .LVU338
 1013 00a8 326B     		ldr	r2, [r6, #48]
1498:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 1014              		.loc 1 1498 10 view .LVU339
 1015 00aa 4AB9     		cbnz	r2, .L64
1501:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 1016              		.loc 1 1501 9 is_stmt 1 view .LVU340
 1017 00ac B36D     		ldr	r3, [r6, #88]
 1018 00ae 43F48063 		orr	r3, r3, #1024
 1019 00b2 B365     		str	r3, [r6, #88]
1504:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
ARM GAS  /tmp/ccN8TuGv.s 			page 126


 1020              		.loc 1 1504 9 view .LVU341
 1021 00b4 F36D     		ldr	r3, [r6, #92]
 1022 00b6 43F00203 		orr	r3, r3, #2
 1023 00ba F365     		str	r3, [r6, #92]
1517:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
 1024              		.loc 1 1517 10 is_stmt 0 view .LVU342
 1025 00bc 0020     		movs	r0, #0
 1026 00be E8E7     		b	.L56
 1027              	.L64:
1511:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
 1028              		.loc 1 1511 9 is_stmt 1 view .LVU343
 1029 00c0 1022     		movs	r2, #16
 1030 00c2 1A60     		str	r2, [r3]
1517:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
 1031              		.loc 1 1517 10 is_stmt 0 view .LVU344
 1032 00c4 0020     		movs	r0, #0
 1033 00c6 E4E7     		b	.L56
 1034              		.cfi_endproc
 1035              	.LFE1100:
 1037              		.section	.text.HAL_ADC_GetValue,"ax",%progbits
 1038              		.align	1
 1039              		.global	HAL_ADC_GetValue
 1040              		.syntax unified
 1041              		.thumb
 1042              		.thumb_func
 1043              		.fpu softvfp
 1045              	HAL_ADC_GetValue:
 1046              	.LVL69:
 1047              	.LFB1105:
1519:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1520:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /**
1521:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @brief  Enable ADC, start conversion of regular group with interruption.
1522:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @note   Interruptions enabled in this function according to initialization
1523:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         setting : EOC (end of conversion), EOS (end of sequence),
1524:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         OVR overrun.
1525:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1526:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @note   To guarantee a proper reset of all interruptions once all the needed
1527:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         conversions are obtained, HAL_ADC_Stop_IT() must be called to ensure
1528:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         a correct stop of the IT-based conversions.
1529:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @note   By default, HAL_ADC_Start_IT() does not enable the End Of Sampling
1530:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         interruption. If required (e.g. in case of oversampling with trigger
1531:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         mode), the user must:
1532:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *          1. first clear the EOSMP flag if set with macro __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EO
1533:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *          2. then enable the EOSMP interrupt with macro __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOSMP)
1534:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *          before calling HAL_ADC_Start_IT().
1535:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @param hadc ADC handle
1536:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @retval HAL status
1537:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
1538:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
1539:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** {
1540:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
1541:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1542:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Check the parameters */
1543:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1544:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1545:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
1546:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
ARM GAS  /tmp/ccN8TuGv.s 			page 127


1547:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
1548:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     __HAL_LOCK(hadc);
1549:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1550:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Enable the ADC peripheral */
1551:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     tmp_hal_status = ADC_Enable(hadc);
1552:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1553:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
1554:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1555:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
1556:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Set ADC state                                                        */
1557:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
1558:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
1559:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1560:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
1561:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
1562:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1563:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1564:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Set ADC error code */
1565:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Reset all ADC error code fields */
1566:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
1567:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1568:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Clear ADC group regular conversion flag and overrun flag               */
1569:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC operations) */
1570:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
1571:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1572:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Process unlocked */
1573:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1574:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1575:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       __HAL_UNLOCK(hadc);
1576:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1577:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Disable all interruptions before enabling the desired ones */
1578:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
1579:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1580:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Enable ADC end of conversion interrupt */
1581:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       switch (hadc->Init.EOCSelection)
1582:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
1583:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         case ADC_EOC_SEQ_CONV:
1584:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
1585:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           break;
1586:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* case ADC_EOC_SINGLE_CONV */
1587:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         default:
1588:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
1589:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           break;
1590:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
1591:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1592:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Enable ADC overrun interrupt */
1593:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
1594:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****          ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
1595:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****          behavior and no CPU time is lost for a non-processed interruption */
1596:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
1597:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
1598:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
1599:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
1600:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1601:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
1602:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
1603:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
ARM GAS  /tmp/ccN8TuGv.s 			page 128


1604:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* trigger event.                                                       */
1605:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Start ADC group regular conversion */
1606:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       LL_ADC_REG_StartConversion(hadc->Instance);
1607:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
1608:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     else
1609:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
1610:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       __HAL_UNLOCK(hadc);
1611:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
1612:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1613:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
1614:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   else
1615:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
1616:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
1617:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
1618:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1619:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   return tmp_hal_status;
1620:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
1621:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1622:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /**
1623:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected group in
1624:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         case of auto_injection mode), disable interrution of
1625:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         end-of-conversion, disable ADC peripheral.
1626:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @param hadc ADC handle
1627:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @retval HAL status.
1628:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
1629:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
1630:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** {
1631:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
1632:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1633:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Check the parameters */
1634:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1635:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1636:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   __HAL_LOCK(hadc);
1637:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1638:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* 1. Stop potential conversion on going, on ADC group regular */
1639:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
1640:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1641:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
1642:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
1643:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
1644:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Disable ADC end of conversion interrupt for regular group */
1645:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Disable ADC overrun interrupt */
1646:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
1647:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1648:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
1649:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
1650:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1651:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Check if ADC is effectively disabled */
1652:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1653:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
1654:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Set ADC state */
1655:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1656:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
1657:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                         HAL_ADC_STATE_READY);
1658:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
1659:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
1660:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
ARM GAS  /tmp/ccN8TuGv.s 			page 129


1661:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1662:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1663:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   return tmp_hal_status;
1664:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
1665:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1666:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /**
1667:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @brief  Enable ADC, start conversion of regular group and transfer result through DMA.
1668:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @note   Interruptions enabled in this function:
1669:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         overrun (if applicable), DMA half transfer, DMA transfer complete.
1670:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1671:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @param hadc ADC handle
1672:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @param pData Destination Buffer address.
1673:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @param Length Number of data to be transferred from ADC peripheral to memory
1674:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @retval HAL status.
1675:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
1676:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
1677:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** {
1678:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
1679:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1680:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Check the parameters */
1681:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1682:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1683:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
1684:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
1685:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
1686:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     __HAL_LOCK(hadc);
1687:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1688:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Specific case for first call occurrence of this function (DMA transfer */
1689:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* not activated and ADC disabled), DMA transfer must be activated        */
1690:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* with ADC disabled.                                                     */
1691:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
1692:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
1693:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
1694:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
1695:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* Disable ADC */
1696:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         LL_ADC_Disable(hadc->Instance);
1697:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
1698:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1699:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Enable ADC DMA mode */
1700:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
1701:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
1702:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1703:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Enable the ADC peripheral */
1704:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     tmp_hal_status = ADC_Enable(hadc);
1705:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1706:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
1707:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1708:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
1709:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Set ADC state                                                        */
1710:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
1711:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
1712:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1713:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
1714:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
1715:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1716:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Set ADC error code */
1717:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Reset all ADC error code fields */
ARM GAS  /tmp/ccN8TuGv.s 			page 130


1718:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
1719:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1720:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Set the DMA transfer complete callback */
1721:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
1722:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1723:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Set the DMA half transfer complete callback */
1724:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
1725:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1726:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Set the DMA error callback */
1727:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
1728:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1729:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1730:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC   */
1731:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* start (in case of SW start):                                         */
1732:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1733:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Clear regular group conversion flag and overrun flag */
1734:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC           */
1735:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* operations)                                                          */
1736:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
1737:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1738:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Process unlocked */
1739:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1740:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1741:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       __HAL_UNLOCK(hadc);
1742:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1743:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Enable ADC overrun interrupt */
1744:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
1745:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1746:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Start the DMA channel */
1747:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)
1748:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1749:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
1750:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
1751:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
1752:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* trigger event.                                                       */
1753:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Start ADC group regular conversion */
1754:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       LL_ADC_REG_StartConversion(hadc->Instance);
1755:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
1756:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
1757:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   else
1758:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
1759:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
1760:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
1761:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1762:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   return tmp_hal_status;
1763:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
1764:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1765:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /**
1766:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected group in
1767:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         case of auto_injection mode), disable ADC DMA transfer, disable
1768:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         ADC peripheral.
1769:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @param hadc ADC handle
1770:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @retval HAL status.
1771:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
1772:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
1773:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** {
1774:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
ARM GAS  /tmp/ccN8TuGv.s 			page 131


1775:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1776:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Check the parameters */
1777:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1778:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1779:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   __HAL_LOCK(hadc);
1780:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1781:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* 1. Stop potential ADC group regular conversion on going */
1782:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc);
1783:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1784:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
1785:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
1786:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
1787:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop       */
1788:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* while DMA transfer is on going)                                        */
1789:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
1790:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
1791:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
1792:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1793:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Check if DMA channel effectively disabled */
1794:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       if (tmp_hal_status != HAL_OK)
1795:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
1796:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* Update ADC state machine to error */
1797:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
1798:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
1799:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
1800:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1801:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Disable ADC overrun interrupt */
1802:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
1803:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1804:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
1805:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
1806:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* to keep in memory a potential failing status.                          */
1807:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1808:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
1809:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       tmp_hal_status = ADC_Disable(hadc);
1810:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
1811:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     else
1812:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
1813:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       (void)ADC_Disable(hadc);
1814:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
1815:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1816:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Check if ADC is effectively disabled */
1817:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1818:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
1819:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Set ADC state */
1820:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1821:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
1822:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                         HAL_ADC_STATE_READY);
1823:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
1824:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1825:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
1826:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
1827:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
1828:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1829:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1830:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1831:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   return tmp_hal_status;
ARM GAS  /tmp/ccN8TuGv.s 			page 132


1832:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
1833:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1834:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /**
1835:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @brief  Get ADC regular group conversion result.
1836:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @note   Reading register DR automatically clears ADC flag EOC
1837:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         (ADC group regular end of unitary conversion).
1838:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @note   This function does not clear ADC flag EOS
1839:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         (ADC group regular end of sequence conversion).
1840:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         Occurrence of flag EOS rising:
1841:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *          - If sequencer is composed of 1 rank, flag EOS is equivalent
1842:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *            to flag EOC.
1843:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *          - If sequencer is composed of several ranks, during the scan
1844:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *            sequence flag EOC only is raised, at the end of the scan sequence
1845:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *            both flags EOC and EOS are raised.
1846:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         To clear this flag, either use function:
1847:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         in programming model IT: @ref HAL_ADC_IRQHandler(), in programming
1848:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         model polling: @ref HAL_ADC_PollForConversion()
1849:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
1850:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @param hadc ADC handle
1851:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @retval ADC group regular conversion data
1852:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
1853:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
1854:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** {
 1048              		.loc 1 1854 1 is_stmt 1 view -0
 1049              		.cfi_startproc
 1050              		@ args = 0, pretend = 0, frame = 0
 1051              		@ frame_needed = 0, uses_anonymous_args = 0
 1052              		@ link register save eliminated.
1855:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Check the parameters */
1856:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 1053              		.loc 1 1856 3 view .LVU346
1857:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1858:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Note: EOC flag is not cleared here by software because automatically     */
1859:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /*       cleared by hardware when reading register DR.                      */
1860:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1861:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Return ADC converted value */
1862:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   return hadc->Instance->DR;
 1054              		.loc 1 1862 3 view .LVU347
 1055              		.loc 1 1862 14 is_stmt 0 view .LVU348
 1056 0000 0368     		ldr	r3, [r0]
 1057              		.loc 1 1862 24 view .LVU349
 1058 0002 186C     		ldr	r0, [r3, #64]
 1059              	.LVL70:
1863:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
 1060              		.loc 1 1863 1 view .LVU350
 1061 0004 7047     		bx	lr
 1062              		.cfi_endproc
 1063              	.LFE1105:
 1065              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 1066              		.align	1
 1067              		.weak	HAL_ADC_ConvCpltCallback
 1068              		.syntax unified
 1069              		.thumb
 1070              		.thumb_func
 1071              		.fpu softvfp
 1073              	HAL_ADC_ConvCpltCallback:
 1074              	.LVL71:
ARM GAS  /tmp/ccN8TuGv.s 			page 133


 1075              	.LFB1107:
1864:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1865:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /**
1866:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @brief  Handle ADC interrupt request.
1867:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @param hadc ADC handle
1868:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @retval None
1869:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
1870:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
1871:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** {
1872:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error 
1873:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tmp_isr = hadc->Instance->ISR;
1874:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tmp_ier = hadc->Instance->IER;
1875:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1876:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Check the parameters */
1877:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1878:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
1879:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1880:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* ========== Check End of Sampling flag for ADC group regular ========== */
1881:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
1882:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
1883:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Update state machine on end of sampling status if not in error state */
1884:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
1885:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
1886:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Set ADC state */
1887:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
1888:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
1889:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1890:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* End Of Sampling callback */
1891:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1892:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     hadc->EndOfSamplingCallback(hadc);
1893:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #else
1894:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     HAL_ADCEx_EndOfSamplingCallback(hadc);
1895:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1896:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1897:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Clear regular group conversion flag */
1898:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
1899:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
1900:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1901:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
1902:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
1903:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
1904:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
1905:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Update state machine on conversion status if not in error state */
1906:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
1907:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
1908:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Set ADC state */
1909:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
1910:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
1911:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1912:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular     */
1913:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going         */
1914:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* to disable interruption.                                               */
1915:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
1916:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         && (hadc->Init.ContinuousConvMode == DISABLE)
1917:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****        )
1918:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
1919:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* If End of Sequence is reached, disable interrupts */
ARM GAS  /tmp/ccN8TuGv.s 			page 134


1920:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
1921:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
1922:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
1923:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* ADSTART==0 (no conversion on going)                                */
1924:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
1925:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
1926:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           /* Disable ADC end of single conversion interrupt on group regular */
1927:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           /* Note: Overrun interrupt was enabled with EOC interrupt in        */
1928:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           /* HAL_Start_IT(), but is not disabled here because can be used     */
1929:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           /* by overrun IRQ process below.                                    */
1930:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
1931:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1932:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           /* Set ADC state */
1933:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           ADC_STATE_CLR_SET(hadc->State,
1934:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                             HAL_ADC_STATE_REG_BUSY,
1935:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                             HAL_ADC_STATE_READY);
1936:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
1937:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         else
1938:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
1939:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           /* Change ADC state to error state */
1940:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1941:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1942:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           /* Set ADC error code to ADC peripheral internal error */
1943:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
1944:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
1945:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
1946:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
1947:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1948:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Conversion complete callback */
1949:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Note: Into callback function "HAL_ADC_ConvCpltCallback()",             */
1950:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /*       to determine if conversion has been triggered from EOC or EOS,   */
1951:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /*       possibility to use:                                              */
1952:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
1953:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1954:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     hadc->ConvCpltCallback(hadc);
1955:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #else
1956:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc);
1957:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1958:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1959:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Clear regular group conversion flag */
1960:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
1961:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /*       conversion flags clear induces the release of the preserved data.*/
1962:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /*       Therefore, if the preserved data value is needed, it must be     */
1963:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
1964:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
1965:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
1966:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1967:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* ========== Check Analog watchdog 1 flag ========== */
1968:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
1969:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
1970:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Set ADC state */
1971:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
1972:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1973:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Level out of window 1 callback */
1974:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1975:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     hadc->LevelOutOfWindowCallback(hadc);
1976:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #else
ARM GAS  /tmp/ccN8TuGv.s 			page 135


1977:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     HAL_ADC_LevelOutOfWindowCallback(hadc);
1978:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1979:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1980:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Clear ADC analog watchdog flag */
1981:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
1982:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
1983:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1984:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* ========== Check analog watchdog 2 flag ========== */
1985:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
1986:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
1987:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Set ADC state */
1988:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
1989:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1990:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Level out of window 2 callback */
1991:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1992:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     hadc->LevelOutOfWindow2Callback(hadc);
1993:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #else
1994:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
1995:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1996:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
1997:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Clear ADC analog watchdog flag */
1998:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
1999:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
2000:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2001:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* ========== Check analog watchdog 3 flag ========== */
2002:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
2003:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
2004:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Set ADC state */
2005:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
2006:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2007:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Level out of window 3 callback */
2008:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2009:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     hadc->LevelOutOfWindow3Callback(hadc);
2010:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #else
2011:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
2012:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2013:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2014:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Clear ADC analog watchdog flag */
2015:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
2016:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
2017:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2018:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* ========== Check Overrun flag ========== */
2019:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
2020:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
2021:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* If overrun is set to overwrite previous data (default setting),        */
2022:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* overrun event is not considered as an error.                           */
2023:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* (cf ref manual "Managing conversions without using the DMA and without */
2024:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* overrun ")                                                             */
2025:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Exception for usage with DMA overrun event always considered as an     */
2026:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* error.                                                                 */
2027:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
2028:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
2029:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       overrun_error = 1UL;
2030:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
2031:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     else
2032:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
2033:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Check DMA configuration */
ARM GAS  /tmp/ccN8TuGv.s 			page 136


2034:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
2035:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
2036:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         overrun_error = 1UL;
2037:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
2038:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
2039:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2040:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     if (overrun_error == 1UL)
2041:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
2042:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Change ADC state to error state */
2043:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
2044:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2045:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Set ADC error code to overrun */
2046:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
2047:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2048:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Error callback */
2049:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Note: In case of overrun, ADC conversion data is preserved until     */
2050:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /*       flag OVR is reset.                                             */
2051:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /*       Therefore, old ADC conversion data can be retrieved in         */
2052:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /*       function "HAL_ADC_ErrorCallback()".                            */
2053:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2054:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       hadc->ErrorCallback(hadc);
2055:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #else
2056:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       HAL_ADC_ErrorCallback(hadc);
2057:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2058:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
2059:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2060:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Clear ADC overrun flag */
2061:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
2062:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
2063:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2064:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* ========== Check channel configuration ready flag ========== */
2065:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
2066:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
2067:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Channel configuration ready callback */
2068:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     HAL_ADCEx_ChannelConfigReadyCallback(hadc);
2069:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2070:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Clear ADC analog watchdog flag */
2071:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
2072:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
2073:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
2074:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2075:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /**
2076:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @brief  Conversion complete callback in non-blocking mode.
2077:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @param hadc ADC handle
2078:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @retval None
2079:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
2080:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** __weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
2081:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** {
 1076              		.loc 1 2081 1 is_stmt 1 view -0
 1077              		.cfi_startproc
 1078              		@ args = 0, pretend = 0, frame = 0
 1079              		@ frame_needed = 0, uses_anonymous_args = 0
 1080              		@ link register save eliminated.
2082:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
2083:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   UNUSED(hadc);
 1081              		.loc 1 2083 3 view .LVU352
2084:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
ARM GAS  /tmp/ccN8TuGv.s 			page 137


2085:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
2086:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****             function HAL_ADC_ConvCpltCallback must be implemented in the user file.
2087:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****    */
2088:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
 1082              		.loc 1 2088 1 is_stmt 0 view .LVU353
 1083 0000 7047     		bx	lr
 1084              		.cfi_endproc
 1085              	.LFE1107:
 1087              		.section	.text.HAL_ADC_ConvHalfCpltCallback,"ax",%progbits
 1088              		.align	1
 1089              		.weak	HAL_ADC_ConvHalfCpltCallback
 1090              		.syntax unified
 1091              		.thumb
 1092              		.thumb_func
 1093              		.fpu softvfp
 1095              	HAL_ADC_ConvHalfCpltCallback:
 1096              	.LVL72:
 1097              	.LFB1108:
2089:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2090:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /**
2091:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @brief  Conversion DMA half-transfer callback in non-blocking mode.
2092:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @param hadc ADC handle
2093:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @retval None
2094:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
2095:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** __weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
2096:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** {
 1098              		.loc 1 2096 1 is_stmt 1 view -0
 1099              		.cfi_startproc
 1100              		@ args = 0, pretend = 0, frame = 0
 1101              		@ frame_needed = 0, uses_anonymous_args = 0
 1102              		@ link register save eliminated.
2097:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
2098:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   UNUSED(hadc);
 1103              		.loc 1 2098 3 view .LVU355
2099:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2100:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
2101:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****             function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
2102:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
2103:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
 1104              		.loc 1 2103 1 is_stmt 0 view .LVU356
 1105 0000 7047     		bx	lr
 1106              		.cfi_endproc
 1107              	.LFE1108:
 1109              		.section	.text.ADC_DMAHalfConvCplt,"ax",%progbits
 1110              		.align	1
 1111              		.syntax unified
 1112              		.thumb
 1113              		.thumb_func
 1114              		.fpu softvfp
 1116              	ADC_DMAHalfConvCplt:
 1117              	.LVL73:
 1118              	.LFB1119:
2104:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2105:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /**
2106:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @brief  Analog watchdog 1 callback in non-blocking mode.
2107:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @param hadc ADC handle
2108:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @retval None
ARM GAS  /tmp/ccN8TuGv.s 			page 138


2109:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
2110:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** __weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
2111:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** {
2112:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
2113:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   UNUSED(hadc);
2114:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2115:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
2116:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****             function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
2117:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
2118:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
2119:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2120:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /**
2121:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @brief  ADC error callback in non-blocking mode
2122:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         (ADC conversion with interruption or transfer by DMA).
2123:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @note   In case of error due to overrun when using ADC with DMA transfer
2124:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         (HAL ADC handle parameter "ErrorCode" to state "HAL_ADC_ERROR_OVR"):
2125:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         - Reinitialize the DMA using function "HAL_ADC_Stop_DMA()".
2126:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         - If needed, restart a new ADC conversion using function
2127:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *           "HAL_ADC_Start_DMA()"
2128:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *           (this function is also clearing overrun flag)
2129:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @param hadc ADC handle
2130:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @retval None
2131:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
2132:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** __weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
2133:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** {
2134:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
2135:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   UNUSED(hadc);
2136:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2137:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
2138:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****             function HAL_ADC_ErrorCallback must be implemented in the user file.
2139:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
2140:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
2141:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2142:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /**
2143:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @}
2144:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
2145:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2146:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group3 Peripheral Control functions
2147:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @brief    Peripheral Control functions
2148:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *
2149:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** @verbatim
2150:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****  ===============================================================================
2151:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****              ##### Peripheral Control functions #####
2152:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****  ===============================================================================
2153:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     [..]  This section provides functions allowing to:
2154:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       (+) Configure channels on regular group
2155:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       (+) Configure the analog watchdog
2156:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2157:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** @endverbatim
2158:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @{
2159:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
2160:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2161:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /**
2162:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @brief  Configure a channel to be assigned to ADC group regular.
2163:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @note   In case of usage of internal measurement channels:
2164:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         Vbat/VrefInt/TempSensor.
2165:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         These internal paths can be disabled using function
ARM GAS  /tmp/ccN8TuGv.s 			page 139


2166:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         HAL_ADC_DeInit().
2167:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
2168:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         This function initializes channel into ADC group regular,
2169:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         following calls to this function can be used to reconfigure
2170:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         some parameters of structure "ADC_ChannelConfTypeDef" on the fly,
2171:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         without resetting the ADC.
2172:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state:
2173:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         Refer to comments of structure "ADC_ChannelConfTypeDef".
2174:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @param hadc ADC handle
2175:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @param pConfig Structure of ADC channel assigned to ADC group regular.
2176:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @retval HAL status
2177:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
2178:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
2179:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** {
2180:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
2181:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tmp_config_internal_channel;
2182:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0UL;
2183:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2184:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Check the parameters */
2185:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2186:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_CHANNEL(pConfig->Channel));
2187:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));
2188:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2189:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
2190:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
2191:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
2192:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     assert_param(IS_ADC_REGULAR_RANK_SEQ_FIXED(pConfig->Rank));
2193:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
2194:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   else
2195:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
2196:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
2197:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2198:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
2199:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
2200:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2201:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   __HAL_LOCK(hadc);
2202:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2203:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Parameters update conditioned to ADC state:                              */
2204:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
2205:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* conversion on going on regular group:                                    */
2206:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /*  - Channel number                                                        */
2207:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /*  - Channel sampling time                                                 */
2208:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
2209:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
2210:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
2211:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Configure channel: depending on rank setting, add it or remove it from */
2212:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* ADC sequencer.                                                         */
2213:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* If sequencer set to not fully configurable with channel rank set to    */
2214:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* none, remove the channel from the sequencer.                           */
2215:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Otherwise (sequencer set to fully configurable or to to not fully      */
2216:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* configurable with channel rank to be set), configure the selected      */
2217:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* channel.                                                               */
2218:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     if (pConfig->Rank != ADC_RANK_NONE)
2219:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
2220:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Regular sequence configuration */
2221:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Note: ADC channel configuration requires few ADC clock cycles        */
2222:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /*       to be ready. Processing of ADC settings in this function       */
ARM GAS  /tmp/ccN8TuGv.s 			page 140


2223:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /*       induce that a specific wait time is not necessary.             */
2224:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /*       For more details on ADC channel configuration ready,           */
2225:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
2226:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
2227:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
2228:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
2229:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* Sequencer set to not fully configurable:                           */
2230:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* Set the channel by enabling the corresponding bitfield.            */
2231:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
2232:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
2233:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       else
2234:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
2235:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* Sequencer set to fully configurable:                               */
2236:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* Set the channel by entering it into the selected rank.             */
2237:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2238:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* Memorize the channel set into variable in HAL ADC handle */
2239:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
2240:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    ADC_CHSELR_SQ1 << (pConfig->Rank & 0x1FUL),
2241:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) << (pConfig->Rank & 0x1FUL));
2242:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2243:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* If the selected rank is below ADC group regular sequencer length,  */
2244:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* apply the configuration in ADC register.                           */
2245:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* Note: Otherwise, configuration is not applied.                     */
2246:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /*       To apply it, parameter'NbrOfConversion' must be increased.   */
2247:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
2248:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
2249:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
2250:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
2251:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
2252:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2253:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Set sampling time of the selected ADC channel */
2254:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
2255:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2256:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
2257:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* internal measurement paths enable: If internal channel selected,     */
2258:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* enable dedicated internal buffers and path.                          */
2259:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Note: these internal measurement paths can be disabled using         */
2260:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
2261:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /*       channel configuration parameter "Rank".                        */
2262:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
2263:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
2264:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc-
2265:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2266:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* If the requested internal measurement path has already been enabled,   */
2267:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* bypass the configuration processing.                                   */
2268:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
2269:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****             ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
2270:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
2271:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
2272:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                                          LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_chan
2273:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2274:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           /* Delay for temperature sensor stabilization time */
2275:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           /* Wait loop initialization and execution */
2276:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           /* Note: Variable divided by 2 to compensate partially              */
2277:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           /*       CPU processing cycles, scaling in us split to not          */
2278:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           /*       exceed 32 bits register capacity and handle low frequency. */
2279:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000
ARM GAS  /tmp/ccN8TuGv.s 			page 141


2280:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           while (wait_loop_index != 0UL)
2281:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           {
2282:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****             wait_loop_index--;
2283:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           }
2284:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
2285:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_P
2286:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
2287:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
2288:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                                          LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
2289:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
2290:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
2291:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                  ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
2292:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
2293:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
2294:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                                          LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel
2295:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
2296:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         else
2297:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
2298:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           /* nothing to do */
2299:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
2300:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
2301:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
2302:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     else
2303:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
2304:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Regular sequencer configuration */
2305:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Note: Case of sequencer set to fully configurable:                   */
2306:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /*       Sequencer rank cannot be disabled, only affected to            */
2307:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /*       another channel.                                               */
2308:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /*       To remove a rank, use parameter 'NbrOfConversion".             */
2309:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
2310:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
2311:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
2312:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* Sequencer set to not fully configurable:                           */
2313:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* Reset the channel by disabling the corresponding bitfield.         */
2314:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
2315:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
2316:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2317:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
2318:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* If internal channel selected, enable dedicated internal buffers and    */
2319:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* paths.                                                                 */
2320:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
2321:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
2322:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc-
2323:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2324:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
2325:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
2326:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
2327:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                                          ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_cha
2328:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
2329:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         else if (pConfig->Channel == ADC_CHANNEL_VBAT)
2330:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
2331:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
2332:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                                          ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
2333:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
2334:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
2335:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
2336:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
ARM GAS  /tmp/ccN8TuGv.s 			page 142


2337:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                                          ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channe
2338:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
2339:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         else
2340:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
2341:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           /* nothing to do */
2342:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
2343:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
2344:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
2345:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
2346:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2347:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* If a conversion is on going on regular group, no update on regular       */
2348:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* channel could be done on neither of the channel configuration structure  */
2349:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* parameters.                                                              */
2350:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   else
2351:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
2352:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Update ADC state machine to error */
2353:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
2354:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2355:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
2356:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
2357:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2358:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   __HAL_UNLOCK(hadc);
2359:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2360:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   return tmp_hal_status;
2361:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
2362:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2363:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /**
2364:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @brief  Configure the analog watchdog.
2365:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
2366:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         This function initializes the selected analog watchdog, successive
2367:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         calls to this function can be used to reconfigure some parameters
2368:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         of structure "ADC_AnalogWDGConfTypeDef" on the fly, without resetting
2369:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         the ADC.
2370:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
2371:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         For parameters constraints, see comments of structure
2372:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         "ADC_AnalogWDGConfTypeDef".
2373:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @note   On this STM32 series, analog watchdog thresholds can be modified
2374:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         while ADC conversion is on going.
2375:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         In this case, some constraints must be taken into account:
2376:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         the programmed threshold values are effective from the next
2377:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         ADC EOC (end of unitary conversion).
2378:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         Considering that registers write delay may happen due to
2379:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         bus activity, this might cause an uncertainty on the
2380:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         effective timing of the new programmed threshold values.
2381:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @param hadc ADC handle
2382:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @param pAnalogWDGConfig Structure of ADC analog watchdog configuration
2383:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @retval HAL status
2384:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
2385:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *pAnalo
2386:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** {
2387:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
2388:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tmp_awd_high_threshold_shifted;
2389:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tmp_awd_low_threshold_shifted;
2390:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t backup_setting_adc_enable_state = 0UL;
2391:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2392:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Check the parameters */
2393:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
ARM GAS  /tmp/ccN8TuGv.s 			page 143


2394:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(pAnalogWDGConfig->WatchdogNumber));
2395:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(pAnalogWDGConfig->WatchdogMode));
2396:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(pAnalogWDGConfig->ITMode));
2397:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2398:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   if (pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)
2399:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
2400:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     assert_param(IS_ADC_CHANNEL(pAnalogWDGConfig->Channel));
2401:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
2402:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2403:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Verify thresholds range */
2404:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   if (hadc->Init.OversamplingMode == ENABLE)
2405:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
2406:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Case of oversampling enabled: depending on ratio and shift configuration,
2407:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****        analog watchdog thresholds can be higher than ADC resolution.
2408:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****        Verify if thresholds are within maximum thresholds range. */
2409:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     assert_param(IS_ADC_RANGE(ADC_RESOLUTION_12B, pAnalogWDGConfig->HighThreshold));
2410:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     assert_param(IS_ADC_RANGE(ADC_RESOLUTION_12B, pAnalogWDGConfig->LowThreshold));
2411:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
2412:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   else
2413:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
2414:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Verify if thresholds are within the selected ADC resolution */
2415:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->HighThreshold));
2416:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->LowThreshold));
2417:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
2418:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2419:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   __HAL_LOCK(hadc);
2420:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2421:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Parameters update conditioned to ADC state:                              */
2422:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
2423:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* conversion on going on ADC group regular:                                */
2424:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /*  - Analog watchdog channels                                              */
2425:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
2426:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
2427:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Analog watchdog configuration */
2428:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
2429:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
2430:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Constraint of ADC on this STM32 series: ADC must be disable
2431:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****          to modify bitfields of register ADC_CFGR1 */
2432:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
2433:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
2434:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         backup_setting_adc_enable_state = 1UL;
2435:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         tmp_hal_status = ADC_Disable(hadc);
2436:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
2437:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2438:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Configuration of analog watchdog:                                    */
2439:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /*  - Set the analog watchdog enable mode: one or overall group of      */
2440:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /*    channels.                                                         */
2441:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       switch (pAnalogWDGConfig->WatchdogMode)
2442:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
2443:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_SINGLE_REG:
2444:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1,
2445:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                                           __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel
2446:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           break;
2447:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2448:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_ALL_REG:
2449:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG)
2450:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           break;
ARM GAS  /tmp/ccN8TuGv.s 			page 144


2451:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2452:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         default: /* ADC_ANALOGWATCHDOG_NONE */
2453:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
2454:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           break;
2455:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
2456:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2457:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       if (backup_setting_adc_enable_state == 1UL)
2458:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
2459:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         if (tmp_hal_status == HAL_OK)
2460:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
2461:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           tmp_hal_status = ADC_Enable(hadc);
2462:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
2463:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
2464:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2465:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Update state, clear previous result related to AWD1 */
2466:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
2467:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2468:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Clear flag ADC analog watchdog */
2469:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
2470:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
2471:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* (in case left enabled by previous ADC operations).                 */
2472:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       LL_ADC_ClearFlag_AWD1(hadc->Instance);
2473:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2474:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Configure ADC analog watchdog interrupt */
2475:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       if (pAnalogWDGConfig->ITMode == ENABLE)
2476:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
2477:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         LL_ADC_EnableIT_AWD1(hadc->Instance);
2478:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
2479:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       else
2480:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
2481:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         LL_ADC_DisableIT_AWD1(hadc->Instance);
2482:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
2483:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
2484:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
2485:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     else
2486:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
2487:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       switch (pAnalogWDGConfig->WatchdogMode)
2488:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
2489:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_SINGLE_REG:
2490:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           /* Update AWD by bitfield to keep the possibility to monitor        */
2491:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           /* several channels by successive calls of this function.           */
2492:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
2493:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           {
2494:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****             SET_BIT(hadc->Instance->AWD2CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig
2495:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           }
2496:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           else
2497:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           {
2498:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****             SET_BIT(hadc->Instance->AWD3CR, (1UL << __LL_ADC_CHANNEL_TO_DECIMAL_NB(pAnalogWDGConfig
2499:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           }
2500:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           break;
2501:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2502:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_ALL_REG:
2503:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, LL_ADC_
2504:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           break;
2505:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2506:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         default: /* ADC_ANALOGWATCHDOG_NONE */
2507:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, LL_ADC_
ARM GAS  /tmp/ccN8TuGv.s 			page 145


2508:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           break;
2509:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
2510:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2511:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
2512:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
2513:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* Update state, clear previous result related to AWD2 */
2514:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
2515:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2516:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* Clear flag ADC analog watchdog */
2517:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
2518:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
2519:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* (in case left enabled by previous ADC operations).                 */
2520:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         LL_ADC_ClearFlag_AWD2(hadc->Instance);
2521:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2522:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* Configure ADC analog watchdog interrupt */
2523:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         if (pAnalogWDGConfig->ITMode == ENABLE)
2524:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
2525:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           LL_ADC_EnableIT_AWD2(hadc->Instance);
2526:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
2527:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         else
2528:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
2529:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           LL_ADC_DisableIT_AWD2(hadc->Instance);
2530:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
2531:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
2532:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
2533:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       else
2534:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
2535:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* Update state, clear previous result related to AWD3 */
2536:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
2537:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2538:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* Clear flag ADC analog watchdog */
2539:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
2540:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
2541:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* (in case left enabled by previous ADC operations).                 */
2542:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         LL_ADC_ClearFlag_AWD3(hadc->Instance);
2543:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2544:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* Configure ADC analog watchdog interrupt */
2545:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         if (pAnalogWDGConfig->ITMode == ENABLE)
2546:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
2547:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           LL_ADC_EnableIT_AWD3(hadc->Instance);
2548:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
2549:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         else
2550:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
2551:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           LL_ADC_DisableIT_AWD3(hadc->Instance);
2552:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
2553:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
2554:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
2555:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2556:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
2557:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2558:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Analog watchdog thresholds configuration */
2559:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
2560:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
2561:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Shift the offset with respect to the selected ADC resolution:        */
2562:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
2563:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* are set to 0.                                                        */
2564:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     tmp_awd_high_threshold_shifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->Hig
ARM GAS  /tmp/ccN8TuGv.s 			page 146


2565:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     tmp_awd_low_threshold_shifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->Low
2566:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
2567:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Case of ADC_ANALOGWATCHDOG_2 and ADC_ANALOGWATCHDOG_3 */
2568:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   else
2569:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
2570:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* No need to shift the offset with respect to the selected ADC resolution: */
2571:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
2572:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* are set to 0.                                                        */
2573:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     tmp_awd_high_threshold_shifted = pAnalogWDGConfig->HighThreshold;
2574:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     tmp_awd_low_threshold_shifted  = pAnalogWDGConfig->LowThreshold;
2575:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
2576:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2577:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Set ADC analog watchdog thresholds value of both thresholds high and low */
2578:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, tmp_awd_high_th
2579:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                                   tmp_awd_low_threshold_shifted);
2580:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2581:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   __HAL_UNLOCK(hadc);
2582:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2583:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   return tmp_hal_status;
2584:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
2585:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2586:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2587:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /**
2588:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @}
2589:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
2590:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2591:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group4 Peripheral State functions
2592:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *  @brief    ADC Peripheral State functions
2593:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *
2594:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** @verbatim
2595:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****  ===============================================================================
2596:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****             ##### Peripheral state and errors functions #####
2597:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****  ===============================================================================
2598:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     [..]
2599:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     This subsection provides functions to get in run-time the status of the
2600:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     peripheral.
2601:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       (+) Check the ADC state
2602:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       (+) Check the ADC error code
2603:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2604:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** @endverbatim
2605:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @{
2606:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
2607:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2608:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /**
2609:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @brief  Return the ADC handle state.
2610:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @note   ADC state machine is managed by bitfields, ADC status must be
2611:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         compared with states bits.
2612:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         For example:
2613:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_REG_BUSY) != 0UL) "
2614:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
2615:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @param hadc ADC handle
2616:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @retval ADC handle state (bitfield on 32 bits)
2617:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
2618:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
2619:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** {
2620:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Check the parameters */
2621:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
ARM GAS  /tmp/ccN8TuGv.s 			page 147


2622:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2623:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Return ADC handle state */
2624:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   return hadc->State;
2625:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
2626:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2627:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /**
2628:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @brief  Return the ADC error code.
2629:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @param hadc ADC handle
2630:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @retval ADC error code (bitfield on 32 bits)
2631:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
2632:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
2633:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** {
2634:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Check the parameters */
2635:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2636:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2637:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   return hadc->ErrorCode;
2638:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
2639:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2640:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /**
2641:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @}
2642:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
2643:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2644:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /**
2645:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @}
2646:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
2647:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2648:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
2649:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @{
2650:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
2651:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2652:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /**
2653:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @brief  Stop ADC conversion.
2654:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC conversions must be
2655:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         stopped to disable the ADC.
2656:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @param  hadc ADC handle
2657:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @retval HAL status.
2658:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
2659:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
2660:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** {
2661:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tickstart;
2662:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2663:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Check the parameters */
2664:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2665:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2666:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Verification if ADC is not already stopped on regular group to bypass    */
2667:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* this function if not needed.                                             */
2668:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
2669:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
2670:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Stop potential conversion on going on regular group */
2671:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
2672:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
2673:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
2674:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Stop ADC group regular conversion */
2675:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       LL_ADC_REG_StopConversion(hadc->Instance);
2676:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
2677:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2678:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Wait for conversion effectively stopped */
ARM GAS  /tmp/ccN8TuGv.s 			page 148


2679:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Get tick count */
2680:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     tickstart = HAL_GetTick();
2681:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2682:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
2683:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
2684:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
2685:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
2686:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* New check to avoid false timeout detection in case of preemption */
2687:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
2688:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
2689:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           /* Update ADC state machine to error */
2690:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2691:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2692:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           /* Set ADC error code to ADC peripheral internal error */
2693:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2694:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2695:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           return HAL_ERROR;
2696:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
2697:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
2698:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
2699:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2700:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
2701:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2702:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Return HAL status */
2703:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   return HAL_OK;
2704:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
2705:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2706:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /**
2707:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @brief  Enable the selected ADC.
2708:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC must be disabled
2709:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
2710:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @param hadc ADC handle
2711:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @retval HAL status.
2712:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
2713:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
2714:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** {
2715:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tickstart;
2716:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0UL;
2717:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2718:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
2719:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* enabling phase not yet completed: flag ADC ready not yet set).           */
2720:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
2721:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* causes: ADC clock not running, ...).                                     */
2722:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
2723:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
2724:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Check if conditions to enable the ADC are fulfilled */
2725:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR
2726:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
2727:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Update ADC state machine to error */
2728:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2729:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2730:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Set ADC error code to ADC peripheral internal error */
2731:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2732:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2733:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       return HAL_ERROR;
2734:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
2735:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
ARM GAS  /tmp/ccN8TuGv.s 			page 149


2736:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Enable the ADC peripheral */
2737:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     LL_ADC_Enable(hadc->Instance);
2738:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2739:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INT
2740:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
2741:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Delay for temperature sensor buffer stabilization time */
2742:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Wait loop initialization and execution */
2743:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Note: Variable divided by 2 to compensate partially              */
2744:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /*       CPU processing cycles, scaling in us split to not          */
2745:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /*       exceed 32 bits register capacity and handle low frequency. */
2746:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100
2747:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       while (wait_loop_index != 0UL)
2748:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
2749:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         wait_loop_index--;
2750:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
2751:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
2752:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2753:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
2754:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* performed automatically by hardware and flag ADC ready is not set.     */
2755:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
2756:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
2757:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Wait for ADC effectively enabled */
2758:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       tickstart = HAL_GetTick();
2759:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2760:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
2761:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
2762:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /*  If ADEN bit is set less than 4 ADC clock cycles after the ADCAL bit
2763:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****             has been cleared (after a calibration), ADEN bit is reset by the
2764:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****             calibration logic.
2765:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****             The workaround is to continue setting ADEN until ADRDY is becomes 1.
2766:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****             Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
2767:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****             4 ADC clock cycle duration */
2768:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* Note: Test of ADC enabled required due to hardware constraint to     */
2769:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /*       not enable ADC if already enabled.                             */
2770:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
2771:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
2772:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           LL_ADC_Enable(hadc->Instance);
2773:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
2774:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2775:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
2776:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
2777:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           /* New check to avoid false timeout detection in case of preemption */
2778:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
2779:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           {
2780:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****             /* Update ADC state machine to error */
2781:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****             SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2782:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2783:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****             /* Set ADC error code to ADC peripheral internal error */
2784:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****             SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2785:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2786:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****             return HAL_ERROR;
2787:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           }
2788:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
2789:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
2790:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
2791:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
2792:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
ARM GAS  /tmp/ccN8TuGv.s 			page 150


2793:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Return HAL status */
2794:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   return HAL_OK;
2795:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
2796:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2797:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /**
2798:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @brief  Disable the selected ADC.
2799:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC conversions must be
2800:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   *         stopped.
2801:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @param hadc ADC handle
2802:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @retval HAL status.
2803:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
2804:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
2805:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** {
2806:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tickstart;
2807:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
2808:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2809:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Verification if ADC is not already disabled:                             */
2810:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
2811:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /*       disabled.                                                          */
2812:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
2813:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       && (tmp_adc_is_disable_on_going == 0UL)
2814:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      )
2815:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
2816:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Check if conditions to disable the ADC are fulfilled */
2817:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
2818:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
2819:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Disable the ADC peripheral */
2820:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       LL_ADC_Disable(hadc->Instance);
2821:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
2822:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
2823:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     else
2824:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
2825:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Update ADC state machine to error */
2826:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2827:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2828:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Set ADC error code to ADC peripheral internal error */
2829:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2830:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2831:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       return HAL_ERROR;
2832:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
2833:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2834:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Wait for ADC effectively disabled */
2835:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Get tick count */
2836:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     tickstart = HAL_GetTick();
2837:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2838:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
2839:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
2840:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
2841:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
2842:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* New check to avoid false timeout detection in case of preemption */
2843:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
2844:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
2845:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           /* Update ADC state machine to error */
2846:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2847:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2848:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           /* Set ADC error code to ADC peripheral internal error */
2849:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
ARM GAS  /tmp/ccN8TuGv.s 			page 151


2850:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2851:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           return HAL_ERROR;
2852:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
2853:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
2854:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
2855:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
2856:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2857:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Return HAL status */
2858:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   return HAL_OK;
2859:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
2860:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2861:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /**
2862:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @brief  DMA transfer complete callback.
2863:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @param hdma pointer to DMA handle.
2864:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @retval None
2865:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
2866:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
2867:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** {
2868:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2869:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
2870:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2871:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Update state machine on conversion status if not in error state */
2872:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
2873:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
2874:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Set ADC state */
2875:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
2876:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2877:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular     */
2878:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going         */
2879:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* to disable interruption.                                               */
2880:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
2881:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         && (hadc->Init.ContinuousConvMode == DISABLE)
2882:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****        )
2883:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
2884:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* If End of Sequence is reached, disable interrupts */
2885:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
2886:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
2887:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
2888:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* ADSTART==0 (no conversion on going)                                */
2889:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
2890:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
2891:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           /* Disable ADC end of single conversion interrupt on group regular */
2892:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           /* Note: Overrun interrupt was enabled with EOC interrupt in        */
2893:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           /* HAL_Start_IT(), but is not disabled here because can be used     */
2894:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           /* by overrun IRQ process below.                                    */
2895:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
2896:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2897:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           /* Set ADC state */
2898:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           ADC_STATE_CLR_SET(hadc->State,
2899:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                             HAL_ADC_STATE_REG_BUSY,
2900:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                             HAL_ADC_STATE_READY);
2901:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
2902:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         else
2903:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
2904:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           /* Change ADC state to error state */
2905:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
2906:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
ARM GAS  /tmp/ccN8TuGv.s 			page 152


2907:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           /* Set ADC error code to ADC peripheral internal error */
2908:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2909:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
2910:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
2911:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
2912:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2913:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     /* Conversion complete callback */
2914:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2915:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     hadc->ConvCpltCallback(hadc);
2916:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #else
2917:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc);
2918:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2919:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
2920:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   else /* DMA and-or internal error occurred */
2921:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
2922:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
2923:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
2924:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Call HAL ADC Error Callback function */
2925:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2926:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       hadc->ErrorCallback(hadc);
2927:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #else
2928:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       HAL_ADC_ErrorCallback(hadc);
2929:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2930:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
2931:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     else
2932:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
2933:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       /* Call ADC DMA error callback */
2934:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       hadc->DMA_Handle->XferErrorCallback(hdma);
2935:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
2936:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
2937:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
2938:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2939:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /**
2940:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @brief  DMA half transfer complete callback.
2941:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @param hdma pointer to DMA handle.
2942:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @retval None
2943:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
2944:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
2945:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** {
 1119              		.loc 1 2945 1 is_stmt 1 view -0
 1120              		.cfi_startproc
 1121              		@ args = 0, pretend = 0, frame = 0
 1122              		@ frame_needed = 0, uses_anonymous_args = 0
 1123              		.loc 1 2945 1 is_stmt 0 view .LVU358
 1124 0000 08B5     		push	{r3, lr}
 1125              	.LCFI6:
 1126              		.cfi_def_cfa_offset 8
 1127              		.cfi_offset 3, -8
 1128              		.cfi_offset 14, -4
2946:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2947:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 1129              		.loc 1 2947 3 is_stmt 1 view .LVU359
 1130              	.LVL74:
2948:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2949:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Half conversion callback */
2950:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2951:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   hadc->ConvHalfCpltCallback(hadc);
ARM GAS  /tmp/ccN8TuGv.s 			page 153


2952:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #else
2953:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   HAL_ADC_ConvHalfCpltCallback(hadc);
 1131              		.loc 1 2953 3 view .LVU360
 1132 0002 806A     		ldr	r0, [r0, #40]
 1133              	.LVL75:
 1134              		.loc 1 2953 3 is_stmt 0 view .LVU361
 1135 0004 FFF7FEFF 		bl	HAL_ADC_ConvHalfCpltCallback
 1136              	.LVL76:
2954:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2955:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
 1137              		.loc 1 2955 1 view .LVU362
 1138 0008 08BD     		pop	{r3, pc}
 1139              		.cfi_endproc
 1140              	.LFE1119:
 1142              		.section	.text.HAL_ADC_LevelOutOfWindowCallback,"ax",%progbits
 1143              		.align	1
 1144              		.weak	HAL_ADC_LevelOutOfWindowCallback
 1145              		.syntax unified
 1146              		.thumb
 1147              		.thumb_func
 1148              		.fpu softvfp
 1150              	HAL_ADC_LevelOutOfWindowCallback:
 1151              	.LVL77:
 1152              	.LFB1109:
2111:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 1153              		.loc 1 2111 1 is_stmt 1 view -0
 1154              		.cfi_startproc
 1155              		@ args = 0, pretend = 0, frame = 0
 1156              		@ frame_needed = 0, uses_anonymous_args = 0
 1157              		@ link register save eliminated.
2113:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 1158              		.loc 1 2113 3 view .LVU364
2118:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 1159              		.loc 1 2118 1 is_stmt 0 view .LVU365
 1160 0000 7047     		bx	lr
 1161              		.cfi_endproc
 1162              	.LFE1109:
 1164              		.section	.text.HAL_ADC_ErrorCallback,"ax",%progbits
 1165              		.align	1
 1166              		.weak	HAL_ADC_ErrorCallback
 1167              		.syntax unified
 1168              		.thumb
 1169              		.thumb_func
 1170              		.fpu softvfp
 1172              	HAL_ADC_ErrorCallback:
 1173              	.LVL78:
 1174              	.LFB1110:
2133:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 1175              		.loc 1 2133 1 is_stmt 1 view -0
 1176              		.cfi_startproc
 1177              		@ args = 0, pretend = 0, frame = 0
 1178              		@ frame_needed = 0, uses_anonymous_args = 0
 1179              		@ link register save eliminated.
2135:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 1180              		.loc 1 2135 3 view .LVU367
2140:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 1181              		.loc 1 2140 1 is_stmt 0 view .LVU368
ARM GAS  /tmp/ccN8TuGv.s 			page 154


 1182 0000 7047     		bx	lr
 1183              		.cfi_endproc
 1184              	.LFE1110:
 1186              		.section	.text.ADC_DMAError,"ax",%progbits
 1187              		.align	1
 1188              		.syntax unified
 1189              		.thumb
 1190              		.thumb_func
 1191              		.fpu softvfp
 1193              	ADC_DMAError:
 1194              	.LVL79:
 1195              	.LFB1120:
2956:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2957:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** /**
2958:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @brief  DMA error callback.
2959:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @param hdma pointer to DMA handle.
2960:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   * @retval None
2961:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   */
2962:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** static void ADC_DMAError(DMA_HandleTypeDef *hdma)
2963:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** {
 1196              		.loc 1 2963 1 is_stmt 1 view -0
 1197              		.cfi_startproc
 1198              		@ args = 0, pretend = 0, frame = 0
 1199              		@ frame_needed = 0, uses_anonymous_args = 0
 1200              		.loc 1 2963 1 is_stmt 0 view .LVU370
 1201 0000 08B5     		push	{r3, lr}
 1202              	.LCFI7:
 1203              		.cfi_def_cfa_offset 8
 1204              		.cfi_offset 3, -8
 1205              		.cfi_offset 14, -4
2964:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2965:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 1206              		.loc 1 2965 3 is_stmt 1 view .LVU371
 1207              		.loc 1 2965 22 is_stmt 0 view .LVU372
 1208 0002 806A     		ldr	r0, [r0, #40]
 1209              	.LVL80:
2966:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2967:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Set ADC state */
2968:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 1210              		.loc 1 2968 3 is_stmt 1 view .LVU373
 1211 0004 836D     		ldr	r3, [r0, #88]
 1212 0006 43F04003 		orr	r3, r3, #64
 1213 000a 8365     		str	r3, [r0, #88]
2969:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2970:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Set ADC error code to DMA error */
2971:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 1214              		.loc 1 2971 3 view .LVU374
 1215 000c C36D     		ldr	r3, [r0, #92]
 1216 000e 43F00403 		orr	r3, r3, #4
 1217 0012 C365     		str	r3, [r0, #92]
2972:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
2973:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Error callback */
2974:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2975:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   hadc->ErrorCallback(hadc);
2976:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #else
2977:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   HAL_ADC_ErrorCallback(hadc);
 1218              		.loc 1 2977 3 view .LVU375
ARM GAS  /tmp/ccN8TuGv.s 			page 155


 1219 0014 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 1220              	.LVL81:
2978:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2979:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
 1221              		.loc 1 2979 1 is_stmt 0 view .LVU376
 1222 0018 08BD     		pop	{r3, pc}
 1223              		.cfi_endproc
 1224              	.LFE1120:
 1226              		.section	.text.ADC_DMAConvCplt,"ax",%progbits
 1227              		.align	1
 1228              		.syntax unified
 1229              		.thumb
 1230              		.thumb_func
 1231              		.fpu softvfp
 1233              	ADC_DMAConvCplt:
 1234              	.LVL82:
 1235              	.LFB1118:
2867:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
 1236              		.loc 1 2867 1 is_stmt 1 view -0
 1237              		.cfi_startproc
 1238              		@ args = 0, pretend = 0, frame = 0
 1239              		@ frame_needed = 0, uses_anonymous_args = 0
2867:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
 1240              		.loc 1 2867 1 is_stmt 0 view .LVU378
 1241 0000 08B5     		push	{r3, lr}
 1242              	.LCFI8:
 1243              		.cfi_def_cfa_offset 8
 1244              		.cfi_offset 3, -8
 1245              		.cfi_offset 14, -4
 1246 0002 0346     		mov	r3, r0
2869:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 1247              		.loc 1 2869 3 is_stmt 1 view .LVU379
2869:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 1248              		.loc 1 2869 22 is_stmt 0 view .LVU380
 1249 0004 806A     		ldr	r0, [r0, #40]
 1250              	.LVL83:
2872:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 1251              		.loc 1 2872 3 is_stmt 1 view .LVU381
2872:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 1252              		.loc 1 2872 12 is_stmt 0 view .LVU382
 1253 0006 826D     		ldr	r2, [r0, #88]
2872:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 1254              		.loc 1 2872 6 view .LVU383
 1255 0008 12F0500F 		tst	r2, #80
 1256 000c 2AD1     		bne	.L77
2875:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 1257              		.loc 1 2875 5 is_stmt 1 view .LVU384
 1258 000e 836D     		ldr	r3, [r0, #88]
 1259              	.LVL84:
2875:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 1260              		.loc 1 2875 5 is_stmt 0 view .LVU385
 1261 0010 43F40073 		orr	r3, r3, #512
 1262 0014 8365     		str	r3, [r0, #88]
2880:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         && (hadc->Init.ContinuousConvMode == DISABLE)
 1263              		.loc 1 2880 5 is_stmt 1 view .LVU386
2880:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         && (hadc->Init.ContinuousConvMode == DISABLE)
 1264              		.loc 1 2880 10 is_stmt 0 view .LVU387
ARM GAS  /tmp/ccN8TuGv.s 			page 156


 1265 0016 0368     		ldr	r3, [r0]
 1266              	.LVL85:
 1267              	.LBB172:
 1268              	.LBI172:
2340:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 1269              		.loc 2 2340 26 is_stmt 1 view .LVU388
 1270              	.LBB173:
2342:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 1271              		.loc 2 2342 3 view .LVU389
2342:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 1272              		.loc 2 2342 12 is_stmt 0 view .LVU390
 1273 0018 DA68     		ldr	r2, [r3, #12]
2342:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 1274              		.loc 2 2342 106 view .LVU391
 1275 001a 12F4406F 		tst	r2, #3072
 1276 001e 15D1     		bne	.L78
 1277              	.LVL86:
2342:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 1278              		.loc 2 2342 106 view .LVU392
 1279              	.LBE173:
 1280              	.LBE172:
2881:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****        )
 1281              		.loc 1 2881 23 view .LVU393
 1282 0020 827E     		ldrb	r2, [r0, #26]	@ zero_extendqisi2
2881:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****        )
 1283              		.loc 1 2881 9 view .LVU394
 1284 0022 9AB9     		cbnz	r2, .L78
2885:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 1285              		.loc 1 2885 7 is_stmt 1 view .LVU395
2885:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 1286              		.loc 1 2885 11 is_stmt 0 view .LVU396
 1287 0024 1A68     		ldr	r2, [r3]
2885:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 1288              		.loc 1 2885 10 view .LVU397
 1289 0026 12F0080F 		tst	r2, #8
 1290 002a 0FD0     		beq	.L78
2889:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
 1291              		.loc 1 2889 9 is_stmt 1 view .LVU398
 1292              	.LVL87:
 1293              	.LBB174:
 1294              	.LBI174:
4366:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 1295              		.loc 2 4366 26 view .LVU399
 1296              	.LBB175:
 1297              		.loc 2 4368 3 view .LVU400
 1298              		.loc 2 4368 12 is_stmt 0 view .LVU401
 1299 002c 9A68     		ldr	r2, [r3, #8]
 1300              		.loc 2 4368 74 view .LVU402
 1301 002e 12F0040F 		tst	r2, #4
 1302 0032 0ED1     		bne	.L79
 1303              	.LVL88:
 1304              		.loc 2 4368 74 view .LVU403
 1305              	.LBE175:
 1306              	.LBE174:
2895:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 1307              		.loc 1 2895 11 is_stmt 1 view .LVU404
 1308 0034 5A68     		ldr	r2, [r3, #4]
ARM GAS  /tmp/ccN8TuGv.s 			page 157


 1309 0036 22F00C02 		bic	r2, r2, #12
 1310 003a 5A60     		str	r2, [r3, #4]
2898:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                             HAL_ADC_STATE_REG_BUSY,
 1311              		.loc 1 2898 11 view .LVU405
 1312 003c 836D     		ldr	r3, [r0, #88]
 1313 003e 23F48073 		bic	r3, r3, #256
 1314 0042 23F00103 		bic	r3, r3, #1
 1315 0046 43F00103 		orr	r3, r3, #1
 1316 004a 8365     		str	r3, [r0, #88]
 1317              	.L78:
2917:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1318              		.loc 1 2917 5 view .LVU406
 1319 004c FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 1320              	.LVL89:
 1321              	.L76:
2937:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 1322              		.loc 1 2937 1 is_stmt 0 view .LVU407
 1323 0050 08BD     		pop	{r3, pc}
 1324              	.LVL90:
 1325              	.L79:
2905:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 1326              		.loc 1 2905 11 is_stmt 1 view .LVU408
 1327 0052 836D     		ldr	r3, [r0, #88]
 1328 0054 43F02003 		orr	r3, r3, #32
 1329 0058 8365     		str	r3, [r0, #88]
2908:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
 1330              		.loc 1 2908 11 view .LVU409
 1331 005a C36D     		ldr	r3, [r0, #92]
 1332 005c 43F00103 		orr	r3, r3, #1
 1333 0060 C365     		str	r3, [r0, #92]
 1334 0062 F3E7     		b	.L78
 1335              	.LVL91:
 1336              	.L77:
2922:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 1337              		.loc 1 2922 5 view .LVU410
2922:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 1338              		.loc 1 2922 14 is_stmt 0 view .LVU411
 1339 0064 826D     		ldr	r2, [r0, #88]
2922:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 1340              		.loc 1 2922 8 view .LVU412
 1341 0066 12F0100F 		tst	r2, #16
 1342 006a 04D1     		bne	.L83
2934:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 1343              		.loc 1 2934 7 is_stmt 1 view .LVU413
2934:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 1344              		.loc 1 2934 11 is_stmt 0 view .LVU414
 1345 006c 026D     		ldr	r2, [r0, #80]
2934:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 1346              		.loc 1 2934 23 view .LVU415
 1347 006e 526B     		ldr	r2, [r2, #52]
2934:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 1348              		.loc 1 2934 7 view .LVU416
 1349 0070 1846     		mov	r0, r3
 1350              	.LVL92:
2934:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 1351              		.loc 1 2934 7 view .LVU417
 1352 0072 9047     		blx	r2
ARM GAS  /tmp/ccN8TuGv.s 			page 158


 1353              	.LVL93:
2937:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 1354              		.loc 1 2937 1 view .LVU418
 1355 0074 ECE7     		b	.L76
 1356              	.LVL94:
 1357              	.L83:
2928:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1358              		.loc 1 2928 7 is_stmt 1 view .LVU419
 1359 0076 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 1360              	.LVL95:
2928:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1361              		.loc 1 2928 7 is_stmt 0 view .LVU420
 1362 007a E9E7     		b	.L76
 1363              		.cfi_endproc
 1364              	.LFE1118:
 1366              		.section	.text.HAL_ADC_IRQHandler,"ax",%progbits
 1367              		.align	1
 1368              		.global	HAL_ADC_IRQHandler
 1369              		.syntax unified
 1370              		.thumb
 1371              		.thumb_func
 1372              		.fpu softvfp
 1374              	HAL_ADC_IRQHandler:
 1375              	.LVL96:
 1376              	.LFB1106:
1871:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error 
 1377              		.loc 1 1871 1 is_stmt 1 view -0
 1378              		.cfi_startproc
 1379              		@ args = 0, pretend = 0, frame = 0
 1380              		@ frame_needed = 0, uses_anonymous_args = 0
1871:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error 
 1381              		.loc 1 1871 1 is_stmt 0 view .LVU422
 1382 0000 70B5     		push	{r4, r5, r6, lr}
 1383              	.LCFI9:
 1384              		.cfi_def_cfa_offset 16
 1385              		.cfi_offset 4, -16
 1386              		.cfi_offset 5, -12
 1387              		.cfi_offset 6, -8
 1388              		.cfi_offset 14, -4
 1389 0002 0446     		mov	r4, r0
1872:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tmp_isr = hadc->Instance->ISR;
 1390              		.loc 1 1872 3 is_stmt 1 view .LVU423
 1391              	.LVL97:
1873:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tmp_ier = hadc->Instance->IER;
 1392              		.loc 1 1873 3 view .LVU424
1873:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tmp_ier = hadc->Instance->IER;
 1393              		.loc 1 1873 26 is_stmt 0 view .LVU425
 1394 0004 0368     		ldr	r3, [r0]
1873:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tmp_ier = hadc->Instance->IER;
 1395              		.loc 1 1873 12 view .LVU426
 1396 0006 1E68     		ldr	r6, [r3]
 1397              	.LVL98:
1874:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 1398              		.loc 1 1874 3 is_stmt 1 view .LVU427
1874:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 1399              		.loc 1 1874 12 is_stmt 0 view .LVU428
 1400 0008 5D68     		ldr	r5, [r3, #4]
ARM GAS  /tmp/ccN8TuGv.s 			page 159


 1401              	.LVL99:
1877:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 1402              		.loc 1 1877 3 is_stmt 1 view .LVU429
1878:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 1403              		.loc 1 1878 3 view .LVU430
1881:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 1404              		.loc 1 1881 3 view .LVU431
1881:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 1405              		.loc 1 1881 6 is_stmt 0 view .LVU432
 1406 000a 16F0020F 		tst	r6, #2
 1407 000e 10D0     		beq	.L85
1881:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 1408              		.loc 1 1881 54 discriminator 1 view .LVU433
 1409 0010 15F0020F 		tst	r5, #2
 1410 0014 0DD0     		beq	.L85
1884:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 1411              		.loc 1 1884 5 is_stmt 1 view .LVU434
1884:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 1412              		.loc 1 1884 14 is_stmt 0 view .LVU435
 1413 0016 836D     		ldr	r3, [r0, #88]
1884:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 1414              		.loc 1 1884 8 view .LVU436
 1415 0018 13F0100F 		tst	r3, #16
 1416 001c 03D1     		bne	.L86
1887:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 1417              		.loc 1 1887 7 is_stmt 1 view .LVU437
 1418 001e 836D     		ldr	r3, [r0, #88]
 1419 0020 43F40063 		orr	r3, r3, #2048
 1420 0024 8365     		str	r3, [r0, #88]
 1421              	.L86:
1894:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1422              		.loc 1 1894 5 view .LVU438
 1423 0026 2046     		mov	r0, r4
 1424              	.LVL100:
1894:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1425              		.loc 1 1894 5 is_stmt 0 view .LVU439
 1426 0028 FFF7FEFF 		bl	HAL_ADCEx_EndOfSamplingCallback
 1427              	.LVL101:
1898:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 1428              		.loc 1 1898 5 is_stmt 1 view .LVU440
 1429 002c 2368     		ldr	r3, [r4]
 1430 002e 0222     		movs	r2, #2
 1431 0030 1A60     		str	r2, [r3]
 1432              	.L85:
1902:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 1433              		.loc 1 1902 3 view .LVU441
1902:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 1434              		.loc 1 1902 6 is_stmt 0 view .LVU442
 1435 0032 16F0040F 		tst	r6, #4
 1436 0036 02D0     		beq	.L87
1902:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 1437              		.loc 1 1902 51 discriminator 1 view .LVU443
 1438 0038 15F0040F 		tst	r5, #4
 1439 003c 05D1     		bne	.L88
 1440              	.L87:
1902:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 1441              		.loc 1 1902 94 discriminator 3 view .LVU444
ARM GAS  /tmp/ccN8TuGv.s 			page 160


 1442 003e 16F0080F 		tst	r6, #8
 1443 0042 2BD0     		beq	.L89
1903:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 1444              		.loc 1 1903 51 view .LVU445
 1445 0044 15F0080F 		tst	r5, #8
 1446 0048 28D0     		beq	.L89
 1447              	.L88:
1906:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 1448              		.loc 1 1906 5 is_stmt 1 view .LVU446
1906:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 1449              		.loc 1 1906 14 is_stmt 0 view .LVU447
 1450 004a A36D     		ldr	r3, [r4, #88]
1906:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 1451              		.loc 1 1906 8 view .LVU448
 1452 004c 13F0100F 		tst	r3, #16
 1453 0050 03D1     		bne	.L90
1909:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 1454              		.loc 1 1909 7 is_stmt 1 view .LVU449
 1455 0052 A36D     		ldr	r3, [r4, #88]
 1456 0054 43F40073 		orr	r3, r3, #512
 1457 0058 A365     		str	r3, [r4, #88]
 1458              	.L90:
1915:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         && (hadc->Init.ContinuousConvMode == DISABLE)
 1459              		.loc 1 1915 5 view .LVU450
1915:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         && (hadc->Init.ContinuousConvMode == DISABLE)
 1460              		.loc 1 1915 10 is_stmt 0 view .LVU451
 1461 005a 2368     		ldr	r3, [r4]
 1462              	.LVL102:
 1463              	.LBB176:
 1464              	.LBI176:
2340:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 1465              		.loc 2 2340 26 is_stmt 1 view .LVU452
 1466              	.LBB177:
2342:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 1467              		.loc 2 2342 3 view .LVU453
2342:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 1468              		.loc 2 2342 12 is_stmt 0 view .LVU454
 1469 005c DA68     		ldr	r2, [r3, #12]
2342:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 1470              		.loc 2 2342 106 view .LVU455
 1471 005e 12F4406F 		tst	r2, #3072
 1472 0062 15D1     		bne	.L91
 1473              	.LVL103:
2342:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 1474              		.loc 2 2342 106 view .LVU456
 1475              	.LBE177:
 1476              	.LBE176:
1916:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****        )
 1477              		.loc 1 1916 23 view .LVU457
 1478 0064 A27E     		ldrb	r2, [r4, #26]	@ zero_extendqisi2
1916:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****        )
 1479              		.loc 1 1916 9 view .LVU458
 1480 0066 9AB9     		cbnz	r2, .L91
1920:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 1481              		.loc 1 1920 7 is_stmt 1 view .LVU459
1920:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 1482              		.loc 1 1920 11 is_stmt 0 view .LVU460
ARM GAS  /tmp/ccN8TuGv.s 			page 161


 1483 0068 1A68     		ldr	r2, [r3]
1920:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 1484              		.loc 1 1920 10 view .LVU461
 1485 006a 12F0080F 		tst	r2, #8
 1486 006e 0FD0     		beq	.L91
1924:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
 1487              		.loc 1 1924 9 is_stmt 1 view .LVU462
 1488              	.LVL104:
 1489              	.LBB178:
 1490              	.LBI178:
4366:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 1491              		.loc 2 4366 26 view .LVU463
 1492              	.LBB179:
 1493              		.loc 2 4368 3 view .LVU464
 1494              		.loc 2 4368 12 is_stmt 0 view .LVU465
 1495 0070 9A68     		ldr	r2, [r3, #8]
 1496              		.loc 2 4368 74 view .LVU466
 1497 0072 12F0040F 		tst	r2, #4
 1498 0076 45D1     		bne	.L92
 1499              	.LVL105:
 1500              		.loc 2 4368 74 view .LVU467
 1501              	.LBE179:
 1502              	.LBE178:
1930:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 1503              		.loc 1 1930 11 is_stmt 1 view .LVU468
 1504 0078 5A68     		ldr	r2, [r3, #4]
 1505 007a 22F00C02 		bic	r2, r2, #12
 1506 007e 5A60     		str	r2, [r3, #4]
1933:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                             HAL_ADC_STATE_REG_BUSY,
 1507              		.loc 1 1933 11 view .LVU469
 1508 0080 A36D     		ldr	r3, [r4, #88]
 1509 0082 23F48073 		bic	r3, r3, #256
 1510 0086 23F00103 		bic	r3, r3, #1
 1511 008a 43F00103 		orr	r3, r3, #1
 1512 008e A365     		str	r3, [r4, #88]
 1513              	.L91:
1956:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1514              		.loc 1 1956 5 view .LVU470
 1515 0090 2046     		mov	r0, r4
 1516 0092 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 1517              	.LVL106:
1964:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 1518              		.loc 1 1964 5 view .LVU471
 1519 0096 2368     		ldr	r3, [r4]
 1520 0098 0C22     		movs	r2, #12
 1521 009a 1A60     		str	r2, [r3]
 1522              	.L89:
1968:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 1523              		.loc 1 1968 3 view .LVU472
1968:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 1524              		.loc 1 1968 6 is_stmt 0 view .LVU473
 1525 009c 16F0800F 		tst	r6, #128
 1526 00a0 02D0     		beq	.L93
1968:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 1527              		.loc 1 1968 52 discriminator 1 view .LVU474
 1528 00a2 15F0800F 		tst	r5, #128
 1529 00a6 36D1     		bne	.L101
ARM GAS  /tmp/ccN8TuGv.s 			page 162


 1530              	.L93:
1985:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 1531              		.loc 1 1985 3 is_stmt 1 view .LVU475
1985:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 1532              		.loc 1 1985 6 is_stmt 0 view .LVU476
 1533 00a8 16F4807F 		tst	r6, #256
 1534 00ac 02D0     		beq	.L94
1985:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 1535              		.loc 1 1985 52 discriminator 1 view .LVU477
 1536 00ae 15F4807F 		tst	r5, #256
 1537 00b2 3BD1     		bne	.L102
 1538              	.L94:
2002:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 1539              		.loc 1 2002 3 is_stmt 1 view .LVU478
2002:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 1540              		.loc 1 2002 6 is_stmt 0 view .LVU479
 1541 00b4 16F4007F 		tst	r6, #512
 1542 00b8 02D0     		beq	.L95
2002:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 1543              		.loc 1 2002 52 discriminator 1 view .LVU480
 1544 00ba 15F4007F 		tst	r5, #512
 1545 00be 41D1     		bne	.L103
 1546              	.L95:
2019:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 1547              		.loc 1 2019 3 is_stmt 1 view .LVU481
2019:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 1548              		.loc 1 2019 6 is_stmt 0 view .LVU482
 1549 00c0 16F0100F 		tst	r6, #16
 1550 00c4 17D0     		beq	.L96
2019:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 1551              		.loc 1 2019 50 discriminator 1 view .LVU483
 1552 00c6 15F0100F 		tst	r5, #16
 1553 00ca 14D0     		beq	.L96
2027:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 1554              		.loc 1 2027 5 is_stmt 1 view .LVU484
2027:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 1555              		.loc 1 2027 19 is_stmt 0 view .LVU485
 1556 00cc 236B     		ldr	r3, [r4, #48]
2027:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 1557              		.loc 1 2027 8 view .LVU486
 1558 00ce 23B1     		cbz	r3, .L97
2034:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 1559              		.loc 1 2034 7 is_stmt 1 view .LVU487
2034:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 1560              		.loc 1 2034 11 is_stmt 0 view .LVU488
 1561 00d0 2368     		ldr	r3, [r4]
 1562              	.LVL107:
 1563              	.LBB180:
 1564              	.LBI180:
3320:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 1565              		.loc 2 3320 26 is_stmt 1 view .LVU489
 1566              	.LBB181:
3322:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 1567              		.loc 2 3322 3 view .LVU490
3322:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 1568              		.loc 2 3322 21 is_stmt 0 view .LVU491
 1569 00d2 DB68     		ldr	r3, [r3, #12]
ARM GAS  /tmp/ccN8TuGv.s 			page 163


 1570              	.LVL108:
3322:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 1571              		.loc 2 3322 21 view .LVU492
 1572              	.LBE181:
 1573              	.LBE180:
2034:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 1574              		.loc 1 2034 10 view .LVU493
 1575 00d4 13F0030F 		tst	r3, #3
 1576 00d8 0AD0     		beq	.L98
 1577              	.L97:
 1578              	.LVL109:
2043:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 1579              		.loc 1 2043 7 is_stmt 1 view .LVU494
 1580 00da A36D     		ldr	r3, [r4, #88]
 1581 00dc 43F48063 		orr	r3, r3, #1024
 1582 00e0 A365     		str	r3, [r4, #88]
2046:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 1583              		.loc 1 2046 7 view .LVU495
 1584 00e2 E36D     		ldr	r3, [r4, #92]
 1585 00e4 43F00203 		orr	r3, r3, #2
 1586 00e8 E365     		str	r3, [r4, #92]
2056:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1587              		.loc 1 2056 7 view .LVU496
 1588 00ea 2046     		mov	r0, r4
 1589 00ec FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 1590              	.LVL110:
 1591              	.L98:
2061:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 1592              		.loc 1 2061 5 view .LVU497
 1593 00f0 2368     		ldr	r3, [r4]
 1594 00f2 1022     		movs	r2, #16
 1595 00f4 1A60     		str	r2, [r3]
 1596              	.L96:
2065:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 1597              		.loc 1 2065 3 view .LVU498
2065:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 1598              		.loc 1 2065 6 is_stmt 0 view .LVU499
 1599 00f6 16F4005F 		tst	r6, #8192
 1600 00fa 02D0     		beq	.L84
2065:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 1601              		.loc 1 2065 54 discriminator 1 view .LVU500
 1602 00fc 15F4005F 		tst	r5, #8192
 1603 0100 2CD1     		bne	.L104
 1604              	.L84:
2073:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 1605              		.loc 1 2073 1 view .LVU501
 1606 0102 70BD     		pop	{r4, r5, r6, pc}
 1607              	.LVL111:
 1608              	.L92:
1940:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 1609              		.loc 1 1940 11 is_stmt 1 view .LVU502
 1610 0104 A36D     		ldr	r3, [r4, #88]
 1611 0106 43F02003 		orr	r3, r3, #32
 1612 010a A365     		str	r3, [r4, #88]
1943:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
 1613              		.loc 1 1943 11 view .LVU503
 1614 010c E36D     		ldr	r3, [r4, #92]
ARM GAS  /tmp/ccN8TuGv.s 			page 164


 1615 010e 43F00103 		orr	r3, r3, #1
 1616 0112 E365     		str	r3, [r4, #92]
 1617 0114 BCE7     		b	.L91
 1618              	.L101:
1971:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 1619              		.loc 1 1971 5 view .LVU504
 1620 0116 A36D     		ldr	r3, [r4, #88]
 1621 0118 43F48033 		orr	r3, r3, #65536
 1622 011c A365     		str	r3, [r4, #88]
1977:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1623              		.loc 1 1977 5 view .LVU505
 1624 011e 2046     		mov	r0, r4
 1625 0120 FFF7FEFF 		bl	HAL_ADC_LevelOutOfWindowCallback
 1626              	.LVL112:
1981:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 1627              		.loc 1 1981 5 view .LVU506
 1628 0124 2368     		ldr	r3, [r4]
 1629 0126 8022     		movs	r2, #128
 1630 0128 1A60     		str	r2, [r3]
 1631 012a BDE7     		b	.L93
 1632              	.L102:
1988:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 1633              		.loc 1 1988 5 view .LVU507
 1634 012c A36D     		ldr	r3, [r4, #88]
 1635 012e 43F40033 		orr	r3, r3, #131072
 1636 0132 A365     		str	r3, [r4, #88]
1994:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1637              		.loc 1 1994 5 view .LVU508
 1638 0134 2046     		mov	r0, r4
 1639 0136 FFF7FEFF 		bl	HAL_ADCEx_LevelOutOfWindow2Callback
 1640              	.LVL113:
1998:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 1641              		.loc 1 1998 5 view .LVU509
 1642 013a 2368     		ldr	r3, [r4]
 1643 013c 4FF48072 		mov	r2, #256
 1644 0140 1A60     		str	r2, [r3]
 1645 0142 B7E7     		b	.L94
 1646              	.L103:
2005:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 1647              		.loc 1 2005 5 view .LVU510
 1648 0144 A36D     		ldr	r3, [r4, #88]
 1649 0146 43F48023 		orr	r3, r3, #262144
 1650 014a A365     		str	r3, [r4, #88]
2011:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1651              		.loc 1 2011 5 view .LVU511
 1652 014c 2046     		mov	r0, r4
 1653 014e FFF7FEFF 		bl	HAL_ADCEx_LevelOutOfWindow3Callback
 1654              	.LVL114:
2015:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 1655              		.loc 1 2015 5 view .LVU512
 1656 0152 2368     		ldr	r3, [r4]
 1657 0154 4FF40072 		mov	r2, #512
 1658 0158 1A60     		str	r2, [r3]
 1659 015a B1E7     		b	.L95
 1660              	.LVL115:
 1661              	.L104:
2068:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
ARM GAS  /tmp/ccN8TuGv.s 			page 165


 1662              		.loc 1 2068 5 view .LVU513
 1663 015c 2046     		mov	r0, r4
 1664 015e FFF7FEFF 		bl	HAL_ADCEx_ChannelConfigReadyCallback
 1665              	.LVL116:
2071:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 1666              		.loc 1 2071 5 view .LVU514
 1667 0162 2368     		ldr	r3, [r4]
 1668 0164 4FF40052 		mov	r2, #8192
 1669 0168 1A60     		str	r2, [r3]
2073:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 1670              		.loc 1 2073 1 is_stmt 0 view .LVU515
 1671 016a CAE7     		b	.L84
 1672              		.cfi_endproc
 1673              	.LFE1106:
 1675              		.section	.text.HAL_ADC_ConfigChannel,"ax",%progbits
 1676              		.align	1
 1677              		.global	HAL_ADC_ConfigChannel
 1678              		.syntax unified
 1679              		.thumb
 1680              		.thumb_func
 1681              		.fpu softvfp
 1683              	HAL_ADC_ConfigChannel:
 1684              	.LVL117:
 1685              	.LFB1111:
2179:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1686              		.loc 1 2179 1 is_stmt 1 view -0
 1687              		.cfi_startproc
 1688              		@ args = 0, pretend = 0, frame = 8
 1689              		@ frame_needed = 0, uses_anonymous_args = 0
 1690              		@ link register save eliminated.
2179:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1691              		.loc 1 2179 1 is_stmt 0 view .LVU517
 1692 0000 70B4     		push	{r4, r5, r6}
 1693              	.LCFI10:
 1694              		.cfi_def_cfa_offset 12
 1695              		.cfi_offset 4, -12
 1696              		.cfi_offset 5, -8
 1697              		.cfi_offset 6, -4
 1698 0002 83B0     		sub	sp, sp, #12
 1699              	.LCFI11:
 1700              		.cfi_def_cfa_offset 24
2180:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tmp_config_internal_channel;
 1701              		.loc 1 2180 3 is_stmt 1 view .LVU518
 1702              	.LVL118:
2181:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0UL;
 1703              		.loc 1 2181 3 view .LVU519
2182:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 1704              		.loc 1 2182 3 view .LVU520
2182:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 1705              		.loc 1 2182 17 is_stmt 0 view .LVU521
 1706 0004 0022     		movs	r2, #0
 1707 0006 0192     		str	r2, [sp, #4]
2185:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_CHANNEL(pConfig->Channel));
 1708              		.loc 1 2185 3 is_stmt 1 view .LVU522
2186:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));
 1709              		.loc 1 2186 3 view .LVU523
2187:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
ARM GAS  /tmp/ccN8TuGv.s 			page 166


 1710              		.loc 1 2187 3 view .LVU524
2189:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 1711              		.loc 1 2189 3 view .LVU525
2189:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 1712              		.loc 1 2189 18 is_stmt 0 view .LVU526
 1713 0008 0469     		ldr	r4, [r0, #16]
2196:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 1714              		.loc 1 2196 5 is_stmt 1 view .LVU527
2198:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 1715              		.loc 1 2198 5 view .LVU528
2201:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 1716              		.loc 1 2201 3 view .LVU529
2201:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 1717              		.loc 1 2201 3 view .LVU530
 1718 000a 90F85420 		ldrb	r2, [r0, #84]	@ zero_extendqisi2
 1719 000e 012A     		cmp	r2, #1
 1720 0010 00F00581 		beq	.L124
 1721 0014 0346     		mov	r3, r0
2201:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 1722              		.loc 1 2201 3 discriminator 2 view .LVU531
 1723 0016 0122     		movs	r2, #1
 1724 0018 80F85420 		strb	r2, [r0, #84]
2201:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 1725              		.loc 1 2201 3 discriminator 2 view .LVU532
2209:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 1726              		.loc 1 2209 3 discriminator 2 view .LVU533
2209:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 1727              		.loc 1 2209 7 is_stmt 0 discriminator 2 view .LVU534
 1728 001c 0268     		ldr	r2, [r0]
 1729              	.LVL119:
 1730              	.LBB182:
 1731              	.LBI182:
4366:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 1732              		.loc 2 4366 26 is_stmt 1 discriminator 2 view .LVU535
 1733              	.LBB183:
 1734              		.loc 2 4368 3 discriminator 2 view .LVU536
 1735              		.loc 2 4368 12 is_stmt 0 discriminator 2 view .LVU537
 1736 001e 9068     		ldr	r0, [r2, #8]
 1737              	.LVL120:
 1738              		.loc 2 4368 74 discriminator 2 view .LVU538
 1739 0020 10F0040F 		tst	r0, #4
 1740 0024 0AD0     		beq	.L107
 1741              	.LVL121:
 1742              		.loc 2 4368 74 discriminator 2 view .LVU539
 1743              	.LBE183:
 1744              	.LBE182:
2353:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 1745              		.loc 1 2353 5 is_stmt 1 view .LVU540
 1746 0026 9A6D     		ldr	r2, [r3, #88]
 1747 0028 42F02002 		orr	r2, r2, #32
 1748 002c 9A65     		str	r2, [r3, #88]
2355:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 1749              		.loc 1 2355 5 view .LVU541
 1750              	.LVL122:
2355:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 1751              		.loc 1 2355 20 is_stmt 0 view .LVU542
 1752 002e 0120     		movs	r0, #1
ARM GAS  /tmp/ccN8TuGv.s 			page 167


 1753              	.LVL123:
 1754              	.L108:
2358:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 1755              		.loc 1 2358 3 is_stmt 1 view .LVU543
2358:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 1756              		.loc 1 2358 3 view .LVU544
 1757 0030 0022     		movs	r2, #0
 1758 0032 83F85420 		strb	r2, [r3, #84]
2358:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 1759              		.loc 1 2358 3 view .LVU545
2360:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
 1760              		.loc 1 2360 3 view .LVU546
 1761              	.LVL124:
 1762              	.L106:
2361:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 1763              		.loc 1 2361 1 is_stmt 0 view .LVU547
 1764 0036 03B0     		add	sp, sp, #12
 1765              	.LCFI12:
 1766              		.cfi_remember_state
 1767              		.cfi_def_cfa_offset 12
 1768              		@ sp needed
 1769 0038 70BC     		pop	{r4, r5, r6}
 1770              	.LCFI13:
 1771              		.cfi_restore 6
 1772              		.cfi_restore 5
 1773              		.cfi_restore 4
 1774              		.cfi_def_cfa_offset 0
 1775 003a 7047     		bx	lr
 1776              	.LVL125:
 1777              	.L107:
 1778              	.LCFI14:
 1779              		.cfi_restore_state
2218:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 1780              		.loc 1 2218 5 is_stmt 1 view .LVU548
2218:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 1781              		.loc 1 2218 16 is_stmt 0 view .LVU549
 1782 003c 4868     		ldr	r0, [r1, #4]
2218:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 1783              		.loc 1 2218 8 view .LVU550
 1784 003e 0228     		cmp	r0, #2
 1785 0040 00F09E80 		beq	.L109
2226:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 1786              		.loc 1 2226 7 is_stmt 1 view .LVU551
2226:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 1787              		.loc 1 2226 10 is_stmt 0 view .LVU552
 1788 0044 B4F1004F 		cmp	r4, #-2147483648
 1789 0048 29D0     		beq	.L110
2226:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 1790              		.loc 1 2226 65 discriminator 1 view .LVU553
 1791 004a 764D     		ldr	r5, .L140
 1792 004c AC42     		cmp	r4, r5
 1793 004e 26D0     		beq	.L110
2239:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    ADC_CHSELR_SQ1 << (pConfig->Rank & 0x1FUL),
 1794              		.loc 1 2239 9 is_stmt 1 view .LVU554
 1795 0050 1C6E     		ldr	r4, [r3, #96]
 1796 0052 00F01F00 		and	r0, r0, #31
 1797 0056 0F25     		movs	r5, #15
ARM GAS  /tmp/ccN8TuGv.s 			page 168


 1798 0058 8540     		lsls	r5, r5, r0
 1799 005a 24EA0505 		bic	r5, r4, r5
 1800 005e 0C68     		ldr	r4, [r1]
 1801 0060 C4F31106 		ubfx	r6, r4, #0, #18
 1802 0064 002E     		cmp	r6, #0
 1803 0066 33D1     		bne	.L113
2239:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    ADC_CHSELR_SQ1 << (pConfig->Rank & 0x1FUL),
 1804              		.loc 1 2239 9 is_stmt 0 discriminator 1 view .LVU555
 1805 0068 C4F38464 		ubfx	r4, r4, #26, #5
 1806              	.L114:
2239:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                    ADC_CHSELR_SQ1 << (pConfig->Rank & 0x1FUL),
 1807              		.loc 1 2239 9 discriminator 4 view .LVU556
 1808 006c 04FA00F0 		lsl	r0, r4, r0
 1809 0070 2843     		orrs	r0, r0, r5
 1810 0072 1866     		str	r0, [r3, #96]
2247:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
 1811              		.loc 1 2247 9 is_stmt 1 discriminator 4 view .LVU557
2247:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
 1812              		.loc 1 2247 22 is_stmt 0 discriminator 4 view .LVU558
 1813 0074 4C68     		ldr	r4, [r1, #4]
2247:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
 1814              		.loc 1 2247 29 discriminator 4 view .LVU559
 1815 0076 A008     		lsrs	r0, r4, #2
2247:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
 1816              		.loc 1 2247 37 discriminator 4 view .LVU560
 1817 0078 0130     		adds	r0, r0, #1
2247:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
 1818              		.loc 1 2247 57 discriminator 4 view .LVU561
 1819 007a DD69     		ldr	r5, [r3, #28]
2247:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
 1820              		.loc 1 2247 12 discriminator 4 view .LVU562
 1821 007c A842     		cmp	r0, r5
 1822 007e 14D8     		bhi	.L112
2249:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
 1823              		.loc 1 2249 11 is_stmt 1 view .LVU563
 1824 0080 0D68     		ldr	r5, [r1]
 1825              	.LVL126:
 1826              	.LBB184:
 1827              	.LBI184:
2751:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 1828              		.loc 2 2751 22 view .LVU564
 1829              	.LBB185:
2757:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
 1830              		.loc 2 2757 3 view .LVU565
 1831 0082 906A     		ldr	r0, [r2, #40]
 1832 0084 04F01F04 		and	r4, r4, #31
 1833              	.LVL127:
2757:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
 1834              		.loc 2 2757 3 is_stmt 0 view .LVU566
 1835 0088 0F26     		movs	r6, #15
 1836 008a A640     		lsls	r6, r6, r4
 1837 008c 20EA0600 		bic	r0, r0, r6
 1838 0090 C5F38365 		ubfx	r5, r5, #26, #4
 1839              	.LVL128:
2757:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
 1840              		.loc 2 2757 3 view .LVU567
 1841 0094 05FA04F4 		lsl	r4, r5, r4
ARM GAS  /tmp/ccN8TuGv.s 			page 169


 1842 0098 0443     		orrs	r4, r4, r0
 1843 009a 9462     		str	r4, [r2, #40]
 1844              	.LVL129:
2760:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 1845              		.loc 2 2760 1 view .LVU568
 1846 009c 05E0     		b	.L112
 1847              	.LVL130:
 1848              	.L110:
2760:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 1849              		.loc 2 2760 1 view .LVU569
 1850              	.LBE185:
 1851              	.LBE184:
2231:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
 1852              		.loc 1 2231 9 is_stmt 1 view .LVU570
 1853 009e 0C68     		ldr	r4, [r1]
 1854              	.LVL131:
 1855              	.LBB186:
 1856              	.LBI186:
3017:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 1857              		.loc 2 3017 22 view .LVU571
 1858              	.LBB187:
3021:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 1859              		.loc 2 3021 3 view .LVU572
 1860 00a0 906A     		ldr	r0, [r2, #40]
 1861 00a2 C4F31104 		ubfx	r4, r4, #0, #18
 1862              	.LVL132:
3021:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 1863              		.loc 2 3021 3 is_stmt 0 view .LVU573
 1864 00a6 2043     		orrs	r0, r0, r4
 1865 00a8 9062     		str	r0, [r2, #40]
 1866              	.LVL133:
 1867              	.L112:
3021:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 1868              		.loc 2 3021 3 view .LVU574
 1869              	.LBE187:
 1870              	.LBE186:
2254:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 1871              		.loc 1 2254 7 is_stmt 1 view .LVU575
 1872 00aa 1C68     		ldr	r4, [r3]
 1873 00ac 0D68     		ldr	r5, [r1]
 1874 00ae 8A68     		ldr	r2, [r1, #8]
 1875              	.LVL134:
 1876              	.LBB188:
 1877              	.LBI188:
3446:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 1878              		.loc 2 3446 22 view .LVU576
 1879              	.LBB189:
3450:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
 1880              		.loc 2 3450 3 view .LVU577
 1881 00b0 6069     		ldr	r0, [r4, #20]
 1882 00b2 20EA0520 		bic	r0, r0, r5, lsl #8
 1883 00b6 02EA0522 		and	r2, r2, r5, lsl #8
 1884              	.LVL135:
3450:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
 1885              		.loc 2 3450 3 is_stmt 0 view .LVU578
 1886 00ba 22F07C42 		bic	r2, r2, #-67108864
 1887 00be 22F0FF02 		bic	r2, r2, #255
ARM GAS  /tmp/ccN8TuGv.s 			page 170


 1888 00c2 0243     		orrs	r2, r2, r0
 1889 00c4 6261     		str	r2, [r4, #20]
 1890              	.LVL136:
3450:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
 1891              		.loc 2 3450 3 view .LVU579
 1892              	.LBE189:
 1893              	.LBE188:
2262:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 1894              		.loc 1 2262 7 is_stmt 1 view .LVU580
2262:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 1895              		.loc 1 2262 11 is_stmt 0 view .LVU581
 1896 00c6 0A68     		ldr	r2, [r1]
2262:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 1897              		.loc 1 2262 10 view .LVU582
 1898 00c8 002A     		cmp	r2, #0
 1899 00ca 09DB     		blt	.L132
2180:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tmp_config_internal_channel;
 1900              		.loc 1 2180 21 view .LVU583
 1901 00cc 0020     		movs	r0, #0
 1902 00ce AFE7     		b	.L108
 1903              	.L113:
 1904              	.LVL137:
 1905              	.LBB190:
 1906              	.LBI190:
 1907              		.file 3 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
ARM GAS  /tmp/ccN8TuGv.s 			page 171


  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
ARM GAS  /tmp/ccN8TuGv.s 			page 172


  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
ARM GAS  /tmp/ccN8TuGv.s 			page 173


 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
ARM GAS  /tmp/ccN8TuGv.s 			page 174


 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 214:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 220:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 260:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
ARM GAS  /tmp/ccN8TuGv.s 			page 175


 261:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 262:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 302:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccN8TuGv.s 			page 176


 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 321:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 346:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 360:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 364:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccN8TuGv.s 			page 177


 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 390:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 393:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 402:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 414:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 415:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 419:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 422:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 423:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccN8TuGv.s 			page 178


 432:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 437:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 449:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 454:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 469:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 471:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 474:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 476:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 477:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 480:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
ARM GAS  /tmp/ccN8TuGv.s 			page 179


 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 491:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 492:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 493:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 498:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 506:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 512:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 516:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 519:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 521:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 522:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 523:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 527:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 529:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 530:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 531:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 533:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 537:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 538:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 545:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  /tmp/ccN8TuGv.s 			page 180


 546:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 553:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 554:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 558:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 559:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 564:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 565:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 568:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 569:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 571:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 573:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 574:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 575:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 576:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 578:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 579:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 583:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 585:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 587:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 588:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 589:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 593:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 595:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 596:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 597:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 599:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccN8TuGv.s 			page 181


 603:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 604:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 608:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 610:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 611:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 615:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 616:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 617:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 618:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 621:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 622:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 623:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 625:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 627:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 628:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 629:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 633:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 634:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 637:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 639:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 640:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 642:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 643:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 644:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 647:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 649:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 650:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 652:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 655:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 658:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
ARM GAS  /tmp/ccN8TuGv.s 			page 182


 660:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 665:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 667:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 668:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 669:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 677:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 679:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 680:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 681:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 684:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 685:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 686:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 690:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 693:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 696:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 699:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 700:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 704:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 705:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 706:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 707:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 708:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 710:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 712:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 713:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 714:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 715:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 716:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
ARM GAS  /tmp/ccN8TuGv.s 			page 183


 717:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 721:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 723:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 724:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 726:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 727:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 730:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 734:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 735:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 736:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 737:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 742:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 746:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 749:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 753:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 754:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 757:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 758:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 759:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 760:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 761:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 762:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 763:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 768:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
ARM GAS  /tmp/ccN8TuGv.s 			page 184


 774:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 777:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 779:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 781:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 782:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 784:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 785:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 786:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 788:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 795:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 799:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 802:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 803:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 804:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 805:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 807:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 808:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 809:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 810:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 811:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 812:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 814:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 815:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 818:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 819:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 821:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 825:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 826:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 827:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 828:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
ARM GAS  /tmp/ccN8TuGv.s 			page 185


 831:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 832:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 833:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 836:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 838:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 839:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 842:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 843:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 846:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 847:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 848:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 849:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 853:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 854:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 858:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 860:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 863:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 866:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 867:Drivers/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 868:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 870:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 871:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 875:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 878:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 882:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 884:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 885:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 886:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
ARM GAS  /tmp/ccN8TuGv.s 			page 186


 888:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 889:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 892:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 894:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 895:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 903:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 904:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 905:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 907:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 908:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 909:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 912:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 913:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 914:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 915:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 916:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 917:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 918:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 919:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 920:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 926:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 930:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 931:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 932:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 933:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 935:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 943:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
ARM GAS  /tmp/ccN8TuGv.s 			page 187


 945:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 947:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 948:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 952:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 953:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 954:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 956:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 958:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 959:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 963:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 964:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 965:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 966:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 967:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 968:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 969:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 970:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 971:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 972:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 973:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 974:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 975:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 976:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 977:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 978:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 979:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 980:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 981:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 982:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 983:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 984:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 985:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 986:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 987:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 988:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 989:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 990:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 991:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 992:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 993:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 994:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 995:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 996:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 997:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 998:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 999:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
1000:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1001:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
ARM GAS  /tmp/ccN8TuGv.s 			page 188


1002:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1003:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1004:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
1005:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
1006:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
1007:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1008:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
1009:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
1010:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1011:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1012:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1013:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1014:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1015:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
1016:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
1017:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
1018:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
1019:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
1020:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1021:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
1022:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1023:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
1024:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
1025:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
1026:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
1027:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
1028:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
1029:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1030:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1031:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1032:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1033:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
1034:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
1035:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
1036:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
1037:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
1038:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1039:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
1040:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1041:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1042:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1043:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
1044:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
1045:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
1046:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
1047:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1048:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 1908              		.loc 3 1048 31 is_stmt 1 discriminator 2 view .LVU584
 1909              	.LBB191:
1049:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1050:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 1910              		.loc 3 1050 3 discriminator 2 view .LVU585
1051:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1052:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
1053:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
1054:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
1055:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
ARM GAS  /tmp/ccN8TuGv.s 			page 189


 1911              		.loc 3 1055 4 discriminator 2 view .LVU586
 1912              		.syntax unified
 1913              	@ 1055 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1914 00d0 94FAA4F4 		rbit r4, r4
 1915              	@ 0 "" 2
 1916              	.LVL138:
1056:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
1057:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
1058:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1059:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
1060:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
1061:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
1062:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
1063:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
1064:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
1065:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
1066:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
1067:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1068:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 1917              		.loc 3 1068 3 discriminator 2 view .LVU587
 1918              		.loc 3 1068 3 is_stmt 0 discriminator 2 view .LVU588
 1919              		.thumb
 1920              		.syntax unified
 1921              	.LBE191:
 1922              	.LBE190:
 1923              	.LBB192:
 1924              	.LBI192:
1069:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1070:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1071:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1072:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1073:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
1074:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
1075:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
1076:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
1077:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1078:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 1925              		.loc 3 1078 30 is_stmt 1 discriminator 2 view .LVU589
 1926              	.LBB193:
1079:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1080:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
1081:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
1082:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
1083:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
1084:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
1085:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
1086:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
1087:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
1088:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
1089:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 1927              		.loc 3 1089 3 discriminator 2 view .LVU590
 1928              		.loc 3 1089 6 is_stmt 0 discriminator 2 view .LVU591
 1929 00d4 14B1     		cbz	r4, .L125
1090:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
1091:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
1092:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
1093:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
ARM GAS  /tmp/ccN8TuGv.s 			page 190


 1930              		.loc 3 1093 3 is_stmt 1 view .LVU592
 1931              		.loc 3 1093 10 is_stmt 0 view .LVU593
 1932 00d6 B4FA84F4 		clz	r4, r4
 1933              	.LVL139:
 1934              		.loc 3 1093 10 view .LVU594
 1935 00da C7E7     		b	.L114
 1936              	.LVL140:
 1937              	.L125:
1091:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 1938              		.loc 3 1091 12 view .LVU595
 1939 00dc 2024     		movs	r4, #32
 1940              	.LVL141:
1091:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 1941              		.loc 3 1091 12 view .LVU596
 1942 00de C5E7     		b	.L114
 1943              	.L132:
1091:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 1944              		.loc 3 1091 12 view .LVU597
 1945              	.LBE193:
 1946              	.LBE192:
2264:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 1947              		.loc 1 2264 9 is_stmt 1 view .LVU598
 1948              	.LVL142:
 1949              	.LBB194:
 1950              	.LBI194:
1835:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 1951              		.loc 2 1835 26 view .LVU599
 1952              	.LBB195:
1837:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 1953              		.loc 2 1837 3 view .LVU600
1837:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 1954              		.loc 2 1837 21 is_stmt 0 view .LVU601
 1955 00e0 5149     		ldr	r1, .L140+4
 1956              	.LVL143:
1837:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 1957              		.loc 2 1837 21 view .LVU602
 1958 00e2 D1F80807 		ldr	r0, [r1, #1800]
1837:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 1959              		.loc 2 1837 10 view .LVU603
 1960 00e6 00F0E071 		and	r1, r0, #29360128
 1961              	.LVL144:
1837:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 1962              		.loc 2 1837 10 view .LVU604
 1963              	.LBE195:
 1964              	.LBE194:
2268:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****             ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 1965              		.loc 1 2268 9 is_stmt 1 view .LVU605
2268:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****             ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 1966              		.loc 1 2268 12 is_stmt 0 view .LVU606
 1967 00ea 504C     		ldr	r4, .L140+8
 1968 00ec A242     		cmp	r2, r4
 1969 00ee 07D0     		beq	.L133
 1970              	.L116:
2285:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
 1971              		.loc 1 2285 14 is_stmt 1 view .LVU607
2285:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
 1972              		.loc 1 2285 17 is_stmt 0 view .LVU608
ARM GAS  /tmp/ccN8TuGv.s 			page 191


 1973 00f0 4F4C     		ldr	r4, .L140+12
 1974 00f2 A242     		cmp	r2, r4
 1975 00f4 26D0     		beq	.L134
 1976              	.L119:
2290:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                  ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 1977              		.loc 1 2290 14 is_stmt 1 view .LVU609
2290:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                  ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 1978              		.loc 1 2290 17 is_stmt 0 view .LVU610
 1979 00f6 4F4C     		ldr	r4, .L140+16
 1980 00f8 A242     		cmp	r2, r4
 1981 00fa 32D0     		beq	.L135
2180:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tmp_config_internal_channel;
 1982              		.loc 1 2180 21 view .LVU611
 1983 00fc 0020     		movs	r0, #0
 1984 00fe 97E7     		b	.L108
 1985              	.L133:
2268:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****             ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 1986              		.loc 1 2268 58 discriminator 1 view .LVU612
 1987 0100 10F4000F 		tst	r0, #8388608
 1988 0104 F4D1     		bne	.L116
2271:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                                          LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_chan
 1989              		.loc 1 2271 11 is_stmt 1 view .LVU613
 1990 0106 41F40001 		orr	r1, r1, #8388608
 1991              	.LVL145:
 1992              	.LBB196:
 1993              	.LBI196:
1741:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 1994              		.loc 2 1741 22 view .LVU614
 1995              	.LBB197:
1743:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 1996              		.loc 2 1743 3 view .LVU615
 1997 010a 4748     		ldr	r0, .L140+4
 1998              	.LVL146:
1743:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 1999              		.loc 2 1743 3 is_stmt 0 view .LVU616
 2000 010c D0F80827 		ldr	r2, [r0, #1800]
 2001 0110 22F0E072 		bic	r2, r2, #29360128
 2002 0114 1143     		orrs	r1, r1, r2
 2003              	.LVL147:
1743:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 2004              		.loc 2 1743 3 view .LVU617
 2005 0116 C0F80817 		str	r1, [r0, #1800]
 2006              	.LVL148:
1743:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 2007              		.loc 2 1743 3 view .LVU618
 2008              	.LBE197:
 2009              	.LBE196:
2279:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           while (wait_loop_index != 0UL)
 2010              		.loc 1 2279 11 is_stmt 1 view .LVU619
2279:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           while (wait_loop_index != 0UL)
 2011              		.loc 1 2279 91 is_stmt 0 view .LVU620
 2012 011a 474A     		ldr	r2, .L140+20
 2013 011c 1268     		ldr	r2, [r2]
 2014 011e 9209     		lsrs	r2, r2, #6
 2015 0120 4649     		ldr	r1, .L140+24
 2016 0122 A1FB0212 		umull	r1, r2, r1, r2
 2017 0126 9209     		lsrs	r2, r2, #6
ARM GAS  /tmp/ccN8TuGv.s 			page 192


2279:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           while (wait_loop_index != 0UL)
 2018              		.loc 1 2279 71 view .LVU621
 2019 0128 0132     		adds	r2, r2, #1
 2020 012a 02EB4202 		add	r2, r2, r2, lsl #1
 2021 012e 9200     		lsls	r2, r2, #2
2279:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           while (wait_loop_index != 0UL)
 2022              		.loc 1 2279 27 view .LVU622
 2023 0130 0192     		str	r2, [sp, #4]
2280:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           {
 2024              		.loc 1 2280 11 is_stmt 1 view .LVU623
2280:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           {
 2025              		.loc 1 2280 17 is_stmt 0 view .LVU624
 2026 0132 02E0     		b	.L117
 2027              	.L118:
2282:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           }
 2028              		.loc 1 2282 13 is_stmt 1 view .LVU625
2282:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           }
 2029              		.loc 1 2282 28 is_stmt 0 view .LVU626
 2030 0134 019A     		ldr	r2, [sp, #4]
 2031 0136 013A     		subs	r2, r2, #1
 2032 0138 0192     		str	r2, [sp, #4]
 2033              	.L117:
2280:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           {
 2034              		.loc 1 2280 17 is_stmt 1 view .LVU627
2280:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           {
 2035              		.loc 1 2280 34 is_stmt 0 view .LVU628
 2036 013a 019A     		ldr	r2, [sp, #4]
2280:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           {
 2037              		.loc 1 2280 17 view .LVU629
 2038 013c 002A     		cmp	r2, #0
 2039 013e F9D1     		bne	.L118
2180:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tmp_config_internal_channel;
 2040              		.loc 1 2180 21 view .LVU630
 2041 0140 0020     		movs	r0, #0
 2042 0142 75E7     		b	.L108
 2043              	.LVL149:
 2044              	.L134:
2285:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
 2045              		.loc 1 2285 57 discriminator 1 view .LVU631
 2046 0144 10F0807F 		tst	r0, #16777216
 2047 0148 D5D1     		bne	.L119
2287:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                                          LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 2048              		.loc 1 2287 11 is_stmt 1 view .LVU632
 2049 014a 41F08071 		orr	r1, r1, #16777216
 2050              	.LVL150:
 2051              	.LBB198:
 2052              	.LBI198:
1741:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 2053              		.loc 2 1741 22 view .LVU633
 2054              	.LBB199:
1743:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 2055              		.loc 2 1743 3 view .LVU634
 2056 014e 3648     		ldr	r0, .L140+4
 2057              	.LVL151:
1743:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 2058              		.loc 2 1743 3 is_stmt 0 view .LVU635
 2059 0150 D0F80827 		ldr	r2, [r0, #1800]
ARM GAS  /tmp/ccN8TuGv.s 			page 193


 2060 0154 22F0E072 		bic	r2, r2, #29360128
 2061 0158 1143     		orrs	r1, r1, r2
 2062              	.LVL152:
1743:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 2063              		.loc 2 1743 3 view .LVU636
 2064 015a C0F80817 		str	r1, [r0, #1800]
 2065              	.LBE199:
 2066              	.LBE198:
2180:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tmp_config_internal_channel;
 2067              		.loc 1 2180 21 view .LVU637
 2068 015e 0020     		movs	r0, #0
 2069              	.LBB201:
 2070              	.LBB200:
1744:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 2071              		.loc 2 1744 1 view .LVU638
 2072 0160 66E7     		b	.L108
 2073              	.LVL153:
 2074              	.L135:
1744:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 2075              		.loc 2 1744 1 view .LVU639
 2076              	.LBE200:
 2077              	.LBE201:
2290:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                  ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 2078              		.loc 1 2290 60 discriminator 1 view .LVU640
 2079 0162 10F4800F 		tst	r0, #4194304
 2080 0166 58D1     		bne	.L128
2293:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                                          LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel
 2081              		.loc 1 2293 11 is_stmt 1 view .LVU641
 2082 0168 41F48002 		orr	r2, r1, #4194304
 2083              	.LVL154:
 2084              	.LBB202:
 2085              	.LBI202:
1741:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 2086              		.loc 2 1741 22 view .LVU642
 2087              	.LBB203:
1743:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 2088              		.loc 2 1743 3 view .LVU643
 2089 016c 2E48     		ldr	r0, .L140+4
 2090 016e D0F80817 		ldr	r1, [r0, #1800]
 2091              	.LVL155:
1743:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 2092              		.loc 2 1743 3 is_stmt 0 view .LVU644
 2093 0172 21F0E071 		bic	r1, r1, #29360128
 2094 0176 0A43     		orrs	r2, r2, r1
 2095              	.LVL156:
1743:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 2096              		.loc 2 1743 3 view .LVU645
 2097 0178 C0F80827 		str	r2, [r0, #1800]
 2098              	.LBE203:
 2099              	.LBE202:
2180:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tmp_config_internal_channel;
 2100              		.loc 1 2180 21 view .LVU646
 2101 017c 0020     		movs	r0, #0
 2102              	.LBB205:
 2103              	.LBB204:
1744:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 2104              		.loc 2 1744 1 view .LVU647
ARM GAS  /tmp/ccN8TuGv.s 			page 194


 2105 017e 57E7     		b	.L108
 2106              	.LVL157:
 2107              	.L109:
1744:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 2108              		.loc 2 1744 1 view .LVU648
 2109              	.LBE204:
 2110              	.LBE205:
2309:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 2111              		.loc 1 2309 7 is_stmt 1 view .LVU649
2309:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 2112              		.loc 1 2309 10 is_stmt 0 view .LVU650
 2113 0180 B4F1004F 		cmp	r4, #-2147483648
 2114 0184 02D0     		beq	.L120
2309:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 2115              		.loc 1 2309 65 discriminator 1 view .LVU651
 2116 0186 2748     		ldr	r0, .L140
 2117 0188 8442     		cmp	r4, r0
 2118 018a 06D1     		bne	.L121
 2119              	.L120:
2314:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
 2120              		.loc 1 2314 9 is_stmt 1 view .LVU652
 2121 018c 0C68     		ldr	r4, [r1]
 2122              	.LVL158:
 2123              	.LBB206:
 2124              	.LBI206:
3109:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 2125              		.loc 2 3109 22 view .LVU653
 2126              	.LBB207:
3113:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 2127              		.loc 2 3113 3 view .LVU654
 2128 018e 906A     		ldr	r0, [r2, #40]
 2129 0190 C4F31104 		ubfx	r4, r4, #0, #18
 2130              	.LVL159:
3113:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 2131              		.loc 2 3113 3 is_stmt 0 view .LVU655
 2132 0194 20EA0400 		bic	r0, r0, r4
 2133 0198 9062     		str	r0, [r2, #40]
 2134              	.LVL160:
 2135              	.L121:
3113:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 2136              		.loc 2 3113 3 view .LVU656
 2137              	.LBE207:
 2138              	.LBE206:
2320:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 2139              		.loc 1 2320 7 is_stmt 1 view .LVU657
2320:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 2140              		.loc 1 2320 11 is_stmt 0 view .LVU658
 2141 019a 0A68     		ldr	r2, [r1]
2320:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 2142              		.loc 1 2320 10 view .LVU659
 2143 019c 002A     		cmp	r2, #0
 2144 019e 01DB     		blt	.L136
2180:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tmp_config_internal_channel;
 2145              		.loc 1 2180 21 view .LVU660
 2146 01a0 0020     		movs	r0, #0
 2147 01a2 45E7     		b	.L108
 2148              	.L136:
ARM GAS  /tmp/ccN8TuGv.s 			page 195


2322:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2149              		.loc 1 2322 9 is_stmt 1 view .LVU661
 2150              	.LVL161:
 2151              	.LBB208:
 2152              	.LBI208:
1835:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 2153              		.loc 2 1835 26 view .LVU662
 2154              	.LBB209:
1837:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 2155              		.loc 2 1837 3 view .LVU663
1837:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 2156              		.loc 2 1837 21 is_stmt 0 view .LVU664
 2157 01a4 2049     		ldr	r1, .L140+4
 2158              	.LVL162:
1837:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 2159              		.loc 2 1837 21 view .LVU665
 2160 01a6 D1F80817 		ldr	r1, [r1, #1800]
 2161              	.LVL163:
1837:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 2162              		.loc 2 1837 21 view .LVU666
 2163              	.LBE209:
 2164              	.LBE208:
2324:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
 2165              		.loc 1 2324 9 is_stmt 1 view .LVU667
2324:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
 2166              		.loc 1 2324 12 is_stmt 0 view .LVU668
 2167 01aa 2048     		ldr	r0, .L140+8
 2168 01ac 8242     		cmp	r2, r0
 2169 01ae 07D0     		beq	.L137
2329:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
 2170              		.loc 1 2329 14 is_stmt 1 view .LVU669
2329:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
 2171              		.loc 1 2329 17 is_stmt 0 view .LVU670
 2172 01b0 1F48     		ldr	r0, .L140+12
 2173 01b2 8242     		cmp	r2, r0
 2174 01b4 13D0     		beq	.L138
2334:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
 2175              		.loc 1 2334 14 is_stmt 1 view .LVU671
2334:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
 2176              		.loc 1 2334 17 is_stmt 0 view .LVU672
 2177 01b6 1F48     		ldr	r0, .L140+16
 2178 01b8 8242     		cmp	r2, r0
 2179 01ba 1FD0     		beq	.L139
2180:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tmp_config_internal_channel;
 2180              		.loc 1 2180 21 view .LVU673
 2181 01bc 0020     		movs	r0, #0
 2182 01be 37E7     		b	.L108
 2183              	.L137:
2326:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                                          ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_cha
 2184              		.loc 1 2326 11 is_stmt 1 view .LVU674
 2185 01c0 01F0A071 		and	r1, r1, #20971520
 2186              	.LVL164:
 2187              	.LBB210:
 2188              	.LBI210:
1741:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 2189              		.loc 2 1741 22 view .LVU675
 2190              	.LBB211:
ARM GAS  /tmp/ccN8TuGv.s 			page 196


1743:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 2191              		.loc 2 1743 3 view .LVU676
 2192 01c4 00F11040 		add	r0, r0, #-1879048192
 2193 01c8 00F58830 		add	r0, r0, #69632
 2194 01cc D0F80827 		ldr	r2, [r0, #1800]
 2195 01d0 22F0E072 		bic	r2, r2, #29360128
 2196 01d4 1143     		orrs	r1, r1, r2
 2197              	.LVL165:
1743:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 2198              		.loc 2 1743 3 is_stmt 0 view .LVU677
 2199 01d6 C0F80817 		str	r1, [r0, #1800]
 2200              	.LBE211:
 2201              	.LBE210:
2180:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tmp_config_internal_channel;
 2202              		.loc 1 2180 21 view .LVU678
 2203 01da 0020     		movs	r0, #0
 2204              	.LBB213:
 2205              	.LBB212:
1744:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 2206              		.loc 2 1744 1 view .LVU679
 2207 01dc 28E7     		b	.L108
 2208              	.LVL166:
 2209              	.L138:
1744:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 2210              		.loc 2 1744 1 view .LVU680
 2211              	.LBE212:
 2212              	.LBE213:
2331:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                                          ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 2213              		.loc 1 2331 11 is_stmt 1 view .LVU681
 2214 01de 01F44002 		and	r2, r1, #12582912
 2215              	.LVL167:
 2216              	.LBB214:
 2217              	.LBI214:
1741:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 2218              		.loc 2 1741 22 view .LVU682
 2219              	.LBB215:
1743:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 2220              		.loc 2 1743 3 view .LVU683
 2221 01e2 00F10840 		add	r0, r0, #-2013265920
 2222 01e6 00F56040 		add	r0, r0, #57344
 2223 01ea D0F80817 		ldr	r1, [r0, #1800]
 2224              	.LVL168:
1743:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 2225              		.loc 2 1743 3 is_stmt 0 view .LVU684
 2226 01ee 21F0E071 		bic	r1, r1, #29360128
 2227 01f2 0A43     		orrs	r2, r2, r1
 2228              	.LVL169:
1743:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 2229              		.loc 2 1743 3 view .LVU685
 2230 01f4 C0F80827 		str	r2, [r0, #1800]
 2231              	.LBE215:
 2232              	.LBE214:
2180:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tmp_config_internal_channel;
 2233              		.loc 1 2180 21 view .LVU686
 2234 01f8 0020     		movs	r0, #0
 2235              	.LBB217:
 2236              	.LBB216:
ARM GAS  /tmp/ccN8TuGv.s 			page 197


1744:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 2237              		.loc 2 1744 1 view .LVU687
 2238 01fa 19E7     		b	.L108
 2239              	.LVL170:
 2240              	.L139:
1744:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 2241              		.loc 2 1744 1 view .LVU688
 2242              	.LBE216:
 2243              	.LBE217:
2336:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                                          ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channe
 2244              		.loc 1 2336 11 is_stmt 1 view .LVU689
 2245 01fc 01F0C072 		and	r2, r1, #25165824
 2246              	.LVL171:
 2247              	.LBB218:
 2248              	.LBI218:
1741:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 2249              		.loc 2 1741 22 view .LVU690
 2250              	.LBB219:
1743:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 2251              		.loc 2 1743 3 view .LVU691
 2252 0200 00F10C40 		add	r0, r0, #-1946157056
 2253 0204 00F58030 		add	r0, r0, #65536
 2254 0208 D0F80817 		ldr	r1, [r0, #1800]
 2255              	.LVL172:
1743:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 2256              		.loc 2 1743 3 is_stmt 0 view .LVU692
 2257 020c 21F0E071 		bic	r1, r1, #29360128
 2258 0210 0A43     		orrs	r2, r2, r1
 2259              	.LVL173:
1743:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 2260              		.loc 2 1743 3 view .LVU693
 2261 0212 C0F80827 		str	r2, [r0, #1800]
 2262              	.LBE219:
 2263              	.LBE218:
2180:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tmp_config_internal_channel;
 2264              		.loc 1 2180 21 view .LVU694
 2265 0216 0020     		movs	r0, #0
 2266              	.LBB221:
 2267              	.LBB220:
1744:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 2268              		.loc 2 1744 1 view .LVU695
 2269 0218 0AE7     		b	.L108
 2270              	.LVL174:
 2271              	.L128:
1744:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 2272              		.loc 2 1744 1 view .LVU696
 2273              	.LBE220:
 2274              	.LBE221:
2180:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tmp_config_internal_channel;
 2275              		.loc 1 2180 21 view .LVU697
 2276 021a 0020     		movs	r0, #0
 2277 021c 08E7     		b	.L108
 2278              	.LVL175:
 2279              	.L124:
2201:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2280              		.loc 1 2201 3 view .LVU698
 2281 021e 0220     		movs	r0, #2
ARM GAS  /tmp/ccN8TuGv.s 			page 198


 2282              	.LVL176:
2201:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2283              		.loc 1 2201 3 view .LVU699
 2284 0220 09E7     		b	.L106
 2285              	.L141:
 2286 0222 00BF     		.align	2
 2287              	.L140:
 2288 0224 04000080 		.word	-2147483644
 2289 0228 00200140 		.word	1073815552
 2290 022c 001000B0 		.word	-1342173184
 2291 0230 004000B8 		.word	-1207943168
 2292 0234 002000B4 		.word	-1275060224
 2293 0238 00000000 		.word	SystemCoreClock
 2294 023c 632D3E05 		.word	87960931
 2295              		.cfi_endproc
 2296              	.LFE1111:
 2298              		.section	.text.HAL_ADC_GetState,"ax",%progbits
 2299              		.align	1
 2300              		.global	HAL_ADC_GetState
 2301              		.syntax unified
 2302              		.thumb
 2303              		.thumb_func
 2304              		.fpu softvfp
 2306              	HAL_ADC_GetState:
 2307              	.LVL177:
 2308              	.LFB1113:
2619:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Check the parameters */
 2309              		.loc 1 2619 1 is_stmt 1 view -0
 2310              		.cfi_startproc
 2311              		@ args = 0, pretend = 0, frame = 0
 2312              		@ frame_needed = 0, uses_anonymous_args = 0
 2313              		@ link register save eliminated.
2621:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2314              		.loc 1 2621 3 view .LVU701
2624:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
 2315              		.loc 1 2624 3 view .LVU702
2624:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
 2316              		.loc 1 2624 14 is_stmt 0 view .LVU703
 2317 0000 806D     		ldr	r0, [r0, #88]
 2318              	.LVL178:
2625:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2319              		.loc 1 2625 1 view .LVU704
 2320 0002 7047     		bx	lr
 2321              		.cfi_endproc
 2322              	.LFE1113:
 2324              		.section	.text.HAL_ADC_GetError,"ax",%progbits
 2325              		.align	1
 2326              		.global	HAL_ADC_GetError
 2327              		.syntax unified
 2328              		.thumb
 2329              		.thumb_func
 2330              		.fpu softvfp
 2332              	HAL_ADC_GetError:
 2333              	.LVL179:
 2334              	.LFB1114:
2633:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   /* Check the parameters */
 2335              		.loc 1 2633 1 is_stmt 1 view -0
ARM GAS  /tmp/ccN8TuGv.s 			page 199


 2336              		.cfi_startproc
 2337              		@ args = 0, pretend = 0, frame = 0
 2338              		@ frame_needed = 0, uses_anonymous_args = 0
 2339              		@ link register save eliminated.
2635:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2340              		.loc 1 2635 3 view .LVU706
2637:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
 2341              		.loc 1 2637 3 view .LVU707
2637:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
 2342              		.loc 1 2637 14 is_stmt 0 view .LVU708
 2343 0000 C06D     		ldr	r0, [r0, #92]
 2344              	.LVL180:
2638:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2345              		.loc 1 2638 1 view .LVU709
 2346 0002 7047     		bx	lr
 2347              		.cfi_endproc
 2348              	.LFE1114:
 2350              		.section	.text.ADC_ConversionStop,"ax",%progbits
 2351              		.align	1
 2352              		.global	ADC_ConversionStop
 2353              		.syntax unified
 2354              		.thumb
 2355              		.thumb_func
 2356              		.fpu softvfp
 2358              	ADC_ConversionStop:
 2359              	.LVL181:
 2360              	.LFB1115:
2660:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tickstart;
 2361              		.loc 1 2660 1 is_stmt 1 view -0
 2362              		.cfi_startproc
 2363              		@ args = 0, pretend = 0, frame = 0
 2364              		@ frame_needed = 0, uses_anonymous_args = 0
2660:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tickstart;
 2365              		.loc 1 2660 1 is_stmt 0 view .LVU711
 2366 0000 38B5     		push	{r3, r4, r5, lr}
 2367              	.LCFI15:
 2368              		.cfi_def_cfa_offset 16
 2369              		.cfi_offset 3, -16
 2370              		.cfi_offset 4, -12
 2371              		.cfi_offset 5, -8
 2372              		.cfi_offset 14, -4
2661:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2373              		.loc 1 2661 3 is_stmt 1 view .LVU712
2664:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2374              		.loc 1 2664 3 view .LVU713
2668:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 2375              		.loc 1 2668 3 view .LVU714
2668:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 2376              		.loc 1 2668 7 is_stmt 0 view .LVU715
 2377 0002 0368     		ldr	r3, [r0]
 2378              	.LVL182:
 2379              	.LBB222:
 2380              	.LBI222:
4366:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 2381              		.loc 2 4366 26 is_stmt 1 view .LVU716
 2382              	.LBB223:
 2383              		.loc 2 4368 3 view .LVU717
ARM GAS  /tmp/ccN8TuGv.s 			page 200


 2384              		.loc 2 4368 12 is_stmt 0 view .LVU718
 2385 0004 9A68     		ldr	r2, [r3, #8]
 2386              		.loc 2 4368 74 view .LVU719
 2387 0006 12F0040F 		tst	r2, #4
 2388 000a 2AD0     		beq	.L149
 2389 000c 0446     		mov	r4, r0
 2390              	.LVL183:
 2391              		.loc 2 4368 74 view .LVU720
 2392              	.LBE223:
 2393              	.LBE222:
2672:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 2394              		.loc 1 2672 5 is_stmt 1 view .LVU721
 2395              	.LBB224:
 2396              	.LBI224:
4250:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 2397              		.loc 2 4250 26 view .LVU722
 2398              	.LBB225:
4252:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 2399              		.loc 2 4252 3 view .LVU723
4252:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 2400              		.loc 2 4252 12 is_stmt 0 view .LVU724
 2401 000e 9A68     		ldr	r2, [r3, #8]
4252:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 2402              		.loc 2 4252 70 view .LVU725
 2403 0010 12F0020F 		tst	r2, #2
 2404 0014 07D1     		bne	.L146
 2405              	.LVL184:
4252:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 2406              		.loc 2 4252 70 view .LVU726
 2407              	.LBE225:
 2408              	.LBE224:
2675:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 2409              		.loc 1 2675 7 is_stmt 1 view .LVU727
 2410              	.LBB226:
 2411              	.LBI226:
4350:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 2412              		.loc 2 4350 22 view .LVU728
 2413              	.LBB227:
4355:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 2414              		.loc 2 4355 3 view .LVU729
 2415 0016 9A68     		ldr	r2, [r3, #8]
 2416 0018 22F00042 		bic	r2, r2, #-2147483648
 2417 001c 22F01702 		bic	r2, r2, #23
 2418 0020 42F01002 		orr	r2, r2, #16
 2419 0024 9A60     		str	r2, [r3, #8]
 2420              	.LVL185:
 2421              	.L146:
4355:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 2422              		.loc 2 4355 3 is_stmt 0 view .LVU730
 2423              	.LBE227:
 2424              	.LBE226:
2680:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2425              		.loc 1 2680 5 is_stmt 1 view .LVU731
2680:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2426              		.loc 1 2680 17 is_stmt 0 view .LVU732
 2427 0026 FFF7FEFF 		bl	HAL_GetTick
 2428              	.LVL186:
ARM GAS  /tmp/ccN8TuGv.s 			page 201


2680:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2429              		.loc 1 2680 17 view .LVU733
 2430 002a 0546     		mov	r5, r0
 2431              	.LVL187:
2682:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 2432              		.loc 1 2682 5 is_stmt 1 view .LVU734
 2433              	.L147:
2682:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 2434              		.loc 1 2682 11 view .LVU735
2682:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 2435              		.loc 1 2682 17 is_stmt 0 view .LVU736
 2436 002c 2368     		ldr	r3, [r4]
2682:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 2437              		.loc 1 2682 27 view .LVU737
 2438 002e 9B68     		ldr	r3, [r3, #8]
2682:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 2439              		.loc 1 2682 11 view .LVU738
 2440 0030 13F0040F 		tst	r3, #4
 2441 0034 13D0     		beq	.L151
2684:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 2442              		.loc 1 2684 7 is_stmt 1 view .LVU739
2684:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 2443              		.loc 1 2684 12 is_stmt 0 view .LVU740
 2444 0036 FFF7FEFF 		bl	HAL_GetTick
 2445              	.LVL188:
2684:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 2446              		.loc 1 2684 26 view .LVU741
 2447 003a 431B     		subs	r3, r0, r5
2684:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 2448              		.loc 1 2684 10 view .LVU742
 2449 003c 022B     		cmp	r3, #2
 2450 003e F5D9     		bls	.L147
2687:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
 2451              		.loc 1 2687 9 is_stmt 1 view .LVU743
2687:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
 2452              		.loc 1 2687 18 is_stmt 0 view .LVU744
 2453 0040 2368     		ldr	r3, [r4]
2687:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
 2454              		.loc 1 2687 28 view .LVU745
 2455 0042 9B68     		ldr	r3, [r3, #8]
2687:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
 2456              		.loc 1 2687 12 view .LVU746
 2457 0044 13F0040F 		tst	r3, #4
 2458 0048 F0D0     		beq	.L147
2690:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2459              		.loc 1 2690 11 is_stmt 1 view .LVU747
 2460 004a A36D     		ldr	r3, [r4, #88]
 2461 004c 43F01003 		orr	r3, r3, #16
 2462 0050 A365     		str	r3, [r4, #88]
2693:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2463              		.loc 1 2693 11 view .LVU748
 2464 0052 E36D     		ldr	r3, [r4, #92]
 2465 0054 43F00103 		orr	r3, r3, #1
 2466 0058 E365     		str	r3, [r4, #92]
2695:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
 2467              		.loc 1 2695 11 view .LVU749
2695:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
ARM GAS  /tmp/ccN8TuGv.s 			page 202


 2468              		.loc 1 2695 18 is_stmt 0 view .LVU750
 2469 005a 0120     		movs	r0, #1
 2470 005c 02E0     		b	.L145
 2471              	.L151:
2703:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
 2472              		.loc 1 2703 10 view .LVU751
 2473 005e 0020     		movs	r0, #0
 2474 0060 00E0     		b	.L145
 2475              	.LVL189:
 2476              	.L149:
2703:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
 2477              		.loc 1 2703 10 view .LVU752
 2478 0062 0020     		movs	r0, #0
 2479              	.LVL190:
 2480              	.L145:
2704:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2481              		.loc 1 2704 1 view .LVU753
 2482 0064 38BD     		pop	{r3, r4, r5, pc}
 2483              		.cfi_endproc
 2484              	.LFE1115:
 2486              		.section	.text.ADC_Enable,"ax",%progbits
 2487              		.align	1
 2488              		.global	ADC_Enable
 2489              		.syntax unified
 2490              		.thumb
 2491              		.thumb_func
 2492              		.fpu softvfp
 2494              	ADC_Enable:
 2495              	.LVL191:
 2496              	.LFB1116:
2714:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tickstart;
 2497              		.loc 1 2714 1 is_stmt 1 view -0
 2498              		.cfi_startproc
 2499              		@ args = 0, pretend = 0, frame = 8
 2500              		@ frame_needed = 0, uses_anonymous_args = 0
2714:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tickstart;
 2501              		.loc 1 2714 1 is_stmt 0 view .LVU755
 2502 0000 30B5     		push	{r4, r5, lr}
 2503              	.LCFI16:
 2504              		.cfi_def_cfa_offset 12
 2505              		.cfi_offset 4, -12
 2506              		.cfi_offset 5, -8
 2507              		.cfi_offset 14, -4
 2508 0002 83B0     		sub	sp, sp, #12
 2509              	.LCFI17:
 2510              		.cfi_def_cfa_offset 24
2715:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0UL;
 2511              		.loc 1 2715 3 is_stmt 1 view .LVU756
2716:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2512              		.loc 1 2716 3 view .LVU757
2716:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2513              		.loc 1 2716 17 is_stmt 0 view .LVU758
 2514 0004 0023     		movs	r3, #0
 2515 0006 0193     		str	r3, [sp, #4]
2722:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 2516              		.loc 1 2722 3 is_stmt 1 view .LVU759
2722:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
ARM GAS  /tmp/ccN8TuGv.s 			page 203


 2517              		.loc 1 2722 7 is_stmt 0 view .LVU760
 2518 0008 0368     		ldr	r3, [r0]
 2519              	.LVL192:
 2520              	.LBB228:
 2521              	.LBI228:
4239:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 2522              		.loc 2 4239 26 is_stmt 1 view .LVU761
 2523              	.LBB229:
4241:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 2524              		.loc 2 4241 3 view .LVU762
4241:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 2525              		.loc 2 4241 12 is_stmt 0 view .LVU763
 2526 000a 9A68     		ldr	r2, [r3, #8]
4241:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 2527              		.loc 2 4241 68 view .LVU764
 2528 000c 12F0010F 		tst	r2, #1
 2529 0010 5BD1     		bne	.L161
 2530 0012 0446     		mov	r4, r0
 2531              	.LVL193:
4241:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 2532              		.loc 2 4241 68 view .LVU765
 2533              	.LBE229:
 2534              	.LBE228:
2725:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 2535              		.loc 1 2725 5 is_stmt 1 view .LVU766
2725:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 2536              		.loc 1 2725 24 is_stmt 0 view .LVU767
 2537 0014 9968     		ldr	r1, [r3, #8]
2725:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 2538              		.loc 1 2725 8 view .LVU768
 2539 0016 2E4A     		ldr	r2, .L167
 2540 0018 1142     		tst	r1, r2
 2541 001a 17D1     		bne	.L164
2737:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2542              		.loc 1 2737 5 is_stmt 1 view .LVU769
 2543              	.LVL194:
 2544              	.LBB230:
 2545              	.LBI230:
4200:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 2546              		.loc 2 4200 22 view .LVU770
 2547              	.LBB231:
4205:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 2548              		.loc 2 4205 3 view .LVU771
 2549 001c 9A68     		ldr	r2, [r3, #8]
 2550 001e 22F00042 		bic	r2, r2, #-2147483648
 2551 0022 22F01702 		bic	r2, r2, #23
 2552 0026 42F00102 		orr	r2, r2, #1
 2553 002a 9A60     		str	r2, [r3, #8]
 2554              	.LVL195:
4205:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 2555              		.loc 2 4205 3 is_stmt 0 view .LVU772
 2556              	.LBE231:
 2557              	.LBE230:
2739:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 2558              		.loc 1 2739 5 is_stmt 1 view .LVU773
 2559              	.LBB232:
 2560              	.LBI232:
ARM GAS  /tmp/ccN8TuGv.s 			page 204


1835:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 2561              		.loc 2 1835 26 view .LVU774
 2562              	.LBB233:
1837:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 2563              		.loc 2 1837 3 view .LVU775
1837:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 2564              		.loc 2 1837 21 is_stmt 0 view .LVU776
 2565 002c 294B     		ldr	r3, .L167+4
 2566 002e D3F80837 		ldr	r3, [r3, #1800]
 2567              	.LVL196:
1837:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 2568              		.loc 2 1837 21 view .LVU777
 2569              	.LBE233:
 2570              	.LBE232:
2739:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 2571              		.loc 1 2739 8 view .LVU778
 2572 0032 13F4000F 		tst	r3, #8388608
 2573 0036 19D0     		beq	.L155
2746:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       while (wait_loop_index != 0UL)
 2574              		.loc 1 2746 7 is_stmt 1 view .LVU779
2746:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       while (wait_loop_index != 0UL)
 2575              		.loc 1 2746 94 is_stmt 0 view .LVU780
 2576 0038 274B     		ldr	r3, .L167+8
 2577 003a 1B68     		ldr	r3, [r3]
 2578 003c 9B09     		lsrs	r3, r3, #6
 2579 003e 274A     		ldr	r2, .L167+12
 2580 0040 A2FB0323 		umull	r2, r3, r2, r3
 2581 0044 9B09     		lsrs	r3, r3, #6
2746:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       while (wait_loop_index != 0UL)
 2582              		.loc 1 2746 74 view .LVU781
 2583 0046 0133     		adds	r3, r3, #1
2746:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       while (wait_loop_index != 0UL)
 2584              		.loc 1 2746 23 view .LVU782
 2585 0048 0193     		str	r3, [sp, #4]
2747:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 2586              		.loc 1 2747 7 is_stmt 1 view .LVU783
2747:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 2587              		.loc 1 2747 13 is_stmt 0 view .LVU784
 2588 004a 0CE0     		b	.L156
 2589              	.L164:
2728:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2590              		.loc 1 2728 7 is_stmt 1 view .LVU785
 2591 004c 836D     		ldr	r3, [r0, #88]
 2592 004e 43F01003 		orr	r3, r3, #16
 2593 0052 8365     		str	r3, [r0, #88]
2731:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2594              		.loc 1 2731 7 view .LVU786
 2595 0054 C36D     		ldr	r3, [r0, #92]
 2596 0056 43F00103 		orr	r3, r3, #1
 2597 005a C365     		str	r3, [r0, #92]
2733:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 2598              		.loc 1 2733 7 view .LVU787
2733:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 2599              		.loc 1 2733 14 is_stmt 0 view .LVU788
 2600 005c 0120     		movs	r0, #1
 2601              	.LVL197:
2733:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
ARM GAS  /tmp/ccN8TuGv.s 			page 205


 2602              		.loc 1 2733 14 view .LVU789
 2603 005e 35E0     		b	.L153
 2604              	.LVL198:
 2605              	.L157:
2749:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
 2606              		.loc 1 2749 9 is_stmt 1 view .LVU790
2749:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
 2607              		.loc 1 2749 24 is_stmt 0 view .LVU791
 2608 0060 019B     		ldr	r3, [sp, #4]
 2609 0062 013B     		subs	r3, r3, #1
 2610 0064 0193     		str	r3, [sp, #4]
 2611              	.L156:
2747:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 2612              		.loc 1 2747 13 is_stmt 1 view .LVU792
2747:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 2613              		.loc 1 2747 30 is_stmt 0 view .LVU793
 2614 0066 019B     		ldr	r3, [sp, #4]
2747:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 2615              		.loc 1 2747 13 view .LVU794
 2616 0068 002B     		cmp	r3, #0
 2617 006a F9D1     		bne	.L157
 2618              	.L155:
2755:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 2619              		.loc 1 2755 5 is_stmt 1 view .LVU795
2755:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 2620              		.loc 1 2755 19 is_stmt 0 view .LVU796
 2621 006c 637E     		ldrb	r3, [r4, #25]	@ zero_extendqisi2
2755:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 2622              		.loc 1 2755 8 view .LVU797
 2623 006e 012B     		cmp	r3, #1
 2624 0070 01D1     		bne	.L165
2794:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
 2625              		.loc 1 2794 10 view .LVU798
 2626 0072 0020     		movs	r0, #0
 2627              	.LVL199:
2794:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
 2628              		.loc 1 2794 10 view .LVU799
 2629 0074 2AE0     		b	.L153
 2630              	.LVL200:
 2631              	.L165:
2758:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2632              		.loc 1 2758 7 is_stmt 1 view .LVU800
2758:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2633              		.loc 1 2758 19 is_stmt 0 view .LVU801
 2634 0076 FFF7FEFF 		bl	HAL_GetTick
 2635              	.LVL201:
2758:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2636              		.loc 1 2758 19 view .LVU802
 2637 007a 0546     		mov	r5, r0
 2638              	.LVL202:
2760:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 2639              		.loc 1 2760 7 is_stmt 1 view .LVU803
 2640              	.L158:
2760:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 2641              		.loc 1 2760 13 view .LVU804
2760:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 2642              		.loc 1 2760 14 is_stmt 0 view .LVU805
ARM GAS  /tmp/ccN8TuGv.s 			page 206


 2643 007c 2368     		ldr	r3, [r4]
 2644 007e 1A68     		ldr	r2, [r3]
2760:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 2645              		.loc 1 2760 13 view .LVU806
 2646 0080 12F0010F 		tst	r2, #1
 2647 0084 1FD1     		bne	.L166
2770:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
 2648              		.loc 1 2770 9 is_stmt 1 view .LVU807
 2649              	.LVL203:
 2650              	.LBB234:
 2651              	.LBI234:
4239:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 2652              		.loc 2 4239 26 view .LVU808
 2653              	.LBB235:
4241:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 2654              		.loc 2 4241 3 view .LVU809
4241:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 2655              		.loc 2 4241 12 is_stmt 0 view .LVU810
 2656 0086 9A68     		ldr	r2, [r3, #8]
4241:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 2657              		.loc 2 4241 68 view .LVU811
 2658 0088 12F0010F 		tst	r2, #1
 2659 008c 07D1     		bne	.L159
 2660              	.LVL204:
4241:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 2661              		.loc 2 4241 68 view .LVU812
 2662              	.LBE235:
 2663              	.LBE234:
2772:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
 2664              		.loc 1 2772 11 is_stmt 1 view .LVU813
 2665              	.LBB236:
 2666              	.LBI236:
4200:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 2667              		.loc 2 4200 22 view .LVU814
 2668              	.LBB237:
4205:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 2669              		.loc 2 4205 3 view .LVU815
 2670 008e 9A68     		ldr	r2, [r3, #8]
 2671 0090 22F00042 		bic	r2, r2, #-2147483648
 2672 0094 22F01702 		bic	r2, r2, #23
 2673 0098 42F00102 		orr	r2, r2, #1
 2674 009c 9A60     		str	r2, [r3, #8]
 2675              	.LVL205:
 2676              	.L159:
4205:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 2677              		.loc 2 4205 3 is_stmt 0 view .LVU816
 2678              	.LBE237:
 2679              	.LBE236:
2775:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
 2680              		.loc 1 2775 9 is_stmt 1 view .LVU817
2775:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
 2681              		.loc 1 2775 14 is_stmt 0 view .LVU818
 2682 009e FFF7FEFF 		bl	HAL_GetTick
 2683              	.LVL206:
2775:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
 2684              		.loc 1 2775 28 view .LVU819
 2685 00a2 401B     		subs	r0, r0, r5
ARM GAS  /tmp/ccN8TuGv.s 			page 207


2775:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
 2686              		.loc 1 2775 12 view .LVU820
 2687 00a4 0228     		cmp	r0, #2
 2688 00a6 E9D9     		bls	.L158
2778:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           {
 2689              		.loc 1 2778 11 is_stmt 1 view .LVU821
2778:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           {
 2690              		.loc 1 2778 15 is_stmt 0 view .LVU822
 2691 00a8 2368     		ldr	r3, [r4]
 2692 00aa 1B68     		ldr	r3, [r3]
2778:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           {
 2693              		.loc 1 2778 14 view .LVU823
 2694 00ac 13F0010F 		tst	r3, #1
 2695 00b0 E4D1     		bne	.L158
2781:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2696              		.loc 1 2781 13 is_stmt 1 view .LVU824
 2697 00b2 A36D     		ldr	r3, [r4, #88]
 2698 00b4 43F01003 		orr	r3, r3, #16
 2699 00b8 A365     		str	r3, [r4, #88]
2784:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2700              		.loc 1 2784 13 view .LVU825
 2701 00ba E36D     		ldr	r3, [r4, #92]
 2702 00bc 43F00103 		orr	r3, r3, #1
 2703 00c0 E365     		str	r3, [r4, #92]
2786:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           }
 2704              		.loc 1 2786 13 view .LVU826
2786:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           }
 2705              		.loc 1 2786 20 is_stmt 0 view .LVU827
 2706 00c2 0120     		movs	r0, #1
 2707 00c4 02E0     		b	.L153
 2708              	.L166:
2794:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
 2709              		.loc 1 2794 10 view .LVU828
 2710 00c6 0020     		movs	r0, #0
 2711 00c8 00E0     		b	.L153
 2712              	.LVL207:
 2713              	.L161:
2794:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
 2714              		.loc 1 2794 10 view .LVU829
 2715 00ca 0020     		movs	r0, #0
 2716              	.LVL208:
 2717              	.L153:
2795:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2718              		.loc 1 2795 1 view .LVU830
 2719 00cc 03B0     		add	sp, sp, #12
 2720              	.LCFI18:
 2721              		.cfi_def_cfa_offset 12
 2722              		@ sp needed
 2723 00ce 30BD     		pop	{r4, r5, pc}
 2724              	.L168:
 2725              		.align	2
 2726              	.L167:
 2727 00d0 17000080 		.word	-2147483625
 2728 00d4 00200140 		.word	1073815552
 2729 00d8 00000000 		.word	SystemCoreClock
 2730 00dc 632D3E05 		.word	87960931
 2731              		.cfi_endproc
ARM GAS  /tmp/ccN8TuGv.s 			page 208


 2732              	.LFE1116:
 2734              		.section	.text.HAL_ADC_Start,"ax",%progbits
 2735              		.align	1
 2736              		.global	HAL_ADC_Start
 2737              		.syntax unified
 2738              		.thumb
 2739              		.thumb_func
 2740              		.fpu softvfp
 2742              	HAL_ADC_Start:
 2743              	.LVL209:
 2744              	.LFB1097:
1161:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 2745              		.loc 1 1161 1 is_stmt 1 view -0
 2746              		.cfi_startproc
 2747              		@ args = 0, pretend = 0, frame = 0
 2748              		@ frame_needed = 0, uses_anonymous_args = 0
1162:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2749              		.loc 1 1162 3 view .LVU832
1165:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2750              		.loc 1 1165 3 view .LVU833
1168:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 2751              		.loc 1 1168 3 view .LVU834
1168:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 2752              		.loc 1 1168 7 is_stmt 0 view .LVU835
 2753 0000 0368     		ldr	r3, [r0]
 2754              	.LVL210:
 2755              	.LBB238:
 2756              	.LBI238:
4366:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 2757              		.loc 2 4366 26 is_stmt 1 view .LVU836
 2758              	.LBB239:
 2759              		.loc 2 4368 3 view .LVU837
 2760              		.loc 2 4368 12 is_stmt 0 view .LVU838
 2761 0002 9B68     		ldr	r3, [r3, #8]
 2762              	.LVL211:
 2763              		.loc 2 4368 74 view .LVU839
 2764 0004 13F0040F 		tst	r3, #4
 2765 0008 28D1     		bne	.L172
 2766              	.LBE239:
 2767              	.LBE238:
1161:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 2768              		.loc 1 1161 1 view .LVU840
 2769 000a 10B5     		push	{r4, lr}
 2770              	.LCFI19:
 2771              		.cfi_def_cfa_offset 8
 2772              		.cfi_offset 4, -8
 2773              		.cfi_offset 14, -4
 2774 000c 0446     		mov	r4, r0
 2775              	.LVL212:
1170:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2776              		.loc 1 1170 5 is_stmt 1 view .LVU841
1170:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2777              		.loc 1 1170 5 view .LVU842
 2778 000e 90F85430 		ldrb	r3, [r0, #84]	@ zero_extendqisi2
 2779 0012 012B     		cmp	r3, #1
 2780 0014 24D0     		beq	.L173
1170:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
ARM GAS  /tmp/ccN8TuGv.s 			page 209


 2781              		.loc 1 1170 5 discriminator 2 view .LVU843
 2782 0016 0123     		movs	r3, #1
 2783 0018 80F85430 		strb	r3, [r0, #84]
1170:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2784              		.loc 1 1170 5 discriminator 2 view .LVU844
1173:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2785              		.loc 1 1173 5 discriminator 2 view .LVU845
1173:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2786              		.loc 1 1173 22 is_stmt 0 discriminator 2 view .LVU846
 2787 001c FFF7FEFF 		bl	ADC_Enable
 2788              	.LVL213:
1176:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 2789              		.loc 1 1176 5 is_stmt 1 discriminator 2 view .LVU847
1176:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 2790              		.loc 1 1176 8 is_stmt 0 discriminator 2 view .LVU848
 2791 0020 C0B9     		cbnz	r0, .L171
1181:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 2792              		.loc 1 1181 7 is_stmt 1 view .LVU849
 2793 0022 A36D     		ldr	r3, [r4, #88]
 2794 0024 23F47063 		bic	r3, r3, #3840
 2795 0028 23F00103 		bic	r3, r3, #1
 2796 002c 43F48073 		orr	r3, r3, #256
 2797 0030 A365     		str	r3, [r4, #88]
1187:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2798              		.loc 1 1187 7 view .LVU850
 2799 0032 0023     		movs	r3, #0
 2800 0034 E365     		str	r3, [r4, #92]
1191:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2801              		.loc 1 1191 7 view .LVU851
 2802 0036 2268     		ldr	r2, [r4]
 2803 0038 1C21     		movs	r1, #28
 2804 003a 1160     		str	r1, [r2]
1196:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2805              		.loc 1 1196 7 view .LVU852
1196:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2806              		.loc 1 1196 7 view .LVU853
 2807 003c 84F85430 		strb	r3, [r4, #84]
1196:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2808              		.loc 1 1196 7 view .LVU854
1203:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 2809              		.loc 1 1203 7 view .LVU855
 2810 0040 2268     		ldr	r2, [r4]
 2811              	.LVL214:
 2812              	.LBB240:
 2813              	.LBI240:
4330:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 2814              		.loc 2 4330 22 view .LVU856
 2815              	.LBB241:
4335:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 2816              		.loc 2 4335 3 view .LVU857
 2817 0042 9368     		ldr	r3, [r2, #8]
 2818 0044 23F00043 		bic	r3, r3, #-2147483648
 2819 0048 23F01703 		bic	r3, r3, #23
 2820 004c 43F00403 		orr	r3, r3, #4
 2821 0050 9360     		str	r3, [r2, #8]
 2822              	.LVL215:
 2823              	.L170:
ARM GAS  /tmp/ccN8TuGv.s 			page 210


4335:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 2824              		.loc 2 4335 3 is_stmt 0 view .LVU858
 2825              	.LBE241:
 2826              	.LBE240:
1216:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2827              		.loc 1 1216 1 view .LVU859
 2828 0052 10BD     		pop	{r4, pc}
 2829              	.LVL216:
 2830              	.L171:
1207:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 2831              		.loc 1 1207 7 is_stmt 1 view .LVU860
1207:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 2832              		.loc 1 1207 7 view .LVU861
 2833 0054 0023     		movs	r3, #0
 2834 0056 84F85430 		strb	r3, [r4, #84]
 2835 005a FAE7     		b	.L170
 2836              	.LVL217:
 2837              	.L172:
 2838              	.LCFI20:
 2839              		.cfi_def_cfa_offset 0
 2840              		.cfi_restore 4
 2841              		.cfi_restore 14
1212:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 2842              		.loc 1 1212 20 is_stmt 0 view .LVU862
 2843 005c 0220     		movs	r0, #2
 2844              	.LVL218:
1216:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2845              		.loc 1 1216 1 view .LVU863
 2846 005e 7047     		bx	lr
 2847              	.LVL219:
 2848              	.L173:
 2849              	.LCFI21:
 2850              		.cfi_def_cfa_offset 8
 2851              		.cfi_offset 4, -8
 2852              		.cfi_offset 14, -4
1170:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2853              		.loc 1 1170 5 view .LVU864
 2854 0060 0220     		movs	r0, #2
 2855              	.LVL220:
1170:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2856              		.loc 1 1170 5 view .LVU865
 2857 0062 F6E7     		b	.L170
 2858              		.cfi_endproc
 2859              	.LFE1097:
 2861              		.section	.text.HAL_ADC_Start_IT,"ax",%progbits
 2862              		.align	1
 2863              		.global	HAL_ADC_Start_IT
 2864              		.syntax unified
 2865              		.thumb
 2866              		.thumb_func
 2867              		.fpu softvfp
 2869              	HAL_ADC_Start_IT:
 2870              	.LVL221:
 2871              	.LFB1101:
1539:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 2872              		.loc 1 1539 1 is_stmt 1 view -0
 2873              		.cfi_startproc
ARM GAS  /tmp/ccN8TuGv.s 			page 211


 2874              		@ args = 0, pretend = 0, frame = 0
 2875              		@ frame_needed = 0, uses_anonymous_args = 0
1540:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2876              		.loc 1 1540 3 view .LVU867
1543:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2877              		.loc 1 1543 3 view .LVU868
1546:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 2878              		.loc 1 1546 3 view .LVU869
1546:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 2879              		.loc 1 1546 7 is_stmt 0 view .LVU870
 2880 0000 0368     		ldr	r3, [r0]
 2881              	.LVL222:
 2882              	.LBB242:
 2883              	.LBI242:
4366:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 2884              		.loc 2 4366 26 is_stmt 1 view .LVU871
 2885              	.LBB243:
 2886              		.loc 2 4368 3 view .LVU872
 2887              		.loc 2 4368 12 is_stmt 0 view .LVU873
 2888 0002 9B68     		ldr	r3, [r3, #8]
 2889              	.LVL223:
 2890              		.loc 2 4368 74 view .LVU874
 2891 0004 13F0040F 		tst	r3, #4
 2892 0008 43D1     		bne	.L184
 2893              	.LBE243:
 2894              	.LBE242:
1539:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 2895              		.loc 1 1539 1 view .LVU875
 2896 000a 10B5     		push	{r4, lr}
 2897              	.LCFI22:
 2898              		.cfi_def_cfa_offset 8
 2899              		.cfi_offset 4, -8
 2900              		.cfi_offset 14, -4
 2901 000c 0446     		mov	r4, r0
 2902              	.LVL224:
1548:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2903              		.loc 1 1548 5 is_stmt 1 view .LVU876
1548:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2904              		.loc 1 1548 5 view .LVU877
 2905 000e 90F85430 		ldrb	r3, [r0, #84]	@ zero_extendqisi2
 2906 0012 012B     		cmp	r3, #1
 2907 0014 3FD0     		beq	.L185
1548:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2908              		.loc 1 1548 5 discriminator 2 view .LVU878
 2909 0016 0123     		movs	r3, #1
 2910 0018 80F85430 		strb	r3, [r0, #84]
1548:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2911              		.loc 1 1548 5 discriminator 2 view .LVU879
1551:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2912              		.loc 1 1551 5 discriminator 2 view .LVU880
1551:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2913              		.loc 1 1551 22 is_stmt 0 discriminator 2 view .LVU881
 2914 001c FFF7FEFF 		bl	ADC_Enable
 2915              	.LVL225:
1554:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 2916              		.loc 1 1554 5 is_stmt 1 discriminator 2 view .LVU882
1554:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
ARM GAS  /tmp/ccN8TuGv.s 			page 212


 2917              		.loc 1 1554 8 is_stmt 0 discriminator 2 view .LVU883
 2918 0020 0028     		cmp	r0, #0
 2919 0022 32D1     		bne	.L180
1559:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 2920              		.loc 1 1559 7 is_stmt 1 view .LVU884
 2921 0024 A36D     		ldr	r3, [r4, #88]
 2922 0026 23F47063 		bic	r3, r3, #3840
 2923 002a 23F00103 		bic	r3, r3, #1
 2924 002e 43F48073 		orr	r3, r3, #256
 2925 0032 A365     		str	r3, [r4, #88]
1566:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2926              		.loc 1 1566 7 view .LVU885
 2927 0034 0023     		movs	r3, #0
 2928 0036 E365     		str	r3, [r4, #92]
1570:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2929              		.loc 1 1570 7 view .LVU886
 2930 0038 2268     		ldr	r2, [r4]
 2931 003a 1C21     		movs	r1, #28
 2932 003c 1160     		str	r1, [r2]
1575:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2933              		.loc 1 1575 7 view .LVU887
1575:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2934              		.loc 1 1575 7 view .LVU888
 2935 003e 84F85430 		strb	r3, [r4, #84]
1575:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2936              		.loc 1 1575 7 view .LVU889
1578:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2937              		.loc 1 1578 7 view .LVU890
 2938 0042 2268     		ldr	r2, [r4]
 2939 0044 5368     		ldr	r3, [r2, #4]
 2940 0046 23F01C03 		bic	r3, r3, #28
 2941 004a 5360     		str	r3, [r2, #4]
1581:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 2942              		.loc 1 1581 7 view .LVU891
1581:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 2943              		.loc 1 1581 25 is_stmt 0 view .LVU892
 2944 004c 6369     		ldr	r3, [r4, #20]
1581:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 2945              		.loc 1 1581 7 view .LVU893
 2946 004e 082B     		cmp	r3, #8
 2947 0050 15D0     		beq	.L190
1588:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           break;
 2948              		.loc 1 1588 11 is_stmt 1 view .LVU894
 2949 0052 2268     		ldr	r2, [r4]
 2950 0054 5368     		ldr	r3, [r2, #4]
 2951 0056 43F00403 		orr	r3, r3, #4
 2952 005a 5360     		str	r3, [r2, #4]
1589:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
 2953              		.loc 1 1589 11 view .LVU895
 2954              	.L182:
1596:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 2955              		.loc 1 1596 7 view .LVU896
1596:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 2956              		.loc 1 1596 21 is_stmt 0 view .LVU897
 2957 005c 236B     		ldr	r3, [r4, #48]
1596:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 2958              		.loc 1 1596 10 view .LVU898
ARM GAS  /tmp/ccN8TuGv.s 			page 213


 2959 005e 23B9     		cbnz	r3, .L183
1598:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
 2960              		.loc 1 1598 9 is_stmt 1 view .LVU899
 2961 0060 2268     		ldr	r2, [r4]
 2962 0062 5368     		ldr	r3, [r2, #4]
 2963 0064 43F01003 		orr	r3, r3, #16
 2964 0068 5360     		str	r3, [r2, #4]
 2965              	.L183:
1606:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 2966              		.loc 1 1606 7 view .LVU900
 2967 006a 2268     		ldr	r2, [r4]
 2968              	.LVL226:
 2969              	.LBB244:
 2970              	.LBI244:
4330:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 2971              		.loc 2 4330 22 view .LVU901
 2972              	.LBB245:
4335:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 2973              		.loc 2 4335 3 view .LVU902
 2974 006c 9368     		ldr	r3, [r2, #8]
 2975 006e 23F00043 		bic	r3, r3, #-2147483648
 2976 0072 23F01703 		bic	r3, r3, #23
 2977 0076 43F00403 		orr	r3, r3, #4
 2978 007a 9360     		str	r3, [r2, #8]
 2979              	.LVL227:
 2980              	.L179:
4335:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 2981              		.loc 2 4335 3 is_stmt 0 view .LVU903
 2982              	.LBE245:
 2983              	.LBE244:
1620:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 2984              		.loc 1 1620 1 view .LVU904
 2985 007c 10BD     		pop	{r4, pc}
 2986              	.LVL228:
 2987              	.L190:
1584:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           break;
 2988              		.loc 1 1584 11 is_stmt 1 view .LVU905
 2989 007e 2268     		ldr	r2, [r4]
 2990 0080 5368     		ldr	r3, [r2, #4]
 2991 0082 43F00803 		orr	r3, r3, #8
 2992 0086 5360     		str	r3, [r2, #4]
1585:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         /* case ADC_EOC_SINGLE_CONV */
 2993              		.loc 1 1585 11 view .LVU906
 2994 0088 E8E7     		b	.L182
 2995              	.L180:
1610:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 2996              		.loc 1 1610 7 view .LVU907
1610:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 2997              		.loc 1 1610 7 view .LVU908
 2998 008a 0023     		movs	r3, #0
 2999 008c 84F85430 		strb	r3, [r4, #84]
 3000 0090 F4E7     		b	.L179
 3001              	.LVL229:
 3002              	.L184:
 3003              	.LCFI23:
 3004              		.cfi_def_cfa_offset 0
 3005              		.cfi_restore 4
ARM GAS  /tmp/ccN8TuGv.s 			page 214


 3006              		.cfi_restore 14
1616:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 3007              		.loc 1 1616 20 is_stmt 0 view .LVU909
 3008 0092 0220     		movs	r0, #2
 3009              	.LVL230:
1620:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3010              		.loc 1 1620 1 view .LVU910
 3011 0094 7047     		bx	lr
 3012              	.LVL231:
 3013              	.L185:
 3014              	.LCFI24:
 3015              		.cfi_def_cfa_offset 8
 3016              		.cfi_offset 4, -8
 3017              		.cfi_offset 14, -4
1548:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3018              		.loc 1 1548 5 view .LVU911
 3019 0096 0220     		movs	r0, #2
 3020              	.LVL232:
1548:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3021              		.loc 1 1548 5 view .LVU912
 3022 0098 F0E7     		b	.L179
 3023              		.cfi_endproc
 3024              	.LFE1101:
 3026              		.section	.text.HAL_ADC_Start_DMA,"ax",%progbits
 3027              		.align	1
 3028              		.global	HAL_ADC_Start_DMA
 3029              		.syntax unified
 3030              		.thumb
 3031              		.thumb_func
 3032              		.fpu softvfp
 3034              	HAL_ADC_Start_DMA:
 3035              	.LVL233:
 3036              	.LFB1103:
1677:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 3037              		.loc 1 1677 1 is_stmt 1 view -0
 3038              		.cfi_startproc
 3039              		@ args = 0, pretend = 0, frame = 0
 3040              		@ frame_needed = 0, uses_anonymous_args = 0
1677:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 3041              		.loc 1 1677 1 is_stmt 0 view .LVU914
 3042 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3043              	.LCFI25:
 3044              		.cfi_def_cfa_offset 24
 3045              		.cfi_offset 3, -24
 3046              		.cfi_offset 4, -20
 3047              		.cfi_offset 5, -16
 3048              		.cfi_offset 6, -12
 3049              		.cfi_offset 7, -8
 3050              		.cfi_offset 14, -4
 3051 0002 0446     		mov	r4, r0
1678:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3052              		.loc 1 1678 3 is_stmt 1 view .LVU915
1681:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3053              		.loc 1 1681 3 view .LVU916
1684:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 3054              		.loc 1 1684 3 view .LVU917
1684:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
ARM GAS  /tmp/ccN8TuGv.s 			page 215


 3055              		.loc 1 1684 7 is_stmt 0 view .LVU918
 3056 0004 0068     		ldr	r0, [r0]
 3057              	.LVL234:
 3058              	.LBB246:
 3059              	.LBI246:
4366:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 3060              		.loc 2 4366 26 is_stmt 1 view .LVU919
 3061              	.LBB247:
 3062              		.loc 2 4368 3 view .LVU920
 3063              		.loc 2 4368 12 is_stmt 0 view .LVU921
 3064 0006 8568     		ldr	r5, [r0, #8]
 3065              		.loc 2 4368 74 view .LVU922
 3066 0008 15F0040F 		tst	r5, #4
 3067 000c 50D1     		bne	.L195
 3068 000e 0F46     		mov	r7, r1
 3069 0010 1646     		mov	r6, r2
 3070              	.LVL235:
 3071              		.loc 2 4368 74 view .LVU923
 3072              	.LBE247:
 3073              	.LBE246:
1686:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3074              		.loc 1 1686 5 is_stmt 1 view .LVU924
1686:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3075              		.loc 1 1686 5 view .LVU925
 3076 0012 94F85430 		ldrb	r3, [r4, #84]	@ zero_extendqisi2
 3077 0016 012B     		cmp	r3, #1
 3078 0018 4CD0     		beq	.L196
1686:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3079              		.loc 1 1686 5 discriminator 2 view .LVU926
 3080 001a 0123     		movs	r3, #1
 3081 001c 84F85430 		strb	r3, [r4, #84]
1686:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3082              		.loc 1 1686 5 discriminator 2 view .LVU927
1691:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 3083              		.loc 1 1691 5 discriminator 2 view .LVU928
1691:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 3084              		.loc 1 1691 24 is_stmt 0 discriminator 2 view .LVU929
 3085 0020 C368     		ldr	r3, [r0, #12]
1691:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 3086              		.loc 1 1691 8 discriminator 2 view .LVU930
 3087 0022 13F0010F 		tst	r3, #1
 3088 0026 10D1     		bne	.L193
1693:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 3089              		.loc 1 1693 7 is_stmt 1 view .LVU931
 3090              	.LVL236:
 3091              	.LBB248:
 3092              	.LBI248:
4239:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 3093              		.loc 2 4239 26 view .LVU932
 3094              	.LBB249:
4241:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 3095              		.loc 2 4241 3 view .LVU933
4241:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 3096              		.loc 2 4241 12 is_stmt 0 view .LVU934
 3097 0028 8368     		ldr	r3, [r0, #8]
4241:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 3098              		.loc 2 4241 68 view .LVU935
ARM GAS  /tmp/ccN8TuGv.s 			page 216


 3099 002a 13F0010F 		tst	r3, #1
 3100 002e 07D0     		beq	.L194
 3101              	.LVL237:
4241:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 3102              		.loc 2 4241 68 view .LVU936
 3103              	.LBE249:
 3104              	.LBE248:
1696:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
 3105              		.loc 1 1696 9 is_stmt 1 view .LVU937
 3106              	.LBB250:
 3107              	.LBI250:
4220:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 3108              		.loc 2 4220 22 view .LVU938
 3109              	.LBB251:
4225:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 3110              		.loc 2 4225 3 view .LVU939
 3111 0030 8368     		ldr	r3, [r0, #8]
 3112 0032 23F00043 		bic	r3, r3, #-2147483648
 3113 0036 23F01703 		bic	r3, r3, #23
 3114 003a 43F00203 		orr	r3, r3, #2
 3115 003e 8360     		str	r3, [r0, #8]
 3116              	.LVL238:
 3117              	.L194:
4225:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 3118              		.loc 2 4225 3 is_stmt 0 view .LVU940
 3119              	.LBE251:
 3120              	.LBE250:
1700:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 3121              		.loc 1 1700 7 is_stmt 1 view .LVU941
1700:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 3122              		.loc 1 1700 11 is_stmt 0 view .LVU942
 3123 0040 2268     		ldr	r2, [r4]
 3124              	.LVL239:
1700:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 3125              		.loc 1 1700 29 view .LVU943
 3126 0042 D368     		ldr	r3, [r2, #12]
 3127 0044 43F00103 		orr	r3, r3, #1
 3128 0048 D360     		str	r3, [r2, #12]
 3129              	.L193:
1704:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3130              		.loc 1 1704 5 is_stmt 1 view .LVU944
1704:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3131              		.loc 1 1704 22 is_stmt 0 view .LVU945
 3132 004a 2046     		mov	r0, r4
 3133 004c FFF7FEFF 		bl	ADC_Enable
 3134              	.LVL240:
1707:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 3135              		.loc 1 1707 5 is_stmt 1 view .LVU946
1707:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 3136              		.loc 1 1707 8 is_stmt 0 view .LVU947
 3137 0050 0028     		cmp	r0, #0
 3138 0052 2ED1     		bne	.L192
1712:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 3139              		.loc 1 1712 7 is_stmt 1 view .LVU948
 3140 0054 A36D     		ldr	r3, [r4, #88]
 3141 0056 23F47063 		bic	r3, r3, #3840
 3142 005a 23F00103 		bic	r3, r3, #1
ARM GAS  /tmp/ccN8TuGv.s 			page 217


 3143 005e 43F48073 		orr	r3, r3, #256
 3144 0062 A365     		str	r3, [r4, #88]
1718:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3145              		.loc 1 1718 7 view .LVU949
 3146 0064 0023     		movs	r3, #0
 3147 0066 E365     		str	r3, [r4, #92]
1721:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3148              		.loc 1 1721 7 view .LVU950
1721:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3149              		.loc 1 1721 11 is_stmt 0 view .LVU951
 3150 0068 226D     		ldr	r2, [r4, #80]
1721:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3151              		.loc 1 1721 42 view .LVU952
 3152 006a 1349     		ldr	r1, .L198
 3153 006c D162     		str	r1, [r2, #44]
1724:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3154              		.loc 1 1724 7 is_stmt 1 view .LVU953
1724:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3155              		.loc 1 1724 11 is_stmt 0 view .LVU954
 3156 006e 226D     		ldr	r2, [r4, #80]
1724:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3157              		.loc 1 1724 46 view .LVU955
 3158 0070 1249     		ldr	r1, .L198+4
 3159 0072 1163     		str	r1, [r2, #48]
1727:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3160              		.loc 1 1727 7 is_stmt 1 view .LVU956
1727:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3161              		.loc 1 1727 11 is_stmt 0 view .LVU957
 3162 0074 226D     		ldr	r2, [r4, #80]
1727:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3163              		.loc 1 1727 43 view .LVU958
 3164 0076 1249     		ldr	r1, .L198+8
 3165 0078 5163     		str	r1, [r2, #52]
1736:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3166              		.loc 1 1736 7 is_stmt 1 view .LVU959
 3167 007a 2268     		ldr	r2, [r4]
 3168 007c 1C21     		movs	r1, #28
 3169 007e 1160     		str	r1, [r2]
1741:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3170              		.loc 1 1741 7 view .LVU960
1741:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3171              		.loc 1 1741 7 view .LVU961
 3172 0080 84F85430 		strb	r3, [r4, #84]
1741:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3173              		.loc 1 1741 7 view .LVU962
1744:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3174              		.loc 1 1744 7 view .LVU963
 3175 0084 2268     		ldr	r2, [r4]
 3176 0086 5368     		ldr	r3, [r2, #4]
 3177 0088 43F01003 		orr	r3, r3, #16
 3178 008c 5360     		str	r3, [r2, #4]
1747:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3179              		.loc 1 1747 7 view .LVU964
1747:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3180              		.loc 1 1747 74 is_stmt 0 view .LVU965
 3181 008e 2168     		ldr	r1, [r4]
1747:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
ARM GAS  /tmp/ccN8TuGv.s 			page 218


 3182              		.loc 1 1747 24 view .LVU966
 3183 0090 3346     		mov	r3, r6
 3184 0092 3A46     		mov	r2, r7
 3185 0094 4031     		adds	r1, r1, #64
 3186 0096 206D     		ldr	r0, [r4, #80]
 3187              	.LVL241:
1747:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3188              		.loc 1 1747 24 view .LVU967
 3189 0098 FFF7FEFF 		bl	HAL_DMA_Start_IT
 3190              	.LVL242:
1754:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 3191              		.loc 1 1754 7 is_stmt 1 view .LVU968
 3192 009c 2268     		ldr	r2, [r4]
 3193              	.LVL243:
 3194              	.LBB252:
 3195              	.LBI252:
4330:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 3196              		.loc 2 4330 22 view .LVU969
 3197              	.LBB253:
4335:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 3198              		.loc 2 4335 3 view .LVU970
 3199 009e 9368     		ldr	r3, [r2, #8]
 3200 00a0 23F00043 		bic	r3, r3, #-2147483648
 3201 00a4 23F01703 		bic	r3, r3, #23
 3202 00a8 43F00403 		orr	r3, r3, #4
 3203 00ac 9360     		str	r3, [r2, #8]
4338:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 3204              		.loc 2 4338 1 is_stmt 0 view .LVU971
 3205 00ae 00E0     		b	.L192
 3206              	.LVL244:
 3207              	.L195:
4338:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 3208              		.loc 2 4338 1 view .LVU972
 3209              	.LBE253:
 3210              	.LBE252:
1759:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 3211              		.loc 1 1759 20 view .LVU973
 3212 00b0 0220     		movs	r0, #2
 3213              	.LVL245:
 3214              	.L192:
1763:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3215              		.loc 1 1763 1 view .LVU974
 3216 00b2 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3217              	.LVL246:
 3218              	.L196:
1686:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3219              		.loc 1 1686 5 view .LVU975
 3220 00b4 0220     		movs	r0, #2
 3221 00b6 FCE7     		b	.L192
 3222              	.L199:
 3223              		.align	2
 3224              	.L198:
 3225 00b8 00000000 		.word	ADC_DMAConvCplt
 3226 00bc 00000000 		.word	ADC_DMAHalfConvCplt
 3227 00c0 00000000 		.word	ADC_DMAError
 3228              		.cfi_endproc
 3229              	.LFE1103:
ARM GAS  /tmp/ccN8TuGv.s 			page 219


 3231              		.section	.text.ADC_Disable,"ax",%progbits
 3232              		.align	1
 3233              		.global	ADC_Disable
 3234              		.syntax unified
 3235              		.thumb
 3236              		.thumb_func
 3237              		.fpu softvfp
 3239              	ADC_Disable:
 3240              	.LVL247:
 3241              	.LFB1117:
2805:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tickstart;
 3242              		.loc 1 2805 1 is_stmt 1 view -0
 3243              		.cfi_startproc
 3244              		@ args = 0, pretend = 0, frame = 0
 3245              		@ frame_needed = 0, uses_anonymous_args = 0
2805:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tickstart;
 3246              		.loc 1 2805 1 is_stmt 0 view .LVU977
 3247 0000 38B5     		push	{r3, r4, r5, lr}
 3248              	.LCFI26:
 3249              		.cfi_def_cfa_offset 16
 3250              		.cfi_offset 3, -16
 3251              		.cfi_offset 4, -12
 3252              		.cfi_offset 5, -8
 3253              		.cfi_offset 14, -4
 3254 0002 0446     		mov	r4, r0
2806:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 3255              		.loc 1 2806 3 is_stmt 1 view .LVU978
2807:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3256              		.loc 1 2807 3 view .LVU979
2807:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3257              		.loc 1 2807 48 is_stmt 0 view .LVU980
 3258 0004 0268     		ldr	r2, [r0]
 3259              	.LVL248:
 3260              	.LBB254:
 3261              	.LBI254:
4250:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 3262              		.loc 2 4250 26 is_stmt 1 view .LVU981
 3263              	.LBB255:
4252:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 3264              		.loc 2 4252 3 view .LVU982
4252:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 3265              		.loc 2 4252 12 is_stmt 0 view .LVU983
 3266 0006 9368     		ldr	r3, [r2, #8]
4252:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 3267              		.loc 2 4252 70 view .LVU984
 3268 0008 13F00203 		ands	r3, r3, #2
 3269 000c 00D0     		beq	.L201
 3270 000e 0123     		movs	r3, #1
 3271              	.L201:
 3272              	.LVL249:
4252:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 3273              		.loc 2 4252 70 view .LVU985
 3274              	.LBE255:
 3275              	.LBE254:
2812:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       && (tmp_adc_is_disable_on_going == 0UL)
 3276              		.loc 1 2812 3 is_stmt 1 view .LVU986
 3277              	.LBB256:
ARM GAS  /tmp/ccN8TuGv.s 			page 220


 3278              	.LBI256:
4239:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 3279              		.loc 2 4239 26 view .LVU987
 3280              	.LBB257:
4241:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 3281              		.loc 2 4241 3 view .LVU988
4241:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 3282              		.loc 2 4241 12 is_stmt 0 view .LVU989
 3283 0010 9168     		ldr	r1, [r2, #8]
4241:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 3284              		.loc 2 4241 68 view .LVU990
 3285 0012 11F0010F 		tst	r1, #1
 3286 0016 39D0     		beq	.L206
 3287              	.LVL250:
4241:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 3288              		.loc 2 4241 68 view .LVU991
 3289              	.LBE257:
 3290              	.LBE256:
2813:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****      )
 3291              		.loc 1 2813 7 view .LVU992
 3292 0018 002B     		cmp	r3, #0
 3293 001a 39D1     		bne	.L207
2817:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 3294              		.loc 1 2817 5 is_stmt 1 view .LVU993
2817:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 3295              		.loc 1 2817 24 is_stmt 0 view .LVU994
 3296 001c 9368     		ldr	r3, [r2, #8]
 3297              	.LVL251:
2817:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 3298              		.loc 1 2817 29 view .LVU995
 3299 001e 03F00503 		and	r3, r3, #5
2817:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 3300              		.loc 1 2817 8 view .LVU996
 3301 0022 012B     		cmp	r3, #1
 3302 0024 09D0     		beq	.L209
2826:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3303              		.loc 1 2826 7 is_stmt 1 view .LVU997
 3304 0026 A36D     		ldr	r3, [r4, #88]
 3305 0028 43F01003 		orr	r3, r3, #16
 3306 002c A365     		str	r3, [r4, #88]
2829:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3307              		.loc 1 2829 7 view .LVU998
 3308 002e E36D     		ldr	r3, [r4, #92]
 3309 0030 43F00103 		orr	r3, r3, #1
 3310 0034 E365     		str	r3, [r4, #92]
2831:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 3311              		.loc 1 2831 7 view .LVU999
2831:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 3312              		.loc 1 2831 14 is_stmt 0 view .LVU1000
 3313 0036 0120     		movs	r0, #1
 3314              	.LVL252:
2831:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 3315              		.loc 1 2831 14 view .LVU1001
 3316 0038 29E0     		b	.L202
 3317              	.LVL253:
 3318              	.L209:
2820:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
ARM GAS  /tmp/ccN8TuGv.s 			page 221


 3319              		.loc 1 2820 7 is_stmt 1 view .LVU1002
 3320              	.LBB258:
 3321              	.LBI258:
4220:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 3322              		.loc 2 4220 22 view .LVU1003
 3323              	.LBB259:
4225:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 3324              		.loc 2 4225 3 view .LVU1004
 3325 003a 9368     		ldr	r3, [r2, #8]
 3326 003c 23F00043 		bic	r3, r3, #-2147483648
 3327 0040 23F01703 		bic	r3, r3, #23
 3328 0044 43F00203 		orr	r3, r3, #2
 3329 0048 9360     		str	r3, [r2, #8]
 3330              	.LVL254:
4225:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 3331              		.loc 2 4225 3 is_stmt 0 view .LVU1005
 3332              	.LBE259:
 3333              	.LBE258:
2821:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 3334              		.loc 1 2821 7 is_stmt 1 view .LVU1006
 3335 004a 2368     		ldr	r3, [r4]
 3336 004c 0322     		movs	r2, #3
 3337 004e 1A60     		str	r2, [r3]
2836:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3338              		.loc 1 2836 5 view .LVU1007
2836:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3339              		.loc 1 2836 17 is_stmt 0 view .LVU1008
 3340 0050 FFF7FEFF 		bl	HAL_GetTick
 3341              	.LVL255:
2836:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3342              		.loc 1 2836 17 view .LVU1009
 3343 0054 0546     		mov	r5, r0
 3344              	.LVL256:
2838:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 3345              		.loc 1 2838 5 is_stmt 1 view .LVU1010
 3346              	.L204:
2838:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 3347              		.loc 1 2838 11 view .LVU1011
2838:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 3348              		.loc 1 2838 17 is_stmt 0 view .LVU1012
 3349 0056 2368     		ldr	r3, [r4]
2838:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 3350              		.loc 1 2838 27 view .LVU1013
 3351 0058 9B68     		ldr	r3, [r3, #8]
2838:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 3352              		.loc 1 2838 11 view .LVU1014
 3353 005a 13F0010F 		tst	r3, #1
 3354 005e 13D0     		beq	.L210
2840:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 3355              		.loc 1 2840 7 is_stmt 1 view .LVU1015
2840:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 3356              		.loc 1 2840 12 is_stmt 0 view .LVU1016
 3357 0060 FFF7FEFF 		bl	HAL_GetTick
 3358              	.LVL257:
2840:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 3359              		.loc 1 2840 26 view .LVU1017
 3360 0064 401B     		subs	r0, r0, r5
ARM GAS  /tmp/ccN8TuGv.s 			page 222


2840:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 3361              		.loc 1 2840 10 view .LVU1018
 3362 0066 0228     		cmp	r0, #2
 3363 0068 F5D9     		bls	.L204
2843:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
 3364              		.loc 1 2843 9 is_stmt 1 view .LVU1019
2843:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
 3365              		.loc 1 2843 18 is_stmt 0 view .LVU1020
 3366 006a 2368     		ldr	r3, [r4]
2843:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
 3367              		.loc 1 2843 28 view .LVU1021
 3368 006c 9B68     		ldr	r3, [r3, #8]
2843:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
 3369              		.loc 1 2843 12 view .LVU1022
 3370 006e 13F0010F 		tst	r3, #1
 3371 0072 F0D0     		beq	.L204
2846:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3372              		.loc 1 2846 11 is_stmt 1 view .LVU1023
 3373 0074 A36D     		ldr	r3, [r4, #88]
 3374 0076 43F01003 		orr	r3, r3, #16
 3375 007a A365     		str	r3, [r4, #88]
2849:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3376              		.loc 1 2849 11 view .LVU1024
 3377 007c E36D     		ldr	r3, [r4, #92]
 3378 007e 43F00103 		orr	r3, r3, #1
 3379 0082 E365     		str	r3, [r4, #92]
2851:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
 3380              		.loc 1 2851 11 view .LVU1025
2851:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
 3381              		.loc 1 2851 18 is_stmt 0 view .LVU1026
 3382 0084 0120     		movs	r0, #1
 3383 0086 02E0     		b	.L202
 3384              	.L210:
2858:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
 3385              		.loc 1 2858 10 view .LVU1027
 3386 0088 0020     		movs	r0, #0
 3387 008a 00E0     		b	.L202
 3388              	.LVL258:
 3389              	.L206:
2858:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
 3390              		.loc 1 2858 10 view .LVU1028
 3391 008c 0020     		movs	r0, #0
 3392              	.LVL259:
 3393              	.L202:
2859:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3394              		.loc 1 2859 1 view .LVU1029
 3395 008e 38BD     		pop	{r3, r4, r5, pc}
 3396              	.LVL260:
 3397              	.L207:
2858:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
 3398              		.loc 1 2858 10 view .LVU1030
 3399 0090 0020     		movs	r0, #0
 3400              	.LVL261:
2858:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
 3401              		.loc 1 2858 10 view .LVU1031
 3402 0092 FCE7     		b	.L202
 3403              		.cfi_endproc
ARM GAS  /tmp/ccN8TuGv.s 			page 223


 3404              	.LFE1117:
 3406              		.section	.text.HAL_ADC_DeInit,"ax",%progbits
 3407              		.align	1
 3408              		.global	HAL_ADC_DeInit
 3409              		.syntax unified
 3410              		.thumb
 3411              		.thumb_func
 3412              		.fpu softvfp
 3414              	HAL_ADC_DeInit:
 3415              	.LVL262:
 3416              	.LFB1094:
 753:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 3417              		.loc 1 753 1 is_stmt 1 view -0
 3418              		.cfi_startproc
 3419              		@ args = 0, pretend = 0, frame = 0
 3420              		@ frame_needed = 0, uses_anonymous_args = 0
 753:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 3421              		.loc 1 753 1 is_stmt 0 view .LVU1033
 3422 0000 70B5     		push	{r4, r5, r6, lr}
 3423              	.LCFI27:
 3424              		.cfi_def_cfa_offset 16
 3425              		.cfi_offset 4, -16
 3426              		.cfi_offset 5, -12
 3427              		.cfi_offset 6, -8
 3428              		.cfi_offset 14, -4
 754:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3429              		.loc 1 754 3 is_stmt 1 view .LVU1034
 757:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 3430              		.loc 1 757 3 view .LVU1035
 757:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 3431              		.loc 1 757 6 is_stmt 0 view .LVU1036
 3432 0002 0028     		cmp	r0, #0
 3433 0004 4CD0     		beq	.L215
 3434 0006 0446     		mov	r4, r0
 763:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3435              		.loc 1 763 3 is_stmt 1 view .LVU1037
 766:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3436              		.loc 1 766 3 view .LVU1038
 3437 0008 836D     		ldr	r3, [r0, #88]
 3438 000a 43F00203 		orr	r3, r3, #2
 3439 000e 8365     		str	r3, [r0, #88]
 769:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3440              		.loc 1 769 3 view .LVU1039
 769:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3441              		.loc 1 769 20 is_stmt 0 view .LVU1040
 3442 0010 FFF7FEFF 		bl	ADC_ConversionStop
 3443              	.LVL263:
 772:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 3444              		.loc 1 772 3 is_stmt 1 view .LVU1041
 772:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 3445              		.loc 1 772 6 is_stmt 0 view .LVU1042
 3446 0014 0646     		mov	r6, r0
 3447 0016 0028     		cmp	r0, #0
 3448 0018 33D0     		beq	.L217
 3449              	.L213:
 3450              	.LVL264:
 796:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                               ADC_IT_AWD1  | ADC_IT_OVR  |
ARM GAS  /tmp/ccN8TuGv.s 			page 224


 3451              		.loc 1 796 3 is_stmt 1 view .LVU1043
 3452 001a 2268     		ldr	r2, [r4]
 3453 001c 5368     		ldr	r3, [r2, #4]
 3454 001e 23F46773 		bic	r3, r3, #924
 3455 0022 23F00303 		bic	r3, r3, #3
 3456 0026 5360     		str	r3, [r2, #4]
 802:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                               ADC_FLAG_AWD1  | ADC_FLAG_OVR  |
 3457              		.loc 1 802 3 view .LVU1044
 3458 0028 2368     		ldr	r3, [r4]
 3459 002a 40F29F32 		movw	r2, #927
 3460 002e 1A60     		str	r2, [r3]
 812:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                              ADC_CFGR1_AUTOFF  | ADC_CFGR1_WAIT   | ADC_CFGR1_CONT   | ADC_CFGR1_OV
 3461              		.loc 1 812 3 view .LVU1045
 812:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                              ADC_CFGR1_AUTOFF  | ADC_CFGR1_WAIT   | ADC_CFGR1_CONT   | ADC_CFGR1_OV
 3462              		.loc 1 812 7 is_stmt 0 view .LVU1046
 3463 0030 2268     		ldr	r2, [r4]
 812:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                              ADC_CFGR1_AUTOFF  | ADC_CFGR1_WAIT   | ADC_CFGR1_CONT   | ADC_CFGR1_OV
 3464              		.loc 1 812 25 view .LVU1047
 3465 0032 D168     		ldr	r1, [r2, #12]
 3466 0034 1B4B     		ldr	r3, .L218
 3467 0036 0B40     		ands	r3, r3, r1
 3468 0038 D360     		str	r3, [r2, #12]
 820:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3469              		.loc 1 820 3 is_stmt 1 view .LVU1048
 820:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3470              		.loc 1 820 7 is_stmt 0 view .LVU1049
 3471 003a 2268     		ldr	r2, [r4]
 820:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3472              		.loc 1 820 25 view .LVU1050
 3473 003c 1369     		ldr	r3, [r2, #16]
 3474 003e 23F04043 		bic	r3, r3, #-1073741824
 3475 0042 1361     		str	r3, [r2, #16]
 823:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3476              		.loc 1 823 3 is_stmt 1 view .LVU1051
 823:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3477              		.loc 1 823 7 is_stmt 0 view .LVU1052
 3478 0044 2268     		ldr	r2, [r4]
 823:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3479              		.loc 1 823 24 view .LVU1053
 3480 0046 5369     		ldr	r3, [r2, #20]
 3481 0048 23F00703 		bic	r3, r3, #7
 3482 004c 5361     		str	r3, [r2, #20]
 826:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3483              		.loc 1 826 3 is_stmt 1 view .LVU1054
 826:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3484              		.loc 1 826 7 is_stmt 0 view .LVU1055
 3485 004e 2268     		ldr	r2, [r4]
 826:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3486              		.loc 1 826 23 view .LVU1056
 3487 0050 136A     		ldr	r3, [r2, #32]
 3488 0052 03F0F023 		and	r3, r3, #-268374016
 3489 0056 1362     		str	r3, [r2, #32]
 829:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3490              		.loc 1 829 3 is_stmt 1 view .LVU1057
 829:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3491              		.loc 1 829 7 is_stmt 0 view .LVU1058
 3492 0058 2368     		ldr	r3, [r4]
ARM GAS  /tmp/ccN8TuGv.s 			page 225


 829:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3493              		.loc 1 829 26 view .LVU1059
 3494 005a 9A6A     		ldr	r2, [r3, #40]
 3495 005c 0025     		movs	r5, #0
 3496 005e 9D62     		str	r5, [r3, #40]
 835:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3497              		.loc 1 835 3 is_stmt 1 view .LVU1060
 835:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3498              		.loc 1 835 19 is_stmt 0 view .LVU1061
 3499 0060 114A     		ldr	r2, .L218+4
 3500 0062 D2F80837 		ldr	r3, [r2, #1800]
 3501 0066 23F0FE73 		bic	r3, r3, #33292288
 3502 006a C2F80837 		str	r3, [r2, #1800]
 854:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 3503              		.loc 1 854 3 is_stmt 1 view .LVU1062
 3504 006e 2046     		mov	r0, r4
 3505 0070 FFF7FEFF 		bl	HAL_ADC_MspDeInit
 3506              	.LVL265:
 858:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3507              		.loc 1 858 3 view .LVU1063
 858:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3508              		.loc 1 858 39 is_stmt 0 view .LVU1064
 3509 0074 2566     		str	r5, [r4, #96]
 861:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3510              		.loc 1 861 3 is_stmt 1 view .LVU1065
 3511 0076 E565     		str	r5, [r4, #92]
 864:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3512              		.loc 1 864 3 view .LVU1066
 864:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3513              		.loc 1 864 15 is_stmt 0 view .LVU1067
 3514 0078 A565     		str	r5, [r4, #88]
 866:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3515              		.loc 1 866 3 is_stmt 1 view .LVU1068
 866:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3516              		.loc 1 866 3 view .LVU1069
 3517 007a 84F85450 		strb	r5, [r4, #84]
 866:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3518              		.loc 1 866 3 view .LVU1070
 868:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
 3519              		.loc 1 868 3 view .LVU1071
 3520              	.LVL266:
 3521              	.L212:
 869:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3522              		.loc 1 869 1 is_stmt 0 view .LVU1072
 3523 007e 3046     		mov	r0, r6
 3524 0080 70BD     		pop	{r4, r5, r6, pc}
 3525              	.LVL267:
 3526              	.L217:
 775:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3527              		.loc 1 775 5 is_stmt 1 view .LVU1073
 775:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3528              		.loc 1 775 22 is_stmt 0 view .LVU1074
 3529 0082 2046     		mov	r0, r4
 3530              	.LVL268:
 775:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3531              		.loc 1 775 22 view .LVU1075
 3532 0084 FFF7FEFF 		bl	ADC_Disable
ARM GAS  /tmp/ccN8TuGv.s 			page 226


 3533              	.LVL269:
 778:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 3534              		.loc 1 778 5 is_stmt 1 view .LVU1076
 778:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 3535              		.loc 1 778 8 is_stmt 0 view .LVU1077
 3536 0088 0646     		mov	r6, r0
 3537 008a 08B9     		cbnz	r0, .L214
 781:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 3538              		.loc 1 781 7 is_stmt 1 view .LVU1078
 781:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 3539              		.loc 1 781 19 is_stmt 0 view .LVU1079
 3540 008c 0123     		movs	r3, #1
 3541 008e A365     		str	r3, [r4, #88]
 3542              	.L214:
 785:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 3543              		.loc 1 785 5 is_stmt 1 view .LVU1080
 3544 0090 2268     		ldr	r2, [r4]
 3545              	.LVL270:
 3546              	.LBB260:
 3547              	.LBI260:
4168:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 3548              		.loc 2 4168 22 view .LVU1081
 3549              	.LBB261:
4170:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 3550              		.loc 2 4170 3 view .LVU1082
 3551 0092 9368     		ldr	r3, [r2, #8]
 3552 0094 23F01043 		bic	r3, r3, #-1879048192
 3553 0098 23F01703 		bic	r3, r3, #23
 3554 009c 9360     		str	r3, [r2, #8]
4171:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 3555              		.loc 2 4171 1 is_stmt 0 view .LVU1083
 3556 009e BCE7     		b	.L213
 3557              	.LVL271:
 3558              	.L215:
4171:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 3559              		.loc 2 4171 1 view .LVU1084
 3560              	.LBE261:
 3561              	.LBE260:
 759:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 3562              		.loc 1 759 12 view .LVU1085
 3563 00a0 0126     		movs	r6, #1
 3564 00a2 ECE7     		b	.L212
 3565              	.L219:
 3566              		.align	2
 3567              	.L218:
 3568 00a4 00023E83 		.word	-2093088256
 3569 00a8 00200140 		.word	1073815552
 3570              		.cfi_endproc
 3571              	.LFE1094:
 3573              		.section	.text.HAL_ADC_Stop,"ax",%progbits
 3574              		.align	1
 3575              		.global	HAL_ADC_Stop
 3576              		.syntax unified
 3577              		.thumb
 3578              		.thumb_func
 3579              		.fpu softvfp
 3581              	HAL_ADC_Stop:
ARM GAS  /tmp/ccN8TuGv.s 			page 227


 3582              	.LVL272:
 3583              	.LFB1098:
1228:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 3584              		.loc 1 1228 1 is_stmt 1 view -0
 3585              		.cfi_startproc
 3586              		@ args = 0, pretend = 0, frame = 0
 3587              		@ frame_needed = 0, uses_anonymous_args = 0
1229:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3588              		.loc 1 1229 3 view .LVU1087
1232:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3589              		.loc 1 1232 3 view .LVU1088
1234:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3590              		.loc 1 1234 3 view .LVU1089
1234:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3591              		.loc 1 1234 3 view .LVU1090
 3592 0000 90F85430 		ldrb	r3, [r0, #84]	@ zero_extendqisi2
 3593 0004 012B     		cmp	r3, #1
 3594 0006 19D0     		beq	.L223
1228:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 3595              		.loc 1 1228 1 is_stmt 0 discriminator 2 view .LVU1091
 3596 0008 10B5     		push	{r4, lr}
 3597              	.LCFI28:
 3598              		.cfi_def_cfa_offset 8
 3599              		.cfi_offset 4, -8
 3600              		.cfi_offset 14, -4
 3601 000a 0446     		mov	r4, r0
1234:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3602              		.loc 1 1234 3 is_stmt 1 discriminator 2 view .LVU1092
 3603 000c 0123     		movs	r3, #1
 3604 000e 80F85430 		strb	r3, [r0, #84]
1234:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3605              		.loc 1 1234 3 discriminator 2 view .LVU1093
1237:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3606              		.loc 1 1237 3 discriminator 2 view .LVU1094
1237:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3607              		.loc 1 1237 20 is_stmt 0 discriminator 2 view .LVU1095
 3608 0012 FFF7FEFF 		bl	ADC_ConversionStop
 3609              	.LVL273:
1240:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 3610              		.loc 1 1240 3 is_stmt 1 discriminator 2 view .LVU1096
1240:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 3611              		.loc 1 1240 6 is_stmt 0 discriminator 2 view .LVU1097
 3612 0016 18B1     		cbz	r0, .L228
 3613              	.L222:
1255:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3614              		.loc 1 1255 3 is_stmt 1 view .LVU1098
1255:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3615              		.loc 1 1255 3 view .LVU1099
 3616 0018 0023     		movs	r3, #0
 3617 001a 84F85430 		strb	r3, [r4, #84]
1255:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3618              		.loc 1 1255 3 view .LVU1100
1257:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
 3619              		.loc 1 1257 3 view .LVU1101
1258:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3620              		.loc 1 1258 1 is_stmt 0 view .LVU1102
 3621 001e 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccN8TuGv.s 			page 228


 3622              	.LVL274:
 3623              	.L228:
1243:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3624              		.loc 1 1243 5 is_stmt 1 view .LVU1103
1243:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3625              		.loc 1 1243 22 is_stmt 0 view .LVU1104
 3626 0020 2046     		mov	r0, r4
 3627              	.LVL275:
1243:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3628              		.loc 1 1243 22 view .LVU1105
 3629 0022 FFF7FEFF 		bl	ADC_Disable
 3630              	.LVL276:
1246:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 3631              		.loc 1 1246 5 is_stmt 1 view .LVU1106
1246:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 3632              		.loc 1 1246 8 is_stmt 0 view .LVU1107
 3633 0026 0028     		cmp	r0, #0
 3634 0028 F6D1     		bne	.L222
1249:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
 3635              		.loc 1 1249 7 is_stmt 1 view .LVU1108
 3636 002a A36D     		ldr	r3, [r4, #88]
 3637 002c 23F48073 		bic	r3, r3, #256
 3638 0030 23F00103 		bic	r3, r3, #1
 3639 0034 43F00103 		orr	r3, r3, #1
 3640 0038 A365     		str	r3, [r4, #88]
 3641 003a EDE7     		b	.L222
 3642              	.LVL277:
 3643              	.L223:
 3644              	.LCFI29:
 3645              		.cfi_def_cfa_offset 0
 3646              		.cfi_restore 4
 3647              		.cfi_restore 14
1234:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3648              		.loc 1 1234 3 is_stmt 0 view .LVU1109
 3649 003c 0220     		movs	r0, #2
 3650              	.LVL278:
1258:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3651              		.loc 1 1258 1 view .LVU1110
 3652 003e 7047     		bx	lr
 3653              		.cfi_endproc
 3654              	.LFE1098:
 3656              		.section	.text.HAL_ADC_Stop_IT,"ax",%progbits
 3657              		.align	1
 3658              		.global	HAL_ADC_Stop_IT
 3659              		.syntax unified
 3660              		.thumb
 3661              		.thumb_func
 3662              		.fpu softvfp
 3664              	HAL_ADC_Stop_IT:
 3665              	.LVL279:
 3666              	.LFB1102:
1630:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 3667              		.loc 1 1630 1 is_stmt 1 view -0
 3668              		.cfi_startproc
 3669              		@ args = 0, pretend = 0, frame = 0
 3670              		@ frame_needed = 0, uses_anonymous_args = 0
1631:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
ARM GAS  /tmp/ccN8TuGv.s 			page 229


 3671              		.loc 1 1631 3 view .LVU1112
1634:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3672              		.loc 1 1634 3 view .LVU1113
1636:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3673              		.loc 1 1636 3 view .LVU1114
1636:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3674              		.loc 1 1636 3 view .LVU1115
 3675 0000 90F85430 		ldrb	r3, [r0, #84]	@ zero_extendqisi2
 3676 0004 012B     		cmp	r3, #1
 3677 0006 1ED0     		beq	.L232
1630:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 3678              		.loc 1 1630 1 is_stmt 0 discriminator 2 view .LVU1116
 3679 0008 10B5     		push	{r4, lr}
 3680              	.LCFI30:
 3681              		.cfi_def_cfa_offset 8
 3682              		.cfi_offset 4, -8
 3683              		.cfi_offset 14, -4
 3684 000a 0446     		mov	r4, r0
1636:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3685              		.loc 1 1636 3 is_stmt 1 discriminator 2 view .LVU1117
 3686 000c 0123     		movs	r3, #1
 3687 000e 80F85430 		strb	r3, [r0, #84]
1636:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3688              		.loc 1 1636 3 discriminator 2 view .LVU1118
1639:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3689              		.loc 1 1639 3 discriminator 2 view .LVU1119
1639:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3690              		.loc 1 1639 20 is_stmt 0 discriminator 2 view .LVU1120
 3691 0012 FFF7FEFF 		bl	ADC_ConversionStop
 3692              	.LVL280:
1642:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 3693              		.loc 1 1642 3 is_stmt 1 discriminator 2 view .LVU1121
1642:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 3694              		.loc 1 1642 6 is_stmt 0 discriminator 2 view .LVU1122
 3695 0016 18B1     		cbz	r0, .L237
 3696              	.L231:
1661:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3697              		.loc 1 1661 3 is_stmt 1 view .LVU1123
1661:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3698              		.loc 1 1661 3 view .LVU1124
 3699 0018 0023     		movs	r3, #0
 3700 001a 84F85430 		strb	r3, [r4, #84]
1661:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3701              		.loc 1 1661 3 view .LVU1125
1663:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
 3702              		.loc 1 1663 3 view .LVU1126
1664:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3703              		.loc 1 1664 1 is_stmt 0 view .LVU1127
 3704 001e 10BD     		pop	{r4, pc}
 3705              	.LVL281:
 3706              	.L237:
1646:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3707              		.loc 1 1646 5 is_stmt 1 view .LVU1128
 3708 0020 2268     		ldr	r2, [r4]
 3709 0022 5368     		ldr	r3, [r2, #4]
 3710 0024 23F01C03 		bic	r3, r3, #28
 3711 0028 5360     		str	r3, [r2, #4]
ARM GAS  /tmp/ccN8TuGv.s 			page 230


1649:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3712              		.loc 1 1649 5 view .LVU1129
1649:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3713              		.loc 1 1649 22 is_stmt 0 view .LVU1130
 3714 002a 2046     		mov	r0, r4
 3715              	.LVL282:
1649:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3716              		.loc 1 1649 22 view .LVU1131
 3717 002c FFF7FEFF 		bl	ADC_Disable
 3718              	.LVL283:
1652:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 3719              		.loc 1 1652 5 is_stmt 1 view .LVU1132
1652:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 3720              		.loc 1 1652 8 is_stmt 0 view .LVU1133
 3721 0030 0028     		cmp	r0, #0
 3722 0032 F1D1     		bne	.L231
1655:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
 3723              		.loc 1 1655 7 is_stmt 1 view .LVU1134
 3724 0034 A36D     		ldr	r3, [r4, #88]
 3725 0036 23F48073 		bic	r3, r3, #256
 3726 003a 23F00103 		bic	r3, r3, #1
 3727 003e 43F00103 		orr	r3, r3, #1
 3728 0042 A365     		str	r3, [r4, #88]
 3729 0044 E8E7     		b	.L231
 3730              	.LVL284:
 3731              	.L232:
 3732              	.LCFI31:
 3733              		.cfi_def_cfa_offset 0
 3734              		.cfi_restore 4
 3735              		.cfi_restore 14
1636:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3736              		.loc 1 1636 3 is_stmt 0 view .LVU1135
 3737 0046 0220     		movs	r0, #2
 3738              	.LVL285:
1664:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3739              		.loc 1 1664 1 view .LVU1136
 3740 0048 7047     		bx	lr
 3741              		.cfi_endproc
 3742              	.LFE1102:
 3744              		.section	.text.HAL_ADC_Stop_DMA,"ax",%progbits
 3745              		.align	1
 3746              		.global	HAL_ADC_Stop_DMA
 3747              		.syntax unified
 3748              		.thumb
 3749              		.thumb_func
 3750              		.fpu softvfp
 3752              	HAL_ADC_Stop_DMA:
 3753              	.LVL286:
 3754              	.LFB1104:
1773:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 3755              		.loc 1 1773 1 is_stmt 1 view -0
 3756              		.cfi_startproc
 3757              		@ args = 0, pretend = 0, frame = 0
 3758              		@ frame_needed = 0, uses_anonymous_args = 0
1773:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 3759              		.loc 1 1773 1 is_stmt 0 view .LVU1138
 3760 0000 38B5     		push	{r3, r4, r5, lr}
ARM GAS  /tmp/ccN8TuGv.s 			page 231


 3761              	.LCFI32:
 3762              		.cfi_def_cfa_offset 16
 3763              		.cfi_offset 3, -16
 3764              		.cfi_offset 4, -12
 3765              		.cfi_offset 5, -8
 3766              		.cfi_offset 14, -4
1774:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3767              		.loc 1 1774 3 is_stmt 1 view .LVU1139
1777:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3768              		.loc 1 1777 3 view .LVU1140
1779:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3769              		.loc 1 1779 3 view .LVU1141
1779:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3770              		.loc 1 1779 3 view .LVU1142
 3771 0002 90F85430 		ldrb	r3, [r0, #84]	@ zero_extendqisi2
 3772 0006 012B     		cmp	r3, #1
 3773 0008 38D0     		beq	.L245
 3774 000a 0446     		mov	r4, r0
1779:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3775              		.loc 1 1779 3 discriminator 2 view .LVU1143
 3776 000c 0123     		movs	r3, #1
 3777 000e 80F85430 		strb	r3, [r0, #84]
1779:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3778              		.loc 1 1779 3 discriminator 2 view .LVU1144
1782:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3779              		.loc 1 1782 3 discriminator 2 view .LVU1145
1782:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3780              		.loc 1 1782 20 is_stmt 0 discriminator 2 view .LVU1146
 3781 0012 FFF7FEFF 		bl	ADC_ConversionStop
 3782              	.LVL287:
1785:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 3783              		.loc 1 1785 3 is_stmt 1 discriminator 2 view .LVU1147
1785:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 3784              		.loc 1 1785 6 is_stmt 0 discriminator 2 view .LVU1148
 3785 0016 0546     		mov	r5, r0
 3786 0018 E8B9     		cbnz	r0, .L240
1789:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 3787              		.loc 1 1789 5 is_stmt 1 view .LVU1149
1789:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 3788              		.loc 1 1789 13 is_stmt 0 view .LVU1150
 3789 001a 206D     		ldr	r0, [r4, #80]
 3790              	.LVL288:
1789:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 3791              		.loc 1 1789 25 view .LVU1151
 3792 001c 90F82530 		ldrb	r3, [r0, #37]	@ zero_extendqisi2
 3793 0020 DBB2     		uxtb	r3, r3
1789:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 3794              		.loc 1 1789 8 view .LVU1152
 3795 0022 022B     		cmp	r3, #2
 3796 0024 1CD0     		beq	.L247
 3797              	.L241:
 3798              	.LVL289:
1802:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3799              		.loc 1 1802 5 is_stmt 1 view .LVU1153
 3800 0026 2268     		ldr	r2, [r4]
 3801 0028 5368     		ldr	r3, [r2, #4]
 3802 002a 23F01003 		bic	r3, r3, #16
ARM GAS  /tmp/ccN8TuGv.s 			page 232


 3803 002e 5360     		str	r3, [r2, #4]
1807:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 3804              		.loc 1 1807 5 view .LVU1154
1807:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 3805              		.loc 1 1807 8 is_stmt 0 view .LVU1155
 3806 0030 05BB     		cbnz	r5, .L242
1809:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 3807              		.loc 1 1809 7 is_stmt 1 view .LVU1156
1809:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 3808              		.loc 1 1809 24 is_stmt 0 view .LVU1157
 3809 0032 2046     		mov	r0, r4
 3810 0034 FFF7FEFF 		bl	ADC_Disable
 3811              	.LVL290:
 3812 0038 0546     		mov	r5, r0
 3813              	.LVL291:
 3814              	.L243:
1817:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 3815              		.loc 1 1817 5 is_stmt 1 view .LVU1158
1817:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 3816              		.loc 1 1817 8 is_stmt 0 view .LVU1159
 3817 003a 3DB9     		cbnz	r5, .L244
1820:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY,
 3818              		.loc 1 1820 7 is_stmt 1 view .LVU1160
 3819 003c A36D     		ldr	r3, [r4, #88]
 3820 003e 23F48073 		bic	r3, r3, #256
 3821 0042 23F00103 		bic	r3, r3, #1
 3822 0046 43F00103 		orr	r3, r3, #1
 3823 004a A365     		str	r3, [r4, #88]
 3824              	.L244:
1826:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 3825              		.loc 1 1826 5 view .LVU1161
 3826 004c 2268     		ldr	r2, [r4]
 3827 004e D368     		ldr	r3, [r2, #12]
 3828 0050 23F00103 		bic	r3, r3, #1
 3829 0054 D360     		str	r3, [r2, #12]
 3830              	.LVL292:
 3831              	.L240:
1829:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3832              		.loc 1 1829 3 view .LVU1162
1829:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3833              		.loc 1 1829 3 view .LVU1163
 3834 0056 0023     		movs	r3, #0
 3835 0058 84F85430 		strb	r3, [r4, #84]
1829:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3836              		.loc 1 1829 3 view .LVU1164
1831:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
 3837              		.loc 1 1831 3 view .LVU1165
 3838              	.LVL293:
 3839              	.L239:
1832:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3840              		.loc 1 1832 1 is_stmt 0 view .LVU1166
 3841 005c 2846     		mov	r0, r5
 3842 005e 38BD     		pop	{r3, r4, r5, pc}
 3843              	.LVL294:
 3844              	.L247:
1791:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3845              		.loc 1 1791 7 is_stmt 1 view .LVU1167
ARM GAS  /tmp/ccN8TuGv.s 			page 233


1791:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3846              		.loc 1 1791 24 is_stmt 0 view .LVU1168
 3847 0060 FFF7FEFF 		bl	HAL_DMA_Abort
 3848              	.LVL295:
1794:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 3849              		.loc 1 1794 7 is_stmt 1 view .LVU1169
1794:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 3850              		.loc 1 1794 10 is_stmt 0 view .LVU1170
 3851 0064 0546     		mov	r5, r0
 3852 0066 0028     		cmp	r0, #0
 3853 0068 DDD0     		beq	.L241
1797:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
 3854              		.loc 1 1797 9 is_stmt 1 view .LVU1171
 3855 006a A36D     		ldr	r3, [r4, #88]
 3856 006c 43F04003 		orr	r3, r3, #64
 3857 0070 A365     		str	r3, [r4, #88]
 3858 0072 D8E7     		b	.L241
 3859              	.LVL296:
 3860              	.L242:
1813:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 3861              		.loc 1 1813 7 view .LVU1172
1813:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     }
 3862              		.loc 1 1813 13 is_stmt 0 view .LVU1173
 3863 0074 2046     		mov	r0, r4
 3864 0076 FFF7FEFF 		bl	ADC_Disable
 3865              	.LVL297:
 3866 007a DEE7     		b	.L243
 3867              	.LVL298:
 3868              	.L245:
1779:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3869              		.loc 1 1779 3 view .LVU1174
 3870 007c 0225     		movs	r5, #2
 3871 007e EDE7     		b	.L239
 3872              		.cfi_endproc
 3873              	.LFE1104:
 3875              		.section	.text.HAL_ADC_AnalogWDGConfig,"ax",%progbits
 3876              		.align	1
 3877              		.global	HAL_ADC_AnalogWDGConfig
 3878              		.syntax unified
 3879              		.thumb
 3880              		.thumb_func
 3881              		.fpu softvfp
 3883              	HAL_ADC_AnalogWDGConfig:
 3884              	.LVL299:
 3885              	.LFB1112:
2386:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 3886              		.loc 1 2386 1 is_stmt 1 view -0
 3887              		.cfi_startproc
 3888              		@ args = 0, pretend = 0, frame = 0
 3889              		@ frame_needed = 0, uses_anonymous_args = 0
2386:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 3890              		.loc 1 2386 1 is_stmt 0 view .LVU1176
 3891 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3892              	.LCFI33:
 3893              		.cfi_def_cfa_offset 24
 3894              		.cfi_offset 3, -24
 3895              		.cfi_offset 4, -20
ARM GAS  /tmp/ccN8TuGv.s 			page 234


 3896              		.cfi_offset 5, -16
 3897              		.cfi_offset 6, -12
 3898              		.cfi_offset 7, -8
 3899              		.cfi_offset 14, -4
2387:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tmp_awd_high_threshold_shifted;
 3900              		.loc 1 2387 3 is_stmt 1 view .LVU1177
 3901              	.LVL300:
2388:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tmp_awd_low_threshold_shifted;
 3902              		.loc 1 2388 3 view .LVU1178
2389:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t backup_setting_adc_enable_state = 0UL;
 3903              		.loc 1 2389 3 view .LVU1179
2390:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3904              		.loc 1 2390 3 view .LVU1180
2393:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(pAnalogWDGConfig->WatchdogNumber));
 3905              		.loc 1 2393 3 view .LVU1181
2394:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(pAnalogWDGConfig->WatchdogMode));
 3906              		.loc 1 2394 3 view .LVU1182
2395:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(pAnalogWDGConfig->ITMode));
 3907              		.loc 1 2395 3 view .LVU1183
2396:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3908              		.loc 1 2396 3 view .LVU1184
2398:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 3909              		.loc 1 2398 3 view .LVU1185
2400:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 3910              		.loc 1 2400 5 view .LVU1186
2404:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 3911              		.loc 1 2404 3 view .LVU1187
2415:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->LowThreshold));
 3912              		.loc 1 2415 5 view .LVU1188
2416:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 3913              		.loc 1 2416 5 view .LVU1189
2419:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3914              		.loc 1 2419 3 view .LVU1190
2419:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3915              		.loc 1 2419 3 view .LVU1191
 3916 0002 90F85430 		ldrb	r3, [r0, #84]	@ zero_extendqisi2
 3917 0006 012B     		cmp	r3, #1
 3918 0008 00F02381 		beq	.L277
 3919 000c 0446     		mov	r4, r0
 3920 000e 0D46     		mov	r5, r1
2419:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3921              		.loc 1 2419 3 discriminator 2 view .LVU1192
 3922 0010 0123     		movs	r3, #1
 3923 0012 80F85430 		strb	r3, [r0, #84]
2419:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 3924              		.loc 1 2419 3 discriminator 2 view .LVU1193
2425:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 3925              		.loc 1 2425 3 discriminator 2 view .LVU1194
2425:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 3926              		.loc 1 2425 7 is_stmt 0 discriminator 2 view .LVU1195
 3927 0016 0368     		ldr	r3, [r0]
 3928              	.LVL301:
 3929              	.LBB304:
 3930              	.LBI304:
4366:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 3931              		.loc 2 4366 26 is_stmt 1 discriminator 2 view .LVU1196
 3932              	.LBB305:
ARM GAS  /tmp/ccN8TuGv.s 			page 235


 3933              		.loc 2 4368 3 discriminator 2 view .LVU1197
 3934              		.loc 2 4368 12 is_stmt 0 discriminator 2 view .LVU1198
 3935 0018 9A68     		ldr	r2, [r3, #8]
 3936              		.loc 2 4368 74 discriminator 2 view .LVU1199
 3937 001a 12F0040F 		tst	r2, #4
 3938 001e 40F0EF80 		bne	.L278
 3939              	.LVL302:
 3940              		.loc 2 4368 74 discriminator 2 view .LVU1200
 3941              	.LBE305:
 3942              	.LBE304:
2428:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 3943              		.loc 1 2428 5 is_stmt 1 view .LVU1201
2428:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 3944              		.loc 1 2428 25 is_stmt 0 view .LVU1202
 3945 0022 0A68     		ldr	r2, [r1]
2428:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 3946              		.loc 1 2428 8 view .LVU1203
 3947 0024 8C49     		ldr	r1, .L293
 3948              	.LVL303:
2428:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     {
 3949              		.loc 1 2428 8 view .LVU1204
 3950 0026 8A42     		cmp	r2, r1
 3951 0028 1AD0     		beq	.L283
2487:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 3952              		.loc 1 2487 7 is_stmt 1 view .LVU1205
2487:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 3953              		.loc 1 2487 31 is_stmt 0 view .LVU1206
 3954 002a 6968     		ldr	r1, [r5, #4]
2487:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 3955              		.loc 1 2487 7 view .LVU1207
 3956 002c B1F5000F 		cmp	r1, #8388608
 3957 0030 00F08480 		beq	.L258
 3958 0034 B1F5400F 		cmp	r1, #12582912
 3959 0038 40F0AE80 		bne	.L259
2492:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           {
 3960              		.loc 1 2492 11 is_stmt 1 view .LVU1208
2492:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           {
 3961              		.loc 1 2492 14 is_stmt 0 view .LVU1209
 3962 003c 8749     		ldr	r1, .L293+4
 3963 003e 8A42     		cmp	r2, r1
 3964 0040 5AD0     		beq	.L284
2498:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           }
 3965              		.loc 1 2498 13 is_stmt 1 view .LVU1210
 3966 0042 AA68     		ldr	r2, [r5, #8]
 3967 0044 C2F31101 		ubfx	r1, r2, #0, #18
 3968 0048 0029     		cmp	r1, #0
 3969 004a 6DD1     		bne	.L265
2498:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           }
 3970              		.loc 1 2498 13 is_stmt 0 discriminator 1 view .LVU1211
 3971 004c C2F38462 		ubfx	r2, r2, #26, #5
 3972 0050 0121     		movs	r1, #1
 3973 0052 9140     		lsls	r1, r1, r2
 3974              	.L266:
2498:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           }
 3975              		.loc 1 2498 13 discriminator 4 view .LVU1212
 3976 0054 D3F8A420 		ldr	r2, [r3, #164]
 3977 0058 0A43     		orrs	r2, r2, r1
ARM GAS  /tmp/ccN8TuGv.s 			page 236


 3978 005a C3F8A420 		str	r2, [r3, #164]
 3979 005e 83E0     		b	.L264
 3980              	.L283:
2432:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 3981              		.loc 1 2432 7 is_stmt 1 view .LVU1213
 3982              	.LVL304:
 3983              	.LBB306:
 3984              	.LBI306:
4239:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 3985              		.loc 2 4239 26 view .LVU1214
 3986              	.LBB307:
4241:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 3987              		.loc 2 4241 3 view .LVU1215
4241:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 3988              		.loc 2 4241 12 is_stmt 0 view .LVU1216
 3989 0060 9A68     		ldr	r2, [r3, #8]
4241:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 3990              		.loc 2 4241 68 view .LVU1217
 3991 0062 12F00102 		ands	r2, r2, #1
 3992 0066 27D0     		beq	.L279
 3993              	.LVL305:
4241:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 3994              		.loc 2 4241 68 view .LVU1218
 3995              	.LBE307:
 3996              	.LBE306:
2434:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         tmp_hal_status = ADC_Disable(hadc);
 3997              		.loc 1 2434 9 is_stmt 1 view .LVU1219
2435:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
 3998              		.loc 1 2435 9 view .LVU1220
2435:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
 3999              		.loc 1 2435 26 is_stmt 0 view .LVU1221
 4000 0068 FFF7FEFF 		bl	ADC_Disable
 4001              	.LVL306:
2434:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         tmp_hal_status = ADC_Disable(hadc);
 4002              		.loc 1 2434 41 view .LVU1222
 4003 006c 0122     		movs	r2, #1
 4004              	.LVL307:
 4005              	.L252:
2441:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 4006              		.loc 1 2441 7 is_stmt 1 view .LVU1223
2441:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 4007              		.loc 1 2441 31 is_stmt 0 view .LVU1224
 4008 006e 6B68     		ldr	r3, [r5, #4]
2441:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 4009              		.loc 1 2441 7 view .LVU1225
 4010 0070 B3F5000F 		cmp	r3, #8388608
 4011 0074 22D0     		beq	.L253
 4012 0076 B3F5400F 		cmp	r3, #12582912
 4013 007a 29D1     		bne	.L254
2444:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                                           __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel
 4014              		.loc 1 2444 11 is_stmt 1 view .LVU1226
 4015 007c 2668     		ldr	r6, [r4]
2445:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           break;
 4016              		.loc 1 2445 43 is_stmt 0 view .LVU1227
 4017 007e A968     		ldr	r1, [r5, #8]
 4018              	.LVL308:
 4019              	.LBB308:
ARM GAS  /tmp/ccN8TuGv.s 			page 237


 4020              	.LBI308:
3607:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 4021              		.loc 2 3607 22 is_stmt 1 view .LVU1228
 4022              	.LBB309:
3613:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 4023              		.loc 2 3613 3 view .LVU1229
3615:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   {
 4024              		.loc 2 3615 3 view .LVU1230
3617:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   }
 4025              		.loc 2 3617 5 view .LVU1231
3624:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
 4026              		.loc 2 3624 3 view .LVU1232
 4027 0080 F368     		ldr	r3, [r6, #12]
 4028 0082 23F0F943 		bic	r3, r3, #2088763392
 4029 0086 23F48003 		bic	r3, r3, #4194304
 4030 008a 01F0F841 		and	r1, r1, #2080374784
 4031              	.LVL309:
3624:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
 4032              		.loc 2 3624 3 is_stmt 0 view .LVU1233
 4033 008e 41F44001 		orr	r1, r1, #12582912
 4034 0092 0B43     		orrs	r3, r3, r1
 4035 0094 F360     		str	r3, [r6, #12]
 4036              	.LVL310:
 4037              	.L255:
3624:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
 4038              		.loc 2 3624 3 view .LVU1234
 4039              	.LBE309:
 4040              	.LBE308:
2457:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 4041              		.loc 1 2457 7 is_stmt 1 view .LVU1235
2457:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 4042              		.loc 1 2457 10 is_stmt 0 view .LVU1236
 4043 0096 1ABB     		cbnz	r2, .L285
 4044              	.LVL311:
 4045              	.L256:
2466:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 4046              		.loc 1 2466 7 is_stmt 1 view .LVU1237
 4047 0098 A36D     		ldr	r3, [r4, #88]
 4048 009a 23F48033 		bic	r3, r3, #65536
 4049 009e A365     		str	r3, [r4, #88]
2472:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 4050              		.loc 1 2472 7 view .LVU1238
 4051 00a0 2368     		ldr	r3, [r4]
 4052              	.LVL312:
 4053              	.LBB310:
 4054              	.LBI310:
4369:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4370:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4371:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4372:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get ADC group regular command of conversion stop state
4373:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll CR       ADSTP          LL_ADC_REG_IsStopConversionOngoing
4374:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4375:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval 0: no command of conversion stop is on going on ADC group regular.
4376:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4377:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_IsStopConversionOngoing(ADC_TypeDef *ADCx)
4378:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4379:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP)) ? 1UL : 0UL);
ARM GAS  /tmp/ccN8TuGv.s 			page 238


4380:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4381:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4382:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4383:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
4384:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         all ADC configurations: all ADC resolutions and
4385:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         all oversampling increased data width (for devices
4386:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         with feature oversampling).
4387:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll DR       DATA           LL_ADC_REG_ReadConversionData32
4388:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4389:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Value between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
4390:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4391:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_ReadConversionData32(ADC_TypeDef *ADCx)
4392:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4393:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
4394:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4395:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4396:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4397:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
4398:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC resolution 12 bits.
4399:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
4400:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         can increase data width, function for extended range
4401:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
4402:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll DR       DATA           LL_ADC_REG_ReadConversionData12
4403:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4404:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
4405:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4406:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
4407:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4408:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
4409:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4410:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4411:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4412:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
4413:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC resolution 10 bits.
4414:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
4415:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         can increase data width, function for extended range
4416:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
4417:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll DR       DATA           LL_ADC_REG_ReadConversionData10
4418:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4419:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0x3FF
4420:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4421:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData10(ADC_TypeDef *ADCx)
4422:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4423:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
4424:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4425:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4426:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4427:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
4428:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC resolution 8 bits.
4429:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
4430:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         can increase data width, function for extended range
4431:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
4432:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll DR       DATA           LL_ADC_REG_ReadConversionData8
4433:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4434:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xFF
4435:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4436:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint8_t LL_ADC_REG_ReadConversionData8(ADC_TypeDef *ADCx)
ARM GAS  /tmp/ccN8TuGv.s 			page 239


4437:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4438:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return (uint8_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
4439:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4440:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4441:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4442:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
4443:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC resolution 6 bits.
4444:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
4445:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         can increase data width, function for extended range
4446:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
4447:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll DR       DATA           LL_ADC_REG_ReadConversionData6
4448:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4449:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x3F
4450:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4451:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint8_t LL_ADC_REG_ReadConversionData6(ADC_TypeDef *ADCx)
4452:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4453:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return (uint8_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
4454:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4455:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4456:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4457:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
4458:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4459:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4460:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EF_FLAG_Management ADC flag management
4461:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
4462:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4463:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4464:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4465:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get flag ADC ready.
4466:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, flag LL_ADC_FLAG_ADRDY is raised when the ADC
4467:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         is enabled and when conversion clock is active.
4468:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (not only core clock: this ADC has a dual clock domain)
4469:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll ISR      ADRDY          LL_ADC_IsActiveFlag_ADRDY
4470:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4471:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval State of bit (1 or 0).
4472:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4473:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
4474:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4475:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
4476:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4477:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4478:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4479:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get flag ADC channel configuration ready.
4480:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, after modifying sequencer
4481:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         it is mandatory to wait for the assertion of CCRDY flag
4482:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         using @ref LL_ADC_IsActiveFlag_CCRDY().
4483:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Otherwise, performing some actions (configuration update,
4484:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         ADC conversion start, ... ) will be ignored.
4485:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         Functions requiring wait for CCRDY flag are:
4486:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @ref LL_ADC_REG_SetSequencerLength()
4487:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @ref LL_ADC_REG_SetSequencerRanks()
4488:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @ref LL_ADC_REG_SetSequencerChannels()
4489:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @ref LL_ADC_REG_SetSequencerChAdd()
4490:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @ref LL_ADC_REG_SetSequencerChRem()
4491:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @ref LL_ADC_REG_SetSequencerScanDirection()
4492:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         @ref LL_ADC_REG_SetSequencerConfigurable()
4493:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   Duration of ADC channel configuration ready: CCRDY handshake
ARM GAS  /tmp/ccN8TuGv.s 			page 240


4494:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         requires 1APB + 2 ADC + 3 APB cycles after the channel configuration
4495:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         has been changed.
4496:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll ISR      CCRDY          LL_ADC_IsActiveFlag_CCRDY
4497:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4498:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval State of bit (1 or 0).
4499:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4500:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_CCRDY(ADC_TypeDef *ADCx)
4501:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4502:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_CCRDY) == (LL_ADC_FLAG_CCRDY)) ? 1UL : 0UL);
4503:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4504:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4505:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4506:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get flag ADC group regular end of unitary conversion.
4507:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
4508:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4509:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval State of bit (1 or 0).
4510:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4511:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
4512:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4513:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
4514:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4515:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4516:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4517:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get flag ADC group regular end of sequence conversions.
4518:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll ISR      EOS            LL_ADC_IsActiveFlag_EOS
4519:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4520:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval State of bit (1 or 0).
4521:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4522:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOS(ADC_TypeDef *ADCx)
4523:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4524:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_EOS) == (LL_ADC_FLAG_EOS)) ? 1UL : 0UL);
4525:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4526:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4527:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4528:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get flag ADC group regular overrun.
4529:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll ISR      OVR            LL_ADC_IsActiveFlag_OVR
4530:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4531:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval State of bit (1 or 0).
4532:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4533:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_OVR(ADC_TypeDef *ADCx)
4534:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4535:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_OVR) == (LL_ADC_FLAG_OVR)) ? 1UL : 0UL);
4536:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4537:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4538:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4539:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get flag ADC group regular end of sampling phase.
4540:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll ISR      EOSMP          LL_ADC_IsActiveFlag_EOSMP
4541:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4542:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval State of bit (1 or 0).
4543:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4544:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOSMP(ADC_TypeDef *ADCx)
4545:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4546:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_EOSMP) == (LL_ADC_FLAG_EOSMP)) ? 1UL : 0UL);
4547:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4548:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4549:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4550:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get flag ADC analog watchdog 1 flag
ARM GAS  /tmp/ccN8TuGv.s 			page 241


4551:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll ISR      AWD1           LL_ADC_IsActiveFlag_AWD1
4552:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4553:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval State of bit (1 or 0).
4554:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4555:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_AWD1(ADC_TypeDef *ADCx)
4556:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4557:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_AWD1) == (LL_ADC_FLAG_AWD1)) ? 1UL : 0UL);
4558:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4559:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4560:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4561:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get flag ADC analog watchdog 2.
4562:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll ISR      AWD2           LL_ADC_IsActiveFlag_AWD2
4563:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4564:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval State of bit (1 or 0).
4565:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4566:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_AWD2(ADC_TypeDef *ADCx)
4567:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4568:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_AWD2) == (LL_ADC_FLAG_AWD2)) ? 1UL : 0UL);
4569:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4570:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4571:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4572:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get flag ADC analog watchdog 3.
4573:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll ISR      AWD3           LL_ADC_IsActiveFlag_AWD3
4574:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4575:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval State of bit (1 or 0).
4576:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4577:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_AWD3(ADC_TypeDef *ADCx)
4578:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4579:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_AWD3) == (LL_ADC_FLAG_AWD3)) ? 1UL : 0UL);
4580:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4581:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4582:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4583:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Get flag ADC end of calibration.
4584:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll ISR      EOCAL          LL_ADC_IsActiveFlag_EOCAL
4585:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4586:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval State of bit (1 or 0).
4587:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4588:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOCAL(ADC_TypeDef *ADCx)
4589:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4590:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_EOCAL) == (LL_ADC_FLAG_EOCAL)) ? 1UL : 0UL);
4591:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4592:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4593:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4594:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Clear flag ADC ready.
4595:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @note   On this STM32 series, flag LL_ADC_FLAG_ADRDY is raised when the ADC
4596:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         is enabled and when conversion clock is active.
4597:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   *         (not only core clock: this ADC has a dual clock domain)
4598:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll ISR      ADRDY          LL_ADC_ClearFlag_ADRDY
4599:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4600:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
4601:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4602:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_ADRDY(ADC_TypeDef *ADCx)
4603:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4604:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_ADRDY);
4605:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4606:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4607:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
ARM GAS  /tmp/ccN8TuGv.s 			page 242


4608:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Clear flag ADC channel configuration ready.
4609:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll ISR      CCRDY          LL_ADC_ClearFlag_CCRDY
4610:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4611:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval State of bit (1 or 0).
4612:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4613:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_CCRDY(ADC_TypeDef *ADCx)
4614:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4615:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_CCRDY);
4616:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4617:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4618:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4619:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Clear flag ADC group regular end of unitary conversion.
4620:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
4621:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4622:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
4623:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4624:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
4625:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4626:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
4627:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4628:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4629:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4630:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Clear flag ADC group regular end of sequence conversions.
4631:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll ISR      EOS            LL_ADC_ClearFlag_EOS
4632:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4633:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
4634:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4635:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_EOS(ADC_TypeDef *ADCx)
4636:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4637:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOS);
4638:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4639:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4640:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4641:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Clear flag ADC group regular overrun.
4642:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll ISR      OVR            LL_ADC_ClearFlag_OVR
4643:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4644:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
4645:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4646:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_OVR(ADC_TypeDef *ADCx)
4647:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4648:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_OVR);
4649:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4650:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4651:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4652:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Clear flag ADC group regular end of sampling phase.
4653:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll ISR      EOSMP          LL_ADC_ClearFlag_EOSMP
4654:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4655:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
4656:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4657:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_EOSMP(ADC_TypeDef *ADCx)
4658:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4659:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOSMP);
4660:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4661:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4662:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4663:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Clear flag ADC analog watchdog 1.
4664:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
ARM GAS  /tmp/ccN8TuGv.s 			page 243


4665:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4666:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
4667:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4668:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
 4055              		.loc 2 4668 22 view .LVU1239
 4056              	.LBB311:
4669:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4670:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 4057              		.loc 2 4670 3 view .LVU1240
 4058 00a2 8022     		movs	r2, #128
 4059 00a4 1A60     		str	r2, [r3]
 4060              	.LVL313:
 4061              		.loc 2 4670 3 is_stmt 0 view .LVU1241
 4062              	.LBE311:
 4063              	.LBE310:
2475:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 4064              		.loc 1 2475 7 is_stmt 1 view .LVU1242
2475:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 4065              		.loc 1 2475 27 is_stmt 0 view .LVU1243
 4066 00a6 2B7B     		ldrb	r3, [r5, #12]	@ zero_extendqisi2
2475:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 4067              		.loc 1 2475 10 view .LVU1244
 4068 00a8 012B     		cmp	r3, #1
 4069 00aa 1FD0     		beq	.L286
2481:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
 4070              		.loc 1 2481 9 is_stmt 1 view .LVU1245
 4071 00ac 2268     		ldr	r2, [r4]
 4072              	.LVL314:
 4073              	.LBB312:
 4074              	.LBI312:
4671:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4672:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4673:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4674:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Clear flag ADC analog watchdog 2.
4675:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
4676:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4677:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
4678:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4679:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
4680:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4681:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
4682:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4683:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4684:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4685:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Clear flag ADC analog watchdog 3.
4686:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
4687:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4688:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
4689:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4690:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
4691:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4692:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
4693:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4694:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4695:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4696:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Clear flag ADC end of calibration.
4697:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll ISR      EOCAL          LL_ADC_ClearFlag_EOCAL
ARM GAS  /tmp/ccN8TuGv.s 			page 244


4698:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4699:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
4700:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4701:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_EOCAL(ADC_TypeDef *ADCx)
4702:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4703:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOCAL);
4704:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4705:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4706:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4707:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @}
4708:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4709:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4710:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /** @defgroup ADC_LL_EF_IT_Management ADC IT management
4711:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @{
4712:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4713:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4714:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4715:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Enable ADC ready.
4716:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll IER      ADRDYIE        LL_ADC_EnableIT_ADRDY
4717:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4718:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
4719:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4720:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_ADRDY(ADC_TypeDef *ADCx)
4721:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4722:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_ADRDY);
4723:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4724:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4725:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4726:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Enable interruption ADC channel configuration ready.
4727:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll IER      CCRDYIE        LL_ADC_EnableIT_CCRDY
4728:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4729:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval State of bit (1 or 0).
4730:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4731:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_CCRDY(ADC_TypeDef *ADCx)
4732:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4733:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_FLAG_CCRDY);
4734:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4735:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4736:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4737:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Enable interruption ADC group regular end of unitary conversion.
4738:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll IER      EOCIE          LL_ADC_EnableIT_EOC
4739:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4740:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
4741:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4742:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_EOC(ADC_TypeDef *ADCx)
4743:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4744:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_EOC);
4745:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4746:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4747:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4748:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Enable interruption ADC group regular end of sequence conversions.
4749:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll IER      EOSIE          LL_ADC_EnableIT_EOS
4750:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4751:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
4752:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4753:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_EOS(ADC_TypeDef *ADCx)
4754:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
ARM GAS  /tmp/ccN8TuGv.s 			page 245


4755:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_EOS);
4756:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4757:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4758:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4759:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Enable ADC group regular interruption overrun.
4760:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll IER      OVRIE          LL_ADC_EnableIT_OVR
4761:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4762:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
4763:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4764:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_OVR(ADC_TypeDef *ADCx)
4765:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4766:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_OVR);
4767:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4768:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4769:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4770:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Enable interruption ADC group regular end of sampling.
4771:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll IER      EOSMPIE        LL_ADC_EnableIT_EOSMP
4772:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4773:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
4774:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4775:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_EOSMP(ADC_TypeDef *ADCx)
4776:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4777:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_EOSMP);
4778:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4779:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4780:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4781:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Enable interruption ADC analog watchdog 1.
4782:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
4783:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4784:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
4785:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4786:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
4787:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4788:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
4789:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4790:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4791:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4792:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Enable interruption ADC analog watchdog 2.
4793:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
4794:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4795:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
4796:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4797:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
4798:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4799:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
4800:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4801:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4802:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4803:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Enable interruption ADC analog watchdog 3.
4804:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
4805:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4806:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
4807:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4808:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
4809:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4810:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
4811:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
ARM GAS  /tmp/ccN8TuGv.s 			page 246


4812:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4813:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4814:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Enable interruption ADC end of calibration.
4815:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll IER      EOCALIE        LL_ADC_EnableIT_EOCAL
4816:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4817:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
4818:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4819:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_EOCAL(ADC_TypeDef *ADCx)
4820:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4821:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_EOCAL);
4822:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4823:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4824:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4825:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Disable interruption ADC ready.
4826:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll IER      ADRDYIE        LL_ADC_DisableIT_ADRDY
4827:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4828:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
4829:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4830:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_ADRDY(ADC_TypeDef *ADCx)
4831:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4832:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_ADRDY);
4833:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4834:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4835:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4836:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Disable interruption ADC channel configuration ready.
4837:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll IER      CCRDYIE        LL_ADC_DisableIT_CCRDY
4838:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4839:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval State of bit (1 or 0).
4840:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4841:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_CCRDY(ADC_TypeDef *ADCx)
4842:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4843:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_FLAG_CCRDY);
4844:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4845:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4846:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4847:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Disable interruption ADC group regular end of unitary conversion.
4848:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
4849:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4850:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
4851:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4852:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
4853:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4854:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
4855:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4856:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4857:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4858:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Disable interruption ADC group regular end of sequence conversions.
4859:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll IER      EOSIE          LL_ADC_DisableIT_EOS
4860:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4861:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
4862:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4863:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
4864:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4865:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
4866:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4867:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4868:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
ARM GAS  /tmp/ccN8TuGv.s 			page 247


4869:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Disable interruption ADC group regular overrun.
4870:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll IER      OVRIE          LL_ADC_DisableIT_OVR
4871:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4872:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
4873:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4874:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_OVR(ADC_TypeDef *ADCx)
4875:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4876:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_OVR);
4877:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4878:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4879:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4880:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Disable interruption ADC group regular end of sampling.
4881:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll IER      EOSMPIE        LL_ADC_DisableIT_EOSMP
4882:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4883:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
4884:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4885:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_EOSMP(ADC_TypeDef *ADCx)
4886:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4887:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOSMP);
4888:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4889:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4890:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4891:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Disable interruption ADC analog watchdog 1.
4892:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
4893:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4894:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
4895:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4896:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
 4075              		.loc 2 4896 22 view .LVU1246
 4076              	.LBB313:
4897:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4898:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 4077              		.loc 2 4898 3 view .LVU1247
 4078 00ae 5368     		ldr	r3, [r2, #4]
 4079 00b0 23F08003 		bic	r3, r3, #128
 4080 00b4 5360     		str	r3, [r2, #4]
4899:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 4081              		.loc 2 4899 1 is_stmt 0 view .LVU1248
 4082 00b6 A4E0     		b	.L250
 4083              	.LVL315:
 4084              	.L279:
 4085              		.loc 2 4899 1 view .LVU1249
 4086              	.LBE313:
 4087              	.LBE312:
2387:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tmp_awd_high_threshold_shifted;
 4088              		.loc 1 2387 21 view .LVU1250
 4089 00b8 0020     		movs	r0, #0
 4090              	.LVL316:
2387:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tmp_awd_high_threshold_shifted;
 4091              		.loc 1 2387 21 view .LVU1251
 4092 00ba D8E7     		b	.L252
 4093              	.LVL317:
 4094              	.L253:
2449:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           break;
 4095              		.loc 1 2449 11 is_stmt 1 view .LVU1252
 4096 00bc 2168     		ldr	r1, [r4]
 4097              	.LVL318:
ARM GAS  /tmp/ccN8TuGv.s 			page 248


 4098              	.LBB314:
 4099              	.LBI314:
3607:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 4100              		.loc 2 3607 22 view .LVU1253
 4101              	.LBB315:
3613:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 4102              		.loc 2 3613 3 view .LVU1254
3615:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   {
 4103              		.loc 2 3615 3 view .LVU1255
3617:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   }
 4104              		.loc 2 3617 5 view .LVU1256
3624:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
 4105              		.loc 2 3624 3 view .LVU1257
 4106 00be CB68     		ldr	r3, [r1, #12]
 4107 00c0 23F0F943 		bic	r3, r3, #2088763392
 4108 00c4 23F48003 		bic	r3, r3, #4194304
 4109 00c8 43F40003 		orr	r3, r3, #8388608
 4110 00cc CB60     		str	r3, [r1, #12]
3627:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 4111              		.loc 2 3627 1 is_stmt 0 view .LVU1258
 4112 00ce E2E7     		b	.L255
 4113              	.LVL319:
 4114              	.L254:
3627:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 4115              		.loc 2 3627 1 view .LVU1259
 4116              	.LBE315:
 4117              	.LBE314:
2453:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           break;
 4118              		.loc 1 2453 11 is_stmt 1 view .LVU1260
 4119 00d0 2168     		ldr	r1, [r4]
 4120              	.LVL320:
 4121              	.LBB316:
 4122              	.LBI316:
3607:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 4123              		.loc 2 3607 22 view .LVU1261
 4124              	.LBB317:
3613:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 4125              		.loc 2 3613 3 view .LVU1262
3615:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   {
 4126              		.loc 2 3615 3 view .LVU1263
3617:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   }
 4127              		.loc 2 3617 5 view .LVU1264
3624:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
 4128              		.loc 2 3624 3 view .LVU1265
 4129 00d2 CB68     		ldr	r3, [r1, #12]
 4130 00d4 23F0F943 		bic	r3, r3, #2088763392
 4131 00d8 23F48003 		bic	r3, r3, #4194304
 4132 00dc CB60     		str	r3, [r1, #12]
3627:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 4133              		.loc 2 3627 1 is_stmt 0 view .LVU1266
 4134 00de DAE7     		b	.L255
 4135              	.LVL321:
 4136              	.L285:
3627:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 4137              		.loc 2 3627 1 view .LVU1267
 4138              	.LBE317:
 4139              	.LBE316:
ARM GAS  /tmp/ccN8TuGv.s 			page 249


2459:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
 4140              		.loc 1 2459 9 is_stmt 1 view .LVU1268
2459:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
 4141              		.loc 1 2459 12 is_stmt 0 view .LVU1269
 4142 00e0 0028     		cmp	r0, #0
 4143 00e2 D9D1     		bne	.L256
2461:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
 4144              		.loc 1 2461 11 is_stmt 1 view .LVU1270
2461:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
 4145              		.loc 1 2461 28 is_stmt 0 view .LVU1271
 4146 00e4 2046     		mov	r0, r4
 4147              	.LVL322:
2461:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
 4148              		.loc 1 2461 28 view .LVU1272
 4149 00e6 FFF7FEFF 		bl	ADC_Enable
 4150              	.LVL323:
2461:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
 4151              		.loc 1 2461 28 view .LVU1273
 4152 00ea D5E7     		b	.L256
 4153              	.L286:
2477:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       }
 4154              		.loc 1 2477 9 is_stmt 1 view .LVU1274
 4155 00ec 2268     		ldr	r2, [r4]
 4156              	.LVL324:
 4157              	.LBB318:
 4158              	.LBI318:
4786:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 4159              		.loc 2 4786 22 view .LVU1275
 4160              	.LBB319:
4788:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 4161              		.loc 2 4788 3 view .LVU1276
 4162 00ee 5368     		ldr	r3, [r2, #4]
 4163 00f0 43F08003 		orr	r3, r3, #128
 4164 00f4 5360     		str	r3, [r2, #4]
4789:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 4165              		.loc 2 4789 1 is_stmt 0 view .LVU1277
 4166 00f6 84E0     		b	.L250
 4167              	.LVL325:
 4168              	.L284:
4789:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 4169              		.loc 2 4789 1 view .LVU1278
 4170              	.LBE319:
 4171              	.LBE318:
2494:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           }
 4172              		.loc 1 2494 13 is_stmt 1 view .LVU1279
 4173 00f8 AA68     		ldr	r2, [r5, #8]
 4174 00fa C2F31101 		ubfx	r1, r2, #0, #18
 4175 00fe 49B9     		cbnz	r1, .L261
2494:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           }
 4176              		.loc 1 2494 13 is_stmt 0 discriminator 1 view .LVU1280
 4177 0100 C2F38462 		ubfx	r2, r2, #26, #5
 4178 0104 0121     		movs	r1, #1
 4179 0106 9140     		lsls	r1, r1, r2
 4180              	.L262:
2494:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           }
 4181              		.loc 1 2494 13 discriminator 4 view .LVU1281
 4182 0108 D3F8A020 		ldr	r2, [r3, #160]
ARM GAS  /tmp/ccN8TuGv.s 			page 250


 4183 010c 0A43     		orrs	r2, r2, r1
 4184 010e C3F8A020 		str	r2, [r3, #160]
 4185 0112 29E0     		b	.L264
 4186              	.L261:
 4187              	.LVL326:
 4188              	.LBB320:
 4189              	.LBI320:
1048:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 4190              		.loc 3 1048 31 is_stmt 1 discriminator 2 view .LVU1282
 4191              	.LBB321:
1050:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 4192              		.loc 3 1050 3 discriminator 2 view .LVU1283
1055:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 4193              		.loc 3 1055 4 discriminator 2 view .LVU1284
 4194              		.syntax unified
 4195              	@ 1055 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4196 0114 92FAA2F2 		rbit r2, r2
 4197              	@ 0 "" 2
 4198              	.LVL327:
1068:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4199              		.loc 3 1068 3 discriminator 2 view .LVU1285
1068:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4200              		.loc 3 1068 3 is_stmt 0 discriminator 2 view .LVU1286
 4201              		.thumb
 4202              		.syntax unified
 4203              	.LBE321:
 4204              	.LBE320:
 4205              	.LBB322:
 4206              	.LBI322:
1078:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 4207              		.loc 3 1078 30 is_stmt 1 discriminator 2 view .LVU1287
 4208              	.LBB323:
1089:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 4209              		.loc 3 1089 3 discriminator 2 view .LVU1288
1089:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 4210              		.loc 3 1089 6 is_stmt 0 discriminator 2 view .LVU1289
 4211 0118 22B1     		cbz	r2, .L280
 4212              		.loc 3 1093 3 is_stmt 1 view .LVU1290
 4213              		.loc 3 1093 10 is_stmt 0 view .LVU1291
 4214 011a B2FA82F2 		clz	r2, r2
 4215              	.LVL328:
 4216              	.L263:
 4217              		.loc 3 1093 10 view .LVU1292
 4218              	.LBE323:
 4219              	.LBE322:
2494:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           }
 4220              		.loc 1 2494 13 view .LVU1293
 4221 011e 0121     		movs	r1, #1
 4222 0120 9140     		lsls	r1, r1, r2
 4223 0122 F1E7     		b	.L262
 4224              	.LVL329:
 4225              	.L280:
 4226              	.LBB325:
 4227              	.LBB324:
1091:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 4228              		.loc 3 1091 12 view .LVU1294
 4229 0124 2022     		movs	r2, #32
ARM GAS  /tmp/ccN8TuGv.s 			page 251


 4230              	.LVL330:
1091:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 4231              		.loc 3 1091 12 view .LVU1295
 4232 0126 FAE7     		b	.L263
 4233              	.L265:
 4234              	.LVL331:
1091:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 4235              		.loc 3 1091 12 view .LVU1296
 4236              	.LBE324:
 4237              	.LBE325:
 4238              	.LBB326:
 4239              	.LBI326:
1048:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 4240              		.loc 3 1048 31 is_stmt 1 discriminator 2 view .LVU1297
 4241              	.LBB327:
1050:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 4242              		.loc 3 1050 3 discriminator 2 view .LVU1298
1055:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 4243              		.loc 3 1055 4 discriminator 2 view .LVU1299
 4244              		.syntax unified
 4245              	@ 1055 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4246 0128 92FAA2F2 		rbit r2, r2
 4247              	@ 0 "" 2
 4248              	.LVL332:
1068:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4249              		.loc 3 1068 3 discriminator 2 view .LVU1300
1068:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 4250              		.loc 3 1068 3 is_stmt 0 discriminator 2 view .LVU1301
 4251              		.thumb
 4252              		.syntax unified
 4253              	.LBE327:
 4254              	.LBE326:
 4255              	.LBB328:
 4256              	.LBI328:
1078:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 4257              		.loc 3 1078 30 is_stmt 1 discriminator 2 view .LVU1302
 4258              	.LBB329:
1089:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 4259              		.loc 3 1089 3 discriminator 2 view .LVU1303
1089:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 4260              		.loc 3 1089 6 is_stmt 0 discriminator 2 view .LVU1304
 4261 012c 22B1     		cbz	r2, .L281
 4262              		.loc 3 1093 3 is_stmt 1 view .LVU1305
 4263              		.loc 3 1093 10 is_stmt 0 view .LVU1306
 4264 012e B2FA82F2 		clz	r2, r2
 4265              	.LVL333:
 4266              	.L267:
 4267              		.loc 3 1093 10 view .LVU1307
 4268              	.LBE329:
 4269              	.LBE328:
2498:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           }
 4270              		.loc 1 2498 13 view .LVU1308
 4271 0132 0121     		movs	r1, #1
 4272 0134 9140     		lsls	r1, r1, r2
 4273 0136 8DE7     		b	.L266
 4274              	.LVL334:
 4275              	.L281:
ARM GAS  /tmp/ccN8TuGv.s 			page 252


 4276              	.LBB331:
 4277              	.LBB330:
1091:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 4278              		.loc 3 1091 12 view .LVU1309
 4279 0138 2022     		movs	r2, #32
 4280              	.LVL335:
1091:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 4281              		.loc 3 1091 12 view .LVU1310
 4282 013a FAE7     		b	.L267
 4283              	.L258:
1091:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 4284              		.loc 3 1091 12 view .LVU1311
 4285              	.LBE330:
 4286              	.LBE331:
2503:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           break;
 4287              		.loc 1 2503 11 is_stmt 1 view .LVU1312
 4288              	.LVL336:
 4289              	.LBB332:
 4290              	.LBI332:
3607:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 4291              		.loc 2 3607 22 view .LVU1313
 4292              	.LBB333:
3613:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 4293              		.loc 2 3613 3 view .LVU1314
3615:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   {
 4294              		.loc 2 3615 3 view .LVU1315
3615:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   {
 4295              		.loc 2 3615 6 is_stmt 0 view .LVU1316
 4296 013c 4649     		ldr	r1, .L293
 4297 013e 8A42     		cmp	r2, r1
 4298 0140 28D0     		beq	.L287
3621:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   }
 4299              		.loc 2 3621 5 is_stmt 1 view .LVU1317
3621:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   }
 4300              		.loc 2 3621 12 is_stmt 0 view .LVU1318
 4301 0142 A033     		adds	r3, r3, #160
 4302              	.LVL337:
3621:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   }
 4303              		.loc 2 3621 12 view .LVU1319
 4304 0144 510D     		lsrs	r1, r2, #21
 4305 0146 8900     		lsls	r1, r1, #2
 4306 0148 01F00401 		and	r1, r1, #4
 4307 014c 0B44     		add	r3, r3, r1
 4308              	.LVL338:
 4309              	.L269:
3624:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
 4310              		.loc 2 3624 3 is_stmt 1 view .LVU1320
 4311 014e 1968     		ldr	r1, [r3]
 4312 0150 22F00340 		bic	r0, r2, #-2097152000
 4313              	.LVL339:
3624:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
 4314              		.loc 2 3624 3 is_stmt 0 view .LVU1321
 4315 0154 20F47010 		bic	r0, r0, #3932160
 4316 0158 21EA0001 		bic	r1, r1, r0
 4317 015c 22F07F42 		bic	r2, r2, #-16777216
 4318              	.LVL340:
3624:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
ARM GAS  /tmp/ccN8TuGv.s 			page 253


 4319              		.loc 2 3624 3 view .LVU1322
 4320 0160 22F4F802 		bic	r2, r2, #8126464
 4321 0164 0A43     		orrs	r2, r2, r1
 4322 0166 1A60     		str	r2, [r3]
 4323              	.LVL341:
 4324              	.L264:
3624:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
 4325              		.loc 2 3624 3 view .LVU1323
 4326              	.LBE333:
 4327              	.LBE332:
2511:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 4328              		.loc 1 2511 7 is_stmt 1 view .LVU1324
2511:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 4329              		.loc 1 2511 27 is_stmt 0 view .LVU1325
 4330 0168 2A68     		ldr	r2, [r5]
2511:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****       {
 4331              		.loc 1 2511 10 view .LVU1326
 4332 016a 3C4B     		ldr	r3, .L293+4
 4333 016c 9A42     		cmp	r2, r3
 4334 016e 27D0     		beq	.L288
2536:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 4335              		.loc 1 2536 9 is_stmt 1 view .LVU1327
 4336 0170 A36D     		ldr	r3, [r4, #88]
 4337 0172 23F48023 		bic	r3, r3, #262144
 4338 0176 A365     		str	r3, [r4, #88]
2542:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 4339              		.loc 1 2542 9 view .LVU1328
 4340 0178 2368     		ldr	r3, [r4]
 4341              	.LVL342:
 4342              	.LBB335:
 4343              	.LBI335:
4690:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 4344              		.loc 2 4690 22 view .LVU1329
 4345              	.LBB336:
4692:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 4346              		.loc 2 4692 3 view .LVU1330
 4347 017a 4FF40072 		mov	r2, #512
 4348 017e 1A60     		str	r2, [r3]
 4349              	.LVL343:
4692:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 4350              		.loc 2 4692 3 is_stmt 0 view .LVU1331
 4351              	.LBE336:
 4352              	.LBE335:
2545:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
 4353              		.loc 1 2545 9 is_stmt 1 view .LVU1332
2545:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
 4354              		.loc 1 2545 29 is_stmt 0 view .LVU1333
 4355 0180 2B7B     		ldrb	r3, [r5, #12]	@ zero_extendqisi2
2545:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
 4356              		.loc 1 2545 12 view .LVU1334
 4357 0182 012B     		cmp	r3, #1
 4358 0184 35D0     		beq	.L289
2551:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
 4359              		.loc 1 2551 11 is_stmt 1 view .LVU1335
 4360 0186 2268     		ldr	r2, [r4]
 4361              	.LVL344:
 4362              	.LBB337:
ARM GAS  /tmp/ccN8TuGv.s 			page 254


 4363              	.LBI337:
4900:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4901:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4902:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Disable interruption ADC analog watchdog 2.
4903:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
4904:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4905:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
4906:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4907:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
4908:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4909:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
4910:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
4911:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
4912:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** /**
4913:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @brief  Disable interruption ADC analog watchdog 3.
4914:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
4915:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @param  ADCx ADC instance
4916:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   * @retval None
4917:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   */
4918:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
 4364              		.loc 2 4918 22 view .LVU1336
 4365              	.LBB338:
4919:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
4920:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 4366              		.loc 2 4920 3 view .LVU1337
 4367 0188 5368     		ldr	r3, [r2, #4]
 4368 018a 23F40073 		bic	r3, r3, #512
 4369 018e 5360     		str	r3, [r2, #4]
 4370              	.LBE338:
 4371              	.LBE337:
2387:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tmp_awd_high_threshold_shifted;
 4372              		.loc 1 2387 21 is_stmt 0 view .LVU1338
 4373 0190 0020     		movs	r0, #0
 4374              	.LBB340:
 4375              	.LBB339:
4921:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 4376              		.loc 2 4921 1 view .LVU1339
 4377 0192 36E0     		b	.L250
 4378              	.LVL345:
 4379              	.L287:
 4380              		.loc 2 4921 1 view .LVU1340
 4381              	.LBE339:
 4382              	.LBE340:
 4383              	.LBB341:
 4384              	.LBB334:
3617:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   }
 4385              		.loc 2 3617 5 is_stmt 1 view .LVU1341
3617:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   }
 4386              		.loc 2 3617 10 is_stmt 0 view .LVU1342
 4387 0194 0C33     		adds	r3, r3, #12
 4388              	.LVL346:
3617:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   }
 4389              		.loc 2 3617 10 view .LVU1343
 4390 0196 DAE7     		b	.L269
 4391              	.LVL347:
 4392              	.L259:
3617:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   }
ARM GAS  /tmp/ccN8TuGv.s 			page 255


 4393              		.loc 2 3617 10 view .LVU1344
 4394              	.LBE334:
 4395              	.LBE341:
2507:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****           break;
 4396              		.loc 1 2507 11 is_stmt 1 view .LVU1345
 4397              	.LBB342:
 4398              	.LBI342:
3607:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 4399              		.loc 2 3607 22 view .LVU1346
 4400              	.LBB343:
3613:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 4401              		.loc 2 3613 3 view .LVU1347
3615:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   {
 4402              		.loc 2 3615 3 view .LVU1348
3615:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   {
 4403              		.loc 2 3615 6 is_stmt 0 view .LVU1349
 4404 0198 2F49     		ldr	r1, .L293
 4405 019a 8A42     		cmp	r2, r1
 4406 019c 0ED0     		beq	.L290
3621:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   }
 4407              		.loc 2 3621 5 is_stmt 1 view .LVU1350
3621:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   }
 4408              		.loc 2 3621 12 is_stmt 0 view .LVU1351
 4409 019e A033     		adds	r3, r3, #160
 4410              	.LVL348:
3621:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   }
 4411              		.loc 2 3621 12 view .LVU1352
 4412 01a0 510D     		lsrs	r1, r2, #21
 4413 01a2 8900     		lsls	r1, r1, #2
 4414 01a4 01F00401 		and	r1, r1, #4
 4415 01a8 0B44     		add	r3, r3, r1
 4416              	.LVL349:
 4417              	.L271:
3624:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
 4418              		.loc 2 3624 3 is_stmt 1 view .LVU1353
 4419 01aa 1968     		ldr	r1, [r3]
 4420 01ac 22F00342 		bic	r2, r2, #-2097152000
 4421              	.LVL350:
3624:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
 4422              		.loc 2 3624 3 is_stmt 0 view .LVU1354
 4423 01b0 22F47012 		bic	r2, r2, #3932160
 4424 01b4 21EA0202 		bic	r2, r1, r2
 4425 01b8 1A60     		str	r2, [r3]
 4426              	.LVL351:
3627:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 4427              		.loc 2 3627 1 view .LVU1355
 4428 01ba D5E7     		b	.L264
 4429              	.LVL352:
 4430              	.L290:
3617:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   }
 4431              		.loc 2 3617 5 is_stmt 1 view .LVU1356
3617:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   }
 4432              		.loc 2 3617 10 is_stmt 0 view .LVU1357
 4433 01bc 0C33     		adds	r3, r3, #12
 4434              	.LVL353:
3617:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   }
 4435              		.loc 2 3617 10 view .LVU1358
ARM GAS  /tmp/ccN8TuGv.s 			page 256


 4436 01be F4E7     		b	.L271
 4437              	.LVL354:
 4438              	.L288:
3617:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****   }
 4439              		.loc 2 3617 10 view .LVU1359
 4440              	.LBE343:
 4441              	.LBE342:
2514:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 4442              		.loc 1 2514 9 is_stmt 1 view .LVU1360
 4443 01c0 A36D     		ldr	r3, [r4, #88]
 4444 01c2 23F40033 		bic	r3, r3, #131072
 4445 01c6 A365     		str	r3, [r4, #88]
2520:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 4446              		.loc 1 2520 9 view .LVU1361
 4447 01c8 2368     		ldr	r3, [r4]
 4448              	.LVL355:
 4449              	.LBB344:
 4450              	.LBI344:
4679:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 4451              		.loc 2 4679 22 view .LVU1362
 4452              	.LBB345:
4681:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 4453              		.loc 2 4681 3 view .LVU1363
 4454 01ca 4FF48072 		mov	r2, #256
 4455 01ce 1A60     		str	r2, [r3]
 4456              	.LVL356:
4681:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 4457              		.loc 2 4681 3 is_stmt 0 view .LVU1364
 4458              	.LBE345:
 4459              	.LBE344:
2523:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
 4460              		.loc 1 2523 9 is_stmt 1 view .LVU1365
2523:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
 4461              		.loc 1 2523 29 is_stmt 0 view .LVU1366
 4462 01d0 2B7B     		ldrb	r3, [r5, #12]	@ zero_extendqisi2
2523:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         {
 4463              		.loc 1 2523 12 view .LVU1367
 4464 01d2 012B     		cmp	r3, #1
 4465 01d4 06D0     		beq	.L291
2529:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
 4466              		.loc 1 2529 11 is_stmt 1 view .LVU1368
 4467 01d6 2268     		ldr	r2, [r4]
 4468              	.LVL357:
 4469              	.LBB346:
 4470              	.LBI346:
4907:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 4471              		.loc 2 4907 22 view .LVU1369
 4472              	.LBB347:
4909:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 4473              		.loc 2 4909 3 view .LVU1370
 4474 01d8 5368     		ldr	r3, [r2, #4]
 4475 01da 23F48073 		bic	r3, r3, #256
 4476 01de 5360     		str	r3, [r2, #4]
 4477              	.LBE347:
 4478              	.LBE346:
2387:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tmp_awd_high_threshold_shifted;
 4479              		.loc 1 2387 21 is_stmt 0 view .LVU1371
ARM GAS  /tmp/ccN8TuGv.s 			page 257


 4480 01e0 0020     		movs	r0, #0
 4481              	.LBB349:
 4482              	.LBB348:
4910:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 4483              		.loc 2 4910 1 view .LVU1372
 4484 01e2 0EE0     		b	.L250
 4485              	.LVL358:
 4486              	.L291:
4910:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 4487              		.loc 2 4910 1 view .LVU1373
 4488              	.LBE348:
 4489              	.LBE349:
2525:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
 4490              		.loc 1 2525 11 is_stmt 1 view .LVU1374
 4491 01e4 2268     		ldr	r2, [r4]
 4492              	.LVL359:
 4493              	.LBB350:
 4494              	.LBI350:
4797:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 4495              		.loc 2 4797 22 view .LVU1375
 4496              	.LBB351:
4799:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 4497              		.loc 2 4799 3 view .LVU1376
 4498 01e6 5368     		ldr	r3, [r2, #4]
 4499 01e8 43F48073 		orr	r3, r3, #256
 4500 01ec 5360     		str	r3, [r2, #4]
 4501              	.LBE351:
 4502              	.LBE350:
2387:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tmp_awd_high_threshold_shifted;
 4503              		.loc 1 2387 21 is_stmt 0 view .LVU1377
 4504 01ee 0020     		movs	r0, #0
 4505              	.LBB353:
 4506              	.LBB352:
4800:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 4507              		.loc 2 4800 1 view .LVU1378
 4508 01f0 07E0     		b	.L250
 4509              	.LVL360:
 4510              	.L289:
4800:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 4511              		.loc 2 4800 1 view .LVU1379
 4512              	.LBE352:
 4513              	.LBE353:
2547:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****         }
 4514              		.loc 1 2547 11 is_stmt 1 view .LVU1380
 4515 01f2 2268     		ldr	r2, [r4]
 4516              	.LVL361:
 4517              	.LBB354:
 4518              	.LBI354:
4808:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** {
 4519              		.loc 2 4808 22 view .LVU1381
 4520              	.LBB355:
4810:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** }
 4521              		.loc 2 4810 3 view .LVU1382
 4522 01f4 5368     		ldr	r3, [r2, #4]
 4523 01f6 43F40073 		orr	r3, r3, #512
 4524 01fa 5360     		str	r3, [r2, #4]
 4525              	.LBE355:
ARM GAS  /tmp/ccN8TuGv.s 			page 258


 4526              	.LBE354:
2387:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tmp_awd_high_threshold_shifted;
 4527              		.loc 1 2387 21 is_stmt 0 view .LVU1383
 4528 01fc 0020     		movs	r0, #0
 4529              	.LBB357:
 4530              	.LBB356:
4811:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 4531              		.loc 2 4811 1 view .LVU1384
 4532 01fe 00E0     		b	.L250
 4533              	.LVL362:
 4534              	.L278:
4811:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 4535              		.loc 2 4811 1 view .LVU1385
 4536              	.LBE356:
 4537              	.LBE357:
2387:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   uint32_t tmp_awd_high_threshold_shifted;
 4538              		.loc 1 2387 21 view .LVU1386
 4539 0200 0020     		movs	r0, #0
 4540              	.LVL363:
 4541              	.L250:
2559:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 4542              		.loc 1 2559 3 is_stmt 1 view .LVU1387
2559:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 4543              		.loc 1 2559 23 is_stmt 0 view .LVU1388
 4544 0202 2A68     		ldr	r2, [r5]
2559:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   {
 4545              		.loc 1 2559 6 view .LVU1389
 4546 0204 144B     		ldr	r3, .L293
 4547 0206 9A42     		cmp	r2, r3
 4548 0208 15D0     		beq	.L292
2573:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     tmp_awd_low_threshold_shifted  = pAnalogWDGConfig->LowThreshold;
 4549              		.loc 1 2573 5 is_stmt 1 view .LVU1390
2573:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     tmp_awd_low_threshold_shifted  = pAnalogWDGConfig->LowThreshold;
 4550              		.loc 1 2573 36 is_stmt 0 view .LVU1391
 4551 020a 2F69     		ldr	r7, [r5, #16]
 4552              	.LVL364:
2574:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 4553              		.loc 1 2574 5 is_stmt 1 view .LVU1392
2574:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 4554              		.loc 1 2574 36 is_stmt 0 view .LVU1393
 4555 020c 6E69     		ldr	r6, [r5, #20]
 4556              	.LVL365:
 4557              	.L276:
2578:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****                                   tmp_awd_low_threshold_shifted);
 4558              		.loc 1 2578 3 is_stmt 1 view .LVU1394
 4559 020e 2168     		ldr	r1, [r4]
 4560              	.LVL366:
 4561              	.LBB358:
 4562              	.LBI358:
3823:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****                                                      uint32_t AWDThresholdLowValue)
 4563              		.loc 2 3823 22 view .LVU1395
 4564              	.LBB359:
3831:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 4565              		.loc 2 3831 3 view .LVU1396
3831:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 4566              		.loc 2 3831 25 is_stmt 0 view .LVU1397
 4567 0210 2031     		adds	r1, r1, #32
ARM GAS  /tmp/ccN8TuGv.s 			page 259


 4568              	.LVL367:
3831:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 4569              		.loc 2 3831 25 view .LVU1398
 4570 0212 C2F30155 		ubfx	r5, r2, #20, #2
 4571 0216 C2F34052 		ubfx	r2, r2, #21, #1
 4572              	.LVL368:
3831:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h **** 
 4573              		.loc 2 3831 25 view .LVU1399
 4574 021a 2A44     		add	r2, r2, r5
 4575              	.LVL369:
3833:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              ADC_TR1_HT1 | ADC_TR1_LT1,
 4576              		.loc 2 3833 3 is_stmt 1 view .LVU1400
 4577 021c 51F82230 		ldr	r3, [r1, r2, lsl #2]
 4578 0220 03F0F023 		and	r3, r3, #-268374016
 4579 0224 46EA0745 		orr	r5, r6, r7, lsl #16
 4580 0228 2B43     		orrs	r3, r3, r5
 4581 022a 41F82230 		str	r3, [r1, r2, lsl #2]
 4582              	.LVL370:
3833:Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_adc.h ****              ADC_TR1_HT1 | ADC_TR1_LT1,
 4583              		.loc 2 3833 3 is_stmt 0 view .LVU1401
 4584              	.LBE359:
 4585              	.LBE358:
2581:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 4586              		.loc 1 2581 3 is_stmt 1 view .LVU1402
2581:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 4587              		.loc 1 2581 3 view .LVU1403
 4588 022e 0023     		movs	r3, #0
 4589 0230 84F85430 		strb	r3, [r4, #84]
2581:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 4590              		.loc 1 2581 3 view .LVU1404
2583:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** }
 4591              		.loc 1 2583 3 view .LVU1405
 4592              	.LVL371:
 4593              	.L249:
2584:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 4594              		.loc 1 2584 1 is_stmt 0 view .LVU1406
 4595 0234 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4596              	.LVL372:
 4597              	.L292:
2564:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     tmp_awd_low_threshold_shifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->Low
 4598              		.loc 1 2564 5 is_stmt 1 view .LVU1407
2564:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     tmp_awd_low_threshold_shifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->Low
 4599              		.loc 1 2564 38 is_stmt 0 view .LVU1408
 4600 0236 2F69     		ldr	r7, [r5, #16]
 4601 0238 2168     		ldr	r1, [r4]
 4602 023a CB68     		ldr	r3, [r1, #12]
 4603 023c C3F3C103 		ubfx	r3, r3, #3, #2
 4604 0240 5B00     		lsls	r3, r3, #1
2564:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****     tmp_awd_low_threshold_shifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->Low
 4605              		.loc 1 2564 36 view .LVU1409
 4606 0242 9F40     		lsls	r7, r7, r3
 4607              	.LVL373:
2565:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 4608              		.loc 1 2565 5 is_stmt 1 view .LVU1410
2565:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 4609              		.loc 1 2565 38 is_stmt 0 view .LVU1411
 4610 0244 6E69     		ldr	r6, [r5, #20]
ARM GAS  /tmp/ccN8TuGv.s 			page 260


 4611 0246 CD68     		ldr	r5, [r1, #12]
 4612              	.LVL374:
2565:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 4613              		.loc 1 2565 38 view .LVU1412
 4614 0248 C5F3C105 		ubfx	r5, r5, #3, #2
 4615 024c 6D00     		lsls	r5, r5, #1
2565:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 4616              		.loc 1 2565 36 view .LVU1413
 4617 024e AE40     		lsls	r6, r6, r5
 4618              	.LVL375:
2565:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c ****   }
 4619              		.loc 1 2565 36 view .LVU1414
 4620 0250 DDE7     		b	.L276
 4621              	.LVL376:
 4622              	.L277:
2419:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 4623              		.loc 1 2419 3 view .LVU1415
 4624 0252 0220     		movs	r0, #2
 4625              	.LVL377:
2419:Drivers/STM32WLxx_HAL_Driver/Src/stm32wlxx_hal_adc.c **** 
 4626              		.loc 1 2419 3 view .LVU1416
 4627 0254 EEE7     		b	.L249
 4628              	.L294:
 4629 0256 00BF     		.align	2
 4630              	.L293:
 4631 0258 0000C07C 		.word	2092957696
 4632 025c FFFF1300 		.word	1310719
 4633              		.cfi_endproc
 4634              	.LFE1112:
 4636              		.text
 4637              	.Letext0:
 4638              		.file 4 "/home/eatkinso/Downloads/gcc-arm-none-eabi-10.3-2021.07/gcc-arm-none-eabi-10.3-2021.07/ar
 4639              		.file 5 "/home/eatkinso/Downloads/gcc-arm-none-eabi-10.3-2021.07/gcc-arm-none-eabi-10.3-2021.07/ar
 4640              		.file 6 "Drivers/CMSIS/Device/ST/STM32WLxx/Include/stm32wl55xx.h"
 4641              		.file 7 "Drivers/CMSIS/Device/ST/STM32WLxx/Include/stm32wlxx.h"
 4642              		.file 8 "Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_hal_def.h"
 4643              		.file 9 "Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_hal_dma.h"
 4644              		.file 10 "Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_hal_adc.h"
 4645              		.file 11 "Drivers/CMSIS/Device/ST/STM32WLxx/Include/system_stm32wlxx.h"
 4646              		.file 12 "Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_ll_dma.h"
 4647              		.file 13 "Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_hal.h"
 4648              		.file 14 "Drivers/STM32WLxx_HAL_Driver/Inc/stm32wlxx_hal_adc_ex.h"
ARM GAS  /tmp/ccN8TuGv.s 			page 261


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32wlxx_hal_adc.c
     /tmp/ccN8TuGv.s:16     .text.HAL_ADC_MspInit:0000000000000000 $t
     /tmp/ccN8TuGv.s:24     .text.HAL_ADC_MspInit:0000000000000000 HAL_ADC_MspInit
     /tmp/ccN8TuGv.s:40     .text.HAL_ADC_Init:0000000000000000 $t
     /tmp/ccN8TuGv.s:47     .text.HAL_ADC_Init:0000000000000000 HAL_ADC_Init
     /tmp/ccN8TuGv.s:627    .text.HAL_ADC_Init:0000000000000248 $d
     /tmp/ccN8TuGv.s:635    .text.HAL_ADC_MspDeInit:0000000000000000 $t
     /tmp/ccN8TuGv.s:642    .text.HAL_ADC_MspDeInit:0000000000000000 HAL_ADC_MspDeInit
     /tmp/ccN8TuGv.s:657    .text.HAL_ADC_PollForConversion:0000000000000000 $t
     /tmp/ccN8TuGv.s:664    .text.HAL_ADC_PollForConversion:0000000000000000 HAL_ADC_PollForConversion
     /tmp/ccN8TuGv.s:862    .text.HAL_ADC_PollForEvent:0000000000000000 $t
     /tmp/ccN8TuGv.s:869    .text.HAL_ADC_PollForEvent:0000000000000000 HAL_ADC_PollForEvent
     /tmp/ccN8TuGv.s:1038   .text.HAL_ADC_GetValue:0000000000000000 $t
     /tmp/ccN8TuGv.s:1045   .text.HAL_ADC_GetValue:0000000000000000 HAL_ADC_GetValue
     /tmp/ccN8TuGv.s:1066   .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
     /tmp/ccN8TuGv.s:1073   .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
     /tmp/ccN8TuGv.s:1088   .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 $t
     /tmp/ccN8TuGv.s:1095   .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 HAL_ADC_ConvHalfCpltCallback
     /tmp/ccN8TuGv.s:1110   .text.ADC_DMAHalfConvCplt:0000000000000000 $t
     /tmp/ccN8TuGv.s:1116   .text.ADC_DMAHalfConvCplt:0000000000000000 ADC_DMAHalfConvCplt
     /tmp/ccN8TuGv.s:1143   .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 $t
     /tmp/ccN8TuGv.s:1150   .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 HAL_ADC_LevelOutOfWindowCallback
     /tmp/ccN8TuGv.s:1165   .text.HAL_ADC_ErrorCallback:0000000000000000 $t
     /tmp/ccN8TuGv.s:1172   .text.HAL_ADC_ErrorCallback:0000000000000000 HAL_ADC_ErrorCallback
     /tmp/ccN8TuGv.s:1187   .text.ADC_DMAError:0000000000000000 $t
     /tmp/ccN8TuGv.s:1193   .text.ADC_DMAError:0000000000000000 ADC_DMAError
     /tmp/ccN8TuGv.s:1227   .text.ADC_DMAConvCplt:0000000000000000 $t
     /tmp/ccN8TuGv.s:1233   .text.ADC_DMAConvCplt:0000000000000000 ADC_DMAConvCplt
     /tmp/ccN8TuGv.s:1367   .text.HAL_ADC_IRQHandler:0000000000000000 $t
     /tmp/ccN8TuGv.s:1374   .text.HAL_ADC_IRQHandler:0000000000000000 HAL_ADC_IRQHandler
     /tmp/ccN8TuGv.s:1676   .text.HAL_ADC_ConfigChannel:0000000000000000 $t
     /tmp/ccN8TuGv.s:1683   .text.HAL_ADC_ConfigChannel:0000000000000000 HAL_ADC_ConfigChannel
     /tmp/ccN8TuGv.s:2288   .text.HAL_ADC_ConfigChannel:0000000000000224 $d
     /tmp/ccN8TuGv.s:2299   .text.HAL_ADC_GetState:0000000000000000 $t
     /tmp/ccN8TuGv.s:2306   .text.HAL_ADC_GetState:0000000000000000 HAL_ADC_GetState
     /tmp/ccN8TuGv.s:2325   .text.HAL_ADC_GetError:0000000000000000 $t
     /tmp/ccN8TuGv.s:2332   .text.HAL_ADC_GetError:0000000000000000 HAL_ADC_GetError
     /tmp/ccN8TuGv.s:2351   .text.ADC_ConversionStop:0000000000000000 $t
     /tmp/ccN8TuGv.s:2358   .text.ADC_ConversionStop:0000000000000000 ADC_ConversionStop
     /tmp/ccN8TuGv.s:2487   .text.ADC_Enable:0000000000000000 $t
     /tmp/ccN8TuGv.s:2494   .text.ADC_Enable:0000000000000000 ADC_Enable
     /tmp/ccN8TuGv.s:2727   .text.ADC_Enable:00000000000000d0 $d
     /tmp/ccN8TuGv.s:2735   .text.HAL_ADC_Start:0000000000000000 $t
     /tmp/ccN8TuGv.s:2742   .text.HAL_ADC_Start:0000000000000000 HAL_ADC_Start
     /tmp/ccN8TuGv.s:2862   .text.HAL_ADC_Start_IT:0000000000000000 $t
     /tmp/ccN8TuGv.s:2869   .text.HAL_ADC_Start_IT:0000000000000000 HAL_ADC_Start_IT
     /tmp/ccN8TuGv.s:3027   .text.HAL_ADC_Start_DMA:0000000000000000 $t
     /tmp/ccN8TuGv.s:3034   .text.HAL_ADC_Start_DMA:0000000000000000 HAL_ADC_Start_DMA
     /tmp/ccN8TuGv.s:3225   .text.HAL_ADC_Start_DMA:00000000000000b8 $d
     /tmp/ccN8TuGv.s:3232   .text.ADC_Disable:0000000000000000 $t
     /tmp/ccN8TuGv.s:3239   .text.ADC_Disable:0000000000000000 ADC_Disable
     /tmp/ccN8TuGv.s:3407   .text.HAL_ADC_DeInit:0000000000000000 $t
     /tmp/ccN8TuGv.s:3414   .text.HAL_ADC_DeInit:0000000000000000 HAL_ADC_DeInit
     /tmp/ccN8TuGv.s:3568   .text.HAL_ADC_DeInit:00000000000000a4 $d
     /tmp/ccN8TuGv.s:3574   .text.HAL_ADC_Stop:0000000000000000 $t
     /tmp/ccN8TuGv.s:3581   .text.HAL_ADC_Stop:0000000000000000 HAL_ADC_Stop
ARM GAS  /tmp/ccN8TuGv.s 			page 262


     /tmp/ccN8TuGv.s:3657   .text.HAL_ADC_Stop_IT:0000000000000000 $t
     /tmp/ccN8TuGv.s:3664   .text.HAL_ADC_Stop_IT:0000000000000000 HAL_ADC_Stop_IT
     /tmp/ccN8TuGv.s:3745   .text.HAL_ADC_Stop_DMA:0000000000000000 $t
     /tmp/ccN8TuGv.s:3752   .text.HAL_ADC_Stop_DMA:0000000000000000 HAL_ADC_Stop_DMA
     /tmp/ccN8TuGv.s:3876   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 $t
     /tmp/ccN8TuGv.s:3883   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 HAL_ADC_AnalogWDGConfig
     /tmp/ccN8TuGv.s:4631   .text.HAL_ADC_AnalogWDGConfig:0000000000000258 $d

UNDEFINED SYMBOLS
SystemCoreClock
HAL_GetTick
HAL_ADCEx_EndOfSamplingCallback
HAL_ADCEx_LevelOutOfWindow2Callback
HAL_ADCEx_LevelOutOfWindow3Callback
HAL_ADCEx_ChannelConfigReadyCallback
HAL_DMA_Start_IT
HAL_DMA_Abort
