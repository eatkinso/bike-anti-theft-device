
UART_nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048f8  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08004a30  08004a30  00014a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b2c  08004b2c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004b2c  08004b2c  00014b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b34  08004b34  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b34  08004b34  00014b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b38  08004b38  00014b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004b3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  2000000c  08004b48  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  08004b48  00020298  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000114a9  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026e8  00000000  00000000  000314df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  00033bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f60  00000000  00000000  00034c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c3f9  00000000  00000000  00035b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ffdc  00000000  00000000  00051f59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af22c  00000000  00000000  00061f35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00111161  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042b0  00000000  00000000  001111b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000000c 	.word	0x2000000c
 8000154:	00000000 	.word	0x00000000
 8000158:	08004a18 	.word	0x08004a18

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000010 	.word	0x20000010
 8000174:	08004a18 	.word	0x08004a18

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000188:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800018c:	f000 b974 	b.w	8000478 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9e08      	ldr	r6, [sp, #32]
 80001ae:	460d      	mov	r5, r1
 80001b0:	4604      	mov	r4, r0
 80001b2:	4688      	mov	r8, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14d      	bne.n	8000254 <__udivmoddi4+0xac>
 80001b8:	428a      	cmp	r2, r1
 80001ba:	4694      	mov	ip, r2
 80001bc:	d968      	bls.n	8000290 <__udivmoddi4+0xe8>
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	b152      	cbz	r2, 80001da <__udivmoddi4+0x32>
 80001c4:	fa01 f302 	lsl.w	r3, r1, r2
 80001c8:	f1c2 0120 	rsb	r1, r2, #32
 80001cc:	fa20 f101 	lsr.w	r1, r0, r1
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	ea41 0803 	orr.w	r8, r1, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80001de:	0c21      	lsrs	r1, r4, #16
 80001e0:	fbb8 fef5 	udiv	lr, r8, r5
 80001e4:	fa1f f78c 	uxth.w	r7, ip
 80001e8:	fb05 831e 	mls	r3, r5, lr, r8
 80001ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f0:	fb0e f107 	mul.w	r1, lr, r7
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d90b      	bls.n	8000210 <__udivmoddi4+0x68>
 80001f8:	eb1c 0303 	adds.w	r3, ip, r3
 80001fc:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 8000200:	f080 811e 	bcs.w	8000440 <__udivmoddi4+0x298>
 8000204:	4299      	cmp	r1, r3
 8000206:	f240 811b 	bls.w	8000440 <__udivmoddi4+0x298>
 800020a:	f1ae 0e02 	sub.w	lr, lr, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a5b      	subs	r3, r3, r1
 8000212:	b2a4      	uxth	r4, r4
 8000214:	fbb3 f0f5 	udiv	r0, r3, r5
 8000218:	fb05 3310 	mls	r3, r5, r0, r3
 800021c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000220:	fb00 f707 	mul.w	r7, r0, r7
 8000224:	42a7      	cmp	r7, r4
 8000226:	d90a      	bls.n	800023e <__udivmoddi4+0x96>
 8000228:	eb1c 0404 	adds.w	r4, ip, r4
 800022c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000230:	f080 8108 	bcs.w	8000444 <__udivmoddi4+0x29c>
 8000234:	42a7      	cmp	r7, r4
 8000236:	f240 8105 	bls.w	8000444 <__udivmoddi4+0x29c>
 800023a:	4464      	add	r4, ip
 800023c:	3802      	subs	r0, #2
 800023e:	1be4      	subs	r4, r4, r7
 8000240:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa8>
 8000248:	40d4      	lsrs	r4, r2
 800024a:	2300      	movs	r3, #0
 800024c:	e9c6 4300 	strd	r4, r3, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	428b      	cmp	r3, r1
 8000256:	d908      	bls.n	800026a <__udivmoddi4+0xc2>
 8000258:	2e00      	cmp	r6, #0
 800025a:	f000 80ee 	beq.w	800043a <__udivmoddi4+0x292>
 800025e:	2100      	movs	r1, #0
 8000260:	e9c6 0500 	strd	r0, r5, [r6]
 8000264:	4608      	mov	r0, r1
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f183 	clz	r1, r3
 800026e:	2900      	cmp	r1, #0
 8000270:	d14a      	bne.n	8000308 <__udivmoddi4+0x160>
 8000272:	42ab      	cmp	r3, r5
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd4>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80f9 	bhi.w	800046e <__udivmoddi4+0x2c6>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb65 0303 	sbc.w	r3, r5, r3
 8000282:	2001      	movs	r0, #1
 8000284:	4698      	mov	r8, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e2      	beq.n	8000250 <__udivmoddi4+0xa8>
 800028a:	e9c6 4800 	strd	r4, r8, [r6]
 800028e:	e7df      	b.n	8000250 <__udivmoddi4+0xa8>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xec>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 8091 	bne.w	80003c0 <__udivmoddi4+0x218>
 800029e:	eba1 050c 	sub.w	r5, r1, ip
 80002a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a6:	fa1f fe8c 	uxth.w	lr, ip
 80002aa:	2101      	movs	r1, #1
 80002ac:	fbb5 f3f7 	udiv	r3, r5, r7
 80002b0:	fb07 5013 	mls	r0, r7, r3, r5
 80002b4:	0c25      	lsrs	r5, r4, #16
 80002b6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ba:	fb0e f003 	mul.w	r0, lr, r3
 80002be:	42a8      	cmp	r0, r5
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x12c>
 80002c2:	eb1c 0505 	adds.w	r5, ip, r5
 80002c6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x12a>
 80002cc:	42a8      	cmp	r0, r5
 80002ce:	f200 80cb 	bhi.w	8000468 <__udivmoddi4+0x2c0>
 80002d2:	4643      	mov	r3, r8
 80002d4:	1a2d      	subs	r5, r5, r0
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0f7 	udiv	r0, r5, r7
 80002dc:	fb07 5510 	mls	r5, r7, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb0e fe00 	mul.w	lr, lr, r0
 80002e8:	45a6      	cmp	lr, r4
 80002ea:	d908      	bls.n	80002fe <__udivmoddi4+0x156>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80002f4:	d202      	bcs.n	80002fc <__udivmoddi4+0x154>
 80002f6:	45a6      	cmp	lr, r4
 80002f8:	f200 80bb 	bhi.w	8000472 <__udivmoddi4+0x2ca>
 80002fc:	4628      	mov	r0, r5
 80002fe:	eba4 040e 	sub.w	r4, r4, lr
 8000302:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000306:	e79e      	b.n	8000246 <__udivmoddi4+0x9e>
 8000308:	f1c1 0720 	rsb	r7, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000312:	ea4c 0c03 	orr.w	ip, ip, r3
 8000316:	fa20 f407 	lsr.w	r4, r0, r7
 800031a:	fa05 f301 	lsl.w	r3, r5, r1
 800031e:	431c      	orrs	r4, r3
 8000320:	40fd      	lsrs	r5, r7
 8000322:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000326:	fa00 f301 	lsl.w	r3, r0, r1
 800032a:	fbb5 f8f9 	udiv	r8, r5, r9
 800032e:	0c20      	lsrs	r0, r4, #16
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	fb09 5518 	mls	r5, r9, r8, r5
 8000338:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800033c:	fb08 f00e 	mul.w	r0, r8, lr
 8000340:	42a8      	cmp	r0, r5
 8000342:	fa02 f201 	lsl.w	r2, r2, r1
 8000346:	d90b      	bls.n	8000360 <__udivmoddi4+0x1b8>
 8000348:	eb1c 0505 	adds.w	r5, ip, r5
 800034c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000350:	f080 8088 	bcs.w	8000464 <__udivmoddi4+0x2bc>
 8000354:	42a8      	cmp	r0, r5
 8000356:	f240 8085 	bls.w	8000464 <__udivmoddi4+0x2bc>
 800035a:	f1a8 0802 	sub.w	r8, r8, #2
 800035e:	4465      	add	r5, ip
 8000360:	1a2d      	subs	r5, r5, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb5 f0f9 	udiv	r0, r5, r9
 8000368:	fb09 5510 	mls	r5, r9, r0, r5
 800036c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000370:	fb00 fe0e 	mul.w	lr, r0, lr
 8000374:	45ae      	cmp	lr, r5
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1e2>
 8000378:	eb1c 0505 	adds.w	r5, ip, r5
 800037c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000380:	d26c      	bcs.n	800045c <__udivmoddi4+0x2b4>
 8000382:	45ae      	cmp	lr, r5
 8000384:	d96a      	bls.n	800045c <__udivmoddi4+0x2b4>
 8000386:	3802      	subs	r0, #2
 8000388:	4465      	add	r5, ip
 800038a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800038e:	fba0 9402 	umull	r9, r4, r0, r2
 8000392:	eba5 050e 	sub.w	r5, r5, lr
 8000396:	42a5      	cmp	r5, r4
 8000398:	46c8      	mov	r8, r9
 800039a:	46a6      	mov	lr, r4
 800039c:	d356      	bcc.n	800044c <__udivmoddi4+0x2a4>
 800039e:	d053      	beq.n	8000448 <__udivmoddi4+0x2a0>
 80003a0:	b15e      	cbz	r6, 80003ba <__udivmoddi4+0x212>
 80003a2:	ebb3 0208 	subs.w	r2, r3, r8
 80003a6:	eb65 050e 	sbc.w	r5, r5, lr
 80003aa:	fa05 f707 	lsl.w	r7, r5, r7
 80003ae:	fa22 f301 	lsr.w	r3, r2, r1
 80003b2:	40cd      	lsrs	r5, r1
 80003b4:	431f      	orrs	r7, r3
 80003b6:	e9c6 7500 	strd	r7, r5, [r6]
 80003ba:	2100      	movs	r1, #0
 80003bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c0:	f1c2 0320 	rsb	r3, r2, #32
 80003c4:	fa20 f103 	lsr.w	r1, r0, r3
 80003c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003cc:	fa25 f303 	lsr.w	r3, r5, r3
 80003d0:	4095      	lsls	r5, r2
 80003d2:	430d      	orrs	r5, r1
 80003d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3011 	mls	r0, r7, r1, r3
 80003e4:	0c2b      	lsrs	r3, r5, #16
 80003e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80003ea:	fb01 f00e 	mul.w	r0, r1, lr
 80003ee:	4298      	cmp	r0, r3
 80003f0:	fa04 f402 	lsl.w	r4, r4, r2
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x260>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80003fe:	d22f      	bcs.n	8000460 <__udivmoddi4+0x2b8>
 8000400:	4298      	cmp	r0, r3
 8000402:	d92d      	bls.n	8000460 <__udivmoddi4+0x2b8>
 8000404:	3902      	subs	r1, #2
 8000406:	4463      	add	r3, ip
 8000408:	1a1b      	subs	r3, r3, r0
 800040a:	b2ad      	uxth	r5, r5
 800040c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000410:	fb07 3310 	mls	r3, r7, r0, r3
 8000414:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000418:	fb00 f30e 	mul.w	r3, r0, lr
 800041c:	42ab      	cmp	r3, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x28a>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000428:	d216      	bcs.n	8000458 <__udivmoddi4+0x2b0>
 800042a:	42ab      	cmp	r3, r5
 800042c:	d914      	bls.n	8000458 <__udivmoddi4+0x2b0>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	1aed      	subs	r5, r5, r3
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	e738      	b.n	80002ac <__udivmoddi4+0x104>
 800043a:	4631      	mov	r1, r6
 800043c:	4630      	mov	r0, r6
 800043e:	e707      	b.n	8000250 <__udivmoddi4+0xa8>
 8000440:	4686      	mov	lr, r0
 8000442:	e6e5      	b.n	8000210 <__udivmoddi4+0x68>
 8000444:	4618      	mov	r0, r3
 8000446:	e6fa      	b.n	800023e <__udivmoddi4+0x96>
 8000448:	454b      	cmp	r3, r9
 800044a:	d2a9      	bcs.n	80003a0 <__udivmoddi4+0x1f8>
 800044c:	ebb9 0802 	subs.w	r8, r9, r2
 8000450:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000454:	3801      	subs	r0, #1
 8000456:	e7a3      	b.n	80003a0 <__udivmoddi4+0x1f8>
 8000458:	4640      	mov	r0, r8
 800045a:	e7ea      	b.n	8000432 <__udivmoddi4+0x28a>
 800045c:	4620      	mov	r0, r4
 800045e:	e794      	b.n	800038a <__udivmoddi4+0x1e2>
 8000460:	4641      	mov	r1, r8
 8000462:	e7d1      	b.n	8000408 <__udivmoddi4+0x260>
 8000464:	46d0      	mov	r8, sl
 8000466:	e77b      	b.n	8000360 <__udivmoddi4+0x1b8>
 8000468:	3b02      	subs	r3, #2
 800046a:	4465      	add	r5, ip
 800046c:	e732      	b.n	80002d4 <__udivmoddi4+0x12c>
 800046e:	4608      	mov	r0, r1
 8000470:	e709      	b.n	8000286 <__udivmoddi4+0xde>
 8000472:	4464      	add	r4, ip
 8000474:	3802      	subs	r0, #2
 8000476:	e742      	b.n	80002fe <__udivmoddi4+0x156>

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <get_gps>:
  * @brief Query the GPS for a GPGGA packet (UTC time, lat, long).
  * @param h.uart UART handle for the GPS
  * @param msgbuf pointer to the struct to store the final message
  * @retval 0 on success, 1 on failure
  */
int get_gps(UART_HandleTypeDef * huart, nmea_gpgga_t * msgbuf){
 800047c:	b5b0      	push	{r4, r5, r7, lr}
 800047e:	b0a6      	sub	sp, #152	; 0x98
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
 8000484:	6039      	str	r1, [r7, #0]
	char raw[100] = {"0"};
 8000486:	2330      	movs	r3, #48	; 0x30
 8000488:	627b      	str	r3, [r7, #36]	; 0x24
 800048a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800048e:	2260      	movs	r2, #96	; 0x60
 8000490:	2100      	movs	r1, #0
 8000492:	4618      	mov	r0, r3
 8000494:	f004 fab8 	bl	8004a08 <memset>
		pfix,
		sat,
		nomsg,
		msgdone
	} nmea_field_t;
	nmea_field_t next_field=nomsg;
 8000498:	2308      	movs	r3, #8
 800049a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	int field_i = 0;
 800049e:	2300      	movs	r3, #0
 80004a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	// query the GGA message from the GPS.
	char queryGGA[]= "$PSRF103,00,01,10,00,\r\n";
 80004a4:	4bb5      	ldr	r3, [pc, #724]	; (800077c <get_gps+0x300>)
 80004a6:	f107 040c 	add.w	r4, r7, #12
 80004aa:	461d      	mov	r5, r3
 80004ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004b0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80004b4:	e884 0003 	stmia.w	r4, {r0, r1}
	HAL_UART_Transmit(huart, (uint8_t *)queryGGA, 25, 100);
 80004b8:	f107 010c 	add.w	r1, r7, #12
 80004bc:	2364      	movs	r3, #100	; 0x64
 80004be:	2219      	movs	r2, #25
 80004c0:	6878      	ldr	r0, [r7, #4]
 80004c2:	f002 feb6 	bl	8003232 <HAL_UART_Transmit>
	// Receive bytes one-by-one into the raw buffer.
	for (int i =0; i<90; i++){
 80004c6:	2300      	movs	r3, #0
 80004c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80004cc:	e00f      	b.n	80004ee <get_gps+0x72>
		HAL_UART_Receive(huart, (uint8_t *)&raw[i], 1, 1000);
 80004ce:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80004d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80004d6:	18d1      	adds	r1, r2, r3
 80004d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004dc:	2201      	movs	r2, #1
 80004de:	6878      	ldr	r0, [r7, #4]
 80004e0:	f002 ff3d 	bl	800335e <HAL_UART_Receive>
	for (int i =0; i<90; i++){
 80004e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80004e8:	3301      	adds	r3, #1
 80004ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80004ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80004f2:	2b59      	cmp	r3, #89	; 0x59
 80004f4:	ddeb      	ble.n	80004ce <get_gps+0x52>
	  }
	// Process the raw message buffer to get the message.
	for (int i=0; i<90; i++){
 80004f6:	2300      	movs	r3, #0
 80004f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80004fc:	e133      	b.n	8000766 <get_gps+0x2ea>
		switch(next_field){
 80004fe:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000502:	2b09      	cmp	r3, #9
 8000504:	f200 812a 	bhi.w	800075c <get_gps+0x2e0>
 8000508:	a201      	add	r2, pc, #4	; (adr r2, 8000510 <get_gps+0x94>)
 800050a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800050e:	bf00      	nop
 8000510:	080005b7 	.word	0x080005b7
 8000514:	080005d7 	.word	0x080005d7
 8000518:	08000619 	.word	0x08000619
 800051c:	0800065d 	.word	0x0800065d
 8000520:	0800068d 	.word	0x0800068d
 8000524:	080006d1 	.word	0x080006d1
 8000528:	08000701 	.word	0x08000701
 800052c:	0800072b 	.word	0x0800072b
 8000530:	08000539 	.word	0x08000539
 8000534:	0800075d 	.word	0x0800075d
			case nomsg	:
				// check for the $GPGGA that starts the message.
				if ((raw[i]=='$')&&(raw[i+1]=='G')&&(raw[i+2]=='P')&&(raw[i+3]=='G')&&(raw[i+4]=='G')&&(raw[i+5]=='A')){
 8000538:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800053c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000540:	4413      	add	r3, r2
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2b24      	cmp	r3, #36	; 0x24
 8000546:	f040 8106 	bne.w	8000756 <get_gps+0x2da>
 800054a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800054e:	3301      	adds	r3, #1
 8000550:	3398      	adds	r3, #152	; 0x98
 8000552:	443b      	add	r3, r7
 8000554:	f813 3c74 	ldrb.w	r3, [r3, #-116]
 8000558:	2b47      	cmp	r3, #71	; 0x47
 800055a:	f040 80fc 	bne.w	8000756 <get_gps+0x2da>
 800055e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000562:	3302      	adds	r3, #2
 8000564:	3398      	adds	r3, #152	; 0x98
 8000566:	443b      	add	r3, r7
 8000568:	f813 3c74 	ldrb.w	r3, [r3, #-116]
 800056c:	2b50      	cmp	r3, #80	; 0x50
 800056e:	f040 80f2 	bne.w	8000756 <get_gps+0x2da>
 8000572:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000576:	3303      	adds	r3, #3
 8000578:	3398      	adds	r3, #152	; 0x98
 800057a:	443b      	add	r3, r7
 800057c:	f813 3c74 	ldrb.w	r3, [r3, #-116]
 8000580:	2b47      	cmp	r3, #71	; 0x47
 8000582:	f040 80e8 	bne.w	8000756 <get_gps+0x2da>
 8000586:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800058a:	3304      	adds	r3, #4
 800058c:	3398      	adds	r3, #152	; 0x98
 800058e:	443b      	add	r3, r7
 8000590:	f813 3c74 	ldrb.w	r3, [r3, #-116]
 8000594:	2b47      	cmp	r3, #71	; 0x47
 8000596:	f040 80de 	bne.w	8000756 <get_gps+0x2da>
 800059a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800059e:	3305      	adds	r3, #5
 80005a0:	3398      	adds	r3, #152	; 0x98
 80005a2:	443b      	add	r3, r7
 80005a4:	f813 3c74 	ldrb.w	r3, [r3, #-116]
 80005a8:	2b41      	cmp	r3, #65	; 0x41
 80005aa:	f040 80d4 	bne.w	8000756 <get_gps+0x2da>
					next_field=header; // increment to the next field
 80005ae:	2300      	movs	r3, #0
 80005b0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				}
				break;
 80005b4:	e0cf      	b.n	8000756 <get_gps+0x2da>
			case header :
				if (raw[i] == ','){
 80005b6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80005ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80005be:	4413      	add	r3, r2
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	2b2c      	cmp	r3, #44	; 0x2c
 80005c4:	f040 80c9 	bne.w	800075a <get_gps+0x2de>
					next_field=utc; // increment to the next field on the delimiter comma
 80005c8:	2301      	movs	r3, #1
 80005ca:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					field_i = 0; // reset the field index
 80005ce:	2300      	movs	r3, #0
 80005d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
					break;
 80005d4:	e0c2      	b.n	800075c <get_gps+0x2e0>
				}
				break;
			case utc	:
				if (raw[i] == ','){
 80005d6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80005da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80005de:	4413      	add	r3, r2
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b2c      	cmp	r3, #44	; 0x2c
 80005e4:	d106      	bne.n	80005f4 <get_gps+0x178>
					next_field=lat; // increment to the next field on the delimiter comma
 80005e6:	2302      	movs	r3, #2
 80005e8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					field_i = 0; // reset the field index
 80005ec:	2300      	movs	r3, #0
 80005ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
					break;
 80005f2:	e0b3      	b.n	800075c <get_gps+0x2e0>
				}
				msgbuf->UTC_Time[field_i] = raw[i];
 80005f4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80005f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80005fc:	4413      	add	r3, r2
 80005fe:	7819      	ldrb	r1, [r3, #0]
 8000600:	683a      	ldr	r2, [r7, #0]
 8000602:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000606:	4413      	add	r3, r2
 8000608:	460a      	mov	r2, r1
 800060a:	701a      	strb	r2, [r3, #0]
				field_i ++;
 800060c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000610:	3301      	adds	r3, #1
 8000612:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				break;
 8000616:	e0a1      	b.n	800075c <get_gps+0x2e0>
			case lat	:
				if (raw[i] == ','){
 8000618:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800061c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000620:	4413      	add	r3, r2
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b2c      	cmp	r3, #44	; 0x2c
 8000626:	d106      	bne.n	8000636 <get_gps+0x1ba>
					next_field=ns; // increment to the next field on the delimiter comma
 8000628:	2303      	movs	r3, #3
 800062a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					field_i = 0; // reset the field index
 800062e:	2300      	movs	r3, #0
 8000630:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
					break;
 8000634:	e092      	b.n	800075c <get_gps+0x2e0>
				}
				msgbuf->latitude[field_i] = raw[i];
 8000636:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800063a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800063e:	4413      	add	r3, r2
 8000640:	7819      	ldrb	r1, [r3, #0]
 8000642:	683a      	ldr	r2, [r7, #0]
 8000644:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000648:	4413      	add	r3, r2
 800064a:	330a      	adds	r3, #10
 800064c:	460a      	mov	r2, r1
 800064e:	701a      	strb	r2, [r3, #0]
				field_i ++;
 8000650:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000654:	3301      	adds	r3, #1
 8000656:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				break;
 800065a:	e07f      	b.n	800075c <get_gps+0x2e0>
			case ns		:
				if (raw[i] == ','){
 800065c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000660:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000664:	4413      	add	r3, r2
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b2c      	cmp	r3, #44	; 0x2c
 800066a:	d106      	bne.n	800067a <get_gps+0x1fe>
					next_field=lontd; // increment to the next field on the delimiter comma
 800066c:	2304      	movs	r3, #4
 800066e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					field_i = 0; // reset the field index
 8000672:	2300      	movs	r3, #0
 8000674:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
					break;
 8000678:	e070      	b.n	800075c <get_gps+0x2e0>
				}
				msgbuf->NS=raw[i];
 800067a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800067e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000682:	4413      	add	r3, r2
 8000684:	781a      	ldrb	r2, [r3, #0]
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	74da      	strb	r2, [r3, #19]
				break;
 800068a:	e067      	b.n	800075c <get_gps+0x2e0>
			case lontd	:
				if (raw[i] == ','){
 800068c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000690:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000694:	4413      	add	r3, r2
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b2c      	cmp	r3, #44	; 0x2c
 800069a:	d106      	bne.n	80006aa <get_gps+0x22e>
					next_field=ew; // increment to the next field on the delimiter comma
 800069c:	2305      	movs	r3, #5
 800069e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					field_i = 0; // reset the field index
 80006a2:	2300      	movs	r3, #0
 80006a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
					break;
 80006a8:	e058      	b.n	800075c <get_gps+0x2e0>
				}
				msgbuf->longitude[field_i]=raw[i];
 80006aa:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80006ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80006b2:	4413      	add	r3, r2
 80006b4:	7819      	ldrb	r1, [r3, #0]
 80006b6:	683a      	ldr	r2, [r7, #0]
 80006b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80006bc:	4413      	add	r3, r2
 80006be:	3314      	adds	r3, #20
 80006c0:	460a      	mov	r2, r1
 80006c2:	701a      	strb	r2, [r3, #0]
				field_i ++;
 80006c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80006c8:	3301      	adds	r3, #1
 80006ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				break;
 80006ce:	e045      	b.n	800075c <get_gps+0x2e0>
			case ew		:
				if (raw[i] == ','){
 80006d0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80006d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80006d8:	4413      	add	r3, r2
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b2c      	cmp	r3, #44	; 0x2c
 80006de:	d106      	bne.n	80006ee <get_gps+0x272>
					next_field=pfix; // increment to the next field on the delimiter comma
 80006e0:	2306      	movs	r3, #6
 80006e2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					field_i = 0; // reset the field index
 80006e6:	2300      	movs	r3, #0
 80006e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
					break;
 80006ec:	e036      	b.n	800075c <get_gps+0x2e0>
				}
				msgbuf->EW=raw[i];
 80006ee:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80006f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80006f6:	4413      	add	r3, r2
 80006f8:	781a      	ldrb	r2, [r3, #0]
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	779a      	strb	r2, [r3, #30]
				break;
 80006fe:	e02d      	b.n	800075c <get_gps+0x2e0>
			case pfix	:
				if (raw[i] == ','){
 8000700:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000704:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000708:	4413      	add	r3, r2
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b2c      	cmp	r3, #44	; 0x2c
 800070e:	d103      	bne.n	8000718 <get_gps+0x29c>
					next_field=sat; // finished message
 8000710:	2307      	movs	r3, #7
 8000712:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					break;
 8000716:	e021      	b.n	800075c <get_gps+0x2e0>
				}
				msgbuf->pos_fix=raw[i];
 8000718:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800071c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000720:	4413      	add	r3, r2
 8000722:	781a      	ldrb	r2, [r3, #0]
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	77da      	strb	r2, [r3, #31]
				break;
 8000728:	e018      	b.n	800075c <get_gps+0x2e0>
			case sat	:
				if (raw[i] == ','){
 800072a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800072e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000732:	4413      	add	r3, r2
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b2c      	cmp	r3, #44	; 0x2c
 8000738:	d103      	bne.n	8000742 <get_gps+0x2c6>
					next_field=msgdone; // finished message
 800073a:	2309      	movs	r3, #9
 800073c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					break;
 8000740:	e00c      	b.n	800075c <get_gps+0x2e0>
				}
				msgbuf->sat_used=raw[i];
 8000742:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000746:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800074a:	4413      	add	r3, r2
 800074c:	781a      	ldrb	r2, [r3, #0]
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	f883 2020 	strb.w	r2, [r3, #32]
			case msgdone:
				break;
 8000754:	e002      	b.n	800075c <get_gps+0x2e0>
				break;
 8000756:	bf00      	nop
 8000758:	e000      	b.n	800075c <get_gps+0x2e0>
				break;
 800075a:	bf00      	nop
	for (int i=0; i<90; i++){
 800075c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000760:	3301      	adds	r3, #1
 8000762:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000766:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800076a:	2b59      	cmp	r3, #89	; 0x59
 800076c:	f77f aec7 	ble.w	80004fe <get_gps+0x82>
			}
	}
	return 0;
 8000770:	2300      	movs	r3, #0
}
 8000772:	4618      	mov	r0, r3
 8000774:	3798      	adds	r7, #152	; 0x98
 8000776:	46bd      	mov	sp, r7
 8000778:	bdb0      	pop	{r4, r5, r7, pc}
 800077a:	bf00      	nop
 800077c:	08004a30 	.word	0x08004a30

08000780 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800078c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000790:	f023 0218 	bic.w	r2, r3, #24
 8000794:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4313      	orrs	r3, r2
 800079c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr

080007aa <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80007aa:	b480      	push	{r7}
 80007ac:	b085      	sub	sp, #20
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80007b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80007b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	4313      	orrs	r3, r2
 80007c0:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80007c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	4013      	ands	r3, r2
 80007cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007ce:	68fb      	ldr	r3, [r7, #12]
}
 80007d0:	bf00      	nop
 80007d2:	3714      	adds	r7, #20
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr

080007da <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007da:	b480      	push	{r7}
 80007dc:	b085      	sub	sp, #20
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4313      	orrs	r3, r2
 80007f0:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80007f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	4013      	ands	r3, r2
 80007fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007fe:	68fb      	ldr	r3, [r7, #12]
}
 8000800:	bf00      	nop
 8000802:	3714      	adds	r7, #20
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr
	...

0800080c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000812:	f000 fb93 	bl	8000f3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000816:	f000 f813 	bl	8000840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081a:	f000 f92b 	bl	8000a74 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800081e:	f000 f8c9 	bl	80009b4 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8000822:	f000 f915 	bl	8000a50 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000826:	f000 f877 	bl	8000918 <MX_LPUART1_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	int res = get_gps(&huart1, &msgbuf);
 800082a:	4903      	ldr	r1, [pc, #12]	; (8000838 <main+0x2c>)
 800082c:	4803      	ldr	r0, [pc, #12]	; (800083c <main+0x30>)
 800082e:	f7ff fe25 	bl	800047c <get_gps>
 8000832:	6078      	str	r0, [r7, #4]
	__asm__ ("nop");
 8000834:	bf00      	nop
  {
 8000836:	e7f8      	b.n	800082a <main+0x1e>
 8000838:	20000270 	.word	0x20000270
 800083c:	200000b8 	.word	0x200000b8

08000840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b09a      	sub	sp, #104	; 0x68
 8000844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000846:	f107 0320 	add.w	r3, r7, #32
 800084a:	2248      	movs	r2, #72	; 0x48
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f004 f8da 	bl	8004a08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]
 8000862:	615a      	str	r2, [r3, #20]
 8000864:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000866:	f001 f92b 	bl	8001ac0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800086a:	2000      	movs	r0, #0
 800086c:	f7ff ff88 	bl	8000780 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000870:	4b28      	ldr	r3, [pc, #160]	; (8000914 <SystemClock_Config+0xd4>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000878:	4a26      	ldr	r2, [pc, #152]	; (8000914 <SystemClock_Config+0xd4>)
 800087a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800087e:	6013      	str	r3, [r2, #0]
 8000880:	4b24      	ldr	r3, [pc, #144]	; (8000914 <SystemClock_Config+0xd4>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800088c:	2326      	movs	r3, #38	; 0x26
 800088e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000890:	2381      	movs	r3, #129	; 0x81
 8000892:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000894:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000898:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800089a:	2301      	movs	r3, #1
 800089c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800089e:	2340      	movs	r3, #64	; 0x40
 80008a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80008a2:	2300      	movs	r3, #0
 80008a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80008a6:	23b0      	movs	r3, #176	; 0xb0
 80008a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008aa:	2302      	movs	r3, #2
 80008ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80008ae:	2301      	movs	r3, #1
 80008b0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80008b2:	2330      	movs	r3, #48	; 0x30
 80008b4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 80008b6:	2308      	movs	r3, #8
 80008b8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008be:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008c0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80008c4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80008ca:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008cc:	f107 0320 	add.w	r3, r7, #32
 80008d0:	4618      	mov	r0, r3
 80008d2:	f001 fbc7 	bl	8002064 <HAL_RCC_OscConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80008dc:	f000 f934 	bl	8000b48 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80008e0:	234f      	movs	r3, #79	; 0x4f
 80008e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e4:	2303      	movs	r3, #3
 80008e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	2102      	movs	r1, #2
 80008fc:	4618      	mov	r0, r3
 80008fe:	f001 ff4d 	bl	800279c <HAL_RCC_ClockConfig>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000908:	f000 f91e 	bl	8000b48 <Error_Handler>
  }
}
 800090c:	bf00      	nop
 800090e:	3768      	adds	r7, #104	; 0x68
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	58000400 	.word	0x58000400

08000918 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800091c:	4b23      	ldr	r3, [pc, #140]	; (80009ac <MX_LPUART1_UART_Init+0x94>)
 800091e:	4a24      	ldr	r2, [pc, #144]	; (80009b0 <MX_LPUART1_UART_Init+0x98>)
 8000920:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8000922:	4b22      	ldr	r3, [pc, #136]	; (80009ac <MX_LPUART1_UART_Init+0x94>)
 8000924:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000928:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800092a:	4b20      	ldr	r3, [pc, #128]	; (80009ac <MX_LPUART1_UART_Init+0x94>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000930:	4b1e      	ldr	r3, [pc, #120]	; (80009ac <MX_LPUART1_UART_Init+0x94>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000936:	4b1d      	ldr	r3, [pc, #116]	; (80009ac <MX_LPUART1_UART_Init+0x94>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800093c:	4b1b      	ldr	r3, [pc, #108]	; (80009ac <MX_LPUART1_UART_Init+0x94>)
 800093e:	220c      	movs	r2, #12
 8000940:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000942:	4b1a      	ldr	r3, [pc, #104]	; (80009ac <MX_LPUART1_UART_Init+0x94>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 8000948:	4b18      	ldr	r3, [pc, #96]	; (80009ac <MX_LPUART1_UART_Init+0x94>)
 800094a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800094e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000950:	4b16      	ldr	r3, [pc, #88]	; (80009ac <MX_LPUART1_UART_Init+0x94>)
 8000952:	2200      	movs	r2, #0
 8000954:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <MX_LPUART1_UART_Init+0x94>)
 8000958:	2200      	movs	r2, #0
 800095a:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_ENABLE;
 800095c:	4b13      	ldr	r3, [pc, #76]	; (80009ac <MX_LPUART1_UART_Init+0x94>)
 800095e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000962:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000964:	4811      	ldr	r0, [pc, #68]	; (80009ac <MX_LPUART1_UART_Init+0x94>)
 8000966:	f002 fc14 	bl	8003192 <HAL_UART_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 8000970:	f000 f8ea 	bl	8000b48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000974:	2100      	movs	r1, #0
 8000976:	480d      	ldr	r0, [pc, #52]	; (80009ac <MX_LPUART1_UART_Init+0x94>)
 8000978:	f003 ff4c 	bl	8004814 <HAL_UARTEx_SetTxFifoThreshold>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_LPUART1_UART_Init+0x6e>
  {
    Error_Handler();
 8000982:	f000 f8e1 	bl	8000b48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000986:	2100      	movs	r1, #0
 8000988:	4808      	ldr	r0, [pc, #32]	; (80009ac <MX_LPUART1_UART_Init+0x94>)
 800098a:	f003 ff81 	bl	8004890 <HAL_UARTEx_SetRxFifoThreshold>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_LPUART1_UART_Init+0x80>
  {
    Error_Handler();
 8000994:	f000 f8d8 	bl	8000b48 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&hlpuart1) != HAL_OK)
 8000998:	4804      	ldr	r0, [pc, #16]	; (80009ac <MX_LPUART1_UART_Init+0x94>)
 800099a:	f003 ff00 	bl	800479e <HAL_UARTEx_EnableFifoMode>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_LPUART1_UART_Init+0x90>
  {
    Error_Handler();
 80009a4:	f000 f8d0 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000028 	.word	0x20000028
 80009b0:	40008000 	.word	0x40008000

080009b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009b8:	4b23      	ldr	r3, [pc, #140]	; (8000a48 <MX_USART1_UART_Init+0x94>)
 80009ba:	4a24      	ldr	r2, [pc, #144]	; (8000a4c <MX_USART1_UART_Init+0x98>)
 80009bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9615;
 80009be:	4b22      	ldr	r3, [pc, #136]	; (8000a48 <MX_USART1_UART_Init+0x94>)
 80009c0:	f242 528f 	movw	r2, #9615	; 0x258f
 80009c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009c6:	4b20      	ldr	r3, [pc, #128]	; (8000a48 <MX_USART1_UART_Init+0x94>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009cc:	4b1e      	ldr	r3, [pc, #120]	; (8000a48 <MX_USART1_UART_Init+0x94>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009d2:	4b1d      	ldr	r3, [pc, #116]	; (8000a48 <MX_USART1_UART_Init+0x94>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009d8:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <MX_USART1_UART_Init+0x94>)
 80009da:	220c      	movs	r2, #12
 80009dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009de:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <MX_USART1_UART_Init+0x94>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 80009e4:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <MX_USART1_UART_Init+0x94>)
 80009e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009ea:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 80009ec:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <MX_USART1_UART_Init+0x94>)
 80009ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009f2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <MX_USART1_UART_Init+0x94>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009fa:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <MX_USART1_UART_Init+0x94>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a00:	4811      	ldr	r0, [pc, #68]	; (8000a48 <MX_USART1_UART_Init+0x94>)
 8000a02:	f002 fbc6 	bl	8003192 <HAL_UART_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8000a0c:	f000 f89c 	bl	8000b48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a10:	2100      	movs	r1, #0
 8000a12:	480d      	ldr	r0, [pc, #52]	; (8000a48 <MX_USART1_UART_Init+0x94>)
 8000a14:	f003 fefe 	bl	8004814 <HAL_UARTEx_SetTxFifoThreshold>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8000a1e:	f000 f893 	bl	8000b48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a22:	2100      	movs	r1, #0
 8000a24:	4808      	ldr	r0, [pc, #32]	; (8000a48 <MX_USART1_UART_Init+0x94>)
 8000a26:	f003 ff33 	bl	8004890 <HAL_UARTEx_SetRxFifoThreshold>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8000a30:	f000 f88a 	bl	8000b48 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8000a34:	4804      	ldr	r0, [pc, #16]	; (8000a48 <MX_USART1_UART_Init+0x94>)
 8000a36:	f003 feb2 	bl	800479e <HAL_UARTEx_EnableFifoMode>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8000a40:	f000 f882 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	200000b8 	.word	0x200000b8
 8000a4c:	40013800 	.word	0x40013800

08000a50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000a54:	2004      	movs	r0, #4
 8000a56:	f7ff fea8 	bl	80007aa <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	f7ff fea5 	bl	80007aa <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2100      	movs	r1, #0
 8000a64:	200b      	movs	r0, #11
 8000a66:	f000 fbb6 	bl	80011d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a6a:	200b      	movs	r0, #11
 8000a6c:	f000 fbcd 	bl	800120a <HAL_NVIC_EnableIRQ>

}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a88:	2001      	movs	r0, #1
 8000a8a:	f7ff fea6 	bl	80007da <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8e:	2002      	movs	r0, #2
 8000a90:	f7ff fea3 	bl	80007da <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a94:	2004      	movs	r0, #4
 8000a96:	f7ff fea0 	bl	80007da <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 8000aa0:	4827      	ldr	r0, [pc, #156]	; (8000b40 <MX_GPIO_Init+0xcc>)
 8000aa2:	f000 fff5 	bl	8001a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2138      	movs	r1, #56	; 0x38
 8000aaa:	4826      	ldr	r0, [pc, #152]	; (8000b44 <MX_GPIO_Init+0xd0>)
 8000aac:	f000 fff0 	bl	8001a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000ab0:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 8000ab4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	481e      	ldr	r0, [pc, #120]	; (8000b40 <MX_GPIO_Init+0xcc>)
 8000ac8:	f000 fe82 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 8000acc:	2338      	movs	r3, #56	; 0x38
 8000ace:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4818      	ldr	r0, [pc, #96]	; (8000b44 <MX_GPIO_Init+0xd0>)
 8000ae2:	f000 fe75 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin B2_Pin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000aee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af0:	2301      	movs	r3, #1
 8000af2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	4619      	mov	r1, r3
 8000af8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afc:	f000 fe68 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B3_Pin */
  GPIO_InitStruct.Pin = B3_Pin;
 8000b00:	2340      	movs	r3, #64	; 0x40
 8000b02:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b04:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	4619      	mov	r1, r3
 8000b12:	480c      	ldr	r0, [pc, #48]	; (8000b44 <MX_GPIO_Init+0xd0>)
 8000b14:	f000 fe5c 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_VCP_RX_Pin T_VCP_RXA2_Pin */
  GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000b18:	230c      	movs	r3, #12
 8000b1a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b28:	2307      	movs	r3, #7
 8000b2a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	4619      	mov	r1, r3
 8000b30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b34:	f000 fe4c 	bl	80017d0 <HAL_GPIO_Init>

}
 8000b38:	bf00      	nop
 8000b3a:	3718      	adds	r7, #24
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	48000400 	.word	0x48000400
 8000b44:	48000800 	.word	0x48000800

08000b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b4c:	b672      	cpsid	i
}
 8000b4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <Error_Handler+0x8>

08000b52 <LL_AHB2_GRP1_EnableClock>:
{
 8000b52:	b480      	push	{r7}
 8000b54:	b085      	sub	sp, #20
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4313      	orrs	r3, r2
 8000b68:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4013      	ands	r3, r2
 8000b74:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b76:	68fb      	ldr	r3, [r7, #12]
}
 8000b78:	bf00      	nop
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr

08000b82 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000b82:	b480      	push	{r7}
 8000b84:	b085      	sub	sp, #20
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000b90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b9e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
}
 8000ba8:	bf00      	nop
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc80      	pop	{r7}
 8000bb0:	4770      	bx	lr

08000bb2 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	b085      	sub	sp, #20
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bbe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000bc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
}
 8000bd8:	bf00      	nop
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr

08000be2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr
	...

08000bf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b096      	sub	sp, #88	; 0x58
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c08:	f107 030c 	add.w	r3, r7, #12
 8000c0c:	2238      	movs	r2, #56	; 0x38
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4618      	mov	r0, r3
 8000c12:	f003 fef9 	bl	8004a08 <memset>
  if(huart->Instance==LPUART1)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a4c      	ldr	r2, [pc, #304]	; (8000d4c <HAL_UART_MspInit+0x15c>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d12d      	bne.n	8000c7c <HAL_UART_MspInit+0x8c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000c20:	2320      	movs	r3, #32
 8000c22:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 8000c24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c28:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c2a:	f107 030c 	add.w	r3, r7, #12
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f002 f974 	bl	8002f1c <HAL_RCCEx_PeriphCLKConfig>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c3a:	f7ff ff85 	bl	8000b48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000c3e:	2001      	movs	r0, #1
 8000c40:	f7ff ff9f 	bl	8000b82 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c44:	2004      	movs	r0, #4
 8000c46:	f7ff ff84 	bl	8000b52 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    PC0     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000c5a:	2308      	movs	r3, #8
 8000c5c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c5e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c62:	4619      	mov	r1, r3
 8000c64:	483a      	ldr	r0, [pc, #232]	; (8000d50 <HAL_UART_MspInit+0x160>)
 8000c66:	f000 fdb3 	bl	80017d0 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2026      	movs	r0, #38	; 0x26
 8000c70:	f000 fab1 	bl	80011d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000c74:	2026      	movs	r0, #38	; 0x26
 8000c76:	f000 fac8 	bl	800120a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c7a:	e063      	b.n	8000d44 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART1)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a34      	ldr	r2, [pc, #208]	; (8000d54 <HAL_UART_MspInit+0x164>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d15e      	bne.n	8000d44 <HAL_UART_MspInit+0x154>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c86:	2301      	movs	r3, #1
 8000c88:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8000c8a:	4b33      	ldr	r3, [pc, #204]	; (8000d58 <HAL_UART_MspInit+0x168>)
 8000c8c:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c8e:	f107 030c 	add.w	r3, r7, #12
 8000c92:	4618      	mov	r0, r3
 8000c94:	f002 f942 	bl	8002f1c <HAL_RCCEx_PeriphCLKConfig>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <HAL_UART_MspInit+0xb2>
      Error_Handler();
 8000c9e:	f7ff ff53 	bl	8000b48 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ca2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000ca6:	f7ff ff84 	bl	8000bb2 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000caa:	2002      	movs	r0, #2
 8000cac:	f7ff ff51 	bl	8000b52 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000cb0:	23c0      	movs	r3, #192	; 0xc0
 8000cb2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cc0:	2307      	movs	r3, #7
 8000cc2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4824      	ldr	r0, [pc, #144]	; (8000d5c <HAL_UART_MspInit+0x16c>)
 8000ccc:	f000 fd80 	bl	80017d0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000cd0:	4b23      	ldr	r3, [pc, #140]	; (8000d60 <HAL_UART_MspInit+0x170>)
 8000cd2:	4a24      	ldr	r2, [pc, #144]	; (8000d64 <HAL_UART_MspInit+0x174>)
 8000cd4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000cd6:	4b22      	ldr	r3, [pc, #136]	; (8000d60 <HAL_UART_MspInit+0x170>)
 8000cd8:	2211      	movs	r2, #17
 8000cda:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cdc:	4b20      	ldr	r3, [pc, #128]	; (8000d60 <HAL_UART_MspInit+0x170>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ce2:	4b1f      	ldr	r3, [pc, #124]	; (8000d60 <HAL_UART_MspInit+0x170>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ce8:	4b1d      	ldr	r3, [pc, #116]	; (8000d60 <HAL_UART_MspInit+0x170>)
 8000cea:	2280      	movs	r2, #128	; 0x80
 8000cec:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cee:	4b1c      	ldr	r3, [pc, #112]	; (8000d60 <HAL_UART_MspInit+0x170>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cf4:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <HAL_UART_MspInit+0x170>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000cfa:	4b19      	ldr	r3, [pc, #100]	; (8000d60 <HAL_UART_MspInit+0x170>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d00:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <HAL_UART_MspInit+0x170>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000d06:	4816      	ldr	r0, [pc, #88]	; (8000d60 <HAL_UART_MspInit+0x170>)
 8000d08:	f000 fa9a 	bl	8001240 <HAL_DMA_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <HAL_UART_MspInit+0x126>
      Error_Handler();
 8000d12:	f7ff ff19 	bl	8000b48 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000d16:	2110      	movs	r1, #16
 8000d18:	4811      	ldr	r0, [pc, #68]	; (8000d60 <HAL_UART_MspInit+0x170>)
 8000d1a:	f000 fcbd 	bl	8001698 <HAL_DMA_ConfigChannelAttributes>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <HAL_UART_MspInit+0x138>
      Error_Handler();
 8000d24:	f7ff ff10 	bl	8000b48 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4a0d      	ldr	r2, [pc, #52]	; (8000d60 <HAL_UART_MspInit+0x170>)
 8000d2c:	67da      	str	r2, [r3, #124]	; 0x7c
 8000d2e:	4a0c      	ldr	r2, [pc, #48]	; (8000d60 <HAL_UART_MspInit+0x170>)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d34:	2200      	movs	r2, #0
 8000d36:	2100      	movs	r1, #0
 8000d38:	2024      	movs	r0, #36	; 0x24
 8000d3a:	f000 fa4c 	bl	80011d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d3e:	2024      	movs	r0, #36	; 0x24
 8000d40:	f000 fa63 	bl	800120a <HAL_NVIC_EnableIRQ>
}
 8000d44:	bf00      	nop
 8000d46:	3758      	adds	r7, #88	; 0x58
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40008000 	.word	0x40008000
 8000d50:	48000800 	.word	0x48000800
 8000d54:	40013800 	.word	0x40013800
 8000d58:	00030002 	.word	0x00030002
 8000d5c:	48000400 	.word	0x48000400
 8000d60:	20000148 	.word	0x20000148
 8000d64:	40020008 	.word	0x40020008

08000d68 <gps_parser>:

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */
void gps_parser(uint8_t * gpsbuffer){
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
	return;
 8000d70:	bf00      	nop
}
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr

08000d7a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <NMI_Handler+0x4>

08000d80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <HardFault_Handler+0x4>

08000d86 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d8a:	e7fe      	b.n	8000d8a <MemManage_Handler+0x4>

08000d8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <BusFault_Handler+0x4>

08000d92 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d96:	e7fe      	b.n	8000d96 <UsageFault_Handler+0x4>

08000d98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr

08000da4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr

08000db0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr

08000dbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc0:	f000 f916 	bl	8000ff0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000dcc:	4802      	ldr	r0, [pc, #8]	; (8000dd8 <DMA1_Channel1_IRQHandler+0x10>)
 8000dce:	f000 fb9d 	bl	800150c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000148 	.word	0x20000148

08000ddc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN USART1_IRQn 0 */
	extern uint8_t gps_buffer[100];
	extern uint8_t dma_buffer[100];
	VLU_IdleLineHandler(&huart1, &hdma_usart1_rx, gps_buffer, dma_buffer, &gps_parser);
 8000de2:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <USART1_IRQHandler+0x24>)
 8000de4:	9300      	str	r3, [sp, #0]
 8000de6:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <USART1_IRQHandler+0x28>)
 8000de8:	4a07      	ldr	r2, [pc, #28]	; (8000e08 <USART1_IRQHandler+0x2c>)
 8000dea:	4908      	ldr	r1, [pc, #32]	; (8000e0c <USART1_IRQHandler+0x30>)
 8000dec:	4808      	ldr	r0, [pc, #32]	; (8000e10 <USART1_IRQHandler+0x34>)
 8000dee:	f000 f81b 	bl	8000e28 <VLU_IdleLineHandler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000df2:	4807      	ldr	r0, [pc, #28]	; (8000e10 <USART1_IRQHandler+0x34>)
 8000df4:	f002 fcb4 	bl	8003760 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	08000d69 	.word	0x08000d69
 8000e04:	2000020c 	.word	0x2000020c
 8000e08:	200001a8 	.word	0x200001a8
 8000e0c:	20000148 	.word	0x20000148
 8000e10:	200000b8 	.word	0x200000b8

08000e14 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000e18:	4802      	ldr	r0, [pc, #8]	; (8000e24 <LPUART1_IRQHandler+0x10>)
 8000e1a:	f002 fca1 	bl	8003760 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000028 	.word	0x20000028

08000e28 <VLU_IdleLineHandler>:
void VLU_IdleLineHandler(UART_HandleTypeDef * huart, 
                          DMA_HandleTypeDef * hdma, 
                          uint8_t * working_buffer, 
                          uint8_t * byte_buffer,
                          void (*msgproc)(uint8_t *))
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
 8000e34:	603b      	str	r3, [r7, #0]
  // Check to see if the IDLE bit is flipped.
  // This mask isolates the IDLE bit.
  // uint32_t mask = 0b00000000000000000000000000010000;
  uint32_t mask = 0x00000010;
 8000e36:	2310      	movs	r3, #16
 8000e38:	617b      	str	r3, [r7, #20]
  if (huart->Instance->ISR && mask) {
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	69db      	ldr	r3, [r3, #28]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d03f      	beq.n	8000ec4 <VLU_IdleLineHandler+0x9c>
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d03c      	beq.n	8000ec4 <VLU_IdleLineHandler+0x9c>
    // The IDLE bit is flipped, so this was an IDLE interrupt.
    // Turn the IDLE bit off.
    huart->Instance->ICR |= mask;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	6a19      	ldr	r1, [r3, #32]
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	697a      	ldr	r2, [r7, #20]
 8000e56:	430a      	orrs	r2, r1
 8000e58:	621a      	str	r2, [r3, #32]
    /* WORKAROUND for the first byte missing thing.  
    If we have only read one byte, don't treat it as a separate message. */
    if (hdma->Instance->CNDTR >= BUFFER_LENGTH-1) goto endirq;
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	4a1d      	ldr	r2, [pc, #116]	; (8000ed8 <VLU_IdleLineHandler+0xb0>)
 8000e62:	7812      	ldrb	r2, [r2, #0]
 8000e64:	3a01      	subs	r2, #1
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d22e      	bcs.n	8000ec8 <VLU_IdleLineHandler+0xa0>
    // Copy the message to the working buffer.
    memcpy(working_buffer, byte_buffer, BUFFER_LENGTH);
 8000e6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <VLU_IdleLineHandler+0xb0>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	461a      	mov	r2, r3
 8000e70:	6839      	ldr	r1, [r7, #0]
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f003 fdba 	bl	80049ec <memcpy>
    memset(byte_buffer, 0, BUFFER_LENGTH);
 8000e78:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <VLU_IdleLineHandler+0xb0>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	2100      	movs	r1, #0
 8000e80:	6838      	ldr	r0, [r7, #0]
 8000e82:	f003 fdc1 	bl	8004a08 <memset>
    // Attempt to reset the DMA controller
    HAL_UART_DMAPause(huart);
 8000e86:	68f8      	ldr	r0, [r7, #12]
 8000e88:	f002 fb3c 	bl	8003504 <HAL_UART_DMAPause>
    hdma->Instance->CCR &= -2;
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f022 0201 	bic.w	r2, r2, #1
 8000e9a:	601a      	str	r2, [r3, #0]
    hdma->Instance->CNDTR = BUFFER_LENGTH;
 8000e9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <VLU_IdleLineHandler+0xb0>)
 8000e9e:	781a      	ldrb	r2, [r3, #0]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
    hdma->Instance->CCR |= 1;
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f042 0201 	orr.w	r2, r2, #1
 8000eb4:	601a      	str	r2, [r3, #0]
    HAL_UART_DMAResume(huart);
 8000eb6:	68f8      	ldr	r0, [r7, #12]
 8000eb8:	f002 fbc0 	bl	800363c <HAL_UART_DMAResume>
    // Run the message processing subroutine.
    msgproc(working_buffer);
 8000ebc:	6a3b      	ldr	r3, [r7, #32]
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	4798      	blx	r3
 8000ec2:	e002      	b.n	8000eca <VLU_IdleLineHandler+0xa2>
    // The message processing routine is responsible for resetting the working buffer when it is done.
  }
  endirq:
 8000ec4:	bf00      	nop
 8000ec6:	e000      	b.n	8000eca <VLU_IdleLineHandler+0xa2>
    if (hdma->Instance->CNDTR >= BUFFER_LENGTH-1) goto endirq;
 8000ec8:	bf00      	nop
  HAL_UART_IRQHandler(huart);
 8000eca:	68f8      	ldr	r0, [r7, #12]
 8000ecc:	f002 fc48 	bl	8003760 <HAL_UART_IRQHandler>
 8000ed0:	bf00      	nop
 8000ed2:	3718      	adds	r7, #24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000291 	.word	0x20000291

08000edc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000edc:	480d      	ldr	r0, [pc, #52]	; (8000f14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ede:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ee0:	f000 f825 	bl	8000f2e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ee4:	480c      	ldr	r0, [pc, #48]	; (8000f18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ee6:	490d      	ldr	r1, [pc, #52]	; (8000f1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ee8:	4a0d      	ldr	r2, [pc, #52]	; (8000f20 <LoopForever+0xe>)
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eec:	e002      	b.n	8000ef4 <LoopCopyDataInit>

08000eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef2:	3304      	adds	r3, #4

08000ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef8:	d3f9      	bcc.n	8000eee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efa:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000efc:	4c0a      	ldr	r4, [pc, #40]	; (8000f28 <LoopForever+0x16>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f00:	e001      	b.n	8000f06 <LoopFillZerobss>

08000f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f04:	3204      	adds	r2, #4

08000f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f08:	d3fb      	bcc.n	8000f02 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f0a:	f003 fd4b 	bl	80049a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f0e:	f7ff fc7d 	bl	800080c <main>

08000f12 <LoopForever>:

LoopForever:
    b LoopForever
 8000f12:	e7fe      	b.n	8000f12 <LoopForever>
  ldr   r0, =_estack
 8000f14:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f1c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f20:	08004b3c 	.word	0x08004b3c
  ldr r2, =_sbss
 8000f24:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f28:	20000298 	.word	0x20000298

08000f2c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f2c:	e7fe      	b.n	8000f2c <ADC_IRQHandler>

08000f2e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bc80      	pop	{r7}
 8000f38:	4770      	bx	lr
	...

08000f3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f42:	2300      	movs	r3, #0
 8000f44:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f46:	2003      	movs	r0, #3
 8000f48:	f000 f93a 	bl	80011c0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000f4c:	f001 fe08 	bl	8002b60 <HAL_RCC_GetHCLKFreq>
 8000f50:	4603      	mov	r3, r0
 8000f52:	4a09      	ldr	r2, [pc, #36]	; (8000f78 <HAL_Init+0x3c>)
 8000f54:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f56:	2000      	movs	r0, #0
 8000f58:	f000 f810 	bl	8000f7c <HAL_InitTick>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d002      	beq.n	8000f68 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	71fb      	strb	r3, [r7, #7]
 8000f66:	e001      	b.n	8000f6c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f68:	f7ff fe3b 	bl	8000be2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000000 	.word	0x20000000

08000f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f84:	2300      	movs	r3, #0
 8000f86:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f88:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <HAL_InitTick+0x6c>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d024      	beq.n	8000fda <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f90:	f001 fde6 	bl	8002b60 <HAL_RCC_GetHCLKFreq>
 8000f94:	4602      	mov	r2, r0
 8000f96:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <HAL_InitTick+0x6c>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa0:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 f93c 	bl	8001226 <HAL_SYSTICK_Config>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d10f      	bne.n	8000fd4 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b0f      	cmp	r3, #15
 8000fb8:	d809      	bhi.n	8000fce <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	6879      	ldr	r1, [r7, #4]
 8000fbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fc2:	f000 f908 	bl	80011d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fc6:	4a09      	ldr	r2, [pc, #36]	; (8000fec <HAL_InitTick+0x70>)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6013      	str	r3, [r2, #0]
 8000fcc:	e007      	b.n	8000fde <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	73fb      	strb	r3, [r7, #15]
 8000fd2:	e004      	b.n	8000fde <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	73fb      	strb	r3, [r7, #15]
 8000fd8:	e001      	b.n	8000fde <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000008 	.word	0x20000008
 8000fec:	20000004 	.word	0x20000004

08000ff0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <HAL_IncTick+0x1c>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b05      	ldr	r3, [pc, #20]	; (8001010 <HAL_IncTick+0x20>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4413      	add	r3, r2
 8001000:	4a03      	ldr	r2, [pc, #12]	; (8001010 <HAL_IncTick+0x20>)
 8001002:	6013      	str	r3, [r2, #0]
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr
 800100c:	20000008 	.word	0x20000008
 8001010:	20000294 	.word	0x20000294

08001014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return uwTick;
 8001018:	4b02      	ldr	r3, [pc, #8]	; (8001024 <HAL_GetTick+0x10>)
 800101a:	681b      	ldr	r3, [r3, #0]
}
 800101c:	4618      	mov	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr
 8001024:	20000294 	.word	0x20000294

08001028 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001038:	4b0c      	ldr	r3, [pc, #48]	; (800106c <__NVIC_SetPriorityGrouping+0x44>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800103e:	68ba      	ldr	r2, [r7, #8]
 8001040:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001044:	4013      	ands	r3, r2
 8001046:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001050:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800105a:	4a04      	ldr	r2, [pc, #16]	; (800106c <__NVIC_SetPriorityGrouping+0x44>)
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	60d3      	str	r3, [r2, #12]
}
 8001060:	bf00      	nop
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001074:	4b04      	ldr	r3, [pc, #16]	; (8001088 <__NVIC_GetPriorityGrouping+0x18>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	0a1b      	lsrs	r3, r3, #8
 800107a:	f003 0307 	and.w	r3, r3, #7
}
 800107e:	4618      	mov	r0, r3
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	2b00      	cmp	r3, #0
 800109c:	db0b      	blt.n	80010b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	f003 021f 	and.w	r2, r3, #31
 80010a4:	4906      	ldr	r1, [pc, #24]	; (80010c0 <__NVIC_EnableIRQ+0x34>)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	095b      	lsrs	r3, r3, #5
 80010ac:	2001      	movs	r0, #1
 80010ae:	fa00 f202 	lsl.w	r2, r0, r2
 80010b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr
 80010c0:	e000e100 	.word	0xe000e100

080010c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	6039      	str	r1, [r7, #0]
 80010ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	db0a      	blt.n	80010ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	490c      	ldr	r1, [pc, #48]	; (8001110 <__NVIC_SetPriority+0x4c>)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	0112      	lsls	r2, r2, #4
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	440b      	add	r3, r1
 80010e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010ec:	e00a      	b.n	8001104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4908      	ldr	r1, [pc, #32]	; (8001114 <__NVIC_SetPriority+0x50>)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	f003 030f 	and.w	r3, r3, #15
 80010fa:	3b04      	subs	r3, #4
 80010fc:	0112      	lsls	r2, r2, #4
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	440b      	add	r3, r1
 8001102:	761a      	strb	r2, [r3, #24]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	bc80      	pop	{r7}
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000e100 	.word	0xe000e100
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001118:	b480      	push	{r7}
 800111a:	b089      	sub	sp, #36	; 0x24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	f1c3 0307 	rsb	r3, r3, #7
 8001132:	2b04      	cmp	r3, #4
 8001134:	bf28      	it	cs
 8001136:	2304      	movcs	r3, #4
 8001138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3304      	adds	r3, #4
 800113e:	2b06      	cmp	r3, #6
 8001140:	d902      	bls.n	8001148 <NVIC_EncodePriority+0x30>
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3b03      	subs	r3, #3
 8001146:	e000      	b.n	800114a <NVIC_EncodePriority+0x32>
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800114c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43da      	mvns	r2, r3
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	401a      	ands	r2, r3
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001160:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	fa01 f303 	lsl.w	r3, r1, r3
 800116a:	43d9      	mvns	r1, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	4313      	orrs	r3, r2
         );
}
 8001172:	4618      	mov	r0, r3
 8001174:	3724      	adds	r7, #36	; 0x24
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr

0800117c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3b01      	subs	r3, #1
 8001188:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800118c:	d301      	bcc.n	8001192 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800118e:	2301      	movs	r3, #1
 8001190:	e00f      	b.n	80011b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001192:	4a0a      	ldr	r2, [pc, #40]	; (80011bc <SysTick_Config+0x40>)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3b01      	subs	r3, #1
 8001198:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800119a:	210f      	movs	r1, #15
 800119c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011a0:	f7ff ff90 	bl	80010c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a4:	4b05      	ldr	r3, [pc, #20]	; (80011bc <SysTick_Config+0x40>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011aa:	4b04      	ldr	r3, [pc, #16]	; (80011bc <SysTick_Config+0x40>)
 80011ac:	2207      	movs	r2, #7
 80011ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	e000e010 	.word	0xe000e010

080011c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff ff2d 	bl	8001028 <__NVIC_SetPriorityGrouping>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b086      	sub	sp, #24
 80011da:	af00      	add	r7, sp, #0
 80011dc:	4603      	mov	r3, r0
 80011de:	60b9      	str	r1, [r7, #8]
 80011e0:	607a      	str	r2, [r7, #4]
 80011e2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011e4:	f7ff ff44 	bl	8001070 <__NVIC_GetPriorityGrouping>
 80011e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	68b9      	ldr	r1, [r7, #8]
 80011ee:	6978      	ldr	r0, [r7, #20]
 80011f0:	f7ff ff92 	bl	8001118 <NVIC_EncodePriority>
 80011f4:	4602      	mov	r2, r0
 80011f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fa:	4611      	mov	r1, r2
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ff61 	bl	80010c4 <__NVIC_SetPriority>
}
 8001202:	bf00      	nop
 8001204:	3718      	adds	r7, #24
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	4603      	mov	r3, r0
 8001212:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ff37 	bl	800108c <__NVIC_EnableIRQ>
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff ffa4 	bl	800117c <SysTick_Config>
 8001234:	4603      	mov	r3, r0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e08e      	b.n	8001370 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	461a      	mov	r2, r3
 8001258:	4b47      	ldr	r3, [pc, #284]	; (8001378 <HAL_DMA_Init+0x138>)
 800125a:	429a      	cmp	r2, r3
 800125c:	d80f      	bhi.n	800127e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	461a      	mov	r2, r3
 8001264:	4b45      	ldr	r3, [pc, #276]	; (800137c <HAL_DMA_Init+0x13c>)
 8001266:	4413      	add	r3, r2
 8001268:	4a45      	ldr	r2, [pc, #276]	; (8001380 <HAL_DMA_Init+0x140>)
 800126a:	fba2 2303 	umull	r2, r3, r2, r3
 800126e:	091b      	lsrs	r3, r3, #4
 8001270:	009a      	lsls	r2, r3, #2
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a42      	ldr	r2, [pc, #264]	; (8001384 <HAL_DMA_Init+0x144>)
 800127a:	641a      	str	r2, [r3, #64]	; 0x40
 800127c:	e00e      	b.n	800129c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	461a      	mov	r2, r3
 8001284:	4b40      	ldr	r3, [pc, #256]	; (8001388 <HAL_DMA_Init+0x148>)
 8001286:	4413      	add	r3, r2
 8001288:	4a3d      	ldr	r2, [pc, #244]	; (8001380 <HAL_DMA_Init+0x140>)
 800128a:	fba2 2303 	umull	r2, r3, r2, r3
 800128e:	091b      	lsrs	r3, r3, #4
 8001290:	009a      	lsls	r2, r3, #2
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a3c      	ldr	r2, [pc, #240]	; (800138c <HAL_DMA_Init+0x14c>)
 800129a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2202      	movs	r2, #2
 80012a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	6812      	ldr	r2, [r2, #0]
 80012ae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80012b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012b6:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	6819      	ldr	r1, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689a      	ldr	r2, [r3, #8]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	431a      	orrs	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	691b      	ldr	r3, [r3, #16]
 80012cc:	431a      	orrs	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	431a      	orrs	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	431a      	orrs	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	431a      	orrs	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a1b      	ldr	r3, [r3, #32]
 80012e4:	431a      	orrs	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	430a      	orrs	r2, r1
 80012ec:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 fa02 	bl	80016f8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80012fc:	d102      	bne.n	8001304 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800130c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001310:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800131a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d010      	beq.n	8001346 <HAL_DMA_Init+0x106>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b04      	cmp	r3, #4
 800132a:	d80c      	bhi.n	8001346 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f000 fa2b 	bl	8001788 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	e008      	b.n	8001358 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2201      	movs	r2, #1
 8001362:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40020407 	.word	0x40020407
 800137c:	bffdfff8 	.word	0xbffdfff8
 8001380:	cccccccd 	.word	0xcccccccd
 8001384:	40020000 	.word	0x40020000
 8001388:	bffdfbf8 	.word	0xbffdfbf8
 800138c:	40020400 	.word	0x40020400

08001390 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e04f      	b.n	8001442 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d008      	beq.n	80013c0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2204      	movs	r2, #4
 80013b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e040      	b.n	8001442 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f022 020e 	bic.w	r2, r2, #14
 80013ce:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f022 0201 	bic.w	r2, r2, #1
 80013ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f4:	f003 021c 	and.w	r2, r3, #28
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	2101      	movs	r1, #1
 80013fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001402:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800140c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001412:	2b00      	cmp	r3, #0
 8001414:	d00c      	beq.n	8001430 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001420:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001424:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800142e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2201      	movs	r2, #1
 8001434:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr

0800144c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001454:	2300      	movs	r3, #0
 8001456:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800145e:	b2db      	uxtb	r3, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d005      	beq.n	8001470 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2204      	movs	r2, #4
 8001468:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	73fb      	strb	r3, [r7, #15]
 800146e:	e047      	b.n	8001500 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f022 020e 	bic.w	r2, r2, #14
 800147e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f022 0201 	bic.w	r2, r2, #1
 800148e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800149a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800149e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a4:	f003 021c 	and.w	r2, r3, #28
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ac:	2101      	movs	r1, #1
 80014ae:	fa01 f202 	lsl.w	r2, r1, r2
 80014b2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80014bc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d00c      	beq.n	80014e0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014d4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80014de:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2201      	movs	r2, #1
 80014e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	4798      	blx	r3
    }
  }
  return status;
 8001500:	7bfb      	ldrb	r3, [r7, #15]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
	...

0800150c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001528:	f003 031c 	and.w	r3, r3, #28
 800152c:	2204      	movs	r2, #4
 800152e:	409a      	lsls	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4013      	ands	r3, r2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d027      	beq.n	8001588 <HAL_DMA_IRQHandler+0x7c>
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	f003 0304 	and.w	r3, r3, #4
 800153e:	2b00      	cmp	r3, #0
 8001540:	d022      	beq.n	8001588 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0320 	and.w	r3, r3, #32
 800154c:	2b00      	cmp	r3, #0
 800154e:	d107      	bne.n	8001560 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f022 0204 	bic.w	r2, r2, #4
 800155e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001564:	f003 021c 	and.w	r2, r3, #28
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156c:	2104      	movs	r1, #4
 800156e:	fa01 f202 	lsl.w	r2, r1, r2
 8001572:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001578:	2b00      	cmp	r3, #0
 800157a:	f000 8081 	beq.w	8001680 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001586:	e07b      	b.n	8001680 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158c:	f003 031c 	and.w	r3, r3, #28
 8001590:	2202      	movs	r2, #2
 8001592:	409a      	lsls	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4013      	ands	r3, r2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d03d      	beq.n	8001618 <HAL_DMA_IRQHandler+0x10c>
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d038      	beq.n	8001618 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0320 	and.w	r3, r3, #32
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d10b      	bne.n	80015cc <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f022 020a 	bic.w	r2, r2, #10
 80015c2:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	461a      	mov	r2, r3
 80015d2:	4b2e      	ldr	r3, [pc, #184]	; (800168c <HAL_DMA_IRQHandler+0x180>)
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d909      	bls.n	80015ec <HAL_DMA_IRQHandler+0xe0>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015dc:	f003 031c 	and.w	r3, r3, #28
 80015e0:	4a2b      	ldr	r2, [pc, #172]	; (8001690 <HAL_DMA_IRQHandler+0x184>)
 80015e2:	2102      	movs	r1, #2
 80015e4:	fa01 f303 	lsl.w	r3, r1, r3
 80015e8:	6053      	str	r3, [r2, #4]
 80015ea:	e008      	b.n	80015fe <HAL_DMA_IRQHandler+0xf2>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f0:	f003 031c 	and.w	r3, r3, #28
 80015f4:	4a27      	ldr	r2, [pc, #156]	; (8001694 <HAL_DMA_IRQHandler+0x188>)
 80015f6:	2102      	movs	r1, #2
 80015f8:	fa01 f303 	lsl.w	r3, r1, r3
 80015fc:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160a:	2b00      	cmp	r3, #0
 800160c:	d038      	beq.n	8001680 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001616:	e033      	b.n	8001680 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161c:	f003 031c 	and.w	r3, r3, #28
 8001620:	2208      	movs	r2, #8
 8001622:	409a      	lsls	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	4013      	ands	r3, r2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d02a      	beq.n	8001682 <HAL_DMA_IRQHandler+0x176>
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	f003 0308 	and.w	r3, r3, #8
 8001632:	2b00      	cmp	r3, #0
 8001634:	d025      	beq.n	8001682 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f022 020e 	bic.w	r2, r2, #14
 8001644:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	f003 021c 	and.w	r2, r3, #28
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	2101      	movs	r1, #1
 8001654:	fa01 f202 	lsl.w	r2, r1, r2
 8001658:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2201      	movs	r2, #1
 800165e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2201      	movs	r2, #1
 8001664:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001674:	2b00      	cmp	r3, #0
 8001676:	d004      	beq.n	8001682 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001680:	bf00      	nop
 8001682:	bf00      	nop
}
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40020080 	.word	0x40020080
 8001690:	40020400 	.word	0x40020400
 8001694:	40020000 	.word	0x40020000

08001698 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016a2:	2300      	movs	r3, #0
 80016a4:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d103      	bne.n	80016b4 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	72fb      	strb	r3, [r7, #11]
    return status;
 80016b0:	7afb      	ldrb	r3, [r7, #11]
 80016b2:	e01b      	b.n	80016ec <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	f003 0310 	and.w	r3, r3, #16
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d00d      	beq.n	80016e2 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d004      	beq.n	80016da <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	e003      	b.n	80016e2 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80016e0:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	601a      	str	r2, [r3, #0]

  return status;
 80016ea:	7afb      	ldrb	r3, [r7, #11]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr
	...

080016f8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	461a      	mov	r2, r3
 8001706:	4b1c      	ldr	r3, [pc, #112]	; (8001778 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8001708:	429a      	cmp	r2, r3
 800170a:	d813      	bhi.n	8001734 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001710:	089b      	lsrs	r3, r3, #2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001718:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	b2db      	uxtb	r3, r3
 8001726:	3b08      	subs	r3, #8
 8001728:	4a14      	ldr	r2, [pc, #80]	; (800177c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800172a:	fba2 2303 	umull	r2, r3, r2, r3
 800172e:	091b      	lsrs	r3, r3, #4
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	e011      	b.n	8001758 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001738:	089b      	lsrs	r3, r3, #2
 800173a:	009a      	lsls	r2, r3, #2
 800173c:	4b10      	ldr	r3, [pc, #64]	; (8001780 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800173e:	4413      	add	r3, r2
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	b2db      	uxtb	r3, r3
 800174a:	3b08      	subs	r3, #8
 800174c:	4a0b      	ldr	r2, [pc, #44]	; (800177c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800174e:	fba2 2303 	umull	r2, r3, r2, r3
 8001752:	091b      	lsrs	r3, r3, #4
 8001754:	3307      	adds	r3, #7
 8001756:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a0a      	ldr	r2, [pc, #40]	; (8001784 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 800175c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f003 031f 	and.w	r3, r3, #31
 8001764:	2201      	movs	r2, #1
 8001766:	409a      	lsls	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800176c:	bf00      	nop
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	bc80      	pop	{r7}
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	40020407 	.word	0x40020407
 800177c:	cccccccd 	.word	0xcccccccd
 8001780:	4002081c 	.word	0x4002081c
 8001784:	40020880 	.word	0x40020880

08001788 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001798:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800179e:	4413      	add	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	461a      	mov	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a08      	ldr	r2, [pc, #32]	; (80017cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80017ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	3b01      	subs	r3, #1
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	2201      	movs	r2, #1
 80017b8:	409a      	lsls	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80017be:	bf00      	nop
 80017c0:	3714      	adds	r7, #20
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr
 80017c8:	1000823f 	.word	0x1000823f
 80017cc:	40020940 	.word	0x40020940

080017d0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b087      	sub	sp, #28
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017de:	e140      	b.n	8001a62 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	2101      	movs	r1, #1
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ec:	4013      	ands	r3, r2
 80017ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 8132 	beq.w	8001a5c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 0303 	and.w	r3, r3, #3
 8001800:	2b01      	cmp	r3, #1
 8001802:	d005      	beq.n	8001810 <HAL_GPIO_Init+0x40>
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d130      	bne.n	8001872 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	2203      	movs	r2, #3
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	4013      	ands	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	68da      	ldr	r2, [r3, #12]
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	4313      	orrs	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001846:	2201      	movs	r2, #1
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43db      	mvns	r3, r3
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	4013      	ands	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	091b      	lsrs	r3, r3, #4
 800185c:	f003 0201 	and.w	r2, r3, #1
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	4313      	orrs	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f003 0303 	and.w	r3, r3, #3
 800187a:	2b03      	cmp	r3, #3
 800187c:	d017      	beq.n	80018ae <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	2203      	movs	r2, #3
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4013      	ands	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d123      	bne.n	8001902 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	08da      	lsrs	r2, r3, #3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3208      	adds	r2, #8
 80018c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	220f      	movs	r2, #15
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43db      	mvns	r3, r3
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4013      	ands	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	691a      	ldr	r2, [r3, #16]
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	08da      	lsrs	r2, r3, #3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3208      	adds	r2, #8
 80018fc:	6939      	ldr	r1, [r7, #16]
 80018fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	2203      	movs	r2, #3
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4013      	ands	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f003 0203 	and.w	r2, r3, #3
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 808c 	beq.w	8001a5c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001944:	4a4e      	ldr	r2, [pc, #312]	; (8001a80 <HAL_GPIO_Init+0x2b0>)
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	089b      	lsrs	r3, r3, #2
 800194a:	3302      	adds	r3, #2
 800194c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001950:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	f003 0303 	and.w	r3, r3, #3
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	2207      	movs	r2, #7
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	4013      	ands	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800196e:	d00d      	beq.n	800198c <HAL_GPIO_Init+0x1bc>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a44      	ldr	r2, [pc, #272]	; (8001a84 <HAL_GPIO_Init+0x2b4>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d007      	beq.n	8001988 <HAL_GPIO_Init+0x1b8>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a43      	ldr	r2, [pc, #268]	; (8001a88 <HAL_GPIO_Init+0x2b8>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d101      	bne.n	8001984 <HAL_GPIO_Init+0x1b4>
 8001980:	2302      	movs	r3, #2
 8001982:	e004      	b.n	800198e <HAL_GPIO_Init+0x1be>
 8001984:	2307      	movs	r3, #7
 8001986:	e002      	b.n	800198e <HAL_GPIO_Init+0x1be>
 8001988:	2301      	movs	r3, #1
 800198a:	e000      	b.n	800198e <HAL_GPIO_Init+0x1be>
 800198c:	2300      	movs	r3, #0
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	f002 0203 	and.w	r2, r2, #3
 8001994:	0092      	lsls	r2, r2, #2
 8001996:	4093      	lsls	r3, r2
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	4313      	orrs	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800199e:	4938      	ldr	r1, [pc, #224]	; (8001a80 <HAL_GPIO_Init+0x2b0>)
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	089b      	lsrs	r3, r3, #2
 80019a4:	3302      	adds	r3, #2
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019ac:	4b37      	ldr	r3, [pc, #220]	; (8001a8c <HAL_GPIO_Init+0x2bc>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	43db      	mvns	r3, r3
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	4013      	ands	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d003      	beq.n	80019d0 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019d0:	4a2e      	ldr	r2, [pc, #184]	; (8001a8c <HAL_GPIO_Init+0x2bc>)
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80019d6:	4b2d      	ldr	r3, [pc, #180]	; (8001a8c <HAL_GPIO_Init+0x2bc>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	43db      	mvns	r3, r3
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	4013      	ands	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019fa:	4a24      	ldr	r2, [pc, #144]	; (8001a8c <HAL_GPIO_Init+0x2bc>)
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001a00:	4b22      	ldr	r3, [pc, #136]	; (8001a8c <HAL_GPIO_Init+0x2bc>)
 8001a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a06:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d003      	beq.n	8001a26 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001a26:	4a19      	ldr	r2, [pc, #100]	; (8001a8c <HAL_GPIO_Init+0x2bc>)
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001a2e:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <HAL_GPIO_Init+0x2bc>)
 8001a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a34:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d003      	beq.n	8001a54 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001a54:	4a0d      	ldr	r2, [pc, #52]	; (8001a8c <HAL_GPIO_Init+0x2bc>)
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f47f aeb7 	bne.w	80017e0 <HAL_GPIO_Init+0x10>
  }
}
 8001a72:	bf00      	nop
 8001a74:	bf00      	nop
 8001a76:	371c      	adds	r7, #28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	40010000 	.word	0x40010000
 8001a84:	48000400 	.word	0x48000400
 8001a88:	48000800 	.word	0x48000800
 8001a8c:	58000800 	.word	0x58000800

08001a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	807b      	strh	r3, [r7, #2]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aa0:	787b      	ldrb	r3, [r7, #1]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001aa6:	887a      	ldrh	r2, [r7, #2]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001aac:	e002      	b.n	8001ab4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001aae:	887a      	ldrh	r2, [r7, #2]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr
	...

08001ac0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ac4:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a03      	ldr	r2, [pc, #12]	; (8001ad8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ace:	6013      	str	r3, [r2, #0]
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr
 8001ad8:	58000400 	.word	0x58000400

08001adc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001ae0:	4b03      	ldr	r3, [pc, #12]	; (8001af0 <HAL_PWREx_GetVoltageRange+0x14>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr
 8001af0:	58000400 	.word	0x58000400

08001af4 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001af8:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b04:	d101      	bne.n	8001b0a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001b06:	2301      	movs	r3, #1
 8001b08:	e000      	b.n	8001b0c <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr
 8001b14:	58000400 	.word	0x58000400

08001b18 <LL_RCC_HSE_EnableTcxo>:
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001b1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b2a:	6013      	str	r3, [r2, #0]
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr

08001b34 <LL_RCC_HSE_DisableTcxo>:
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001b38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b46:	6013      	str	r3, [r2, #0]
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr

08001b50 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b62:	d101      	bne.n	8001b68 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001b64:	2301      	movs	r3, #1
 8001b66:	e000      	b.n	8001b6a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr

08001b72 <LL_RCC_HSE_Enable>:
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b84:	6013      	str	r3, [r2, #0]
}
 8001b86:	bf00      	nop
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr

08001b8e <LL_RCC_HSE_Disable>:
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ba0:	6013      	str	r3, [r2, #0]
}
 8001ba2:	bf00      	nop
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr

08001baa <LL_RCC_HSE_IsReady>:
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001bbc:	d101      	bne.n	8001bc2 <LL_RCC_HSE_IsReady+0x18>
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <LL_RCC_HSE_IsReady+0x1a>
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr

08001bcc <LL_RCC_HSI_Enable>:
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bde:	6013      	str	r3, [r2, #0]
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr

08001be8 <LL_RCC_HSI_Disable>:
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bf6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bfa:	6013      	str	r3, [r2, #0]
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr

08001c04 <LL_RCC_HSI_IsReady>:
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c16:	d101      	bne.n	8001c1c <LL_RCC_HSI_IsReady+0x18>
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e000      	b.n	8001c1e <LL_RCC_HSI_IsReady+0x1a>
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr

08001c26 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	061b      	lsls	r3, r3, #24
 8001c3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c40:	4313      	orrs	r3, r2
 8001c42:	604b      	str	r3, [r1, #4]
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc80      	pop	{r7}
 8001c4c:	4770      	bx	lr

08001c4e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001c52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d101      	bne.n	8001c66 <LL_RCC_LSE_IsReady+0x18>
 8001c62:	2301      	movs	r3, #1
 8001c64:	e000      	b.n	8001c68 <LL_RCC_LSE_IsReady+0x1a>
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr

08001c70 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr

08001c90 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ca0:	f023 0301 	bic.w	r3, r3, #1
 8001ca4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr

08001cb0 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d101      	bne.n	8001cc8 <LL_RCC_LSI_IsReady+0x18>
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e000      	b.n	8001cca <LL_RCC_LSI_IsReady+0x1a>
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr

08001cd2 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	6013      	str	r3, [r2, #0]
}
 8001ce6:	bf00      	nop
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr

08001cee <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cfc:	f023 0301 	bic.w	r3, r3, #1
 8001d00:	6013      	str	r3, [r2, #0]
}
 8001d02:	bf00      	nop
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr

08001d0a <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d101      	bne.n	8001d20 <LL_RCC_MSI_IsReady+0x16>
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e000      	b.n	8001d22 <LL_RCC_MSI_IsReady+0x18>
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr

08001d2a <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0308 	and.w	r3, r3, #8
 8001d38:	2b08      	cmp	r3, #8
 8001d3a:	d101      	bne.n	8001d40 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e000      	b.n	8001d42 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr

08001d4a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr

08001d60 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d6c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr

08001d78 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	021b      	lsls	r3, r3, #8
 8001d8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d92:	4313      	orrs	r3, r2
 8001d94:	604b      	str	r3, [r1, #4]
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr

08001da0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f023 0203 	bic.w	r2, r3, #3
 8001db2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	608b      	str	r3, [r1, #8]
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bc80      	pop	{r7}
 8001dc4:	4770      	bx	lr

08001dc6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 030c 	and.w	r3, r3, #12
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr

08001ddc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	608b      	str	r3, [r1, #8]
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr

08001e02 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b083      	sub	sp, #12
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e0e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr

08001e2c <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e38:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e3c:	f023 020f 	bic.w	r2, r3, #15
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	091b      	lsrs	r3, r3, #4
 8001e44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr

08001e58 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	608b      	str	r3, [r1, #8]
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr

08001e7e <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001e86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	608b      	str	r3, [r1, #8]
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr

08001ea4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr

08001eba <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ec6:	011b      	lsls	r3, r3, #4
 8001ec8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr

08001ed4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bc80      	pop	{r7}
 8001ee8:	4770      	bx	lr

08001eea <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001eea:	b480      	push	{r7}
 8001eec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr

08001f00 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f12:	6013      	str	r3, [r2, #0]
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr

08001f1c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f2e:	6013      	str	r3, [r2, #0]
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr

08001f38 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f4a:	d101      	bne.n	8001f50 <LL_RCC_PLL_IsReady+0x18>
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e000      	b.n	8001f52 <LL_RCC_PLL_IsReady+0x1a>
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr

08001f5a <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	0a1b      	lsrs	r3, r3, #8
 8001f66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc80      	pop	{r7}
 8001f70:	4770      	bx	lr

08001f72 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr

08001f88 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr

08001f9e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	f003 0303 	and.w	r3, r3, #3
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr

08001fb4 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc6:	d101      	bne.n	8001fcc <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e000      	b.n	8001fce <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bc80      	pop	{r7}
 8001fd4:	4770      	bx	lr

08001fd6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fde:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001fea:	d101      	bne.n	8001ff0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001fec:	2301      	movs	r3, #1
 8001fee:	e000      	b.n	8001ff2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr

08001ffa <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002002:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800200a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800200e:	d101      	bne.n	8002014 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002010:	2301      	movs	r3, #1
 8002012:	e000      	b.n	8002016 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr

0800201e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800201e:	b480      	push	{r7}
 8002020:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002030:	d101      	bne.n	8002036 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002032:	2301      	movs	r3, #1
 8002034:	e000      	b.n	8002038 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr

08002040 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800204e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002052:	d101      	bne.n	8002058 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002054:	2301      	movs	r3, #1
 8002056:	e000      	b.n	800205a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr
	...

08002064 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b088      	sub	sp, #32
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e38b      	b.n	800278e <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002076:	f7ff fea6 	bl	8001dc6 <LL_RCC_GetSysClkSource>
 800207a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800207c:	f7ff ff8f 	bl	8001f9e <LL_RCC_PLL_GetMainSource>
 8002080:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0320 	and.w	r3, r3, #32
 800208a:	2b00      	cmp	r3, #0
 800208c:	f000 80c9 	beq.w	8002222 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d005      	beq.n	80020a2 <HAL_RCC_OscConfig+0x3e>
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	2b0c      	cmp	r3, #12
 800209a:	d17b      	bne.n	8002194 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d178      	bne.n	8002194 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020a2:	f7ff fe32 	bl	8001d0a <LL_RCC_MSI_IsReady>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d005      	beq.n	80020b8 <HAL_RCC_OscConfig+0x54>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e36a      	b.n	800278e <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d005      	beq.n	80020d6 <HAL_RCC_OscConfig+0x72>
 80020ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020d4:	e006      	b.n	80020e4 <HAL_RCC_OscConfig+0x80>
 80020d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020de:	091b      	lsrs	r3, r3, #4
 80020e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d222      	bcs.n	800212e <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ec:	4618      	mov	r0, r3
 80020ee:	f000 fd6f 	bl	8002bd0 <RCC_SetFlashLatencyFromMSIRange>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e348      	b.n	800278e <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002106:	f043 0308 	orr.w	r3, r3, #8
 800210a:	6013      	str	r3, [r2, #0]
 800210c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800211e:	4313      	orrs	r3, r2
 8002120:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff fe26 	bl	8001d78 <LL_RCC_MSI_SetCalibTrimming>
 800212c:	e021      	b.n	8002172 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800212e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002138:	f043 0308 	orr.w	r3, r3, #8
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002150:	4313      	orrs	r3, r2
 8002152:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff fe0d 	bl	8001d78 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002162:	4618      	mov	r0, r3
 8002164:	f000 fd34 	bl	8002bd0 <RCC_SetFlashLatencyFromMSIRange>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e30d      	b.n	800278e <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002172:	f000 fcf5 	bl	8002b60 <HAL_RCC_GetHCLKFreq>
 8002176:	4603      	mov	r3, r0
 8002178:	4aa1      	ldr	r2, [pc, #644]	; (8002400 <HAL_RCC_OscConfig+0x39c>)
 800217a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800217c:	4ba1      	ldr	r3, [pc, #644]	; (8002404 <HAL_RCC_OscConfig+0x3a0>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4618      	mov	r0, r3
 8002182:	f7fe fefb 	bl	8000f7c <HAL_InitTick>
 8002186:	4603      	mov	r3, r0
 8002188:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800218a:	7cfb      	ldrb	r3, [r7, #19]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d047      	beq.n	8002220 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8002190:	7cfb      	ldrb	r3, [r7, #19]
 8002192:	e2fc      	b.n	800278e <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d02c      	beq.n	80021f6 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800219c:	f7ff fd99 	bl	8001cd2 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021a0:	f7fe ff38 	bl	8001014 <HAL_GetTick>
 80021a4:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021a8:	f7fe ff34 	bl	8001014 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e2e9      	b.n	800278e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 80021ba:	f7ff fda6 	bl	8001d0a <LL_RCC_MSI_IsReady>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0f1      	beq.n	80021a8 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021ce:	f043 0308 	orr.w	r3, r3, #8
 80021d2:	6013      	str	r3, [r2, #0]
 80021d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021e6:	4313      	orrs	r3, r2
 80021e8:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff fdc2 	bl	8001d78 <LL_RCC_MSI_SetCalibTrimming>
 80021f4:	e015      	b.n	8002222 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021f6:	f7ff fd7a 	bl	8001cee <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021fa:	f7fe ff0b 	bl	8001014 <HAL_GetTick>
 80021fe:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002202:	f7fe ff07 	bl	8001014 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e2bc      	b.n	800278e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002214:	f7ff fd79 	bl	8001d0a <LL_RCC_MSI_IsReady>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1f1      	bne.n	8002202 <HAL_RCC_OscConfig+0x19e>
 800221e:	e000      	b.n	8002222 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002220:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d05f      	beq.n	80022ee <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	2b08      	cmp	r3, #8
 8002232:	d005      	beq.n	8002240 <HAL_RCC_OscConfig+0x1dc>
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	2b0c      	cmp	r3, #12
 8002238:	d10d      	bne.n	8002256 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	2b03      	cmp	r3, #3
 800223e:	d10a      	bne.n	8002256 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002240:	f7ff fcb3 	bl	8001baa <LL_RCC_HSE_IsReady>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d050      	beq.n	80022ec <HAL_RCC_OscConfig+0x288>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d14c      	bne.n	80022ec <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e29b      	b.n	800278e <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002268:	4313      	orrs	r3, r2
 800226a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002274:	d102      	bne.n	800227c <HAL_RCC_OscConfig+0x218>
 8002276:	f7ff fc7c 	bl	8001b72 <LL_RCC_HSE_Enable>
 800227a:	e00d      	b.n	8002298 <HAL_RCC_OscConfig+0x234>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002284:	d104      	bne.n	8002290 <HAL_RCC_OscConfig+0x22c>
 8002286:	f7ff fc47 	bl	8001b18 <LL_RCC_HSE_EnableTcxo>
 800228a:	f7ff fc72 	bl	8001b72 <LL_RCC_HSE_Enable>
 800228e:	e003      	b.n	8002298 <HAL_RCC_OscConfig+0x234>
 8002290:	f7ff fc7d 	bl	8001b8e <LL_RCC_HSE_Disable>
 8002294:	f7ff fc4e 	bl	8001b34 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d012      	beq.n	80022c6 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a0:	f7fe feb8 	bl	8001014 <HAL_GetTick>
 80022a4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a8:	f7fe feb4 	bl	8001014 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b64      	cmp	r3, #100	; 0x64
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e269      	b.n	800278e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 80022ba:	f7ff fc76 	bl	8001baa <LL_RCC_HSE_IsReady>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0f1      	beq.n	80022a8 <HAL_RCC_OscConfig+0x244>
 80022c4:	e013      	b.n	80022ee <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c6:	f7fe fea5 	bl	8001014 <HAL_GetTick>
 80022ca:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022ce:	f7fe fea1 	bl	8001014 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b64      	cmp	r3, #100	; 0x64
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e256      	b.n	800278e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 80022e0:	f7ff fc63 	bl	8001baa <LL_RCC_HSE_IsReady>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f1      	bne.n	80022ce <HAL_RCC_OscConfig+0x26a>
 80022ea:	e000      	b.n	80022ee <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ec:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d04b      	beq.n	8002392 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	2b04      	cmp	r3, #4
 80022fe:	d005      	beq.n	800230c <HAL_RCC_OscConfig+0x2a8>
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	2b0c      	cmp	r3, #12
 8002304:	d113      	bne.n	800232e <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	2b02      	cmp	r3, #2
 800230a:	d110      	bne.n	800232e <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800230c:	f7ff fc7a 	bl	8001c04 <LL_RCC_HSI_IsReady>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d005      	beq.n	8002322 <HAL_RCC_OscConfig+0x2be>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e235      	b.n	800278e <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff fc7d 	bl	8001c26 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800232c:	e031      	b.n	8002392 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d019      	beq.n	800236a <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002336:	f7ff fc49 	bl	8001bcc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800233a:	f7fe fe6b 	bl	8001014 <HAL_GetTick>
 800233e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002340:	e008      	b.n	8002354 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002342:	f7fe fe67 	bl	8001014 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b02      	cmp	r3, #2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e21c      	b.n	800278e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002354:	f7ff fc56 	bl	8001c04 <LL_RCC_HSI_IsReady>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0f1      	beq.n	8002342 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fc5f 	bl	8001c26 <LL_RCC_HSI_SetCalibTrimming>
 8002368:	e013      	b.n	8002392 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800236a:	f7ff fc3d 	bl	8001be8 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236e:	f7fe fe51 	bl	8001014 <HAL_GetTick>
 8002372:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002376:	f7fe fe4d 	bl	8001014 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e202      	b.n	800278e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002388:	f7ff fc3c 	bl	8001c04 <LL_RCC_HSI_IsReady>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1f1      	bne.n	8002376 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0308 	and.w	r3, r3, #8
 800239a:	2b00      	cmp	r3, #0
 800239c:	d06f      	beq.n	800247e <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d057      	beq.n	8002456 <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 80023a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023ae:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	69da      	ldr	r2, [r3, #28]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f003 0310 	and.w	r3, r3, #16
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d036      	beq.n	800242c <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d006      	beq.n	80023d6 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e1db      	b.n	800278e <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d018      	beq.n	8002412 <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 80023e0:	f7ff fc56 	bl	8001c90 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023e4:	f7fe fe16 	bl	8001014 <HAL_GetTick>
 80023e8:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80023ea:	e00d      	b.n	8002408 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ec:	f7fe fe12 	bl	8001014 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b11      	cmp	r3, #17
 80023f8:	d906      	bls.n	8002408 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e1c7      	b.n	800278e <HAL_RCC_OscConfig+0x72a>
 80023fe:	bf00      	nop
 8002400:	20000000 	.word	0x20000000
 8002404:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 8002408:	f7ff fc52 	bl	8001cb0 <LL_RCC_LSI_IsReady>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1ec      	bne.n	80023ec <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002416:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800241a:	f023 0210 	bic.w	r2, r3, #16
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002426:	4313      	orrs	r3, r2
 8002428:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800242c:	f7ff fc20 	bl	8001c70 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002430:	f7fe fdf0 	bl	8001014 <HAL_GetTick>
 8002434:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002438:	f7fe fdec 	bl	8001014 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b11      	cmp	r3, #17
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e1a1      	b.n	800278e <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 800244a:	f7ff fc31 	bl	8001cb0 <LL_RCC_LSI_IsReady>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0f1      	beq.n	8002438 <HAL_RCC_OscConfig+0x3d4>
 8002454:	e013      	b.n	800247e <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002456:	f7ff fc1b 	bl	8001c90 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800245a:	f7fe fddb 	bl	8001014 <HAL_GetTick>
 800245e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002462:	f7fe fdd7 	bl	8001014 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b11      	cmp	r3, #17
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e18c      	b.n	800278e <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002474:	f7ff fc1c 	bl	8001cb0 <LL_RCC_LSI_IsReady>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f1      	bne.n	8002462 <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0304 	and.w	r3, r3, #4
 8002486:	2b00      	cmp	r3, #0
 8002488:	f000 80d8 	beq.w	800263c <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800248c:	f7ff fb32 	bl	8001af4 <LL_PWR_IsEnabledBkUpAccess>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d113      	bne.n	80024be <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002496:	f7ff fb13 	bl	8001ac0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800249a:	f7fe fdbb 	bl	8001014 <HAL_GetTick>
 800249e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a2:	f7fe fdb7 	bl	8001014 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e16c      	b.n	800278e <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80024b4:	f7ff fb1e 	bl	8001af4 <LL_PWR_IsEnabledBkUpAccess>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0f1      	beq.n	80024a2 <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d07b      	beq.n	80025be <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	2b85      	cmp	r3, #133	; 0x85
 80024cc:	d003      	beq.n	80024d6 <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	2b05      	cmp	r3, #5
 80024d4:	d109      	bne.n	80024ea <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80024d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024e2:	f043 0304 	orr.w	r3, r3, #4
 80024e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ea:	f7fe fd93 	bl	8001014 <HAL_GetTick>
 80024ee:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80024f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002504:	e00a      	b.n	800251c <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002506:	f7fe fd85 	bl	8001014 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	f241 3288 	movw	r2, #5000	; 0x1388
 8002514:	4293      	cmp	r3, r2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e138      	b.n	800278e <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 800251c:	f7ff fb97 	bl	8001c4e <LL_RCC_LSE_IsReady>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0ef      	beq.n	8002506 <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	2b81      	cmp	r3, #129	; 0x81
 800252c:	d003      	beq.n	8002536 <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	2b85      	cmp	r3, #133	; 0x85
 8002534:	d121      	bne.n	800257a <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002536:	f7fe fd6d 	bl	8001014 <HAL_GetTick>
 800253a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800253c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002544:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800254c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002550:	e00a      	b.n	8002568 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002552:	f7fe fd5f 	bl	8001014 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002560:	4293      	cmp	r3, r2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e112      	b.n	800278e <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800256c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002570:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0ec      	beq.n	8002552 <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002578:	e060      	b.n	800263c <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257a:	f7fe fd4b 	bl	8001014 <HAL_GetTick>
 800257e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002588:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800258c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002590:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002594:	e00a      	b.n	80025ac <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002596:	f7fe fd3d 	bl	8001014 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e0f0      	b.n	800278e <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80025ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1ec      	bne.n	8002596 <HAL_RCC_OscConfig+0x532>
 80025bc:	e03e      	b.n	800263c <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025be:	f7fe fd29 	bl	8001014 <HAL_GetTick>
 80025c2:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80025c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80025d8:	e00a      	b.n	80025f0 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025da:	f7fe fd1b 	bl	8001014 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e0ce      	b.n	800278e <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80025f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1ec      	bne.n	80025da <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002600:	f7fe fd08 	bl	8001014 <HAL_GetTick>
 8002604:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800260a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800260e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002612:	f023 0301 	bic.w	r3, r3, #1
 8002616:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800261a:	e00a      	b.n	8002632 <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800261c:	f7fe fcfa 	bl	8001014 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	f241 3288 	movw	r2, #5000	; 0x1388
 800262a:	4293      	cmp	r3, r2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e0ad      	b.n	800278e <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002632:	f7ff fb0c 	bl	8001c4e <LL_RCC_LSE_IsReady>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1ef      	bne.n	800261c <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002640:	2b00      	cmp	r3, #0
 8002642:	f000 80a3 	beq.w	800278c <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	2b0c      	cmp	r3, #12
 800264a:	d076      	beq.n	800273a <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002650:	2b02      	cmp	r3, #2
 8002652:	d14b      	bne.n	80026ec <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002654:	f7ff fc62 	bl	8001f1c <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002658:	f7fe fcdc 	bl	8001014 <HAL_GetTick>
 800265c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002660:	f7fe fcd8 	bl	8001014 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b0a      	cmp	r3, #10
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e08d      	b.n	800278e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002672:	f7ff fc61 	bl	8001f38 <LL_RCC_PLL_IsReady>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1f1      	bne.n	8002660 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800267c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002680:	68da      	ldr	r2, [r3, #12]
 8002682:	4b45      	ldr	r3, [pc, #276]	; (8002798 <HAL_RCC_OscConfig+0x734>)
 8002684:	4013      	ands	r3, r2
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800268e:	4311      	orrs	r1, r2
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002694:	0212      	lsls	r2, r2, #8
 8002696:	4311      	orrs	r1, r2
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800269c:	4311      	orrs	r1, r2
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026a2:	4311      	orrs	r1, r2
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80026a8:	430a      	orrs	r2, r1
 80026aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026ae:	4313      	orrs	r3, r2
 80026b0:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026b2:	f7ff fc25 	bl	8001f00 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c6:	f7fe fca5 	bl	8001014 <HAL_GetTick>
 80026ca:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ce:	f7fe fca1 	bl	8001014 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b0a      	cmp	r3, #10
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e056      	b.n	800278e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 80026e0:	f7ff fc2a 	bl	8001f38 <LL_RCC_PLL_IsReady>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0f1      	beq.n	80026ce <HAL_RCC_OscConfig+0x66a>
 80026ea:	e04f      	b.n	800278c <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ec:	f7ff fc16 	bl	8001f1c <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80026f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026fa:	f023 0303 	bic.w	r3, r3, #3
 80026fe:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8002700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800270a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800270e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002712:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002714:	f7fe fc7e 	bl	8001014 <HAL_GetTick>
 8002718:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800271c:	f7fe fc7a 	bl	8001014 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b0a      	cmp	r3, #10
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e02f      	b.n	800278e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 800272e:	f7ff fc03 	bl	8001f38 <LL_RCC_PLL_IsReady>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1f1      	bne.n	800271c <HAL_RCC_OscConfig+0x6b8>
 8002738:	e028      	b.n	800278c <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273e:	2b01      	cmp	r3, #1
 8002740:	d101      	bne.n	8002746 <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e023      	b.n	800278e <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	f003 0203 	and.w	r2, r3, #3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002758:	429a      	cmp	r2, r3
 800275a:	d115      	bne.n	8002788 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002766:	429a      	cmp	r2, r3
 8002768:	d10e      	bne.n	8002788 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002774:	021b      	lsls	r3, r3, #8
 8002776:	429a      	cmp	r2, r3
 8002778:	d106      	bne.n	8002788 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002784:	429a      	cmp	r2, r3
 8002786:	d001      	beq.n	800278c <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e000      	b.n	800278e <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3720      	adds	r7, #32
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	11c1808c 	.word	0x11c1808c

0800279c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e12c      	b.n	8002a0a <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027b0:	4b98      	ldr	r3, [pc, #608]	; (8002a14 <HAL_RCC_ClockConfig+0x278>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d91b      	bls.n	80027f6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027be:	4b95      	ldr	r3, [pc, #596]	; (8002a14 <HAL_RCC_ClockConfig+0x278>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f023 0207 	bic.w	r2, r3, #7
 80027c6:	4993      	ldr	r1, [pc, #588]	; (8002a14 <HAL_RCC_ClockConfig+0x278>)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027ce:	f7fe fc21 	bl	8001014 <HAL_GetTick>
 80027d2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80027d6:	f7fe fc1d 	bl	8001014 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e110      	b.n	8002a0a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e8:	4b8a      	ldr	r3, [pc, #552]	; (8002a14 <HAL_RCC_ClockConfig+0x278>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d1ef      	bne.n	80027d6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d016      	beq.n	8002830 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff fae8 	bl	8001ddc <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800280c:	f7fe fc02 	bl	8001014 <HAL_GetTick>
 8002810:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002812:	e008      	b.n	8002826 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002814:	f7fe fbfe 	bl	8001014 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e0f1      	b.n	8002a0a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002826:	f7ff fbc5 	bl	8001fb4 <LL_RCC_IsActiveFlag_HPRE>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0f1      	beq.n	8002814 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0320 	and.w	r3, r3, #32
 8002838:	2b00      	cmp	r3, #0
 800283a:	d016      	beq.n	800286a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff fade 	bl	8001e02 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002846:	f7fe fbe5 	bl	8001014 <HAL_GetTick>
 800284a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800284c:	e008      	b.n	8002860 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800284e:	f7fe fbe1 	bl	8001014 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e0d4      	b.n	8002a0a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002860:	f7ff fbb9 	bl	8001fd6 <LL_RCC_IsActiveFlag_C2HPRE>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0f1      	beq.n	800284e <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002872:	2b00      	cmp	r3, #0
 8002874:	d016      	beq.n	80028a4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff fad6 	bl	8001e2c <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002880:	f7fe fbc8 	bl	8001014 <HAL_GetTick>
 8002884:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002886:	e008      	b.n	800289a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002888:	f7fe fbc4 	bl	8001014 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e0b7      	b.n	8002a0a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800289a:	f7ff fbae 	bl	8001ffa <LL_RCC_IsActiveFlag_SHDHPRE>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0f1      	beq.n	8002888 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0304 	and.w	r3, r3, #4
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d016      	beq.n	80028de <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff facf 	bl	8001e58 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80028ba:	f7fe fbab 	bl	8001014 <HAL_GetTick>
 80028be:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80028c2:	f7fe fba7 	bl	8001014 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e09a      	b.n	8002a0a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80028d4:	f7ff fba3 	bl	800201e <LL_RCC_IsActiveFlag_PPRE1>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0f1      	beq.n	80028c2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d017      	beq.n	800291a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff fac4 	bl	8001e7e <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80028f6:	f7fe fb8d 	bl	8001014 <HAL_GetTick>
 80028fa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80028fc:	e008      	b.n	8002910 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80028fe:	f7fe fb89 	bl	8001014 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e07c      	b.n	8002a0a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002910:	f7ff fb96 	bl	8002040 <LL_RCC_IsActiveFlag_PPRE2>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0f1      	beq.n	80028fe <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d043      	beq.n	80029ae <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2b02      	cmp	r3, #2
 800292c:	d106      	bne.n	800293c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800292e:	f7ff f93c 	bl	8001baa <LL_RCC_HSE_IsReady>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d11e      	bne.n	8002976 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e066      	b.n	8002a0a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	2b03      	cmp	r3, #3
 8002942:	d106      	bne.n	8002952 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002944:	f7ff faf8 	bl	8001f38 <LL_RCC_PLL_IsReady>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d113      	bne.n	8002976 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e05b      	b.n	8002a0a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d106      	bne.n	8002968 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800295a:	f7ff f9d6 	bl	8001d0a <LL_RCC_MSI_IsReady>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d108      	bne.n	8002976 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e050      	b.n	8002a0a <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002968:	f7ff f94c 	bl	8001c04 <LL_RCC_HSI_IsReady>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e049      	b.n	8002a0a <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff fa10 	bl	8001da0 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002980:	f7fe fb48 	bl	8001014 <HAL_GetTick>
 8002984:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002986:	e00a      	b.n	800299e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002988:	f7fe fb44 	bl	8001014 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	f241 3288 	movw	r2, #5000	; 0x1388
 8002996:	4293      	cmp	r3, r2
 8002998:	d901      	bls.n	800299e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e035      	b.n	8002a0a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800299e:	f7ff fa12 	bl	8001dc6 <LL_RCC_GetSysClkSource>
 80029a2:	4602      	mov	r2, r0
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d1ec      	bne.n	8002988 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029ae:	4b19      	ldr	r3, [pc, #100]	; (8002a14 <HAL_RCC_ClockConfig+0x278>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d21b      	bcs.n	80029f4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029bc:	4b15      	ldr	r3, [pc, #84]	; (8002a14 <HAL_RCC_ClockConfig+0x278>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f023 0207 	bic.w	r2, r3, #7
 80029c4:	4913      	ldr	r1, [pc, #76]	; (8002a14 <HAL_RCC_ClockConfig+0x278>)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029cc:	f7fe fb22 	bl	8001014 <HAL_GetTick>
 80029d0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80029d4:	f7fe fb1e 	bl	8001014 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e011      	b.n	8002a0a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e6:	4b0b      	ldr	r3, [pc, #44]	; (8002a14 <HAL_RCC_ClockConfig+0x278>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d1ef      	bne.n	80029d4 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80029f4:	f000 f8b4 	bl	8002b60 <HAL_RCC_GetHCLKFreq>
 80029f8:	4603      	mov	r3, r0
 80029fa:	4a07      	ldr	r2, [pc, #28]	; (8002a18 <HAL_RCC_ClockConfig+0x27c>)
 80029fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80029fe:	4b07      	ldr	r3, [pc, #28]	; (8002a1c <HAL_RCC_ClockConfig+0x280>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7fe faba 	bl	8000f7c <HAL_InitTick>
 8002a08:	4603      	mov	r3, r0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	58004000 	.word	0x58004000
 8002a18:	20000000 	.word	0x20000000
 8002a1c:	20000004 	.word	0x20000004

08002a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a20:	b590      	push	{r4, r7, lr}
 8002a22:	b087      	sub	sp, #28
 8002a24:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a2e:	f7ff f9ca 	bl	8001dc6 <LL_RCC_GetSysClkSource>
 8002a32:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a34:	f7ff fab3 	bl	8001f9e <LL_RCC_PLL_GetMainSource>
 8002a38:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d005      	beq.n	8002a4c <HAL_RCC_GetSysClockFreq+0x2c>
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	2b0c      	cmp	r3, #12
 8002a44:	d139      	bne.n	8002aba <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d136      	bne.n	8002aba <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002a4c:	f7ff f96d 	bl	8001d2a <LL_RCC_MSI_IsEnabledRangeSelect>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d115      	bne.n	8002a82 <HAL_RCC_GetSysClockFreq+0x62>
 8002a56:	f7ff f968 	bl	8001d2a <LL_RCC_MSI_IsEnabledRangeSelect>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d106      	bne.n	8002a6e <HAL_RCC_GetSysClockFreq+0x4e>
 8002a60:	f7ff f973 	bl	8001d4a <LL_RCC_MSI_GetRange>
 8002a64:	4603      	mov	r3, r0
 8002a66:	0a1b      	lsrs	r3, r3, #8
 8002a68:	f003 030f 	and.w	r3, r3, #15
 8002a6c:	e005      	b.n	8002a7a <HAL_RCC_GetSysClockFreq+0x5a>
 8002a6e:	f7ff f977 	bl	8001d60 <LL_RCC_MSI_GetRangeAfterStandby>
 8002a72:	4603      	mov	r3, r0
 8002a74:	0a1b      	lsrs	r3, r3, #8
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	4a36      	ldr	r2, [pc, #216]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x134>)
 8002a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a80:	e014      	b.n	8002aac <HAL_RCC_GetSysClockFreq+0x8c>
 8002a82:	f7ff f952 	bl	8001d2a <LL_RCC_MSI_IsEnabledRangeSelect>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d106      	bne.n	8002a9a <HAL_RCC_GetSysClockFreq+0x7a>
 8002a8c:	f7ff f95d 	bl	8001d4a <LL_RCC_MSI_GetRange>
 8002a90:	4603      	mov	r3, r0
 8002a92:	091b      	lsrs	r3, r3, #4
 8002a94:	f003 030f 	and.w	r3, r3, #15
 8002a98:	e005      	b.n	8002aa6 <HAL_RCC_GetSysClockFreq+0x86>
 8002a9a:	f7ff f961 	bl	8001d60 <LL_RCC_MSI_GetRangeAfterStandby>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	091b      	lsrs	r3, r3, #4
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	4a2b      	ldr	r2, [pc, #172]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x134>)
 8002aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aac:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d115      	bne.n	8002ae0 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002ab8:	e012      	b.n	8002ae0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	d102      	bne.n	8002ac6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ac0:	4b25      	ldr	r3, [pc, #148]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x138>)
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	e00c      	b.n	8002ae0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	d109      	bne.n	8002ae0 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002acc:	f7ff f840 	bl	8001b50 <LL_RCC_HSE_IsEnabledDiv2>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d102      	bne.n	8002adc <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002ad6:	4b20      	ldr	r3, [pc, #128]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x138>)
 8002ad8:	617b      	str	r3, [r7, #20]
 8002ada:	e001      	b.n	8002ae0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002adc:	4b1f      	ldr	r3, [pc, #124]	; (8002b5c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002ade:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ae0:	f7ff f971 	bl	8001dc6 <LL_RCC_GetSysClkSource>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b0c      	cmp	r3, #12
 8002ae8:	d12f      	bne.n	8002b4a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002aea:	f7ff fa58 	bl	8001f9e <LL_RCC_PLL_GetMainSource>
 8002aee:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d003      	beq.n	8002afe <HAL_RCC_GetSysClockFreq+0xde>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2b03      	cmp	r3, #3
 8002afa:	d003      	beq.n	8002b04 <HAL_RCC_GetSysClockFreq+0xe4>
 8002afc:	e00d      	b.n	8002b1a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002afe:	4b16      	ldr	r3, [pc, #88]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x138>)
 8002b00:	60fb      	str	r3, [r7, #12]
        break;
 8002b02:	e00d      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002b04:	f7ff f824 	bl	8001b50 <LL_RCC_HSE_IsEnabledDiv2>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d102      	bne.n	8002b14 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002b0e:	4b12      	ldr	r3, [pc, #72]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x138>)
 8002b10:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002b12:	e005      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002b14:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002b16:	60fb      	str	r3, [r7, #12]
        break;
 8002b18:	e002      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	60fb      	str	r3, [r7, #12]
        break;
 8002b1e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002b20:	f7ff fa1b 	bl	8001f5a <LL_RCC_PLL_GetN>
 8002b24:	4602      	mov	r2, r0
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	fb03 f402 	mul.w	r4, r3, r2
 8002b2c:	f7ff fa2c 	bl	8001f88 <LL_RCC_PLL_GetDivider>
 8002b30:	4603      	mov	r3, r0
 8002b32:	091b      	lsrs	r3, r3, #4
 8002b34:	3301      	adds	r3, #1
 8002b36:	fbb4 f4f3 	udiv	r4, r4, r3
 8002b3a:	f7ff fa1a 	bl	8001f72 <LL_RCC_PLL_GetR>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	0f5b      	lsrs	r3, r3, #29
 8002b42:	3301      	adds	r3, #1
 8002b44:	fbb4 f3f3 	udiv	r3, r4, r3
 8002b48:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002b4a:	697b      	ldr	r3, [r7, #20]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	371c      	adds	r7, #28
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd90      	pop	{r4, r7, pc}
 8002b54:	08004ac4 	.word	0x08004ac4
 8002b58:	00f42400 	.word	0x00f42400
 8002b5c:	01e84800 	.word	0x01e84800

08002b60 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b60:	b598      	push	{r3, r4, r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002b64:	f7ff ff5c 	bl	8002a20 <HAL_RCC_GetSysClockFreq>
 8002b68:	4604      	mov	r4, r0
 8002b6a:	f7ff f99b 	bl	8001ea4 <LL_RCC_GetAHBPrescaler>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	091b      	lsrs	r3, r3, #4
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	4a03      	ldr	r2, [pc, #12]	; (8002b84 <HAL_RCC_GetHCLKFreq+0x24>)
 8002b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b7c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	bd98      	pop	{r3, r4, r7, pc}
 8002b84:	08004a64 	.word	0x08004a64

08002b88 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b88:	b598      	push	{r3, r4, r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002b8c:	f7ff ffe8 	bl	8002b60 <HAL_RCC_GetHCLKFreq>
 8002b90:	4604      	mov	r4, r0
 8002b92:	f7ff f99f 	bl	8001ed4 <LL_RCC_GetAPB1Prescaler>
 8002b96:	4603      	mov	r3, r0
 8002b98:	0a1b      	lsrs	r3, r3, #8
 8002b9a:	4a03      	ldr	r2, [pc, #12]	; (8002ba8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ba0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	bd98      	pop	{r3, r4, r7, pc}
 8002ba8:	08004aa4 	.word	0x08004aa4

08002bac <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bac:	b598      	push	{r3, r4, r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002bb0:	f7ff ffd6 	bl	8002b60 <HAL_RCC_GetHCLKFreq>
 8002bb4:	4604      	mov	r4, r0
 8002bb6:	f7ff f998 	bl	8001eea <LL_RCC_GetAPB2Prescaler>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	0adb      	lsrs	r3, r3, #11
 8002bbe:	4a03      	ldr	r2, [pc, #12]	; (8002bcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	bd98      	pop	{r3, r4, r7, pc}
 8002bcc:	08004aa4 	.word	0x08004aa4

08002bd0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002bd0:	b590      	push	{r4, r7, lr}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	091b      	lsrs	r3, r3, #4
 8002bdc:	f003 030f 	and.w	r3, r3, #15
 8002be0:	4a10      	ldr	r2, [pc, #64]	; (8002c24 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8002be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be6:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002be8:	f7ff f967 	bl	8001eba <LL_RCC_GetAHB3Prescaler>
 8002bec:	4603      	mov	r3, r0
 8002bee:	091b      	lsrs	r3, r3, #4
 8002bf0:	f003 030f 	and.w	r3, r3, #15
 8002bf4:	4a0c      	ldr	r2, [pc, #48]	; (8002c28 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c00:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	4a09      	ldr	r2, [pc, #36]	; (8002c2c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002c06:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0a:	0c9c      	lsrs	r4, r3, #18
 8002c0c:	f7fe ff66 	bl	8001adc <HAL_PWREx_GetVoltageRange>
 8002c10:	4603      	mov	r3, r0
 8002c12:	4619      	mov	r1, r3
 8002c14:	4620      	mov	r0, r4
 8002c16:	f000 f80b 	bl	8002c30 <RCC_SetFlashLatency>
 8002c1a:	4603      	mov	r3, r0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd90      	pop	{r4, r7, pc}
 8002c24:	08004ac4 	.word	0x08004ac4
 8002c28:	08004a64 	.word	0x08004a64
 8002c2c:	431bde83 	.word	0x431bde83

08002c30 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08e      	sub	sp, #56	; 0x38
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002c3a:	4a3a      	ldr	r2, [pc, #232]	; (8002d24 <RCC_SetFlashLatency+0xf4>)
 8002c3c:	f107 0320 	add.w	r3, r7, #32
 8002c40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c44:	6018      	str	r0, [r3, #0]
 8002c46:	3304      	adds	r3, #4
 8002c48:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002c4a:	4a37      	ldr	r2, [pc, #220]	; (8002d28 <RCC_SetFlashLatency+0xf8>)
 8002c4c:	f107 0318 	add.w	r3, r7, #24
 8002c50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c54:	6018      	str	r0, [r3, #0]
 8002c56:	3304      	adds	r3, #4
 8002c58:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002c5a:	4a34      	ldr	r2, [pc, #208]	; (8002d2c <RCC_SetFlashLatency+0xfc>)
 8002c5c:	f107 030c 	add.w	r3, r7, #12
 8002c60:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c62:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002c66:	2300      	movs	r3, #0
 8002c68:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c70:	d11b      	bne.n	8002caa <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002c72:	2300      	movs	r3, #0
 8002c74:	633b      	str	r3, [r7, #48]	; 0x30
 8002c76:	e014      	b.n	8002ca2 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	3338      	adds	r3, #56	; 0x38
 8002c7e:	443b      	add	r3, r7
 8002c80:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002c84:	461a      	mov	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d807      	bhi.n	8002c9c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	3338      	adds	r3, #56	; 0x38
 8002c92:	443b      	add	r3, r7
 8002c94:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002c98:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002c9a:	e021      	b.n	8002ce0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	633b      	str	r3, [r7, #48]	; 0x30
 8002ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d9e7      	bls.n	8002c78 <RCC_SetFlashLatency+0x48>
 8002ca8:	e01a      	b.n	8002ce0 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002caa:	2300      	movs	r3, #0
 8002cac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cae:	e014      	b.n	8002cda <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	3338      	adds	r3, #56	; 0x38
 8002cb6:	443b      	add	r3, r7
 8002cb8:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d807      	bhi.n	8002cd4 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	3338      	adds	r3, #56	; 0x38
 8002cca:	443b      	add	r3, r7
 8002ccc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002cd0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002cd2:	e005      	b.n	8002ce0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d9e7      	bls.n	8002cb0 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ce0:	4b13      	ldr	r3, [pc, #76]	; (8002d30 <RCC_SetFlashLatency+0x100>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f023 0207 	bic.w	r2, r3, #7
 8002ce8:	4911      	ldr	r1, [pc, #68]	; (8002d30 <RCC_SetFlashLatency+0x100>)
 8002cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cec:	4313      	orrs	r3, r2
 8002cee:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002cf0:	f7fe f990 	bl	8001014 <HAL_GetTick>
 8002cf4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002cf6:	e008      	b.n	8002d0a <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002cf8:	f7fe f98c 	bl	8001014 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e007      	b.n	8002d1a <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002d0a:	4b09      	ldr	r3, [pc, #36]	; (8002d30 <RCC_SetFlashLatency+0x100>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d1ef      	bne.n	8002cf8 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3738      	adds	r7, #56	; 0x38
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	08004a48 	.word	0x08004a48
 8002d28:	08004a50 	.word	0x08004a50
 8002d2c:	08004a58 	.word	0x08004a58
 8002d30:	58004000 	.word	0x58004000

08002d34 <LL_RCC_LSE_IsReady>:
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d101      	bne.n	8002d4c <LL_RCC_LSE_IsReady+0x18>
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e000      	b.n	8002d4e <LL_RCC_LSE_IsReady+0x1a>
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr

08002d56 <LL_RCC_SetUSARTClockSource>:
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d62:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	0c1b      	lsrs	r3, r3, #16
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	401a      	ands	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d76:	4313      	orrs	r3, r2
 8002d78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc80      	pop	{r7}
 8002d84:	4770      	bx	lr

08002d86 <LL_RCC_SetI2SClockSource>:
{
 8002d86:	b480      	push	{r7}
 8002d88:	b083      	sub	sp, #12
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr

08002db0 <LL_RCC_SetLPUARTClockSource>:
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002dc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bc80      	pop	{r7}
 8002dd8:	4770      	bx	lr

08002dda <LL_RCC_SetI2CClockSource>:
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	091b      	lsrs	r3, r3, #4
 8002dee:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002df2:	43db      	mvns	r3, r3
 8002df4:	401a      	ands	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	011b      	lsls	r3, r3, #4
 8002dfa:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002dfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e02:	4313      	orrs	r3, r2
 8002e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bc80      	pop	{r7}
 8002e10:	4770      	bx	lr

08002e12 <LL_RCC_SetLPTIMClockSource>:
{
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002e1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e1e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	0c1b      	lsrs	r3, r3, #16
 8002e26:	041b      	lsls	r3, r3, #16
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	401a      	ands	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	041b      	lsls	r3, r3, #16
 8002e30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e34:	4313      	orrs	r3, r2
 8002e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr

08002e44 <LL_RCC_SetRNGClockSource>:
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e54:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002e58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bc80      	pop	{r7}
 8002e6c:	4770      	bx	lr

08002e6e <LL_RCC_SetADCClockSource>:
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bc80      	pop	{r7}
 8002e96:	4770      	bx	lr

08002e98 <LL_RCC_SetRTCClockSource>:
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002eac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bc80      	pop	{r7}
 8002ec0:	4770      	bx	lr

08002ec2 <LL_RCC_GetRTCClockSource>:
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr

08002eda <LL_RCC_ForceBackupDomainReset>:
{
 8002eda:	b480      	push	{r7}
 8002edc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002ef2:	bf00      	nop
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bc80      	pop	{r7}
 8002ef8:	4770      	bx	lr

08002efa <LL_RCC_ReleaseBackupDomainReset>:
{
 8002efa:	b480      	push	{r7}
 8002efc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002f12:	bf00      	nop
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bc80      	pop	{r7}
 8002f18:	4770      	bx	lr
	...

08002f1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002f24:	2300      	movs	r3, #0
 8002f26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002f28:	2300      	movs	r3, #0
 8002f2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d058      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002f3c:	f7fe fdc0 	bl	8001ac0 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f40:	f7fe f868 	bl	8001014 <HAL_GetTick>
 8002f44:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002f46:	e009      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f48:	f7fe f864 	bl	8001014 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d902      	bls.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	74fb      	strb	r3, [r7, #19]
        break;
 8002f5a:	e006      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002f5c:	4b7b      	ldr	r3, [pc, #492]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f68:	d1ee      	bne.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002f6a:	7cfb      	ldrb	r3, [r7, #19]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d13c      	bne.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002f70:	f7ff ffa7 	bl	8002ec2 <LL_RCC_GetRTCClockSource>
 8002f74:	4602      	mov	r2, r0
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d00f      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f8a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f8c:	f7ff ffa5 	bl	8002eda <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f90:	f7ff ffb3 	bl	8002efa <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d014      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa8:	f7fe f834 	bl	8001014 <HAL_GetTick>
 8002fac:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002fae:	e00b      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fb0:	f7fe f830 	bl	8001014 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d902      	bls.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	74fb      	strb	r3, [r7, #19]
            break;
 8002fc6:	e004      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002fc8:	f7ff feb4 	bl	8002d34 <LL_RCC_LSE_IsReady>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d1ee      	bne.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002fd2:	7cfb      	ldrb	r3, [r7, #19]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d105      	bne.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7ff ff5b 	bl	8002e98 <LL_RCC_SetRTCClockSource>
 8002fe2:	e004      	b.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fe4:	7cfb      	ldrb	r3, [r7, #19]
 8002fe6:	74bb      	strb	r3, [r7, #18]
 8002fe8:	e001      	b.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fea:	7cfb      	ldrb	r3, [r7, #19]
 8002fec:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d004      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff fea9 	bl	8002d56 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d004      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff fe9e 	bl	8002d56 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0320 	and.w	r3, r3, #32
 8003022:	2b00      	cmp	r3, #0
 8003024:	d004      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff fec0 	bl	8002db0 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003038:	2b00      	cmp	r3, #0
 800303a:	d004      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff fee6 	bl	8002e12 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800304e:	2b00      	cmp	r3, #0
 8003050:	d004      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff fedb 	bl	8002e12 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003064:	2b00      	cmp	r3, #0
 8003066:	d004      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff fed0 	bl	8002e12 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307a:	2b00      	cmp	r3, #0
 800307c:	d004      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff fea9 	bl	8002dda <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003090:	2b00      	cmp	r3, #0
 8003092:	d004      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff fe9e 	bl	8002dda <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d004      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff fe93 	bl	8002dda <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0310 	and.w	r3, r3, #16
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d011      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff fe5e 	bl	8002d86 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030d2:	d107      	bne.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80030d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030e2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d010      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff fea5 	bl	8002e44 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d107      	bne.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800310c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003110:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d011      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff fea3 	bl	8002e6e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003130:	d107      	bne.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800313c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003140:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003142:	7cbb      	ldrb	r3, [r7, #18]
}
 8003144:	4618      	mov	r0, r3
 8003146:	3718      	adds	r7, #24
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	58000400 	.word	0x58000400

08003150 <LL_RCC_GetUSARTClockSource>:
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8003158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800315c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	401a      	ands	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	041b      	lsls	r3, r3, #16
 8003168:	4313      	orrs	r3, r2
}
 800316a:	4618      	mov	r0, r3
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr

08003174 <LL_RCC_GetLPUARTClockSource>:
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800317c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003180:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4013      	ands	r3, r2
}
 8003188:	4618      	mov	r0, r3
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	bc80      	pop	{r7}
 8003190:	4770      	bx	lr

08003192 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b082      	sub	sp, #8
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e042      	b.n	800322a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d106      	bne.n	80031bc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7fd fd1a 	bl	8000bf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2224      	movs	r2, #36	; 0x24
 80031c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0201 	bic.w	r2, r2, #1
 80031d2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 fdf9 	bl	8003dcc <UART_SetConfig>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d101      	bne.n	80031e4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e022      	b.n	800322a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d002      	beq.n	80031f2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f001 f861 	bl	80042b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003200:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003210:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f042 0201 	orr.w	r2, r2, #1
 8003220:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f001 f8e7 	bl	80043f6 <UART_CheckIdleState>
 8003228:	4603      	mov	r3, r0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b08a      	sub	sp, #40	; 0x28
 8003236:	af02      	add	r7, sp, #8
 8003238:	60f8      	str	r0, [r7, #12]
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	603b      	str	r3, [r7, #0]
 800323e:	4613      	mov	r3, r2
 8003240:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003248:	2b20      	cmp	r3, #32
 800324a:	f040 8083 	bne.w	8003354 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d002      	beq.n	800325a <HAL_UART_Transmit+0x28>
 8003254:	88fb      	ldrh	r3, [r7, #6]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e07b      	b.n	8003356 <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003264:	2b01      	cmp	r3, #1
 8003266:	d101      	bne.n	800326c <HAL_UART_Transmit+0x3a>
 8003268:	2302      	movs	r3, #2
 800326a:	e074      	b.n	8003356 <HAL_UART_Transmit+0x124>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2221      	movs	r2, #33	; 0x21
 8003280:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003284:	f7fd fec6 	bl	8001014 <HAL_GetTick>
 8003288:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	88fa      	ldrh	r2, [r7, #6]
 800328e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	88fa      	ldrh	r2, [r7, #6]
 8003296:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032a2:	d108      	bne.n	80032b6 <HAL_UART_Transmit+0x84>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d104      	bne.n	80032b6 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80032ac:	2300      	movs	r3, #0
 80032ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	61bb      	str	r3, [r7, #24]
 80032b4:	e003      	b.n	80032be <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032ba:	2300      	movs	r3, #0
 80032bc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80032c6:	e02c      	b.n	8003322 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	2200      	movs	r2, #0
 80032d0:	2180      	movs	r1, #128	; 0x80
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f001 f8da 	bl	800448c <UART_WaitOnFlagUntilTimeout>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e039      	b.n	8003356 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10b      	bne.n	8003300 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	881b      	ldrh	r3, [r3, #0]
 80032ec:	461a      	mov	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	3302      	adds	r3, #2
 80032fc:	61bb      	str	r3, [r7, #24]
 80032fe:	e007      	b.n	8003310 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	781a      	ldrb	r2, [r3, #0]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	3301      	adds	r3, #1
 800330e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003316:	b29b      	uxth	r3, r3
 8003318:	3b01      	subs	r3, #1
 800331a:	b29a      	uxth	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003328:	b29b      	uxth	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1cc      	bne.n	80032c8 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	2200      	movs	r2, #0
 8003336:	2140      	movs	r1, #64	; 0x40
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f001 f8a7 	bl	800448c <UART_WaitOnFlagUntilTimeout>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e006      	b.n	8003356 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2220      	movs	r2, #32
 800334c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003350:	2300      	movs	r3, #0
 8003352:	e000      	b.n	8003356 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003354:	2302      	movs	r3, #2
  }
}
 8003356:	4618      	mov	r0, r3
 8003358:	3720      	adds	r7, #32
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b08a      	sub	sp, #40	; 0x28
 8003362:	af02      	add	r7, sp, #8
 8003364:	60f8      	str	r0, [r7, #12]
 8003366:	60b9      	str	r1, [r7, #8]
 8003368:	603b      	str	r3, [r7, #0]
 800336a:	4613      	mov	r3, r2
 800336c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003374:	2b20      	cmp	r3, #32
 8003376:	f040 80c0 	bne.w	80034fa <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d002      	beq.n	8003386 <HAL_UART_Receive+0x28>
 8003380:	88fb      	ldrh	r3, [r7, #6]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e0b8      	b.n	80034fc <HAL_UART_Receive+0x19e>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003390:	2b01      	cmp	r3, #1
 8003392:	d101      	bne.n	8003398 <HAL_UART_Receive+0x3a>
 8003394:	2302      	movs	r3, #2
 8003396:	e0b1      	b.n	80034fc <HAL_UART_Receive+0x19e>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2222      	movs	r2, #34	; 0x22
 80033ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033b6:	f7fd fe2d 	bl	8001014 <HAL_GetTick>
 80033ba:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	88fa      	ldrh	r2, [r7, #6]
 80033c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	88fa      	ldrh	r2, [r7, #6]
 80033c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d4:	d10e      	bne.n	80033f4 <HAL_UART_Receive+0x96>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d105      	bne.n	80033ea <HAL_UART_Receive+0x8c>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80033e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80033e8:	e02d      	b.n	8003446 <HAL_UART_Receive+0xe8>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	22ff      	movs	r2, #255	; 0xff
 80033ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80033f2:	e028      	b.n	8003446 <HAL_UART_Receive+0xe8>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10d      	bne.n	8003418 <HAL_UART_Receive+0xba>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d104      	bne.n	800340e <HAL_UART_Receive+0xb0>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	22ff      	movs	r2, #255	; 0xff
 8003408:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800340c:	e01b      	b.n	8003446 <HAL_UART_Receive+0xe8>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	227f      	movs	r2, #127	; 0x7f
 8003412:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003416:	e016      	b.n	8003446 <HAL_UART_Receive+0xe8>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003420:	d10d      	bne.n	800343e <HAL_UART_Receive+0xe0>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d104      	bne.n	8003434 <HAL_UART_Receive+0xd6>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	227f      	movs	r2, #127	; 0x7f
 800342e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003432:	e008      	b.n	8003446 <HAL_UART_Receive+0xe8>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	223f      	movs	r2, #63	; 0x3f
 8003438:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800343c:	e003      	b.n	8003446 <HAL_UART_Receive+0xe8>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800344c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003456:	d108      	bne.n	800346a <HAL_UART_Receive+0x10c>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d104      	bne.n	800346a <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8003460:	2300      	movs	r3, #0
 8003462:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	61bb      	str	r3, [r7, #24]
 8003468:	e003      	b.n	8003472 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800346e:	2300      	movs	r3, #0
 8003470:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800347a:	e032      	b.n	80034e2 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	9300      	str	r3, [sp, #0]
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	2200      	movs	r2, #0
 8003484:	2120      	movs	r1, #32
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f001 f800 	bl	800448c <UART_WaitOnFlagUntilTimeout>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e032      	b.n	80034fc <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10c      	bne.n	80034b6 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	8a7b      	ldrh	r3, [r7, #18]
 80034a6:	4013      	ands	r3, r2
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	3302      	adds	r3, #2
 80034b2:	61bb      	str	r3, [r7, #24]
 80034b4:	e00c      	b.n	80034d0 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	8a7b      	ldrh	r3, [r7, #18]
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	4013      	ands	r3, r2
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	3301      	adds	r3, #1
 80034ce:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	3b01      	subs	r3, #1
 80034da:	b29a      	uxth	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1c6      	bne.n	800347c <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2220      	movs	r2, #32
 80034f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80034f6:	2300      	movs	r3, #0
 80034f8:	e000      	b.n	80034fc <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 80034fa:	2302      	movs	r3, #2
  }
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3720      	adds	r7, #32
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_UART_DMAPause>:
  * @brief Pause the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 8003504:	b480      	push	{r7}
 8003506:	b09d      	sub	sp, #116	; 0x74
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003512:	66fb      	str	r3, [r7, #108]	; 0x6c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351a:	66bb      	str	r3, [r7, #104]	; 0x68

  __HAL_LOCK(huart);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003522:	2b01      	cmp	r3, #1
 8003524:	d101      	bne.n	800352a <HAL_UART_DMAPause+0x26>
 8003526:	2302      	movs	r3, #2
 8003528:	e083      	b.n	8003632 <HAL_UART_DMAPause+0x12e>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800353c:	2b80      	cmp	r3, #128	; 0x80
 800353e:	d11c      	bne.n	800357a <HAL_UART_DMAPause+0x76>
 8003540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003542:	2b21      	cmp	r3, #33	; 0x21
 8003544:	d119      	bne.n	800357a <HAL_UART_DMAPause+0x76>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    /* Disable the UART DMA Tx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	3308      	adds	r3, #8
 800354c:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800354e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003550:	e853 3f00 	ldrex	r3, [r3]
 8003554:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003556:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003558:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800355c:	667b      	str	r3, [r7, #100]	; 0x64
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	3308      	adds	r3, #8
 8003564:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003566:	657a      	str	r2, [r7, #84]	; 0x54
 8003568:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800356c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800356e:	e841 2300 	strex	r3, r2, [r1]
 8003572:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1e5      	bne.n	8003546 <HAL_UART_DMAPause+0x42>
  }
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003584:	2b40      	cmp	r3, #64	; 0x40
 8003586:	d14f      	bne.n	8003628 <HAL_UART_DMAPause+0x124>
 8003588:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800358a:	2b22      	cmp	r3, #34	; 0x22
 800358c:	d14c      	bne.n	8003628 <HAL_UART_DMAPause+0x124>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003596:	e853 3f00 	ldrex	r3, [r3]
 800359a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800359c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035a2:	663b      	str	r3, [r7, #96]	; 0x60
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	461a      	mov	r2, r3
 80035aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035ac:	643b      	str	r3, [r7, #64]	; 0x40
 80035ae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80035b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035b4:	e841 2300 	strex	r3, r2, [r1]
 80035b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1e6      	bne.n	800358e <HAL_UART_DMAPause+0x8a>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	3308      	adds	r3, #8
 80035c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c8:	6a3b      	ldr	r3, [r7, #32]
 80035ca:	e853 3f00 	ldrex	r3, [r3]
 80035ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	f023 0301 	bic.w	r3, r3, #1
 80035d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	3308      	adds	r3, #8
 80035de:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80035e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035e8:	e841 2300 	strex	r3, r2, [r1]
 80035ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1e5      	bne.n	80035c0 <HAL_UART_DMAPause+0xbc>

    /* Disable the UART DMA Rx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	3308      	adds	r3, #8
 80035fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	e853 3f00 	ldrex	r3, [r3]
 8003602:	60bb      	str	r3, [r7, #8]
   return(result);
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800360a:	65bb      	str	r3, [r7, #88]	; 0x58
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	3308      	adds	r3, #8
 8003612:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003614:	61ba      	str	r2, [r7, #24]
 8003616:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003618:	6979      	ldr	r1, [r7, #20]
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	e841 2300 	strex	r3, r2, [r1]
 8003620:	613b      	str	r3, [r7, #16]
   return(result);
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1e5      	bne.n	80035f4 <HAL_UART_DMAPause+0xf0>
  }

  __HAL_UNLOCK(huart);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3774      	adds	r7, #116	; 0x74
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr

0800363c <HAL_UART_DMAResume>:
  * @brief Resume the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 800363c:	b480      	push	{r7}
 800363e:	b09b      	sub	sp, #108	; 0x6c
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800364a:	2b01      	cmp	r3, #1
 800364c:	d101      	bne.n	8003652 <HAL_UART_DMAResume+0x16>
 800364e:	2302      	movs	r3, #2
 8003650:	e081      	b.n	8003756 <HAL_UART_DMAResume+0x11a>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003660:	2b21      	cmp	r3, #33	; 0x21
 8003662:	d119      	bne.n	8003698 <HAL_UART_DMAResume+0x5c>
  {
    /* Enable the UART DMA Tx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	3308      	adds	r3, #8
 800366a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800366e:	e853 3f00 	ldrex	r3, [r3]
 8003672:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800367a:	667b      	str	r3, [r7, #100]	; 0x64
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	3308      	adds	r3, #8
 8003682:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003684:	657a      	str	r2, [r7, #84]	; 0x54
 8003686:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003688:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800368a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800368c:	e841 2300 	strex	r3, r2, [r1]
 8003690:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1e5      	bne.n	8003664 <HAL_UART_DMAResume+0x28>
  }
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369e:	2b22      	cmp	r3, #34	; 0x22
 80036a0:	d154      	bne.n	800374c <HAL_UART_DMAResume+0x110>
  {
    /* Clear the Overrun flag before resuming the Rx transfer */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2208      	movs	r2, #8
 80036a8:	621a      	str	r2, [r3, #32]

    /* Re-enable PE and ERR (Frame error, noise error, overrun error) interrupts */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d018      	beq.n	80036e4 <HAL_UART_DMAResume+0xa8>
    {    
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ba:	e853 3f00 	ldrex	r3, [r3]
 80036be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80036c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c6:	663b      	str	r3, [r7, #96]	; 0x60
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	461a      	mov	r2, r3
 80036ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036d0:	643b      	str	r3, [r7, #64]	; 0x40
 80036d2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80036d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036d8:	e841 2300 	strex	r3, r2, [r1]
 80036dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80036de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1e6      	bne.n	80036b2 <HAL_UART_DMAResume+0x76>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	3308      	adds	r3, #8
 80036ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ec:	6a3b      	ldr	r3, [r7, #32]
 80036ee:	e853 3f00 	ldrex	r3, [r3]
 80036f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	f043 0301 	orr.w	r3, r3, #1
 80036fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	3308      	adds	r3, #8
 8003702:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003704:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003706:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003708:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800370a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800370c:	e841 2300 	strex	r3, r2, [r1]
 8003710:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1e5      	bne.n	80036e4 <HAL_UART_DMAResume+0xa8>

    /* Enable the UART DMA Rx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	3308      	adds	r3, #8
 800371e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	e853 3f00 	ldrex	r3, [r3]
 8003726:	60bb      	str	r3, [r7, #8]
   return(result);
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800372e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	3308      	adds	r3, #8
 8003736:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003738:	61ba      	str	r2, [r7, #24]
 800373a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800373c:	6979      	ldr	r1, [r7, #20]
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	e841 2300 	strex	r3, r2, [r1]
 8003744:	613b      	str	r3, [r7, #16]
   return(result);
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1e5      	bne.n	8003718 <HAL_UART_DMAResume+0xdc>
  }

  __HAL_UNLOCK(huart);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	376c      	adds	r7, #108	; 0x6c
 800375a:	46bd      	mov	sp, r7
 800375c:	bc80      	pop	{r7}
 800375e:	4770      	bx	lr

08003760 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b0ba      	sub	sp, #232	; 0xe8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003786:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800378a:	f640 030f 	movw	r3, #2063	; 0x80f
 800378e:	4013      	ands	r3, r2
 8003790:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003794:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003798:	2b00      	cmp	r3, #0
 800379a:	d11b      	bne.n	80037d4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800379c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037a0:	f003 0320 	and.w	r3, r3, #32
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d015      	beq.n	80037d4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80037a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037ac:	f003 0320 	and.w	r3, r3, #32
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d105      	bne.n	80037c0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80037b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d009      	beq.n	80037d4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 82d6 	beq.w	8003d76 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	4798      	blx	r3
      }
      return;
 80037d2:	e2d0      	b.n	8003d76 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80037d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 811f 	beq.w	8003a1c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80037de:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80037e2:	4b8b      	ldr	r3, [pc, #556]	; (8003a10 <HAL_UART_IRQHandler+0x2b0>)
 80037e4:	4013      	ands	r3, r2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d106      	bne.n	80037f8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80037ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80037ee:	4b89      	ldr	r3, [pc, #548]	; (8003a14 <HAL_UART_IRQHandler+0x2b4>)
 80037f0:	4013      	ands	r3, r2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 8112 	beq.w	8003a1c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80037f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	2b00      	cmp	r3, #0
 8003802:	d011      	beq.n	8003828 <HAL_UART_IRQHandler+0xc8>
 8003804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00b      	beq.n	8003828 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2201      	movs	r2, #1
 8003816:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800381e:	f043 0201 	orr.w	r2, r3, #1
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d011      	beq.n	8003858 <HAL_UART_IRQHandler+0xf8>
 8003834:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00b      	beq.n	8003858 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2202      	movs	r2, #2
 8003846:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800384e:	f043 0204 	orr.w	r2, r3, #4
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b00      	cmp	r3, #0
 8003862:	d011      	beq.n	8003888 <HAL_UART_IRQHandler+0x128>
 8003864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00b      	beq.n	8003888 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2204      	movs	r2, #4
 8003876:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800387e:	f043 0202 	orr.w	r2, r3, #2
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800388c:	f003 0308 	and.w	r3, r3, #8
 8003890:	2b00      	cmp	r3, #0
 8003892:	d017      	beq.n	80038c4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003898:	f003 0320 	and.w	r3, r3, #32
 800389c:	2b00      	cmp	r3, #0
 800389e:	d105      	bne.n	80038ac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80038a0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80038a4:	4b5a      	ldr	r3, [pc, #360]	; (8003a10 <HAL_UART_IRQHandler+0x2b0>)
 80038a6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00b      	beq.n	80038c4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2208      	movs	r2, #8
 80038b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038ba:	f043 0208 	orr.w	r2, r3, #8
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80038c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d012      	beq.n	80038f6 <HAL_UART_IRQHandler+0x196>
 80038d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00c      	beq.n	80038f6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038ec:	f043 0220 	orr.w	r2, r3, #32
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f000 823c 	beq.w	8003d7a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003906:	f003 0320 	and.w	r3, r3, #32
 800390a:	2b00      	cmp	r3, #0
 800390c:	d013      	beq.n	8003936 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800390e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003912:	f003 0320 	and.w	r3, r3, #32
 8003916:	2b00      	cmp	r3, #0
 8003918:	d105      	bne.n	8003926 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800391a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800391e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d007      	beq.n	8003936 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800393c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394a:	2b40      	cmp	r3, #64	; 0x40
 800394c:	d005      	beq.n	800395a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800394e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003952:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003956:	2b00      	cmp	r3, #0
 8003958:	d04f      	beq.n	80039fa <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 fe5e 	bl	800461c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800396a:	2b40      	cmp	r3, #64	; 0x40
 800396c:	d141      	bne.n	80039f2 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	3308      	adds	r3, #8
 8003974:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003978:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800397c:	e853 3f00 	ldrex	r3, [r3]
 8003980:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003984:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003988:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800398c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	3308      	adds	r3, #8
 8003996:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800399a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800399e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80039a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80039aa:	e841 2300 	strex	r3, r2, [r1]
 80039ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80039b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1d9      	bne.n	800396e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d013      	beq.n	80039ea <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039c6:	4a14      	ldr	r2, [pc, #80]	; (8003a18 <HAL_UART_IRQHandler+0x2b8>)
 80039c8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7fd fd3c 	bl	800144c <HAL_DMA_Abort_IT>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d017      	beq.n	8003a0a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80039e4:	4610      	mov	r0, r2
 80039e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039e8:	e00f      	b.n	8003a0a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f9d9 	bl	8003da2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039f0:	e00b      	b.n	8003a0a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f9d5 	bl	8003da2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039f8:	e007      	b.n	8003a0a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f9d1 	bl	8003da2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8003a08:	e1b7      	b.n	8003d7a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a0a:	bf00      	nop
    return;
 8003a0c:	e1b5      	b.n	8003d7a <HAL_UART_IRQHandler+0x61a>
 8003a0e:	bf00      	nop
 8003a10:	10000001 	.word	0x10000001
 8003a14:	04000120 	.word	0x04000120
 8003a18:	080046e7 	.word	0x080046e7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	f040 814a 	bne.w	8003cba <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a2a:	f003 0310 	and.w	r3, r3, #16
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f000 8143 	beq.w	8003cba <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a38:	f003 0310 	and.w	r3, r3, #16
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f000 813c 	beq.w	8003cba <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2210      	movs	r2, #16
 8003a48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a54:	2b40      	cmp	r3, #64	; 0x40
 8003a56:	f040 80b5 	bne.w	8003bc4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8003a66:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f000 8187 	beq.w	8003d7e <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003a76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	f080 817f 	bcs.w	8003d7e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a86:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0320 	and.w	r3, r3, #32
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f040 8086 	bne.w	8003ba8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003aa8:	e853 3f00 	ldrex	r3, [r3]
 8003aac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ab0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ab4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ab8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003ac6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003aca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ace:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003ad2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003ad6:	e841 2300 	strex	r3, r2, [r1]
 8003ada:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003ade:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1da      	bne.n	8003a9c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	3308      	adds	r3, #8
 8003aec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003af0:	e853 3f00 	ldrex	r3, [r3]
 8003af4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003af6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003af8:	f023 0301 	bic.w	r3, r3, #1
 8003afc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	3308      	adds	r3, #8
 8003b06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b0a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003b0e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b10:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003b12:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003b16:	e841 2300 	strex	r3, r2, [r1]
 8003b1a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003b1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1e1      	bne.n	8003ae6 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	3308      	adds	r3, #8
 8003b28:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b2c:	e853 3f00 	ldrex	r3, [r3]
 8003b30:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003b32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	3308      	adds	r3, #8
 8003b42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003b46:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b48:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003b4c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b4e:	e841 2300 	strex	r3, r2, [r1]
 8003b52:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003b54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1e3      	bne.n	8003b22 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b70:	e853 3f00 	ldrex	r3, [r3]
 8003b74:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003b76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b78:	f023 0310 	bic.w	r3, r3, #16
 8003b7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	461a      	mov	r2, r3
 8003b86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b8a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b8c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b92:	e841 2300 	strex	r3, r2, [r1]
 8003b96:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003b98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1e4      	bne.n	8003b68 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fd fbf4 	bl	8001390 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	4619      	mov	r1, r3
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f8f9 	bl	8003db4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003bc2:	e0dc      	b.n	8003d7e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 80ce 	beq.w	8003d82 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8003be6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 80c9 	beq.w	8003d82 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf8:	e853 3f00 	ldrex	r3, [r3]
 8003bfc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003c12:	647b      	str	r3, [r7, #68]	; 0x44
 8003c14:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c1a:	e841 2300 	strex	r3, r2, [r1]
 8003c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1e4      	bne.n	8003bf0 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	3308      	adds	r3, #8
 8003c2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	e853 3f00 	ldrex	r3, [r3]
 8003c34:	623b      	str	r3, [r7, #32]
   return(result);
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c3c:	f023 0301 	bic.w	r3, r3, #1
 8003c40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	3308      	adds	r3, #8
 8003c4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003c4e:	633a      	str	r2, [r7, #48]	; 0x30
 8003c50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c56:	e841 2300 	strex	r3, r2, [r1]
 8003c5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1e1      	bne.n	8003c26 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2220      	movs	r2, #32
 8003c66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	e853 3f00 	ldrex	r3, [r3]
 8003c82:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f023 0310 	bic.w	r3, r3, #16
 8003c8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	461a      	mov	r2, r3
 8003c94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c98:	61fb      	str	r3, [r7, #28]
 8003c9a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9c:	69b9      	ldr	r1, [r7, #24]
 8003c9e:	69fa      	ldr	r2, [r7, #28]
 8003ca0:	e841 2300 	strex	r3, r2, [r1]
 8003ca4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1e4      	bne.n	8003c76 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f87e 	bl	8003db4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003cb8:	e063      	b.n	8003d82 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00e      	beq.n	8003ce4 <HAL_UART_IRQHandler+0x584>
 8003cc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d008      	beq.n	8003ce4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003cda:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 fd43 	bl	8004768 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003ce2:	e051      	b.n	8003d88 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d014      	beq.n	8003d1a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d105      	bne.n	8003d08 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003cfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d008      	beq.n	8003d1a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d03a      	beq.n	8003d86 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	4798      	blx	r3
    }
    return;
 8003d18:	e035      	b.n	8003d86 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d009      	beq.n	8003d3a <HAL_UART_IRQHandler+0x5da>
 8003d26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 fced 	bl	8004712 <UART_EndTransmit_IT>
    return;
 8003d38:	e026      	b.n	8003d88 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d009      	beq.n	8003d5a <HAL_UART_IRQHandler+0x5fa>
 8003d46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d4a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 fd1a 	bl	800478c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d58:	e016      	b.n	8003d88 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d010      	beq.n	8003d88 <HAL_UART_IRQHandler+0x628>
 8003d66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	da0c      	bge.n	8003d88 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 fd03 	bl	800477a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d74:	e008      	b.n	8003d88 <HAL_UART_IRQHandler+0x628>
      return;
 8003d76:	bf00      	nop
 8003d78:	e006      	b.n	8003d88 <HAL_UART_IRQHandler+0x628>
    return;
 8003d7a:	bf00      	nop
 8003d7c:	e004      	b.n	8003d88 <HAL_UART_IRQHandler+0x628>
      return;
 8003d7e:	bf00      	nop
 8003d80:	e002      	b.n	8003d88 <HAL_UART_IRQHandler+0x628>
      return;
 8003d82:	bf00      	nop
 8003d84:	e000      	b.n	8003d88 <HAL_UART_IRQHandler+0x628>
    return;
 8003d86:	bf00      	nop
  }
}
 8003d88:	37e8      	adds	r7, #232	; 0xe8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop

08003d90 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bc80      	pop	{r7}
 8003da0:	4770      	bx	lr

08003da2 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b083      	sub	sp, #12
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bc80      	pop	{r7}
 8003db2:	4770      	bx	lr

08003db4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bc80      	pop	{r7}
 8003dc8:	4770      	bx	lr
	...

08003dcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dd0:	b08c      	sub	sp, #48	; 0x30
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	431a      	orrs	r2, r3
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	431a      	orrs	r2, r3
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	69db      	ldr	r3, [r3, #28]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	4b94      	ldr	r3, [pc, #592]	; (800404c <UART_SetConfig+0x280>)
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	6812      	ldr	r2, [r2, #0]
 8003e02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e04:	430b      	orrs	r3, r1
 8003e06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	68da      	ldr	r2, [r3, #12]
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a89      	ldr	r2, [pc, #548]	; (8004050 <UART_SetConfig+0x284>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d004      	beq.n	8003e38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e34:	4313      	orrs	r3, r2
 8003e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003e42:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	6812      	ldr	r2, [r2, #0]
 8003e4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e4c:	430b      	orrs	r3, r1
 8003e4e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e56:	f023 010f 	bic.w	r1, r3, #15
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a7a      	ldr	r2, [pc, #488]	; (8004054 <UART_SetConfig+0x288>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d127      	bne.n	8003ec0 <UART_SetConfig+0xf4>
 8003e70:	2003      	movs	r0, #3
 8003e72:	f7ff f96d 	bl	8003150 <LL_RCC_GetUSARTClockSource>
 8003e76:	4603      	mov	r3, r0
 8003e78:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8003e7c:	2b03      	cmp	r3, #3
 8003e7e:	d81b      	bhi.n	8003eb8 <UART_SetConfig+0xec>
 8003e80:	a201      	add	r2, pc, #4	; (adr r2, 8003e88 <UART_SetConfig+0xbc>)
 8003e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e86:	bf00      	nop
 8003e88:	08003e99 	.word	0x08003e99
 8003e8c:	08003ea9 	.word	0x08003ea9
 8003e90:	08003ea1 	.word	0x08003ea1
 8003e94:	08003eb1 	.word	0x08003eb1
 8003e98:	2301      	movs	r3, #1
 8003e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e9e:	e080      	b.n	8003fa2 <UART_SetConfig+0x1d6>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ea6:	e07c      	b.n	8003fa2 <UART_SetConfig+0x1d6>
 8003ea8:	2304      	movs	r3, #4
 8003eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003eae:	e078      	b.n	8003fa2 <UART_SetConfig+0x1d6>
 8003eb0:	2308      	movs	r3, #8
 8003eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003eb6:	e074      	b.n	8003fa2 <UART_SetConfig+0x1d6>
 8003eb8:	2310      	movs	r3, #16
 8003eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ebe:	e070      	b.n	8003fa2 <UART_SetConfig+0x1d6>
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a64      	ldr	r2, [pc, #400]	; (8004058 <UART_SetConfig+0x28c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d138      	bne.n	8003f3c <UART_SetConfig+0x170>
 8003eca:	200c      	movs	r0, #12
 8003ecc:	f7ff f940 	bl	8003150 <LL_RCC_GetUSARTClockSource>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8003ed6:	2b0c      	cmp	r3, #12
 8003ed8:	d82c      	bhi.n	8003f34 <UART_SetConfig+0x168>
 8003eda:	a201      	add	r2, pc, #4	; (adr r2, 8003ee0 <UART_SetConfig+0x114>)
 8003edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee0:	08003f15 	.word	0x08003f15
 8003ee4:	08003f35 	.word	0x08003f35
 8003ee8:	08003f35 	.word	0x08003f35
 8003eec:	08003f35 	.word	0x08003f35
 8003ef0:	08003f25 	.word	0x08003f25
 8003ef4:	08003f35 	.word	0x08003f35
 8003ef8:	08003f35 	.word	0x08003f35
 8003efc:	08003f35 	.word	0x08003f35
 8003f00:	08003f1d 	.word	0x08003f1d
 8003f04:	08003f35 	.word	0x08003f35
 8003f08:	08003f35 	.word	0x08003f35
 8003f0c:	08003f35 	.word	0x08003f35
 8003f10:	08003f2d 	.word	0x08003f2d
 8003f14:	2300      	movs	r3, #0
 8003f16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f1a:	e042      	b.n	8003fa2 <UART_SetConfig+0x1d6>
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f22:	e03e      	b.n	8003fa2 <UART_SetConfig+0x1d6>
 8003f24:	2304      	movs	r3, #4
 8003f26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f2a:	e03a      	b.n	8003fa2 <UART_SetConfig+0x1d6>
 8003f2c:	2308      	movs	r3, #8
 8003f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f32:	e036      	b.n	8003fa2 <UART_SetConfig+0x1d6>
 8003f34:	2310      	movs	r3, #16
 8003f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f3a:	e032      	b.n	8003fa2 <UART_SetConfig+0x1d6>
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a43      	ldr	r2, [pc, #268]	; (8004050 <UART_SetConfig+0x284>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d12a      	bne.n	8003f9c <UART_SetConfig+0x1d0>
 8003f46:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003f4a:	f7ff f913 	bl	8003174 <LL_RCC_GetLPUARTClockSource>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f54:	d01a      	beq.n	8003f8c <UART_SetConfig+0x1c0>
 8003f56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f5a:	d81b      	bhi.n	8003f94 <UART_SetConfig+0x1c8>
 8003f5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f60:	d00c      	beq.n	8003f7c <UART_SetConfig+0x1b0>
 8003f62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f66:	d815      	bhi.n	8003f94 <UART_SetConfig+0x1c8>
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d003      	beq.n	8003f74 <UART_SetConfig+0x1a8>
 8003f6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f70:	d008      	beq.n	8003f84 <UART_SetConfig+0x1b8>
 8003f72:	e00f      	b.n	8003f94 <UART_SetConfig+0x1c8>
 8003f74:	2300      	movs	r3, #0
 8003f76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f7a:	e012      	b.n	8003fa2 <UART_SetConfig+0x1d6>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f82:	e00e      	b.n	8003fa2 <UART_SetConfig+0x1d6>
 8003f84:	2304      	movs	r3, #4
 8003f86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f8a:	e00a      	b.n	8003fa2 <UART_SetConfig+0x1d6>
 8003f8c:	2308      	movs	r3, #8
 8003f8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f92:	e006      	b.n	8003fa2 <UART_SetConfig+0x1d6>
 8003f94:	2310      	movs	r3, #16
 8003f96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f9a:	e002      	b.n	8003fa2 <UART_SetConfig+0x1d6>
 8003f9c:	2310      	movs	r3, #16
 8003f9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a2a      	ldr	r2, [pc, #168]	; (8004050 <UART_SetConfig+0x284>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	f040 80a4 	bne.w	80040f6 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003fae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003fb2:	2b08      	cmp	r3, #8
 8003fb4:	d823      	bhi.n	8003ffe <UART_SetConfig+0x232>
 8003fb6:	a201      	add	r2, pc, #4	; (adr r2, 8003fbc <UART_SetConfig+0x1f0>)
 8003fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fbc:	08003fe1 	.word	0x08003fe1
 8003fc0:	08003fff 	.word	0x08003fff
 8003fc4:	08003fe9 	.word	0x08003fe9
 8003fc8:	08003fff 	.word	0x08003fff
 8003fcc:	08003fef 	.word	0x08003fef
 8003fd0:	08003fff 	.word	0x08003fff
 8003fd4:	08003fff 	.word	0x08003fff
 8003fd8:	08003fff 	.word	0x08003fff
 8003fdc:	08003ff7 	.word	0x08003ff7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fe0:	f7fe fdd2 	bl	8002b88 <HAL_RCC_GetPCLK1Freq>
 8003fe4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fe6:	e010      	b.n	800400a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fe8:	4b1c      	ldr	r3, [pc, #112]	; (800405c <UART_SetConfig+0x290>)
 8003fea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003fec:	e00d      	b.n	800400a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fee:	f7fe fd17 	bl	8002a20 <HAL_RCC_GetSysClockFreq>
 8003ff2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ff4:	e009      	b.n	800400a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ffa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ffc:	e005      	b.n	800400a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8003ffe:	2300      	movs	r3, #0
 8004000:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004008:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 8137 	beq.w	8004280 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004016:	4a12      	ldr	r2, [pc, #72]	; (8004060 <UART_SetConfig+0x294>)
 8004018:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800401c:	461a      	mov	r2, r3
 800401e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004020:	fbb3 f3f2 	udiv	r3, r3, r2
 8004024:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	4613      	mov	r3, r2
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	4413      	add	r3, r2
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	429a      	cmp	r2, r3
 8004034:	d305      	bcc.n	8004042 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	429a      	cmp	r2, r3
 8004040:	d910      	bls.n	8004064 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004048:	e11a      	b.n	8004280 <UART_SetConfig+0x4b4>
 800404a:	bf00      	nop
 800404c:	cfff69f3 	.word	0xcfff69f3
 8004050:	40008000 	.word	0x40008000
 8004054:	40013800 	.word	0x40013800
 8004058:	40004400 	.word	0x40004400
 800405c:	00f42400 	.word	0x00f42400
 8004060:	08004b04 	.word	0x08004b04
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	2200      	movs	r2, #0
 8004068:	60bb      	str	r3, [r7, #8]
 800406a:	60fa      	str	r2, [r7, #12]
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004070:	4a8e      	ldr	r2, [pc, #568]	; (80042ac <UART_SetConfig+0x4e0>)
 8004072:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004076:	b29b      	uxth	r3, r3
 8004078:	2200      	movs	r2, #0
 800407a:	603b      	str	r3, [r7, #0]
 800407c:	607a      	str	r2, [r7, #4]
 800407e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004082:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004086:	f7fc f877 	bl	8000178 <__aeabi_uldivmod>
 800408a:	4602      	mov	r2, r0
 800408c:	460b      	mov	r3, r1
 800408e:	4610      	mov	r0, r2
 8004090:	4619      	mov	r1, r3
 8004092:	f04f 0200 	mov.w	r2, #0
 8004096:	f04f 0300 	mov.w	r3, #0
 800409a:	020b      	lsls	r3, r1, #8
 800409c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80040a0:	0202      	lsls	r2, r0, #8
 80040a2:	6979      	ldr	r1, [r7, #20]
 80040a4:	6849      	ldr	r1, [r1, #4]
 80040a6:	0849      	lsrs	r1, r1, #1
 80040a8:	2000      	movs	r0, #0
 80040aa:	460c      	mov	r4, r1
 80040ac:	4605      	mov	r5, r0
 80040ae:	eb12 0804 	adds.w	r8, r2, r4
 80040b2:	eb43 0905 	adc.w	r9, r3, r5
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	469a      	mov	sl, r3
 80040be:	4693      	mov	fp, r2
 80040c0:	4652      	mov	r2, sl
 80040c2:	465b      	mov	r3, fp
 80040c4:	4640      	mov	r0, r8
 80040c6:	4649      	mov	r1, r9
 80040c8:	f7fc f856 	bl	8000178 <__aeabi_uldivmod>
 80040cc:	4602      	mov	r2, r0
 80040ce:	460b      	mov	r3, r1
 80040d0:	4613      	mov	r3, r2
 80040d2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040d4:	6a3b      	ldr	r3, [r7, #32]
 80040d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040da:	d308      	bcc.n	80040ee <UART_SetConfig+0x322>
 80040dc:	6a3b      	ldr	r3, [r7, #32]
 80040de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040e2:	d204      	bcs.n	80040ee <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6a3a      	ldr	r2, [r7, #32]
 80040ea:	60da      	str	r2, [r3, #12]
 80040ec:	e0c8      	b.n	8004280 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80040f4:	e0c4      	b.n	8004280 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040fe:	d168      	bne.n	80041d2 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8004100:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004104:	2b08      	cmp	r3, #8
 8004106:	d828      	bhi.n	800415a <UART_SetConfig+0x38e>
 8004108:	a201      	add	r2, pc, #4	; (adr r2, 8004110 <UART_SetConfig+0x344>)
 800410a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410e:	bf00      	nop
 8004110:	08004135 	.word	0x08004135
 8004114:	0800413d 	.word	0x0800413d
 8004118:	08004145 	.word	0x08004145
 800411c:	0800415b 	.word	0x0800415b
 8004120:	0800414b 	.word	0x0800414b
 8004124:	0800415b 	.word	0x0800415b
 8004128:	0800415b 	.word	0x0800415b
 800412c:	0800415b 	.word	0x0800415b
 8004130:	08004153 	.word	0x08004153
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004134:	f7fe fd28 	bl	8002b88 <HAL_RCC_GetPCLK1Freq>
 8004138:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800413a:	e014      	b.n	8004166 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800413c:	f7fe fd36 	bl	8002bac <HAL_RCC_GetPCLK2Freq>
 8004140:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004142:	e010      	b.n	8004166 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004144:	4b5a      	ldr	r3, [pc, #360]	; (80042b0 <UART_SetConfig+0x4e4>)
 8004146:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004148:	e00d      	b.n	8004166 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800414a:	f7fe fc69 	bl	8002a20 <HAL_RCC_GetSysClockFreq>
 800414e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004150:	e009      	b.n	8004166 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004152:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004156:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004158:	e005      	b.n	8004166 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800415a:	2300      	movs	r3, #0
 800415c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004164:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 8089 	beq.w	8004280 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004172:	4a4e      	ldr	r2, [pc, #312]	; (80042ac <UART_SetConfig+0x4e0>)
 8004174:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004178:	461a      	mov	r2, r3
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004180:	005a      	lsls	r2, r3, #1
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	085b      	lsrs	r3, r3, #1
 8004188:	441a      	add	r2, r3
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004192:	b29b      	uxth	r3, r3
 8004194:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004196:	6a3b      	ldr	r3, [r7, #32]
 8004198:	2b0f      	cmp	r3, #15
 800419a:	d916      	bls.n	80041ca <UART_SetConfig+0x3fe>
 800419c:	6a3b      	ldr	r3, [r7, #32]
 800419e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041a2:	d212      	bcs.n	80041ca <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041a4:	6a3b      	ldr	r3, [r7, #32]
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	f023 030f 	bic.w	r3, r3, #15
 80041ac:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041ae:	6a3b      	ldr	r3, [r7, #32]
 80041b0:	085b      	lsrs	r3, r3, #1
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	f003 0307 	and.w	r3, r3, #7
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	8bfb      	ldrh	r3, [r7, #30]
 80041bc:	4313      	orrs	r3, r2
 80041be:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	8bfa      	ldrh	r2, [r7, #30]
 80041c6:	60da      	str	r2, [r3, #12]
 80041c8:	e05a      	b.n	8004280 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80041d0:	e056      	b.n	8004280 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80041d6:	2b08      	cmp	r3, #8
 80041d8:	d827      	bhi.n	800422a <UART_SetConfig+0x45e>
 80041da:	a201      	add	r2, pc, #4	; (adr r2, 80041e0 <UART_SetConfig+0x414>)
 80041dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e0:	08004205 	.word	0x08004205
 80041e4:	0800420d 	.word	0x0800420d
 80041e8:	08004215 	.word	0x08004215
 80041ec:	0800422b 	.word	0x0800422b
 80041f0:	0800421b 	.word	0x0800421b
 80041f4:	0800422b 	.word	0x0800422b
 80041f8:	0800422b 	.word	0x0800422b
 80041fc:	0800422b 	.word	0x0800422b
 8004200:	08004223 	.word	0x08004223
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004204:	f7fe fcc0 	bl	8002b88 <HAL_RCC_GetPCLK1Freq>
 8004208:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800420a:	e014      	b.n	8004236 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800420c:	f7fe fcce 	bl	8002bac <HAL_RCC_GetPCLK2Freq>
 8004210:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004212:	e010      	b.n	8004236 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004214:	4b26      	ldr	r3, [pc, #152]	; (80042b0 <UART_SetConfig+0x4e4>)
 8004216:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004218:	e00d      	b.n	8004236 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800421a:	f7fe fc01 	bl	8002a20 <HAL_RCC_GetSysClockFreq>
 800421e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004220:	e009      	b.n	8004236 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004222:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004226:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004228:	e005      	b.n	8004236 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800422a:	2300      	movs	r3, #0
 800422c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004234:	bf00      	nop
    }

    if (pclk != 0U)
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	2b00      	cmp	r3, #0
 800423a:	d021      	beq.n	8004280 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	4a1a      	ldr	r2, [pc, #104]	; (80042ac <UART_SetConfig+0x4e0>)
 8004242:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004246:	461a      	mov	r2, r3
 8004248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424a:	fbb3 f2f2 	udiv	r2, r3, r2
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	085b      	lsrs	r3, r3, #1
 8004254:	441a      	add	r2, r3
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	fbb2 f3f3 	udiv	r3, r2, r3
 800425e:	b29b      	uxth	r3, r3
 8004260:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004262:	6a3b      	ldr	r3, [r7, #32]
 8004264:	2b0f      	cmp	r3, #15
 8004266:	d908      	bls.n	800427a <UART_SetConfig+0x4ae>
 8004268:	6a3b      	ldr	r3, [r7, #32]
 800426a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800426e:	d204      	bcs.n	800427a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6a3a      	ldr	r2, [r7, #32]
 8004276:	60da      	str	r2, [r3, #12]
 8004278:	e002      	b.n	8004280 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	2201      	movs	r2, #1
 8004284:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	2201      	movs	r2, #1
 800428c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	2200      	movs	r2, #0
 8004294:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	2200      	movs	r2, #0
 800429a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800429c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3730      	adds	r7, #48	; 0x30
 80042a4:	46bd      	mov	sp, r7
 80042a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042aa:	bf00      	nop
 80042ac:	08004b04 	.word	0x08004b04
 80042b0:	00f42400 	.word	0x00f42400

080042b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00a      	beq.n	80042de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	430a      	orrs	r2, r1
 80042dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00a      	beq.n	8004300 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00a      	beq.n	8004322 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	430a      	orrs	r2, r1
 8004320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004326:	f003 0308 	and.w	r3, r3, #8
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00a      	beq.n	8004344 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	430a      	orrs	r2, r1
 8004342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004348:	f003 0310 	and.w	r3, r3, #16
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00a      	beq.n	8004366 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436a:	f003 0320 	and.w	r3, r3, #32
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00a      	beq.n	8004388 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004390:	2b00      	cmp	r3, #0
 8004392:	d01a      	beq.n	80043ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043b2:	d10a      	bne.n	80043ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00a      	beq.n	80043ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	605a      	str	r2, [r3, #4]
  }
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bc80      	pop	{r7}
 80043f4:	4770      	bx	lr

080043f6 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b086      	sub	sp, #24
 80043fa:	af02      	add	r7, sp, #8
 80043fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004406:	f7fc fe05 	bl	8001014 <HAL_GetTick>
 800440a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0308 	and.w	r3, r3, #8
 8004416:	2b08      	cmp	r3, #8
 8004418:	d10e      	bne.n	8004438 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800441a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 f82f 	bl	800448c <UART_WaitOnFlagUntilTimeout>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d001      	beq.n	8004438 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e025      	b.n	8004484 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0304 	and.w	r3, r3, #4
 8004442:	2b04      	cmp	r3, #4
 8004444:	d10e      	bne.n	8004464 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004446:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 f819 	bl	800448c <UART_WaitOnFlagUntilTimeout>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d001      	beq.n	8004464 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e00f      	b.n	8004484 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2220      	movs	r2, #32
 8004468:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2220      	movs	r2, #32
 8004470:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b09c      	sub	sp, #112	; 0x70
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	603b      	str	r3, [r7, #0]
 8004498:	4613      	mov	r3, r2
 800449a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800449c:	e0a9      	b.n	80045f2 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800449e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044a4:	f000 80a5 	beq.w	80045f2 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044a8:	f7fc fdb4 	bl	8001014 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d302      	bcc.n	80044be <UART_WaitOnFlagUntilTimeout+0x32>
 80044b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d140      	bne.n	8004540 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044c6:	e853 3f00 	ldrex	r3, [r3]
 80044ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80044cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044d2:	667b      	str	r3, [r7, #100]	; 0x64
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	461a      	mov	r2, r3
 80044da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044de:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80044e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80044e4:	e841 2300 	strex	r3, r2, [r1]
 80044e8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80044ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1e6      	bne.n	80044be <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	3308      	adds	r3, #8
 80044f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044fa:	e853 3f00 	ldrex	r3, [r3]
 80044fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004502:	f023 0301 	bic.w	r3, r3, #1
 8004506:	663b      	str	r3, [r7, #96]	; 0x60
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	3308      	adds	r3, #8
 800450e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004510:	64ba      	str	r2, [r7, #72]	; 0x48
 8004512:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004514:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004516:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004518:	e841 2300 	strex	r3, r2, [r1]
 800451c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800451e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1e5      	bne.n	80044f0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2220      	movs	r2, #32
 8004528:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2220      	movs	r2, #32
 8004530:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e069      	b.n	8004614 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0304 	and.w	r3, r3, #4
 800454a:	2b00      	cmp	r3, #0
 800454c:	d051      	beq.n	80045f2 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	69db      	ldr	r3, [r3, #28]
 8004554:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004558:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800455c:	d149      	bne.n	80045f2 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004566:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004570:	e853 3f00 	ldrex	r3, [r3]
 8004574:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004578:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800457c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	461a      	mov	r2, r3
 8004584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004586:	637b      	str	r3, [r7, #52]	; 0x34
 8004588:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800458c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800458e:	e841 2300 	strex	r3, r2, [r1]
 8004592:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1e6      	bne.n	8004568 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	3308      	adds	r3, #8
 80045a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	e853 3f00 	ldrex	r3, [r3]
 80045a8:	613b      	str	r3, [r7, #16]
   return(result);
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	f023 0301 	bic.w	r3, r3, #1
 80045b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	3308      	adds	r3, #8
 80045b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80045ba:	623a      	str	r2, [r7, #32]
 80045bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045be:	69f9      	ldr	r1, [r7, #28]
 80045c0:	6a3a      	ldr	r2, [r7, #32]
 80045c2:	e841 2300 	strex	r3, r2, [r1]
 80045c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1e5      	bne.n	800459a <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2220      	movs	r2, #32
 80045d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2220      	movs	r2, #32
 80045da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2220      	movs	r2, #32
 80045e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e010      	b.n	8004614 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	69da      	ldr	r2, [r3, #28]
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	4013      	ands	r3, r2
 80045fc:	68ba      	ldr	r2, [r7, #8]
 80045fe:	429a      	cmp	r2, r3
 8004600:	bf0c      	ite	eq
 8004602:	2301      	moveq	r3, #1
 8004604:	2300      	movne	r3, #0
 8004606:	b2db      	uxtb	r3, r3
 8004608:	461a      	mov	r2, r3
 800460a:	79fb      	ldrb	r3, [r7, #7]
 800460c:	429a      	cmp	r2, r3
 800460e:	f43f af46 	beq.w	800449e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3770      	adds	r7, #112	; 0x70
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800461c:	b480      	push	{r7}
 800461e:	b095      	sub	sp, #84	; 0x54
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800462c:	e853 3f00 	ldrex	r3, [r3]
 8004630:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004634:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004638:	64fb      	str	r3, [r7, #76]	; 0x4c
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	461a      	mov	r2, r3
 8004640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004642:	643b      	str	r3, [r7, #64]	; 0x40
 8004644:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004646:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004648:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800464a:	e841 2300 	strex	r3, r2, [r1]
 800464e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1e6      	bne.n	8004624 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	3308      	adds	r3, #8
 800465c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	e853 3f00 	ldrex	r3, [r3]
 8004664:	61fb      	str	r3, [r7, #28]
   return(result);
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800466c:	f023 0301 	bic.w	r3, r3, #1
 8004670:	64bb      	str	r3, [r7, #72]	; 0x48
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	3308      	adds	r3, #8
 8004678:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800467a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800467c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004680:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004682:	e841 2300 	strex	r3, r2, [r1]
 8004686:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1e3      	bne.n	8004656 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004692:	2b01      	cmp	r3, #1
 8004694:	d118      	bne.n	80046c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	e853 3f00 	ldrex	r3, [r3]
 80046a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	f023 0310 	bic.w	r3, r3, #16
 80046aa:	647b      	str	r3, [r7, #68]	; 0x44
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	461a      	mov	r2, r3
 80046b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046b4:	61bb      	str	r3, [r7, #24]
 80046b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b8:	6979      	ldr	r1, [r7, #20]
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	e841 2300 	strex	r3, r2, [r1]
 80046c0:	613b      	str	r3, [r7, #16]
   return(result);
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1e6      	bne.n	8004696 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2220      	movs	r2, #32
 80046cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	671a      	str	r2, [r3, #112]	; 0x70
}
 80046dc:	bf00      	nop
 80046de:	3754      	adds	r7, #84	; 0x54
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bc80      	pop	{r7}
 80046e4:	4770      	bx	lr

080046e6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b084      	sub	sp, #16
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f7ff fb4c 	bl	8003da2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800470a:	bf00      	nop
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b088      	sub	sp, #32
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	e853 3f00 	ldrex	r3, [r3]
 8004726:	60bb      	str	r3, [r7, #8]
   return(result);
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800472e:	61fb      	str	r3, [r7, #28]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	461a      	mov	r2, r3
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	61bb      	str	r3, [r7, #24]
 800473a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473c:	6979      	ldr	r1, [r7, #20]
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	e841 2300 	strex	r3, r2, [r1]
 8004744:	613b      	str	r3, [r7, #16]
   return(result);
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1e6      	bne.n	800471a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2220      	movs	r2, #32
 8004750:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7ff fb18 	bl	8003d90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004760:	bf00      	nop
 8004762:	3720      	adds	r7, #32
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004770:	bf00      	nop
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	bc80      	pop	{r7}
 8004778:	4770      	bx	lr

0800477a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800477a:	b480      	push	{r7}
 800477c:	b083      	sub	sp, #12
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004782:	bf00      	nop
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	bc80      	pop	{r7}
 800478a:	4770      	bx	lr

0800478c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	bc80      	pop	{r7}
 800479c:	4770      	bx	lr

0800479e <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b084      	sub	sp, #16
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d101      	bne.n	80047b4 <HAL_UARTEx_EnableFifoMode+0x16>
 80047b0:	2302      	movs	r3, #2
 80047b2:	e02b      	b.n	800480c <HAL_UARTEx_EnableFifoMode+0x6e>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2224      	movs	r2, #36	; 0x24
 80047c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 0201 	bic.w	r2, r2, #1
 80047da:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80047e2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80047ea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 f889 	bl	800490c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2220      	movs	r2, #32
 80047fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004824:	2b01      	cmp	r3, #1
 8004826:	d101      	bne.n	800482c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004828:	2302      	movs	r3, #2
 800482a:	e02d      	b.n	8004888 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2224      	movs	r2, #36	; 0x24
 8004838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 0201 	bic.w	r2, r2, #1
 8004852:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	430a      	orrs	r2, r1
 8004866:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 f84f 	bl	800490c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2220      	movs	r2, #32
 800487a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d101      	bne.n	80048a8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80048a4:	2302      	movs	r3, #2
 80048a6:	e02d      	b.n	8004904 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2224      	movs	r2, #36	; 0x24
 80048b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f022 0201 	bic.w	r2, r2, #1
 80048ce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	430a      	orrs	r2, r1
 80048e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f811 	bl	800490c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2220      	movs	r2, #32
 80048f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3710      	adds	r7, #16
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004918:	2b00      	cmp	r3, #0
 800491a:	d108      	bne.n	800492e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800492c:	e031      	b.n	8004992 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800492e:	2308      	movs	r3, #8
 8004930:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004932:	2308      	movs	r3, #8
 8004934:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	0e5b      	lsrs	r3, r3, #25
 800493e:	b2db      	uxtb	r3, r3
 8004940:	f003 0307 	and.w	r3, r3, #7
 8004944:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	0f5b      	lsrs	r3, r3, #29
 800494e:	b2db      	uxtb	r3, r3
 8004950:	f003 0307 	and.w	r3, r3, #7
 8004954:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004956:	7bbb      	ldrb	r3, [r7, #14]
 8004958:	7b3a      	ldrb	r2, [r7, #12]
 800495a:	4910      	ldr	r1, [pc, #64]	; (800499c <UARTEx_SetNbDataToProcess+0x90>)
 800495c:	5c8a      	ldrb	r2, [r1, r2]
 800495e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004962:	7b3a      	ldrb	r2, [r7, #12]
 8004964:	490e      	ldr	r1, [pc, #56]	; (80049a0 <UARTEx_SetNbDataToProcess+0x94>)
 8004966:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004968:	fb93 f3f2 	sdiv	r3, r3, r2
 800496c:	b29a      	uxth	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004974:	7bfb      	ldrb	r3, [r7, #15]
 8004976:	7b7a      	ldrb	r2, [r7, #13]
 8004978:	4908      	ldr	r1, [pc, #32]	; (800499c <UARTEx_SetNbDataToProcess+0x90>)
 800497a:	5c8a      	ldrb	r2, [r1, r2]
 800497c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004980:	7b7a      	ldrb	r2, [r7, #13]
 8004982:	4907      	ldr	r1, [pc, #28]	; (80049a0 <UARTEx_SetNbDataToProcess+0x94>)
 8004984:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004986:	fb93 f3f2 	sdiv	r3, r3, r2
 800498a:	b29a      	uxth	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004992:	bf00      	nop
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	bc80      	pop	{r7}
 800499a:	4770      	bx	lr
 800499c:	08004b1c 	.word	0x08004b1c
 80049a0:	08004b24 	.word	0x08004b24

080049a4 <__libc_init_array>:
 80049a4:	b570      	push	{r4, r5, r6, lr}
 80049a6:	4d0d      	ldr	r5, [pc, #52]	; (80049dc <__libc_init_array+0x38>)
 80049a8:	4c0d      	ldr	r4, [pc, #52]	; (80049e0 <__libc_init_array+0x3c>)
 80049aa:	1b64      	subs	r4, r4, r5
 80049ac:	10a4      	asrs	r4, r4, #2
 80049ae:	2600      	movs	r6, #0
 80049b0:	42a6      	cmp	r6, r4
 80049b2:	d109      	bne.n	80049c8 <__libc_init_array+0x24>
 80049b4:	4d0b      	ldr	r5, [pc, #44]	; (80049e4 <__libc_init_array+0x40>)
 80049b6:	4c0c      	ldr	r4, [pc, #48]	; (80049e8 <__libc_init_array+0x44>)
 80049b8:	f000 f82e 	bl	8004a18 <_init>
 80049bc:	1b64      	subs	r4, r4, r5
 80049be:	10a4      	asrs	r4, r4, #2
 80049c0:	2600      	movs	r6, #0
 80049c2:	42a6      	cmp	r6, r4
 80049c4:	d105      	bne.n	80049d2 <__libc_init_array+0x2e>
 80049c6:	bd70      	pop	{r4, r5, r6, pc}
 80049c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80049cc:	4798      	blx	r3
 80049ce:	3601      	adds	r6, #1
 80049d0:	e7ee      	b.n	80049b0 <__libc_init_array+0xc>
 80049d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80049d6:	4798      	blx	r3
 80049d8:	3601      	adds	r6, #1
 80049da:	e7f2      	b.n	80049c2 <__libc_init_array+0x1e>
 80049dc:	08004b34 	.word	0x08004b34
 80049e0:	08004b34 	.word	0x08004b34
 80049e4:	08004b34 	.word	0x08004b34
 80049e8:	08004b38 	.word	0x08004b38

080049ec <memcpy>:
 80049ec:	440a      	add	r2, r1
 80049ee:	4291      	cmp	r1, r2
 80049f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80049f4:	d100      	bne.n	80049f8 <memcpy+0xc>
 80049f6:	4770      	bx	lr
 80049f8:	b510      	push	{r4, lr}
 80049fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a02:	4291      	cmp	r1, r2
 8004a04:	d1f9      	bne.n	80049fa <memcpy+0xe>
 8004a06:	bd10      	pop	{r4, pc}

08004a08 <memset>:
 8004a08:	4402      	add	r2, r0
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d100      	bne.n	8004a12 <memset+0xa>
 8004a10:	4770      	bx	lr
 8004a12:	f803 1b01 	strb.w	r1, [r3], #1
 8004a16:	e7f9      	b.n	8004a0c <memset+0x4>

08004a18 <_init>:
 8004a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a1a:	bf00      	nop
 8004a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a1e:	bc08      	pop	{r3}
 8004a20:	469e      	mov	lr, r3
 8004a22:	4770      	bx	lr

08004a24 <_fini>:
 8004a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a26:	bf00      	nop
 8004a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a2a:	bc08      	pop	{r3}
 8004a2c:	469e      	mov	lr, r3
 8004a2e:	4770      	bx	lr
