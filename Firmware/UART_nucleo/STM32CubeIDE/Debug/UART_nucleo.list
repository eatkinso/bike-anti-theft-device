
UART_nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048e0  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08004a18  08004a18  00014a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b2c  08004b2c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004b2c  08004b2c  00014b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b34  08004b34  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b34  08004b34  00014b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b38  08004b38  00014b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004b3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  2000000c  08004b48  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  08004b48  00020298  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000114c2  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026e8  00000000  00000000  000314f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  00033be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f60  00000000  00000000  00034c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c3e1  00000000  00000000  00035b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff8e  00000000  00000000  00051f59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af22c  00000000  00000000  00061ee7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00111113  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042b4  00000000  00000000  00111164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000000c 	.word	0x2000000c
 8000154:	00000000 	.word	0x00000000
 8000158:	08004a00 	.word	0x08004a00

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000010 	.word	0x20000010
 8000174:	08004a00 	.word	0x08004a00

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000188:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800018c:	f000 b974 	b.w	8000478 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9e08      	ldr	r6, [sp, #32]
 80001ae:	460d      	mov	r5, r1
 80001b0:	4604      	mov	r4, r0
 80001b2:	4688      	mov	r8, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14d      	bne.n	8000254 <__udivmoddi4+0xac>
 80001b8:	428a      	cmp	r2, r1
 80001ba:	4694      	mov	ip, r2
 80001bc:	d968      	bls.n	8000290 <__udivmoddi4+0xe8>
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	b152      	cbz	r2, 80001da <__udivmoddi4+0x32>
 80001c4:	fa01 f302 	lsl.w	r3, r1, r2
 80001c8:	f1c2 0120 	rsb	r1, r2, #32
 80001cc:	fa20 f101 	lsr.w	r1, r0, r1
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	ea41 0803 	orr.w	r8, r1, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80001de:	0c21      	lsrs	r1, r4, #16
 80001e0:	fbb8 fef5 	udiv	lr, r8, r5
 80001e4:	fa1f f78c 	uxth.w	r7, ip
 80001e8:	fb05 831e 	mls	r3, r5, lr, r8
 80001ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f0:	fb0e f107 	mul.w	r1, lr, r7
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d90b      	bls.n	8000210 <__udivmoddi4+0x68>
 80001f8:	eb1c 0303 	adds.w	r3, ip, r3
 80001fc:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 8000200:	f080 811e 	bcs.w	8000440 <__udivmoddi4+0x298>
 8000204:	4299      	cmp	r1, r3
 8000206:	f240 811b 	bls.w	8000440 <__udivmoddi4+0x298>
 800020a:	f1ae 0e02 	sub.w	lr, lr, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a5b      	subs	r3, r3, r1
 8000212:	b2a4      	uxth	r4, r4
 8000214:	fbb3 f0f5 	udiv	r0, r3, r5
 8000218:	fb05 3310 	mls	r3, r5, r0, r3
 800021c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000220:	fb00 f707 	mul.w	r7, r0, r7
 8000224:	42a7      	cmp	r7, r4
 8000226:	d90a      	bls.n	800023e <__udivmoddi4+0x96>
 8000228:	eb1c 0404 	adds.w	r4, ip, r4
 800022c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000230:	f080 8108 	bcs.w	8000444 <__udivmoddi4+0x29c>
 8000234:	42a7      	cmp	r7, r4
 8000236:	f240 8105 	bls.w	8000444 <__udivmoddi4+0x29c>
 800023a:	4464      	add	r4, ip
 800023c:	3802      	subs	r0, #2
 800023e:	1be4      	subs	r4, r4, r7
 8000240:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa8>
 8000248:	40d4      	lsrs	r4, r2
 800024a:	2300      	movs	r3, #0
 800024c:	e9c6 4300 	strd	r4, r3, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	428b      	cmp	r3, r1
 8000256:	d908      	bls.n	800026a <__udivmoddi4+0xc2>
 8000258:	2e00      	cmp	r6, #0
 800025a:	f000 80ee 	beq.w	800043a <__udivmoddi4+0x292>
 800025e:	2100      	movs	r1, #0
 8000260:	e9c6 0500 	strd	r0, r5, [r6]
 8000264:	4608      	mov	r0, r1
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f183 	clz	r1, r3
 800026e:	2900      	cmp	r1, #0
 8000270:	d14a      	bne.n	8000308 <__udivmoddi4+0x160>
 8000272:	42ab      	cmp	r3, r5
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd4>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80f9 	bhi.w	800046e <__udivmoddi4+0x2c6>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb65 0303 	sbc.w	r3, r5, r3
 8000282:	2001      	movs	r0, #1
 8000284:	4698      	mov	r8, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e2      	beq.n	8000250 <__udivmoddi4+0xa8>
 800028a:	e9c6 4800 	strd	r4, r8, [r6]
 800028e:	e7df      	b.n	8000250 <__udivmoddi4+0xa8>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xec>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 8091 	bne.w	80003c0 <__udivmoddi4+0x218>
 800029e:	eba1 050c 	sub.w	r5, r1, ip
 80002a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a6:	fa1f fe8c 	uxth.w	lr, ip
 80002aa:	2101      	movs	r1, #1
 80002ac:	fbb5 f3f7 	udiv	r3, r5, r7
 80002b0:	fb07 5013 	mls	r0, r7, r3, r5
 80002b4:	0c25      	lsrs	r5, r4, #16
 80002b6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ba:	fb0e f003 	mul.w	r0, lr, r3
 80002be:	42a8      	cmp	r0, r5
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x12c>
 80002c2:	eb1c 0505 	adds.w	r5, ip, r5
 80002c6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x12a>
 80002cc:	42a8      	cmp	r0, r5
 80002ce:	f200 80cb 	bhi.w	8000468 <__udivmoddi4+0x2c0>
 80002d2:	4643      	mov	r3, r8
 80002d4:	1a2d      	subs	r5, r5, r0
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0f7 	udiv	r0, r5, r7
 80002dc:	fb07 5510 	mls	r5, r7, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb0e fe00 	mul.w	lr, lr, r0
 80002e8:	45a6      	cmp	lr, r4
 80002ea:	d908      	bls.n	80002fe <__udivmoddi4+0x156>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80002f4:	d202      	bcs.n	80002fc <__udivmoddi4+0x154>
 80002f6:	45a6      	cmp	lr, r4
 80002f8:	f200 80bb 	bhi.w	8000472 <__udivmoddi4+0x2ca>
 80002fc:	4628      	mov	r0, r5
 80002fe:	eba4 040e 	sub.w	r4, r4, lr
 8000302:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000306:	e79e      	b.n	8000246 <__udivmoddi4+0x9e>
 8000308:	f1c1 0720 	rsb	r7, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000312:	ea4c 0c03 	orr.w	ip, ip, r3
 8000316:	fa20 f407 	lsr.w	r4, r0, r7
 800031a:	fa05 f301 	lsl.w	r3, r5, r1
 800031e:	431c      	orrs	r4, r3
 8000320:	40fd      	lsrs	r5, r7
 8000322:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000326:	fa00 f301 	lsl.w	r3, r0, r1
 800032a:	fbb5 f8f9 	udiv	r8, r5, r9
 800032e:	0c20      	lsrs	r0, r4, #16
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	fb09 5518 	mls	r5, r9, r8, r5
 8000338:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800033c:	fb08 f00e 	mul.w	r0, r8, lr
 8000340:	42a8      	cmp	r0, r5
 8000342:	fa02 f201 	lsl.w	r2, r2, r1
 8000346:	d90b      	bls.n	8000360 <__udivmoddi4+0x1b8>
 8000348:	eb1c 0505 	adds.w	r5, ip, r5
 800034c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000350:	f080 8088 	bcs.w	8000464 <__udivmoddi4+0x2bc>
 8000354:	42a8      	cmp	r0, r5
 8000356:	f240 8085 	bls.w	8000464 <__udivmoddi4+0x2bc>
 800035a:	f1a8 0802 	sub.w	r8, r8, #2
 800035e:	4465      	add	r5, ip
 8000360:	1a2d      	subs	r5, r5, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb5 f0f9 	udiv	r0, r5, r9
 8000368:	fb09 5510 	mls	r5, r9, r0, r5
 800036c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000370:	fb00 fe0e 	mul.w	lr, r0, lr
 8000374:	45ae      	cmp	lr, r5
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1e2>
 8000378:	eb1c 0505 	adds.w	r5, ip, r5
 800037c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000380:	d26c      	bcs.n	800045c <__udivmoddi4+0x2b4>
 8000382:	45ae      	cmp	lr, r5
 8000384:	d96a      	bls.n	800045c <__udivmoddi4+0x2b4>
 8000386:	3802      	subs	r0, #2
 8000388:	4465      	add	r5, ip
 800038a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800038e:	fba0 9402 	umull	r9, r4, r0, r2
 8000392:	eba5 050e 	sub.w	r5, r5, lr
 8000396:	42a5      	cmp	r5, r4
 8000398:	46c8      	mov	r8, r9
 800039a:	46a6      	mov	lr, r4
 800039c:	d356      	bcc.n	800044c <__udivmoddi4+0x2a4>
 800039e:	d053      	beq.n	8000448 <__udivmoddi4+0x2a0>
 80003a0:	b15e      	cbz	r6, 80003ba <__udivmoddi4+0x212>
 80003a2:	ebb3 0208 	subs.w	r2, r3, r8
 80003a6:	eb65 050e 	sbc.w	r5, r5, lr
 80003aa:	fa05 f707 	lsl.w	r7, r5, r7
 80003ae:	fa22 f301 	lsr.w	r3, r2, r1
 80003b2:	40cd      	lsrs	r5, r1
 80003b4:	431f      	orrs	r7, r3
 80003b6:	e9c6 7500 	strd	r7, r5, [r6]
 80003ba:	2100      	movs	r1, #0
 80003bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c0:	f1c2 0320 	rsb	r3, r2, #32
 80003c4:	fa20 f103 	lsr.w	r1, r0, r3
 80003c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003cc:	fa25 f303 	lsr.w	r3, r5, r3
 80003d0:	4095      	lsls	r5, r2
 80003d2:	430d      	orrs	r5, r1
 80003d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3011 	mls	r0, r7, r1, r3
 80003e4:	0c2b      	lsrs	r3, r5, #16
 80003e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80003ea:	fb01 f00e 	mul.w	r0, r1, lr
 80003ee:	4298      	cmp	r0, r3
 80003f0:	fa04 f402 	lsl.w	r4, r4, r2
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x260>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80003fe:	d22f      	bcs.n	8000460 <__udivmoddi4+0x2b8>
 8000400:	4298      	cmp	r0, r3
 8000402:	d92d      	bls.n	8000460 <__udivmoddi4+0x2b8>
 8000404:	3902      	subs	r1, #2
 8000406:	4463      	add	r3, ip
 8000408:	1a1b      	subs	r3, r3, r0
 800040a:	b2ad      	uxth	r5, r5
 800040c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000410:	fb07 3310 	mls	r3, r7, r0, r3
 8000414:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000418:	fb00 f30e 	mul.w	r3, r0, lr
 800041c:	42ab      	cmp	r3, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x28a>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000428:	d216      	bcs.n	8000458 <__udivmoddi4+0x2b0>
 800042a:	42ab      	cmp	r3, r5
 800042c:	d914      	bls.n	8000458 <__udivmoddi4+0x2b0>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	1aed      	subs	r5, r5, r3
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	e738      	b.n	80002ac <__udivmoddi4+0x104>
 800043a:	4631      	mov	r1, r6
 800043c:	4630      	mov	r0, r6
 800043e:	e707      	b.n	8000250 <__udivmoddi4+0xa8>
 8000440:	4686      	mov	lr, r0
 8000442:	e6e5      	b.n	8000210 <__udivmoddi4+0x68>
 8000444:	4618      	mov	r0, r3
 8000446:	e6fa      	b.n	800023e <__udivmoddi4+0x96>
 8000448:	454b      	cmp	r3, r9
 800044a:	d2a9      	bcs.n	80003a0 <__udivmoddi4+0x1f8>
 800044c:	ebb9 0802 	subs.w	r8, r9, r2
 8000450:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000454:	3801      	subs	r0, #1
 8000456:	e7a3      	b.n	80003a0 <__udivmoddi4+0x1f8>
 8000458:	4640      	mov	r0, r8
 800045a:	e7ea      	b.n	8000432 <__udivmoddi4+0x28a>
 800045c:	4620      	mov	r0, r4
 800045e:	e794      	b.n	800038a <__udivmoddi4+0x1e2>
 8000460:	4641      	mov	r1, r8
 8000462:	e7d1      	b.n	8000408 <__udivmoddi4+0x260>
 8000464:	46d0      	mov	r8, sl
 8000466:	e77b      	b.n	8000360 <__udivmoddi4+0x1b8>
 8000468:	3b02      	subs	r3, #2
 800046a:	4465      	add	r5, ip
 800046c:	e732      	b.n	80002d4 <__udivmoddi4+0x12c>
 800046e:	4608      	mov	r0, r1
 8000470:	e709      	b.n	8000286 <__udivmoddi4+0xde>
 8000472:	4464      	add	r4, ip
 8000474:	3802      	subs	r0, #2
 8000476:	e742      	b.n	80002fe <__udivmoddi4+0x156>

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <get_gps>:
  * @brief Query the GPS for a GPGGA packet (UTC time, lat, long).
  * @param huart UART handle for the GPS
  * @param msgbuf pointer to the struct to store the final message
  * @retval 0 on success, 1 on failure
  */
int get_gps(UART_HandleTypeDef * huart, nmea_gpgga_t * msgbuf){
 800047c:	b5b0      	push	{r4, r5, r7, lr}
 800047e:	b0a6      	sub	sp, #152	; 0x98
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
 8000484:	6039      	str	r1, [r7, #0]
	char raw[100] = {"0"};
 8000486:	2330      	movs	r3, #48	; 0x30
 8000488:	627b      	str	r3, [r7, #36]	; 0x24
 800048a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800048e:	2260      	movs	r2, #96	; 0x60
 8000490:	2100      	movs	r1, #0
 8000492:	4618      	mov	r0, r3
 8000494:	f004 faac 	bl	80049f0 <memset>
		ew,
		pfix,
		nomsg,
		msgdone
	} nmea_field_t;
	nmea_field_t next_field=nomsg;
 8000498:	2307      	movs	r3, #7
 800049a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	int field_i = 0;
 800049e:	2300      	movs	r3, #0
 80004a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	// query the GGA message from the GPS.
	char queryGGA[]= "$PSRF103,00,01,10,00,\r\n";
 80004a4:	4ba9      	ldr	r3, [pc, #676]	; (800074c <get_gps+0x2d0>)
 80004a6:	f107 040c 	add.w	r4, r7, #12
 80004aa:	461d      	mov	r5, r3
 80004ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004b0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80004b4:	e884 0003 	stmia.w	r4, {r0, r1}
	HAL_UART_Transmit(huart, (uint8_t *)queryGGA, 25, 100);
 80004b8:	f107 010c 	add.w	r1, r7, #12
 80004bc:	2364      	movs	r3, #100	; 0x64
 80004be:	2219      	movs	r2, #25
 80004c0:	6878      	ldr	r0, [r7, #4]
 80004c2:	f002 feaa 	bl	800321a <HAL_UART_Transmit>
	// Receive bytes one-by-one into the raw buffer.
	for (int i =0; i<90; i++){
 80004c6:	2300      	movs	r3, #0
 80004c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80004cc:	e00f      	b.n	80004ee <get_gps+0x72>
		HAL_UART_Receive(huart, (uint8_t *)&raw[i], 1, 1000);
 80004ce:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80004d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80004d6:	18d1      	adds	r1, r2, r3
 80004d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004dc:	2201      	movs	r2, #1
 80004de:	6878      	ldr	r0, [r7, #4]
 80004e0:	f002 ff31 	bl	8003346 <HAL_UART_Receive>
	for (int i =0; i<90; i++){
 80004e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80004e8:	3301      	adds	r3, #1
 80004ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80004ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80004f2:	2b59      	cmp	r3, #89	; 0x59
 80004f4:	ddeb      	ble.n	80004ce <get_gps+0x52>
	  }
	// Process the raw message buffer to get the message.
	for (int i=0; i<90; i++){
 80004f6:	2300      	movs	r3, #0
 80004f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80004fc:	e11b      	b.n	8000736 <get_gps+0x2ba>
		switch(next_field){
 80004fe:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000502:	2b08      	cmp	r3, #8
 8000504:	f200 8112 	bhi.w	800072c <get_gps+0x2b0>
 8000508:	a201      	add	r2, pc, #4	; (adr r2, 8000510 <get_gps+0x94>)
 800050a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800050e:	bf00      	nop
 8000510:	080005b3 	.word	0x080005b3
 8000514:	080005d3 	.word	0x080005d3
 8000518:	08000615 	.word	0x08000615
 800051c:	08000659 	.word	0x08000659
 8000520:	08000689 	.word	0x08000689
 8000524:	080006cd 	.word	0x080006cd
 8000528:	080006fd 	.word	0x080006fd
 800052c:	08000535 	.word	0x08000535
 8000530:	0800072d 	.word	0x0800072d
			case nomsg	:
				// check for the $GPGGA that starts the message.
				if ((raw[i]=='$')&&(raw[i+1]=='G')&&(raw[i+2]=='P')&&(raw[i+3]=='G')&&(raw[i+4]=='G')&&(raw[i+5]=='A')){
 8000534:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000538:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800053c:	4413      	add	r3, r2
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	2b24      	cmp	r3, #36	; 0x24
 8000542:	f040 80f0 	bne.w	8000726 <get_gps+0x2aa>
 8000546:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800054a:	3301      	adds	r3, #1
 800054c:	3398      	adds	r3, #152	; 0x98
 800054e:	443b      	add	r3, r7
 8000550:	f813 3c74 	ldrb.w	r3, [r3, #-116]
 8000554:	2b47      	cmp	r3, #71	; 0x47
 8000556:	f040 80e6 	bne.w	8000726 <get_gps+0x2aa>
 800055a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800055e:	3302      	adds	r3, #2
 8000560:	3398      	adds	r3, #152	; 0x98
 8000562:	443b      	add	r3, r7
 8000564:	f813 3c74 	ldrb.w	r3, [r3, #-116]
 8000568:	2b50      	cmp	r3, #80	; 0x50
 800056a:	f040 80dc 	bne.w	8000726 <get_gps+0x2aa>
 800056e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000572:	3303      	adds	r3, #3
 8000574:	3398      	adds	r3, #152	; 0x98
 8000576:	443b      	add	r3, r7
 8000578:	f813 3c74 	ldrb.w	r3, [r3, #-116]
 800057c:	2b47      	cmp	r3, #71	; 0x47
 800057e:	f040 80d2 	bne.w	8000726 <get_gps+0x2aa>
 8000582:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000586:	3304      	adds	r3, #4
 8000588:	3398      	adds	r3, #152	; 0x98
 800058a:	443b      	add	r3, r7
 800058c:	f813 3c74 	ldrb.w	r3, [r3, #-116]
 8000590:	2b47      	cmp	r3, #71	; 0x47
 8000592:	f040 80c8 	bne.w	8000726 <get_gps+0x2aa>
 8000596:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800059a:	3305      	adds	r3, #5
 800059c:	3398      	adds	r3, #152	; 0x98
 800059e:	443b      	add	r3, r7
 80005a0:	f813 3c74 	ldrb.w	r3, [r3, #-116]
 80005a4:	2b41      	cmp	r3, #65	; 0x41
 80005a6:	f040 80be 	bne.w	8000726 <get_gps+0x2aa>
					next_field=header; // increment to the next field
 80005aa:	2300      	movs	r3, #0
 80005ac:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				}
				break;
 80005b0:	e0b9      	b.n	8000726 <get_gps+0x2aa>
			case header :
				if (raw[i] == ','){
 80005b2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80005b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80005ba:	4413      	add	r3, r2
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b2c      	cmp	r3, #44	; 0x2c
 80005c0:	f040 80b3 	bne.w	800072a <get_gps+0x2ae>
					next_field=utc; // increment to the next field on the delimiter comma
 80005c4:	2301      	movs	r3, #1
 80005c6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					field_i = 0; // reset the field index
 80005ca:	2300      	movs	r3, #0
 80005cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
					break;
 80005d0:	e0ac      	b.n	800072c <get_gps+0x2b0>
				}
				break;
			case utc	:
				if (raw[i] == ','){
 80005d2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80005d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80005da:	4413      	add	r3, r2
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b2c      	cmp	r3, #44	; 0x2c
 80005e0:	d106      	bne.n	80005f0 <get_gps+0x174>
					next_field=lat; // increment to the next field on the delimiter comma
 80005e2:	2302      	movs	r3, #2
 80005e4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					field_i = 0; // reset the field index
 80005e8:	2300      	movs	r3, #0
 80005ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
					break;
 80005ee:	e09d      	b.n	800072c <get_gps+0x2b0>
				}
				msgbuf->UTC_Time[field_i] = raw[i];
 80005f0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80005f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80005f8:	4413      	add	r3, r2
 80005fa:	7819      	ldrb	r1, [r3, #0]
 80005fc:	683a      	ldr	r2, [r7, #0]
 80005fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000602:	4413      	add	r3, r2
 8000604:	460a      	mov	r2, r1
 8000606:	701a      	strb	r2, [r3, #0]
				field_i ++;
 8000608:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800060c:	3301      	adds	r3, #1
 800060e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				break;
 8000612:	e08b      	b.n	800072c <get_gps+0x2b0>
			case lat	:
				if (raw[i] == ','){
 8000614:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000618:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800061c:	4413      	add	r3, r2
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b2c      	cmp	r3, #44	; 0x2c
 8000622:	d106      	bne.n	8000632 <get_gps+0x1b6>
					next_field=ns; // increment to the next field on the delimiter comma
 8000624:	2303      	movs	r3, #3
 8000626:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					field_i = 0; // reset the field index
 800062a:	2300      	movs	r3, #0
 800062c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
					break;
 8000630:	e07c      	b.n	800072c <get_gps+0x2b0>
				}
				msgbuf->latitude[field_i] = raw[i];
 8000632:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000636:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800063a:	4413      	add	r3, r2
 800063c:	7819      	ldrb	r1, [r3, #0]
 800063e:	683a      	ldr	r2, [r7, #0]
 8000640:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000644:	4413      	add	r3, r2
 8000646:	330a      	adds	r3, #10
 8000648:	460a      	mov	r2, r1
 800064a:	701a      	strb	r2, [r3, #0]
				field_i ++;
 800064c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000650:	3301      	adds	r3, #1
 8000652:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				break;
 8000656:	e069      	b.n	800072c <get_gps+0x2b0>
			case ns		:
				if (raw[i] == ','){
 8000658:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800065c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000660:	4413      	add	r3, r2
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b2c      	cmp	r3, #44	; 0x2c
 8000666:	d106      	bne.n	8000676 <get_gps+0x1fa>
					next_field=lontd; // increment to the next field on the delimiter comma
 8000668:	2304      	movs	r3, #4
 800066a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					field_i = 0; // reset the field index
 800066e:	2300      	movs	r3, #0
 8000670:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
					break;
 8000674:	e05a      	b.n	800072c <get_gps+0x2b0>
				}
				msgbuf->NS=raw[i];
 8000676:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800067a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800067e:	4413      	add	r3, r2
 8000680:	781a      	ldrb	r2, [r3, #0]
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	74da      	strb	r2, [r3, #19]
				break;
 8000686:	e051      	b.n	800072c <get_gps+0x2b0>
			case lontd	:
				if (raw[i] == ','){
 8000688:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800068c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000690:	4413      	add	r3, r2
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b2c      	cmp	r3, #44	; 0x2c
 8000696:	d106      	bne.n	80006a6 <get_gps+0x22a>
					next_field=ew; // increment to the next field on the delimiter comma
 8000698:	2305      	movs	r3, #5
 800069a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					field_i = 0; // reset the field index
 800069e:	2300      	movs	r3, #0
 80006a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
					break;
 80006a4:	e042      	b.n	800072c <get_gps+0x2b0>
				}
				msgbuf->longitude[field_i]=raw[i];
 80006a6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80006aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80006ae:	4413      	add	r3, r2
 80006b0:	7819      	ldrb	r1, [r3, #0]
 80006b2:	683a      	ldr	r2, [r7, #0]
 80006b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80006b8:	4413      	add	r3, r2
 80006ba:	3314      	adds	r3, #20
 80006bc:	460a      	mov	r2, r1
 80006be:	701a      	strb	r2, [r3, #0]
				field_i ++;
 80006c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80006c4:	3301      	adds	r3, #1
 80006c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				break;
 80006ca:	e02f      	b.n	800072c <get_gps+0x2b0>
			case ew		:
				if (raw[i] == ','){
 80006cc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80006d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80006d4:	4413      	add	r3, r2
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b2c      	cmp	r3, #44	; 0x2c
 80006da:	d106      	bne.n	80006ea <get_gps+0x26e>
					next_field=pfix; // increment to the next field on the delimiter comma
 80006dc:	2306      	movs	r3, #6
 80006de:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					field_i = 0; // reset the field index
 80006e2:	2300      	movs	r3, #0
 80006e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
					break;
 80006e8:	e020      	b.n	800072c <get_gps+0x2b0>
				}
				msgbuf->EW=raw[i];
 80006ea:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80006ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80006f2:	4413      	add	r3, r2
 80006f4:	781a      	ldrb	r2, [r3, #0]
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	779a      	strb	r2, [r3, #30]
				break;
 80006fa:	e017      	b.n	800072c <get_gps+0x2b0>
			case pfix	:
				if (raw[i] == ','){
 80006fc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000700:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000704:	4413      	add	r3, r2
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b2c      	cmp	r3, #44	; 0x2c
 800070a:	d103      	bne.n	8000714 <get_gps+0x298>
					next_field=msgdone; // finished message
 800070c:	2308      	movs	r3, #8
 800070e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					break;
 8000712:	e00b      	b.n	800072c <get_gps+0x2b0>
				}
				msgbuf->pos_fix=raw[i];
 8000714:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000718:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800071c:	4413      	add	r3, r2
 800071e:	781a      	ldrb	r2, [r3, #0]
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	77da      	strb	r2, [r3, #31]
				break;
 8000724:	e002      	b.n	800072c <get_gps+0x2b0>
				break;
 8000726:	bf00      	nop
 8000728:	e000      	b.n	800072c <get_gps+0x2b0>
				break;
 800072a:	bf00      	nop
	for (int i=0; i<90; i++){
 800072c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000730:	3301      	adds	r3, #1
 8000732:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000736:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800073a:	2b59      	cmp	r3, #89	; 0x59
 800073c:	f77f aedf 	ble.w	80004fe <get_gps+0x82>
			case msgdone:
				break;
			}
	}
	__asm__("nop");
 8000740:	bf00      	nop
	return 0;
 8000742:	2300      	movs	r3, #0
}
 8000744:	4618      	mov	r0, r3
 8000746:	3798      	adds	r7, #152	; 0x98
 8000748:	46bd      	mov	sp, r7
 800074a:	bdb0      	pop	{r4, r5, r7, pc}
 800074c:	08004a18 	.word	0x08004a18

08000750 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800075c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000760:	f023 0218 	bic.w	r2, r3, #24
 8000764:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	4313      	orrs	r3, r2
 800076c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr

0800077a <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800077a:	b480      	push	{r7}
 800077c:	b085      	sub	sp, #20
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000786:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000788:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4313      	orrs	r3, r2
 8000790:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000796:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4013      	ands	r3, r2
 800079c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800079e:	68fb      	ldr	r3, [r7, #12]
}
 80007a0:	bf00      	nop
 80007a2:	3714      	adds	r7, #20
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr

080007aa <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007aa:	b480      	push	{r7}
 80007ac:	b085      	sub	sp, #20
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	4313      	orrs	r3, r2
 80007c0:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80007c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	4013      	ands	r3, r2
 80007cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007ce:	68fb      	ldr	r3, [r7, #12]
}
 80007d0:	bf00      	nop
 80007d2:	3714      	adds	r7, #20
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr
	...

080007dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007dc:	b5b0      	push	{r4, r5, r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e2:	f000 fb9f 	bl	8000f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e6:	f000 f81f 	bl	8000828 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ea:	f000 f937 	bl	8000a5c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007ee:	f000 f8d5 	bl	800099c <MX_USART1_UART_Init>
  MX_DMA_Init();
 80007f2:	f000 f921 	bl	8000a38 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80007f6:	f000 f883 	bl	8000900 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */
	// query the GGA message from the GPS.
	char queryGGA[]= "$PSRF103,00,01,10,00,\r\n";
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <main+0x40>)
 80007fc:	1d3c      	adds	r4, r7, #4
 80007fe:	461d      	mov	r5, r3
 8000800:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000802:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000804:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000808:	e884 0003 	stmia.w	r4, {r0, r1}
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	int res = get_gps(&huart1, &msgbuf);
 800080c:	4904      	ldr	r1, [pc, #16]	; (8000820 <main+0x44>)
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <main+0x48>)
 8000810:	f7ff fe34 	bl	800047c <get_gps>
 8000814:	61f8      	str	r0, [r7, #28]
	__asm__ ("nop");
 8000816:	bf00      	nop
  {
 8000818:	e7f8      	b.n	800080c <main+0x30>
 800081a:	bf00      	nop
 800081c:	08004a30 	.word	0x08004a30
 8000820:	20000270 	.word	0x20000270
 8000824:	200000b8 	.word	0x200000b8

08000828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b09a      	sub	sp, #104	; 0x68
 800082c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082e:	f107 0320 	add.w	r3, r7, #32
 8000832:	2248      	movs	r2, #72	; 0x48
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f004 f8da 	bl	80049f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]
 800084a:	615a      	str	r2, [r3, #20]
 800084c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800084e:	f001 f92b 	bl	8001aa8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000852:	2000      	movs	r0, #0
 8000854:	f7ff ff7c 	bl	8000750 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000858:	4b28      	ldr	r3, [pc, #160]	; (80008fc <SystemClock_Config+0xd4>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000860:	4a26      	ldr	r2, [pc, #152]	; (80008fc <SystemClock_Config+0xd4>)
 8000862:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000866:	6013      	str	r3, [r2, #0]
 8000868:	4b24      	ldr	r3, [pc, #144]	; (80008fc <SystemClock_Config+0xd4>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000870:	603b      	str	r3, [r7, #0]
 8000872:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8000874:	2326      	movs	r3, #38	; 0x26
 8000876:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000878:	2381      	movs	r3, #129	; 0x81
 800087a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800087c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000880:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000882:	2301      	movs	r3, #1
 8000884:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000886:	2340      	movs	r3, #64	; 0x40
 8000888:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800088a:	2300      	movs	r3, #0
 800088c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800088e:	23b0      	movs	r3, #176	; 0xb0
 8000890:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000892:	2302      	movs	r3, #2
 8000894:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000896:	2301      	movs	r3, #1
 8000898:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800089a:	2330      	movs	r3, #48	; 0x30
 800089c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 800089e:	2308      	movs	r3, #8
 80008a0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008a8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80008ac:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80008b2:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b4:	f107 0320 	add.w	r3, r7, #32
 80008b8:	4618      	mov	r0, r3
 80008ba:	f001 fbc7 	bl	800204c <HAL_RCC_OscConfig>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80008c4:	f000 f934 	bl	8000b30 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80008c8:	234f      	movs	r3, #79	; 0x4f
 80008ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008cc:	2303      	movs	r3, #3
 80008ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	2102      	movs	r1, #2
 80008e4:	4618      	mov	r0, r3
 80008e6:	f001 ff4d 	bl	8002784 <HAL_RCC_ClockConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80008f0:	f000 f91e 	bl	8000b30 <Error_Handler>
  }
}
 80008f4:	bf00      	nop
 80008f6:	3768      	adds	r7, #104	; 0x68
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	58000400 	.word	0x58000400

08000900 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000904:	4b23      	ldr	r3, [pc, #140]	; (8000994 <MX_LPUART1_UART_Init+0x94>)
 8000906:	4a24      	ldr	r2, [pc, #144]	; (8000998 <MX_LPUART1_UART_Init+0x98>)
 8000908:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 800090a:	4b22      	ldr	r3, [pc, #136]	; (8000994 <MX_LPUART1_UART_Init+0x94>)
 800090c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000910:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000912:	4b20      	ldr	r3, [pc, #128]	; (8000994 <MX_LPUART1_UART_Init+0x94>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000918:	4b1e      	ldr	r3, [pc, #120]	; (8000994 <MX_LPUART1_UART_Init+0x94>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800091e:	4b1d      	ldr	r3, [pc, #116]	; (8000994 <MX_LPUART1_UART_Init+0x94>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000924:	4b1b      	ldr	r3, [pc, #108]	; (8000994 <MX_LPUART1_UART_Init+0x94>)
 8000926:	220c      	movs	r2, #12
 8000928:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092a:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <MX_LPUART1_UART_Init+0x94>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 8000930:	4b18      	ldr	r3, [pc, #96]	; (8000994 <MX_LPUART1_UART_Init+0x94>)
 8000932:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000936:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000938:	4b16      	ldr	r3, [pc, #88]	; (8000994 <MX_LPUART1_UART_Init+0x94>)
 800093a:	2200      	movs	r2, #0
 800093c:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800093e:	4b15      	ldr	r3, [pc, #84]	; (8000994 <MX_LPUART1_UART_Init+0x94>)
 8000940:	2200      	movs	r2, #0
 8000942:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_ENABLE;
 8000944:	4b13      	ldr	r3, [pc, #76]	; (8000994 <MX_LPUART1_UART_Init+0x94>)
 8000946:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800094a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800094c:	4811      	ldr	r0, [pc, #68]	; (8000994 <MX_LPUART1_UART_Init+0x94>)
 800094e:	f002 fc14 	bl	800317a <HAL_UART_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 8000958:	f000 f8ea 	bl	8000b30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800095c:	2100      	movs	r1, #0
 800095e:	480d      	ldr	r0, [pc, #52]	; (8000994 <MX_LPUART1_UART_Init+0x94>)
 8000960:	f003 ff4c 	bl	80047fc <HAL_UARTEx_SetTxFifoThreshold>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_LPUART1_UART_Init+0x6e>
  {
    Error_Handler();
 800096a:	f000 f8e1 	bl	8000b30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800096e:	2100      	movs	r1, #0
 8000970:	4808      	ldr	r0, [pc, #32]	; (8000994 <MX_LPUART1_UART_Init+0x94>)
 8000972:	f003 ff81 	bl	8004878 <HAL_UARTEx_SetRxFifoThreshold>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_LPUART1_UART_Init+0x80>
  {
    Error_Handler();
 800097c:	f000 f8d8 	bl	8000b30 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&hlpuart1) != HAL_OK)
 8000980:	4804      	ldr	r0, [pc, #16]	; (8000994 <MX_LPUART1_UART_Init+0x94>)
 8000982:	f003 ff00 	bl	8004786 <HAL_UARTEx_EnableFifoMode>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_LPUART1_UART_Init+0x90>
  {
    Error_Handler();
 800098c:	f000 f8d0 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20000028 	.word	0x20000028
 8000998:	40008000 	.word	0x40008000

0800099c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009a0:	4b23      	ldr	r3, [pc, #140]	; (8000a30 <MX_USART1_UART_Init+0x94>)
 80009a2:	4a24      	ldr	r2, [pc, #144]	; (8000a34 <MX_USART1_UART_Init+0x98>)
 80009a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9615;
 80009a6:	4b22      	ldr	r3, [pc, #136]	; (8000a30 <MX_USART1_UART_Init+0x94>)
 80009a8:	f242 528f 	movw	r2, #9615	; 0x258f
 80009ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ae:	4b20      	ldr	r3, [pc, #128]	; (8000a30 <MX_USART1_UART_Init+0x94>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009b4:	4b1e      	ldr	r3, [pc, #120]	; (8000a30 <MX_USART1_UART_Init+0x94>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009ba:	4b1d      	ldr	r3, [pc, #116]	; (8000a30 <MX_USART1_UART_Init+0x94>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009c0:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <MX_USART1_UART_Init+0x94>)
 80009c2:	220c      	movs	r2, #12
 80009c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c6:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <MX_USART1_UART_Init+0x94>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 80009cc:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <MX_USART1_UART_Init+0x94>)
 80009ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009d2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 80009d4:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <MX_USART1_UART_Init+0x94>)
 80009d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009da:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_USART1_UART_Init+0x94>)
 80009de:	2200      	movs	r2, #0
 80009e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <MX_USART1_UART_Init+0x94>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009e8:	4811      	ldr	r0, [pc, #68]	; (8000a30 <MX_USART1_UART_Init+0x94>)
 80009ea:	f002 fbc6 	bl	800317a <HAL_UART_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 80009f4:	f000 f89c 	bl	8000b30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f8:	2100      	movs	r1, #0
 80009fa:	480d      	ldr	r0, [pc, #52]	; (8000a30 <MX_USART1_UART_Init+0x94>)
 80009fc:	f003 fefe 	bl	80047fc <HAL_UARTEx_SetTxFifoThreshold>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8000a06:	f000 f893 	bl	8000b30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4808      	ldr	r0, [pc, #32]	; (8000a30 <MX_USART1_UART_Init+0x94>)
 8000a0e:	f003 ff33 	bl	8004878 <HAL_UARTEx_SetRxFifoThreshold>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8000a18:	f000 f88a 	bl	8000b30 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8000a1c:	4804      	ldr	r0, [pc, #16]	; (8000a30 <MX_USART1_UART_Init+0x94>)
 8000a1e:	f003 feb2 	bl	8004786 <HAL_UARTEx_EnableFifoMode>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8000a28:	f000 f882 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	200000b8 	.word	0x200000b8
 8000a34:	40013800 	.word	0x40013800

08000a38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000a3c:	2004      	movs	r0, #4
 8000a3e:	f7ff fe9c 	bl	800077a <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a42:	2001      	movs	r0, #1
 8000a44:	f7ff fe99 	bl	800077a <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	200b      	movs	r0, #11
 8000a4e:	f000 fbb6 	bl	80011be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a52:	200b      	movs	r0, #11
 8000a54:	f000 fbcd 	bl	80011f2 <HAL_NVIC_EnableIRQ>

}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a70:	2001      	movs	r0, #1
 8000a72:	f7ff fe9a 	bl	80007aa <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	2002      	movs	r0, #2
 8000a78:	f7ff fe97 	bl	80007aa <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7c:	2004      	movs	r0, #4
 8000a7e:	f7ff fe94 	bl	80007aa <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000a82:	2200      	movs	r2, #0
 8000a84:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 8000a88:	4827      	ldr	r0, [pc, #156]	; (8000b28 <MX_GPIO_Init+0xcc>)
 8000a8a:	f000 fff5 	bl	8001a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2138      	movs	r1, #56	; 0x38
 8000a92:	4826      	ldr	r0, [pc, #152]	; (8000b2c <MX_GPIO_Init+0xd0>)
 8000a94:	f000 fff0 	bl	8001a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000a98:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 8000a9c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	4619      	mov	r1, r3
 8000aae:	481e      	ldr	r0, [pc, #120]	; (8000b28 <MX_GPIO_Init+0xcc>)
 8000ab0:	f000 fe82 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 8000ab4:	2338      	movs	r3, #56	; 0x38
 8000ab6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4818      	ldr	r0, [pc, #96]	; (8000b2c <MX_GPIO_Init+0xd0>)
 8000aca:	f000 fe75 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin B2_Pin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ad2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ad6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	4619      	mov	r1, r3
 8000ae0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae4:	f000 fe68 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B3_Pin */
  GPIO_InitStruct.Pin = B3_Pin;
 8000ae8:	2340      	movs	r3, #64	; 0x40
 8000aea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aec:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000af0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	4619      	mov	r1, r3
 8000afa:	480c      	ldr	r0, [pc, #48]	; (8000b2c <MX_GPIO_Init+0xd0>)
 8000afc:	f000 fe5c 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_VCP_RX_Pin T_VCP_RXA2_Pin */
  GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000b00:	230c      	movs	r3, #12
 8000b02:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b10:	2307      	movs	r3, #7
 8000b12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	4619      	mov	r1, r3
 8000b18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1c:	f000 fe4c 	bl	80017b8 <HAL_GPIO_Init>

}
 8000b20:	bf00      	nop
 8000b22:	3718      	adds	r7, #24
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	48000400 	.word	0x48000400
 8000b2c:	48000800 	.word	0x48000800

08000b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b34:	b672      	cpsid	i
}
 8000b36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <Error_Handler+0x8>

08000b3a <LL_AHB2_GRP1_EnableClock>:
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	b085      	sub	sp, #20
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
}
 8000b60:	bf00      	nop
 8000b62:	3714      	adds	r7, #20
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr

08000b6a <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	b085      	sub	sp, #20
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000b78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
}
 8000b90:	bf00      	nop
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr

08000b9a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	b085      	sub	sp, #20
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ba6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ba8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bb6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
}
 8000bc0:	bf00      	nop
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr

08000bca <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr
	...

08000bd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b096      	sub	sp, #88	; 0x58
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bf0:	f107 030c 	add.w	r3, r7, #12
 8000bf4:	2238      	movs	r2, #56	; 0x38
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f003 fef9 	bl	80049f0 <memset>
  if(huart->Instance==LPUART1)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a4c      	ldr	r2, [pc, #304]	; (8000d34 <HAL_UART_MspInit+0x15c>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d12d      	bne.n	8000c64 <HAL_UART_MspInit+0x8c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000c08:	2320      	movs	r3, #32
 8000c0a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 8000c0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c10:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c12:	f107 030c 	add.w	r3, r7, #12
 8000c16:	4618      	mov	r0, r3
 8000c18:	f002 f974 	bl	8002f04 <HAL_RCCEx_PeriphCLKConfig>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c22:	f7ff ff85 	bl	8000b30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000c26:	2001      	movs	r0, #1
 8000c28:	f7ff ff9f 	bl	8000b6a <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2c:	2004      	movs	r0, #4
 8000c2e:	f7ff ff84 	bl	8000b3a <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    PC0     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8000c32:	2303      	movs	r3, #3
 8000c34:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000c42:	2308      	movs	r3, #8
 8000c44:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c46:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	483a      	ldr	r0, [pc, #232]	; (8000d38 <HAL_UART_MspInit+0x160>)
 8000c4e:	f000 fdb3 	bl	80017b8 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2100      	movs	r1, #0
 8000c56:	2026      	movs	r0, #38	; 0x26
 8000c58:	f000 fab1 	bl	80011be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000c5c:	2026      	movs	r0, #38	; 0x26
 8000c5e:	f000 fac8 	bl	80011f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c62:	e063      	b.n	8000d2c <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART1)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a34      	ldr	r2, [pc, #208]	; (8000d3c <HAL_UART_MspInit+0x164>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d15e      	bne.n	8000d2c <HAL_UART_MspInit+0x154>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8000c72:	4b33      	ldr	r3, [pc, #204]	; (8000d40 <HAL_UART_MspInit+0x168>)
 8000c74:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c76:	f107 030c 	add.w	r3, r7, #12
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f002 f942 	bl	8002f04 <HAL_RCCEx_PeriphCLKConfig>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <HAL_UART_MspInit+0xb2>
      Error_Handler();
 8000c86:	f7ff ff53 	bl	8000b30 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c8a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000c8e:	f7ff ff84 	bl	8000b9a <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c92:	2002      	movs	r0, #2
 8000c94:	f7ff ff51 	bl	8000b3a <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000c98:	23c0      	movs	r3, #192	; 0xc0
 8000c9a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ca8:	2307      	movs	r3, #7
 8000caa:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4824      	ldr	r0, [pc, #144]	; (8000d44 <HAL_UART_MspInit+0x16c>)
 8000cb4:	f000 fd80 	bl	80017b8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000cb8:	4b23      	ldr	r3, [pc, #140]	; (8000d48 <HAL_UART_MspInit+0x170>)
 8000cba:	4a24      	ldr	r2, [pc, #144]	; (8000d4c <HAL_UART_MspInit+0x174>)
 8000cbc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000cbe:	4b22      	ldr	r3, [pc, #136]	; (8000d48 <HAL_UART_MspInit+0x170>)
 8000cc0:	2211      	movs	r2, #17
 8000cc2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cc4:	4b20      	ldr	r3, [pc, #128]	; (8000d48 <HAL_UART_MspInit+0x170>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cca:	4b1f      	ldr	r3, [pc, #124]	; (8000d48 <HAL_UART_MspInit+0x170>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cd0:	4b1d      	ldr	r3, [pc, #116]	; (8000d48 <HAL_UART_MspInit+0x170>)
 8000cd2:	2280      	movs	r2, #128	; 0x80
 8000cd4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cd6:	4b1c      	ldr	r3, [pc, #112]	; (8000d48 <HAL_UART_MspInit+0x170>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cdc:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <HAL_UART_MspInit+0x170>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000ce2:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <HAL_UART_MspInit+0x170>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ce8:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <HAL_UART_MspInit+0x170>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000cee:	4816      	ldr	r0, [pc, #88]	; (8000d48 <HAL_UART_MspInit+0x170>)
 8000cf0:	f000 fa9a 	bl	8001228 <HAL_DMA_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <HAL_UART_MspInit+0x126>
      Error_Handler();
 8000cfa:	f7ff ff19 	bl	8000b30 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000cfe:	2110      	movs	r1, #16
 8000d00:	4811      	ldr	r0, [pc, #68]	; (8000d48 <HAL_UART_MspInit+0x170>)
 8000d02:	f000 fcbd 	bl	8001680 <HAL_DMA_ConfigChannelAttributes>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <HAL_UART_MspInit+0x138>
      Error_Handler();
 8000d0c:	f7ff ff10 	bl	8000b30 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a0d      	ldr	r2, [pc, #52]	; (8000d48 <HAL_UART_MspInit+0x170>)
 8000d14:	67da      	str	r2, [r3, #124]	; 0x7c
 8000d16:	4a0c      	ldr	r2, [pc, #48]	; (8000d48 <HAL_UART_MspInit+0x170>)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2024      	movs	r0, #36	; 0x24
 8000d22:	f000 fa4c 	bl	80011be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d26:	2024      	movs	r0, #36	; 0x24
 8000d28:	f000 fa63 	bl	80011f2 <HAL_NVIC_EnableIRQ>
}
 8000d2c:	bf00      	nop
 8000d2e:	3758      	adds	r7, #88	; 0x58
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40008000 	.word	0x40008000
 8000d38:	48000800 	.word	0x48000800
 8000d3c:	40013800 	.word	0x40013800
 8000d40:	00030002 	.word	0x00030002
 8000d44:	48000400 	.word	0x48000400
 8000d48:	20000148 	.word	0x20000148
 8000d4c:	40020008 	.word	0x40020008

08000d50 <gps_parser>:

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */
void gps_parser(uint8_t * gpsbuffer){
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	return;
 8000d58:	bf00      	nop
}
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr

08000d62 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d66:	e7fe      	b.n	8000d66 <NMI_Handler+0x4>

08000d68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <HardFault_Handler+0x4>

08000d6e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <MemManage_Handler+0x4>

08000d74 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <BusFault_Handler+0x4>

08000d7a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <UsageFault_Handler+0x4>

08000d80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr

08000d8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr

08000d98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr

08000da4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da8:	f000 f916 	bl	8000fd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000db4:	4802      	ldr	r0, [pc, #8]	; (8000dc0 <DMA1_Channel1_IRQHandler+0x10>)
 8000db6:	f000 fb9d 	bl	80014f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000148 	.word	0x20000148

08000dc4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN USART1_IRQn 0 */
	extern uint8_t gps_buffer[100];
	extern uint8_t dma_buffer[100];
	VLU_IdleLineHandler(&huart1, &hdma_usart1_rx, gps_buffer, dma_buffer, &gps_parser);
 8000dca:	4b07      	ldr	r3, [pc, #28]	; (8000de8 <USART1_IRQHandler+0x24>)
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	4b07      	ldr	r3, [pc, #28]	; (8000dec <USART1_IRQHandler+0x28>)
 8000dd0:	4a07      	ldr	r2, [pc, #28]	; (8000df0 <USART1_IRQHandler+0x2c>)
 8000dd2:	4908      	ldr	r1, [pc, #32]	; (8000df4 <USART1_IRQHandler+0x30>)
 8000dd4:	4808      	ldr	r0, [pc, #32]	; (8000df8 <USART1_IRQHandler+0x34>)
 8000dd6:	f000 f81b 	bl	8000e10 <VLU_IdleLineHandler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000dda:	4807      	ldr	r0, [pc, #28]	; (8000df8 <USART1_IRQHandler+0x34>)
 8000ddc:	f002 fcb4 	bl	8003748 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	08000d51 	.word	0x08000d51
 8000dec:	2000020c 	.word	0x2000020c
 8000df0:	200001a8 	.word	0x200001a8
 8000df4:	20000148 	.word	0x20000148
 8000df8:	200000b8 	.word	0x200000b8

08000dfc <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000e00:	4802      	ldr	r0, [pc, #8]	; (8000e0c <LPUART1_IRQHandler+0x10>)
 8000e02:	f002 fca1 	bl	8003748 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000028 	.word	0x20000028

08000e10 <VLU_IdleLineHandler>:
void VLU_IdleLineHandler(UART_HandleTypeDef * huart, 
                          DMA_HandleTypeDef * hdma, 
                          uint8_t * working_buffer, 
                          uint8_t * byte_buffer,
                          void (*msgproc)(uint8_t *))
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
 8000e1c:	603b      	str	r3, [r7, #0]
  // Check to see if the IDLE bit is flipped.
  // This mask isolates the IDLE bit.
  // uint32_t mask = 0b00000000000000000000000000010000;
  uint32_t mask = 0x00000010;
 8000e1e:	2310      	movs	r3, #16
 8000e20:	617b      	str	r3, [r7, #20]
  if (huart->Instance->ISR && mask) {
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	69db      	ldr	r3, [r3, #28]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d03f      	beq.n	8000eac <VLU_IdleLineHandler+0x9c>
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d03c      	beq.n	8000eac <VLU_IdleLineHandler+0x9c>
    // The IDLE bit is flipped, so this was an IDLE interrupt.
    // Turn the IDLE bit off.
    huart->Instance->ICR |= mask;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	6a19      	ldr	r1, [r3, #32]
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	697a      	ldr	r2, [r7, #20]
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	621a      	str	r2, [r3, #32]
    /* WORKAROUND for the first byte missing thing.  
    If we have only read one byte, don't treat it as a separate message. */
    if (hdma->Instance->CNDTR >= BUFFER_LENGTH-1) goto endirq;
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	4a1d      	ldr	r2, [pc, #116]	; (8000ec0 <VLU_IdleLineHandler+0xb0>)
 8000e4a:	7812      	ldrb	r2, [r2, #0]
 8000e4c:	3a01      	subs	r2, #1
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d22e      	bcs.n	8000eb0 <VLU_IdleLineHandler+0xa0>
    // Copy the message to the working buffer.
    memcpy(working_buffer, byte_buffer, BUFFER_LENGTH);
 8000e52:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <VLU_IdleLineHandler+0xb0>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	461a      	mov	r2, r3
 8000e58:	6839      	ldr	r1, [r7, #0]
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f003 fdba 	bl	80049d4 <memcpy>
    memset(byte_buffer, 0, BUFFER_LENGTH);
 8000e60:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <VLU_IdleLineHandler+0xb0>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	461a      	mov	r2, r3
 8000e66:	2100      	movs	r1, #0
 8000e68:	6838      	ldr	r0, [r7, #0]
 8000e6a:	f003 fdc1 	bl	80049f0 <memset>
    // Attempt to reset the DMA controller
    HAL_UART_DMAPause(huart);
 8000e6e:	68f8      	ldr	r0, [r7, #12]
 8000e70:	f002 fb3c 	bl	80034ec <HAL_UART_DMAPause>
    hdma->Instance->CCR &= -2;
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f022 0201 	bic.w	r2, r2, #1
 8000e82:	601a      	str	r2, [r3, #0]
    hdma->Instance->CNDTR = BUFFER_LENGTH;
 8000e84:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <VLU_IdleLineHandler+0xb0>)
 8000e86:	781a      	ldrb	r2, [r3, #0]
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
    hdma->Instance->CCR |= 1;
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f042 0201 	orr.w	r2, r2, #1
 8000e9c:	601a      	str	r2, [r3, #0]
    HAL_UART_DMAResume(huart);
 8000e9e:	68f8      	ldr	r0, [r7, #12]
 8000ea0:	f002 fbc0 	bl	8003624 <HAL_UART_DMAResume>
    // Run the message processing subroutine.
    msgproc(working_buffer);
 8000ea4:	6a3b      	ldr	r3, [r7, #32]
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	4798      	blx	r3
 8000eaa:	e002      	b.n	8000eb2 <VLU_IdleLineHandler+0xa2>
    // The message processing routine is responsible for resetting the working buffer when it is done.
  }
  endirq:
 8000eac:	bf00      	nop
 8000eae:	e000      	b.n	8000eb2 <VLU_IdleLineHandler+0xa2>
    if (hdma->Instance->CNDTR >= BUFFER_LENGTH-1) goto endirq;
 8000eb0:	bf00      	nop
  HAL_UART_IRQHandler(huart);
 8000eb2:	68f8      	ldr	r0, [r7, #12]
 8000eb4:	f002 fc48 	bl	8003748 <HAL_UART_IRQHandler>
 8000eb8:	bf00      	nop
 8000eba:	3718      	adds	r7, #24
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000291 	.word	0x20000291

08000ec4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ec4:	480d      	ldr	r0, [pc, #52]	; (8000efc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ec6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ec8:	f000 f825 	bl	8000f16 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ecc:	480c      	ldr	r0, [pc, #48]	; (8000f00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ece:	490d      	ldr	r1, [pc, #52]	; (8000f04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ed0:	4a0d      	ldr	r2, [pc, #52]	; (8000f08 <LoopForever+0xe>)
  movs r3, #0
 8000ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed4:	e002      	b.n	8000edc <LoopCopyDataInit>

08000ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eda:	3304      	adds	r3, #4

08000edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee0:	d3f9      	bcc.n	8000ed6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ee4:	4c0a      	ldr	r4, [pc, #40]	; (8000f10 <LoopForever+0x16>)
  movs r3, #0
 8000ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee8:	e001      	b.n	8000eee <LoopFillZerobss>

08000eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eec:	3204      	adds	r2, #4

08000eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef0:	d3fb      	bcc.n	8000eea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ef2:	f003 fd4b 	bl	800498c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ef6:	f7ff fc71 	bl	80007dc <main>

08000efa <LoopForever>:

LoopForever:
    b LoopForever
 8000efa:	e7fe      	b.n	8000efa <LoopForever>
  ldr   r0, =_estack
 8000efc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f04:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f08:	08004b3c 	.word	0x08004b3c
  ldr r2, =_sbss
 8000f0c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f10:	20000298 	.word	0x20000298

08000f14 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f14:	e7fe      	b.n	8000f14 <ADC_IRQHandler>

08000f16 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr
	...

08000f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f2e:	2003      	movs	r0, #3
 8000f30:	f000 f93a 	bl	80011a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000f34:	f001 fe08 	bl	8002b48 <HAL_RCC_GetHCLKFreq>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	4a09      	ldr	r2, [pc, #36]	; (8000f60 <HAL_Init+0x3c>)
 8000f3c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f000 f810 	bl	8000f64 <HAL_InitTick>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d002      	beq.n	8000f50 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	71fb      	strb	r3, [r7, #7]
 8000f4e:	e001      	b.n	8000f54 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f50:	f7ff fe3b 	bl	8000bca <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f54:	79fb      	ldrb	r3, [r7, #7]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000000 	.word	0x20000000

08000f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f70:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <HAL_InitTick+0x6c>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d024      	beq.n	8000fc2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f78:	f001 fde6 	bl	8002b48 <HAL_RCC_GetHCLKFreq>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <HAL_InitTick+0x6c>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	4619      	mov	r1, r3
 8000f84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f88:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f90:	4618      	mov	r0, r3
 8000f92:	f000 f93c 	bl	800120e <HAL_SYSTICK_Config>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d10f      	bne.n	8000fbc <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b0f      	cmp	r3, #15
 8000fa0:	d809      	bhi.n	8000fb6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	6879      	ldr	r1, [r7, #4]
 8000fa6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000faa:	f000 f908 	bl	80011be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fae:	4a09      	ldr	r2, [pc, #36]	; (8000fd4 <HAL_InitTick+0x70>)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6013      	str	r3, [r2, #0]
 8000fb4:	e007      	b.n	8000fc6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	73fb      	strb	r3, [r7, #15]
 8000fba:	e004      	b.n	8000fc6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	73fb      	strb	r3, [r7, #15]
 8000fc0:	e001      	b.n	8000fc6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000008 	.word	0x20000008
 8000fd4:	20000004 	.word	0x20000004

08000fd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fdc:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <HAL_IncTick+0x1c>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <HAL_IncTick+0x20>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	4a03      	ldr	r2, [pc, #12]	; (8000ff8 <HAL_IncTick+0x20>)
 8000fea:	6013      	str	r3, [r2, #0]
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr
 8000ff4:	20000008 	.word	0x20000008
 8000ff8:	20000294 	.word	0x20000294

08000ffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8001000:	4b02      	ldr	r3, [pc, #8]	; (800100c <HAL_GetTick+0x10>)
 8001002:	681b      	ldr	r3, [r3, #0]
}
 8001004:	4618      	mov	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr
 800100c:	20000294 	.word	0x20000294

08001010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800102c:	4013      	ands	r3, r2
 800102e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001038:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800103c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001042:	4a04      	ldr	r2, [pc, #16]	; (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	60d3      	str	r3, [r2, #12]
}
 8001048:	bf00      	nop
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800105c:	4b04      	ldr	r3, [pc, #16]	; (8001070 <__NVIC_GetPriorityGrouping+0x18>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	0a1b      	lsrs	r3, r3, #8
 8001062:	f003 0307 	and.w	r3, r3, #7
}
 8001066:	4618      	mov	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	2b00      	cmp	r3, #0
 8001084:	db0b      	blt.n	800109e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	f003 021f 	and.w	r2, r3, #31
 800108c:	4906      	ldr	r1, [pc, #24]	; (80010a8 <__NVIC_EnableIRQ+0x34>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	095b      	lsrs	r3, r3, #5
 8001094:	2001      	movs	r0, #1
 8001096:	fa00 f202 	lsl.w	r2, r0, r2
 800109a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr
 80010a8:	e000e100 	.word	0xe000e100

080010ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	db0a      	blt.n	80010d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	490c      	ldr	r1, [pc, #48]	; (80010f8 <__NVIC_SetPriority+0x4c>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	b2d2      	uxtb	r2, r2
 80010ce:	440b      	add	r3, r1
 80010d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d4:	e00a      	b.n	80010ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	4908      	ldr	r1, [pc, #32]	; (80010fc <__NVIC_SetPriority+0x50>)
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	f003 030f 	and.w	r3, r3, #15
 80010e2:	3b04      	subs	r3, #4
 80010e4:	0112      	lsls	r2, r2, #4
 80010e6:	b2d2      	uxtb	r2, r2
 80010e8:	440b      	add	r3, r1
 80010ea:	761a      	strb	r2, [r3, #24]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	e000e100 	.word	0xe000e100
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001100:	b480      	push	{r7}
 8001102:	b089      	sub	sp, #36	; 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f1c3 0307 	rsb	r3, r3, #7
 800111a:	2b04      	cmp	r3, #4
 800111c:	bf28      	it	cs
 800111e:	2304      	movcs	r3, #4
 8001120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	3304      	adds	r3, #4
 8001126:	2b06      	cmp	r3, #6
 8001128:	d902      	bls.n	8001130 <NVIC_EncodePriority+0x30>
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3b03      	subs	r3, #3
 800112e:	e000      	b.n	8001132 <NVIC_EncodePriority+0x32>
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43da      	mvns	r2, r3
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	401a      	ands	r2, r3
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001148:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	fa01 f303 	lsl.w	r3, r1, r3
 8001152:	43d9      	mvns	r1, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	4313      	orrs	r3, r2
         );
}
 800115a:	4618      	mov	r0, r3
 800115c:	3724      	adds	r7, #36	; 0x24
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr

08001164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3b01      	subs	r3, #1
 8001170:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001174:	d301      	bcc.n	800117a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001176:	2301      	movs	r3, #1
 8001178:	e00f      	b.n	800119a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117a:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <SysTick_Config+0x40>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3b01      	subs	r3, #1
 8001180:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001182:	210f      	movs	r1, #15
 8001184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001188:	f7ff ff90 	bl	80010ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <SysTick_Config+0x40>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001192:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <SysTick_Config+0x40>)
 8001194:	2207      	movs	r2, #7
 8001196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	e000e010 	.word	0xe000e010

080011a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff ff2d 	bl	8001010 <__NVIC_SetPriorityGrouping>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b086      	sub	sp, #24
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	607a      	str	r2, [r7, #4]
 80011ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011cc:	f7ff ff44 	bl	8001058 <__NVIC_GetPriorityGrouping>
 80011d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	68b9      	ldr	r1, [r7, #8]
 80011d6:	6978      	ldr	r0, [r7, #20]
 80011d8:	f7ff ff92 	bl	8001100 <NVIC_EncodePriority>
 80011dc:	4602      	mov	r2, r0
 80011de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e2:	4611      	mov	r1, r2
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff61 	bl	80010ac <__NVIC_SetPriority>
}
 80011ea:	bf00      	nop
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	4603      	mov	r3, r0
 80011fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff37 	bl	8001074 <__NVIC_EnableIRQ>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff ffa4 	bl	8001164 <SysTick_Config>
 800121c:	4603      	mov	r3, r0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d101      	bne.n	800123a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e08e      	b.n	8001358 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	461a      	mov	r2, r3
 8001240:	4b47      	ldr	r3, [pc, #284]	; (8001360 <HAL_DMA_Init+0x138>)
 8001242:	429a      	cmp	r2, r3
 8001244:	d80f      	bhi.n	8001266 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	4b45      	ldr	r3, [pc, #276]	; (8001364 <HAL_DMA_Init+0x13c>)
 800124e:	4413      	add	r3, r2
 8001250:	4a45      	ldr	r2, [pc, #276]	; (8001368 <HAL_DMA_Init+0x140>)
 8001252:	fba2 2303 	umull	r2, r3, r2, r3
 8001256:	091b      	lsrs	r3, r3, #4
 8001258:	009a      	lsls	r2, r3, #2
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a42      	ldr	r2, [pc, #264]	; (800136c <HAL_DMA_Init+0x144>)
 8001262:	641a      	str	r2, [r3, #64]	; 0x40
 8001264:	e00e      	b.n	8001284 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	461a      	mov	r2, r3
 800126c:	4b40      	ldr	r3, [pc, #256]	; (8001370 <HAL_DMA_Init+0x148>)
 800126e:	4413      	add	r3, r2
 8001270:	4a3d      	ldr	r2, [pc, #244]	; (8001368 <HAL_DMA_Init+0x140>)
 8001272:	fba2 2303 	umull	r2, r3, r2, r3
 8001276:	091b      	lsrs	r3, r3, #4
 8001278:	009a      	lsls	r2, r3, #2
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a3c      	ldr	r2, [pc, #240]	; (8001374 <HAL_DMA_Init+0x14c>)
 8001282:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2202      	movs	r2, #2
 8001288:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	6812      	ldr	r2, [r2, #0]
 8001296:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800129a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800129e:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	6819      	ldr	r1, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	689a      	ldr	r2, [r3, #8]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	431a      	orrs	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	691b      	ldr	r3, [r3, #16]
 80012b4:	431a      	orrs	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	431a      	orrs	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	431a      	orrs	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	431a      	orrs	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a1b      	ldr	r3, [r3, #32]
 80012cc:	431a      	orrs	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	430a      	orrs	r2, r1
 80012d4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f000 fa02 	bl	80016e0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80012e4:	d102      	bne.n	80012ec <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685a      	ldr	r2, [r3, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80012f8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001302:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d010      	beq.n	800132e <HAL_DMA_Init+0x106>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	2b04      	cmp	r3, #4
 8001312:	d80c      	bhi.n	800132e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f000 fa2b 	bl	8001770 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	e008      	b.n	8001340 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40020407 	.word	0x40020407
 8001364:	bffdfff8 	.word	0xbffdfff8
 8001368:	cccccccd 	.word	0xcccccccd
 800136c:	40020000 	.word	0x40020000
 8001370:	bffdfbf8 	.word	0xbffdfbf8
 8001374:	40020400 	.word	0x40020400

08001378 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e04f      	b.n	800142a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d008      	beq.n	80013a8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2204      	movs	r2, #4
 800139a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e040      	b.n	800142a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 020e 	bic.w	r2, r2, #14
 80013b6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f022 0201 	bic.w	r2, r2, #1
 80013d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013dc:	f003 021c 	and.w	r2, r3, #28
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e4:	2101      	movs	r1, #1
 80013e6:	fa01 f202 	lsl.w	r2, r1, r2
 80013ea:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013f4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d00c      	beq.n	8001418 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001408:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800140c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001416:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2201      	movs	r2, #1
 800141c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr

08001434 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800143c:	2300      	movs	r3, #0
 800143e:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001446:	b2db      	uxtb	r3, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d005      	beq.n	8001458 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2204      	movs	r2, #4
 8001450:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	73fb      	strb	r3, [r7, #15]
 8001456:	e047      	b.n	80014e8 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f022 020e 	bic.w	r2, r2, #14
 8001466:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f022 0201 	bic.w	r2, r2, #1
 8001476:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001482:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001486:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148c:	f003 021c 	and.w	r2, r3, #28
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	2101      	movs	r1, #1
 8001496:	fa01 f202 	lsl.w	r2, r1, r2
 800149a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80014a4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d00c      	beq.n	80014c8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014bc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80014c6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2201      	movs	r2, #1
 80014cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d003      	beq.n	80014e8 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	4798      	blx	r3
    }
  }
  return status;
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001510:	f003 031c 	and.w	r3, r3, #28
 8001514:	2204      	movs	r2, #4
 8001516:	409a      	lsls	r2, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4013      	ands	r3, r2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d027      	beq.n	8001570 <HAL_DMA_IRQHandler+0x7c>
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	f003 0304 	and.w	r3, r3, #4
 8001526:	2b00      	cmp	r3, #0
 8001528:	d022      	beq.n	8001570 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0320 	and.w	r3, r3, #32
 8001534:	2b00      	cmp	r3, #0
 8001536:	d107      	bne.n	8001548 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 0204 	bic.w	r2, r2, #4
 8001546:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154c:	f003 021c 	and.w	r2, r3, #28
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001554:	2104      	movs	r1, #4
 8001556:	fa01 f202 	lsl.w	r2, r1, r2
 800155a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001560:	2b00      	cmp	r3, #0
 8001562:	f000 8081 	beq.w	8001668 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800156e:	e07b      	b.n	8001668 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001574:	f003 031c 	and.w	r3, r3, #28
 8001578:	2202      	movs	r2, #2
 800157a:	409a      	lsls	r2, r3
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	4013      	ands	r3, r2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d03d      	beq.n	8001600 <HAL_DMA_IRQHandler+0x10c>
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d038      	beq.n	8001600 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0320 	and.w	r3, r3, #32
 8001598:	2b00      	cmp	r3, #0
 800159a:	d10b      	bne.n	80015b4 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f022 020a 	bic.w	r2, r2, #10
 80015aa:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	461a      	mov	r2, r3
 80015ba:	4b2e      	ldr	r3, [pc, #184]	; (8001674 <HAL_DMA_IRQHandler+0x180>)
 80015bc:	429a      	cmp	r2, r3
 80015be:	d909      	bls.n	80015d4 <HAL_DMA_IRQHandler+0xe0>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c4:	f003 031c 	and.w	r3, r3, #28
 80015c8:	4a2b      	ldr	r2, [pc, #172]	; (8001678 <HAL_DMA_IRQHandler+0x184>)
 80015ca:	2102      	movs	r1, #2
 80015cc:	fa01 f303 	lsl.w	r3, r1, r3
 80015d0:	6053      	str	r3, [r2, #4]
 80015d2:	e008      	b.n	80015e6 <HAL_DMA_IRQHandler+0xf2>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d8:	f003 031c 	and.w	r3, r3, #28
 80015dc:	4a27      	ldr	r2, [pc, #156]	; (800167c <HAL_DMA_IRQHandler+0x188>)
 80015de:	2102      	movs	r1, #2
 80015e0:	fa01 f303 	lsl.w	r3, r1, r3
 80015e4:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d038      	beq.n	8001668 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80015fe:	e033      	b.n	8001668 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001604:	f003 031c 	and.w	r3, r3, #28
 8001608:	2208      	movs	r2, #8
 800160a:	409a      	lsls	r2, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4013      	ands	r3, r2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d02a      	beq.n	800166a <HAL_DMA_IRQHandler+0x176>
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	f003 0308 	and.w	r3, r3, #8
 800161a:	2b00      	cmp	r3, #0
 800161c:	d025      	beq.n	800166a <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f022 020e 	bic.w	r2, r2, #14
 800162c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	f003 021c 	and.w	r2, r3, #28
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	2101      	movs	r1, #1
 800163c:	fa01 f202 	lsl.w	r2, r1, r2
 8001640:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2201      	movs	r2, #1
 8001646:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2201      	movs	r2, #1
 800164c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800165c:	2b00      	cmp	r3, #0
 800165e:	d004      	beq.n	800166a <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001668:	bf00      	nop
 800166a:	bf00      	nop
}
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40020080 	.word	0x40020080
 8001678:	40020400 	.word	0x40020400
 800167c:	40020000 	.word	0x40020000

08001680 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800168a:	2300      	movs	r3, #0
 800168c:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d103      	bne.n	800169c <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	72fb      	strb	r3, [r7, #11]
    return status;
 8001698:	7afb      	ldrb	r3, [r7, #11]
 800169a:	e01b      	b.n	80016d4 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	f003 0310 	and.w	r3, r3, #16
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d00d      	beq.n	80016ca <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d004      	beq.n	80016c2 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	e003      	b.n	80016ca <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80016c8:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	601a      	str	r2, [r3, #0]

  return status;
 80016d2:	7afb      	ldrb	r3, [r7, #11]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr
	...

080016e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	461a      	mov	r2, r3
 80016ee:	4b1c      	ldr	r3, [pc, #112]	; (8001760 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d813      	bhi.n	800171c <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f8:	089b      	lsrs	r3, r3, #2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001700:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	b2db      	uxtb	r3, r3
 800170e:	3b08      	subs	r3, #8
 8001710:	4a14      	ldr	r2, [pc, #80]	; (8001764 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8001712:	fba2 2303 	umull	r2, r3, r2, r3
 8001716:	091b      	lsrs	r3, r3, #4
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	e011      	b.n	8001740 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001720:	089b      	lsrs	r3, r3, #2
 8001722:	009a      	lsls	r2, r3, #2
 8001724:	4b10      	ldr	r3, [pc, #64]	; (8001768 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8001726:	4413      	add	r3, r2
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	b2db      	uxtb	r3, r3
 8001732:	3b08      	subs	r3, #8
 8001734:	4a0b      	ldr	r2, [pc, #44]	; (8001764 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8001736:	fba2 2303 	umull	r2, r3, r2, r3
 800173a:	091b      	lsrs	r3, r3, #4
 800173c:	3307      	adds	r3, #7
 800173e:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4a0a      	ldr	r2, [pc, #40]	; (800176c <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8001744:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f003 031f 	and.w	r3, r3, #31
 800174c:	2201      	movs	r2, #1
 800174e:	409a      	lsls	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001754:	bf00      	nop
 8001756:	3714      	adds	r7, #20
 8001758:	46bd      	mov	sp, r7
 800175a:	bc80      	pop	{r7}
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	40020407 	.word	0x40020407
 8001764:	cccccccd 	.word	0xcccccccd
 8001768:	4002081c 	.word	0x4002081c
 800176c:	40020880 	.word	0x40020880

08001770 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001780:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001786:	4413      	add	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	461a      	mov	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a08      	ldr	r2, [pc, #32]	; (80017b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001794:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	3b01      	subs	r3, #1
 800179a:	f003 0303 	and.w	r3, r3, #3
 800179e:	2201      	movs	r2, #1
 80017a0:	409a      	lsls	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80017a6:	bf00      	nop
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr
 80017b0:	1000823f 	.word	0x1000823f
 80017b4:	40020940 	.word	0x40020940

080017b8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b087      	sub	sp, #28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c6:	e140      	b.n	8001a4a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	2101      	movs	r1, #1
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	fa01 f303 	lsl.w	r3, r1, r3
 80017d4:	4013      	ands	r3, r2
 80017d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f000 8132 	beq.w	8001a44 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 0303 	and.w	r3, r3, #3
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d005      	beq.n	80017f8 <HAL_GPIO_Init+0x40>
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 0303 	and.w	r3, r3, #3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d130      	bne.n	800185a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	2203      	movs	r2, #3
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	43db      	mvns	r3, r3
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	4013      	ands	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	68da      	ldr	r2, [r3, #12]
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	4313      	orrs	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800182e:	2201      	movs	r2, #1
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43db      	mvns	r3, r3
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	4013      	ands	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	091b      	lsrs	r3, r3, #4
 8001844:	f003 0201 	and.w	r2, r3, #1
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4313      	orrs	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f003 0303 	and.w	r3, r3, #3
 8001862:	2b03      	cmp	r3, #3
 8001864:	d017      	beq.n	8001896 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	2203      	movs	r2, #3
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43db      	mvns	r3, r3
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	4013      	ands	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	689a      	ldr	r2, [r3, #8]
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4313      	orrs	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f003 0303 	and.w	r3, r3, #3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d123      	bne.n	80018ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	08da      	lsrs	r2, r3, #3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	3208      	adds	r2, #8
 80018aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	220f      	movs	r2, #15
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43db      	mvns	r3, r3
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	4013      	ands	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	691a      	ldr	r2, [r3, #16]
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f003 0307 	and.w	r3, r3, #7
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	4313      	orrs	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	08da      	lsrs	r2, r3, #3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3208      	adds	r2, #8
 80018e4:	6939      	ldr	r1, [r7, #16]
 80018e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	2203      	movs	r2, #3
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43db      	mvns	r3, r3
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	4013      	ands	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f003 0203 	and.w	r2, r3, #3
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	4313      	orrs	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 808c 	beq.w	8001a44 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800192c:	4a4e      	ldr	r2, [pc, #312]	; (8001a68 <HAL_GPIO_Init+0x2b0>)
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	089b      	lsrs	r3, r3, #2
 8001932:	3302      	adds	r3, #2
 8001934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001938:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	f003 0303 	and.w	r3, r3, #3
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	2207      	movs	r2, #7
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	4013      	ands	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001956:	d00d      	beq.n	8001974 <HAL_GPIO_Init+0x1bc>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a44      	ldr	r2, [pc, #272]	; (8001a6c <HAL_GPIO_Init+0x2b4>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d007      	beq.n	8001970 <HAL_GPIO_Init+0x1b8>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a43      	ldr	r2, [pc, #268]	; (8001a70 <HAL_GPIO_Init+0x2b8>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d101      	bne.n	800196c <HAL_GPIO_Init+0x1b4>
 8001968:	2302      	movs	r3, #2
 800196a:	e004      	b.n	8001976 <HAL_GPIO_Init+0x1be>
 800196c:	2307      	movs	r3, #7
 800196e:	e002      	b.n	8001976 <HAL_GPIO_Init+0x1be>
 8001970:	2301      	movs	r3, #1
 8001972:	e000      	b.n	8001976 <HAL_GPIO_Init+0x1be>
 8001974:	2300      	movs	r3, #0
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	f002 0203 	and.w	r2, r2, #3
 800197c:	0092      	lsls	r2, r2, #2
 800197e:	4093      	lsls	r3, r2
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	4313      	orrs	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001986:	4938      	ldr	r1, [pc, #224]	; (8001a68 <HAL_GPIO_Init+0x2b0>)
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	089b      	lsrs	r3, r3, #2
 800198c:	3302      	adds	r3, #2
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001994:	4b37      	ldr	r3, [pc, #220]	; (8001a74 <HAL_GPIO_Init+0x2bc>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	43db      	mvns	r3, r3
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	4013      	ands	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d003      	beq.n	80019b8 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019b8:	4a2e      	ldr	r2, [pc, #184]	; (8001a74 <HAL_GPIO_Init+0x2bc>)
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80019be:	4b2d      	ldr	r3, [pc, #180]	; (8001a74 <HAL_GPIO_Init+0x2bc>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	4013      	ands	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4313      	orrs	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019e2:	4a24      	ldr	r2, [pc, #144]	; (8001a74 <HAL_GPIO_Init+0x2bc>)
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80019e8:	4b22      	ldr	r3, [pc, #136]	; (8001a74 <HAL_GPIO_Init+0x2bc>)
 80019ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019ee:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	43db      	mvns	r3, r3
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	4013      	ands	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001a0e:	4a19      	ldr	r2, [pc, #100]	; (8001a74 <HAL_GPIO_Init+0x2bc>)
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001a16:	4b17      	ldr	r3, [pc, #92]	; (8001a74 <HAL_GPIO_Init+0x2bc>)
 8001a18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a1c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	43db      	mvns	r3, r3
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	4013      	ands	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d003      	beq.n	8001a3c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001a3c:	4a0d      	ldr	r2, [pc, #52]	; (8001a74 <HAL_GPIO_Init+0x2bc>)
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	3301      	adds	r3, #1
 8001a48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	fa22 f303 	lsr.w	r3, r2, r3
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f47f aeb7 	bne.w	80017c8 <HAL_GPIO_Init+0x10>
  }
}
 8001a5a:	bf00      	nop
 8001a5c:	bf00      	nop
 8001a5e:	371c      	adds	r7, #28
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	40010000 	.word	0x40010000
 8001a6c:	48000400 	.word	0x48000400
 8001a70:	48000800 	.word	0x48000800
 8001a74:	58000800 	.word	0x58000800

08001a78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	460b      	mov	r3, r1
 8001a82:	807b      	strh	r3, [r7, #2]
 8001a84:	4613      	mov	r3, r2
 8001a86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a88:	787b      	ldrb	r3, [r7, #1]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a8e:	887a      	ldrh	r2, [r7, #2]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a94:	e002      	b.n	8001a9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a96:	887a      	ldrh	r2, [r7, #2]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr
	...

08001aa8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001aac:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a03      	ldr	r2, [pc, #12]	; (8001ac0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab6:	6013      	str	r3, [r2, #0]
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr
 8001ac0:	58000400 	.word	0x58000400

08001ac4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001ac8:	4b03      	ldr	r3, [pc, #12]	; (8001ad8 <HAL_PWREx_GetVoltageRange+0x14>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr
 8001ad8:	58000400 	.word	0x58000400

08001adc <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001aec:	d101      	bne.n	8001af2 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001aee:	2301      	movs	r3, #1
 8001af0:	e000      	b.n	8001af4 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr
 8001afc:	58000400 	.word	0x58000400

08001b00 <LL_RCC_HSE_EnableTcxo>:
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b12:	6013      	str	r3, [r2, #0]
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr

08001b1c <LL_RCC_HSE_DisableTcxo>:
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b2e:	6013      	str	r3, [r2, #0]
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr

08001b38 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b4a:	d101      	bne.n	8001b50 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e000      	b.n	8001b52 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr

08001b5a <LL_RCC_HSE_Enable>:
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b6c:	6013      	str	r3, [r2, #0]
}
 8001b6e:	bf00      	nop
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bc80      	pop	{r7}
 8001b74:	4770      	bx	lr

08001b76 <LL_RCC_HSE_Disable>:
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001b7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b88:	6013      	str	r3, [r2, #0]
}
 8001b8a:	bf00      	nop
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr

08001b92 <LL_RCC_HSE_IsReady>:
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ba4:	d101      	bne.n	8001baa <LL_RCC_HSE_IsReady+0x18>
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <LL_RCC_HSE_IsReady+0x1a>
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr

08001bb4 <LL_RCC_HSI_Enable>:
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc6:	6013      	str	r3, [r2, #0]
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr

08001bd0 <LL_RCC_HSI_Disable>:
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001be2:	6013      	str	r3, [r2, #0]
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr

08001bec <LL_RCC_HSI_IsReady>:
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bfe:	d101      	bne.n	8001c04 <LL_RCC_HSI_IsReady+0x18>
 8001c00:	2301      	movs	r3, #1
 8001c02:	e000      	b.n	8001c06 <LL_RCC_HSI_IsReady+0x1a>
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr

08001c0e <LL_RCC_HSI_SetCalibTrimming>:
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	061b      	lsls	r3, r3, #24
 8001c24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	604b      	str	r3, [r1, #4]
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr

08001c36 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d101      	bne.n	8001c4e <LL_RCC_LSE_IsReady+0x18>
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e000      	b.n	8001c50 <LL_RCC_LSE_IsReady+0x1a>
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr

08001c58 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr

08001c78 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c88:	f023 0301 	bic.w	r3, r3, #1
 8001c8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr

08001c98 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d101      	bne.n	8001cb0 <LL_RCC_LSI_IsReady+0x18>
 8001cac:	2301      	movs	r3, #1
 8001cae:	e000      	b.n	8001cb2 <LL_RCC_LSI_IsReady+0x1a>
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr

08001cba <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	6013      	str	r3, [r2, #0]
}
 8001cce:	bf00      	nop
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bc80      	pop	{r7}
 8001cd4:	4770      	bx	lr

08001cd6 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ce4:	f023 0301 	bic.w	r3, r3, #1
 8001ce8:	6013      	str	r3, [r2, #0]
}
 8001cea:	bf00      	nop
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr

08001cf2 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d101      	bne.n	8001d08 <LL_RCC_MSI_IsReady+0x16>
 8001d04:	2301      	movs	r3, #1
 8001d06:	e000      	b.n	8001d0a <LL_RCC_MSI_IsReady+0x18>
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr

08001d12 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0308 	and.w	r3, r3, #8
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	d101      	bne.n	8001d28 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001d24:	2301      	movs	r3, #1
 8001d26:	e000      	b.n	8001d2a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr

08001d32 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr

08001d48 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d54:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr

08001d60 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001d68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	021b      	lsls	r3, r3, #8
 8001d76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	604b      	str	r3, [r1, #4]
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr

08001d88 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f023 0203 	bic.w	r2, r3, #3
 8001d9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	608b      	str	r3, [r1, #8]
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr

08001dae <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001dae:	b480      	push	{r7}
 8001db0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f003 030c 	and.w	r3, r3, #12
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr

08001dc4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	608b      	str	r3, [r1, #8]
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bc80      	pop	{r7}
 8001de8:	4770      	bx	lr

08001dea <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001df2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001dfa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr

08001e14 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e20:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e24:	f023 020f 	bic.w	r2, r3, #15
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	091b      	lsrs	r3, r3, #4
 8001e2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e30:	4313      	orrs	r3, r2
 8001e32:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr

08001e40 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	608b      	str	r3, [r1, #8]
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr

08001e66 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001e6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	608b      	str	r3, [r1, #8]
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr

08001e8c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr

08001ea2 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001ea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eaa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001eae:	011b      	lsls	r3, r3, #4
 8001eb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr

08001ebc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr

08001ed2 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr

08001ee8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ef6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001efa:	6013      	str	r3, [r2, #0]
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr

08001f04 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f16:	6013      	str	r3, [r2, #0]
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr

08001f20 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f32:	d101      	bne.n	8001f38 <LL_RCC_PLL_IsReady+0x18>
 8001f34:	2301      	movs	r3, #1
 8001f36:	e000      	b.n	8001f3a <LL_RCC_PLL_IsReady+0x1a>
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bc80      	pop	{r7}
 8001f40:	4770      	bx	lr

08001f42 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	0a1b      	lsrs	r3, r3, #8
 8001f4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr

08001f5a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr

08001f70 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bc80      	pop	{r7}
 8001f84:	4770      	bx	lr

08001f86 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	f003 0303 	and.w	r3, r3, #3
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr

08001f9c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001faa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fae:	d101      	bne.n	8001fb4 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e000      	b.n	8001fb6 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bc80      	pop	{r7}
 8001fbc:	4770      	bx	lr

08001fbe <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001fd2:	d101      	bne.n	8001fd8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e000      	b.n	8001fda <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bc80      	pop	{r7}
 8001fe0:	4770      	bx	lr

08001fe2 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff6:	d101      	bne.n	8001ffc <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e000      	b.n	8001ffe <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr

08002006 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002006:	b480      	push	{r7}
 8002008:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800200a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002014:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002018:	d101      	bne.n	800201e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800201a:	2301      	movs	r3, #1
 800201c:	e000      	b.n	8002020 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr

08002028 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800202c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002036:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800203a:	d101      	bne.n	8002040 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800203c:	2301      	movs	r3, #1
 800203e:	e000      	b.n	8002042 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	46bd      	mov	sp, r7
 8002046:	bc80      	pop	{r7}
 8002048:	4770      	bx	lr
	...

0800204c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b088      	sub	sp, #32
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e38b      	b.n	8002776 <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800205e:	f7ff fea6 	bl	8001dae <LL_RCC_GetSysClkSource>
 8002062:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002064:	f7ff ff8f 	bl	8001f86 <LL_RCC_PLL_GetMainSource>
 8002068:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0320 	and.w	r3, r3, #32
 8002072:	2b00      	cmp	r3, #0
 8002074:	f000 80c9 	beq.w	800220a <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d005      	beq.n	800208a <HAL_RCC_OscConfig+0x3e>
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	2b0c      	cmp	r3, #12
 8002082:	d17b      	bne.n	800217c <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d178      	bne.n	800217c <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800208a:	f7ff fe32 	bl	8001cf2 <LL_RCC_MSI_IsReady>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d005      	beq.n	80020a0 <HAL_RCC_OscConfig+0x54>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e36a      	b.n	8002776 <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0308 	and.w	r3, r3, #8
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d005      	beq.n	80020be <HAL_RCC_OscConfig+0x72>
 80020b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020bc:	e006      	b.n	80020cc <HAL_RCC_OscConfig+0x80>
 80020be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020c6:	091b      	lsrs	r3, r3, #4
 80020c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d222      	bcs.n	8002116 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d4:	4618      	mov	r0, r3
 80020d6:	f000 fd6f 	bl	8002bb8 <RCC_SetFlashLatencyFromMSIRange>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e348      	b.n	8002776 <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020ee:	f043 0308 	orr.w	r3, r3, #8
 80020f2:	6013      	str	r3, [r2, #0]
 80020f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002102:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002106:	4313      	orrs	r3, r2
 8002108:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff fe26 	bl	8001d60 <LL_RCC_MSI_SetCalibTrimming>
 8002114:	e021      	b.n	800215a <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002120:	f043 0308 	orr.w	r3, r3, #8
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002134:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002138:	4313      	orrs	r3, r2
 800213a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff fe0d 	bl	8001d60 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214a:	4618      	mov	r0, r3
 800214c:	f000 fd34 	bl	8002bb8 <RCC_SetFlashLatencyFromMSIRange>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e30d      	b.n	8002776 <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800215a:	f000 fcf5 	bl	8002b48 <HAL_RCC_GetHCLKFreq>
 800215e:	4603      	mov	r3, r0
 8002160:	4aa1      	ldr	r2, [pc, #644]	; (80023e8 <HAL_RCC_OscConfig+0x39c>)
 8002162:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002164:	4ba1      	ldr	r3, [pc, #644]	; (80023ec <HAL_RCC_OscConfig+0x3a0>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f7fe fefb 	bl	8000f64 <HAL_InitTick>
 800216e:	4603      	mov	r3, r0
 8002170:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002172:	7cfb      	ldrb	r3, [r7, #19]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d047      	beq.n	8002208 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8002178:	7cfb      	ldrb	r3, [r7, #19]
 800217a:	e2fc      	b.n	8002776 <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d02c      	beq.n	80021de <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002184:	f7ff fd99 	bl	8001cba <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002188:	f7fe ff38 	bl	8000ffc <HAL_GetTick>
 800218c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002190:	f7fe ff34 	bl	8000ffc <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e2e9      	b.n	8002776 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 80021a2:	f7ff fda6 	bl	8001cf2 <LL_RCC_MSI_IsReady>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0f1      	beq.n	8002190 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021b6:	f043 0308 	orr.w	r3, r3, #8
 80021ba:	6013      	str	r3, [r2, #0]
 80021bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021ce:	4313      	orrs	r3, r2
 80021d0:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff fdc2 	bl	8001d60 <LL_RCC_MSI_SetCalibTrimming>
 80021dc:	e015      	b.n	800220a <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021de:	f7ff fd7a 	bl	8001cd6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021e2:	f7fe ff0b 	bl	8000ffc <HAL_GetTick>
 80021e6:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80021e8:	e008      	b.n	80021fc <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021ea:	f7fe ff07 	bl	8000ffc <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e2bc      	b.n	8002776 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 80021fc:	f7ff fd79 	bl	8001cf2 <LL_RCC_MSI_IsReady>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f1      	bne.n	80021ea <HAL_RCC_OscConfig+0x19e>
 8002206:	e000      	b.n	800220a <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002208:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d05f      	beq.n	80022d6 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	2b08      	cmp	r3, #8
 800221a:	d005      	beq.n	8002228 <HAL_RCC_OscConfig+0x1dc>
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	2b0c      	cmp	r3, #12
 8002220:	d10d      	bne.n	800223e <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	2b03      	cmp	r3, #3
 8002226:	d10a      	bne.n	800223e <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002228:	f7ff fcb3 	bl	8001b92 <LL_RCC_HSE_IsReady>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d050      	beq.n	80022d4 <HAL_RCC_OscConfig+0x288>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d14c      	bne.n	80022d4 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e29b      	b.n	8002776 <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800223e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002250:	4313      	orrs	r3, r2
 8002252:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800225c:	d102      	bne.n	8002264 <HAL_RCC_OscConfig+0x218>
 800225e:	f7ff fc7c 	bl	8001b5a <LL_RCC_HSE_Enable>
 8002262:	e00d      	b.n	8002280 <HAL_RCC_OscConfig+0x234>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800226c:	d104      	bne.n	8002278 <HAL_RCC_OscConfig+0x22c>
 800226e:	f7ff fc47 	bl	8001b00 <LL_RCC_HSE_EnableTcxo>
 8002272:	f7ff fc72 	bl	8001b5a <LL_RCC_HSE_Enable>
 8002276:	e003      	b.n	8002280 <HAL_RCC_OscConfig+0x234>
 8002278:	f7ff fc7d 	bl	8001b76 <LL_RCC_HSE_Disable>
 800227c:	f7ff fc4e 	bl	8001b1c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d012      	beq.n	80022ae <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002288:	f7fe feb8 	bl	8000ffc <HAL_GetTick>
 800228c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002290:	f7fe feb4 	bl	8000ffc <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b64      	cmp	r3, #100	; 0x64
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e269      	b.n	8002776 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 80022a2:	f7ff fc76 	bl	8001b92 <LL_RCC_HSE_IsReady>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0f1      	beq.n	8002290 <HAL_RCC_OscConfig+0x244>
 80022ac:	e013      	b.n	80022d6 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ae:	f7fe fea5 	bl	8000ffc <HAL_GetTick>
 80022b2:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b6:	f7fe fea1 	bl	8000ffc <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b64      	cmp	r3, #100	; 0x64
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e256      	b.n	8002776 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 80022c8:	f7ff fc63 	bl	8001b92 <LL_RCC_HSE_IsReady>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f1      	bne.n	80022b6 <HAL_RCC_OscConfig+0x26a>
 80022d2:	e000      	b.n	80022d6 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d4:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d04b      	beq.n	800237a <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	2b04      	cmp	r3, #4
 80022e6:	d005      	beq.n	80022f4 <HAL_RCC_OscConfig+0x2a8>
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	2b0c      	cmp	r3, #12
 80022ec:	d113      	bne.n	8002316 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d110      	bne.n	8002316 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022f4:	f7ff fc7a 	bl	8001bec <LL_RCC_HSI_IsReady>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d005      	beq.n	800230a <HAL_RCC_OscConfig+0x2be>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e235      	b.n	8002776 <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff fc7d 	bl	8001c0e <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002314:	e031      	b.n	800237a <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d019      	beq.n	8002352 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800231e:	f7ff fc49 	bl	8001bb4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002322:	f7fe fe6b 	bl	8000ffc <HAL_GetTick>
 8002326:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800232a:	f7fe fe67 	bl	8000ffc <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e21c      	b.n	8002776 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 800233c:	f7ff fc56 	bl	8001bec <LL_RCC_HSI_IsReady>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0f1      	beq.n	800232a <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff fc5f 	bl	8001c0e <LL_RCC_HSI_SetCalibTrimming>
 8002350:	e013      	b.n	800237a <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002352:	f7ff fc3d 	bl	8001bd0 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002356:	f7fe fe51 	bl	8000ffc <HAL_GetTick>
 800235a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800235e:	f7fe fe4d 	bl	8000ffc <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e202      	b.n	8002776 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002370:	f7ff fc3c 	bl	8001bec <LL_RCC_HSI_IsReady>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f1      	bne.n	800235e <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0308 	and.w	r3, r3, #8
 8002382:	2b00      	cmp	r3, #0
 8002384:	d06f      	beq.n	8002466 <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d057      	beq.n	800243e <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 800238e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002392:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002396:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	69da      	ldr	r2, [r3, #28]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f003 0310 	and.w	r3, r3, #16
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d036      	beq.n	8002414 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d006      	beq.n	80023be <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e1db      	b.n	8002776 <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d018      	beq.n	80023fa <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 80023c8:	f7ff fc56 	bl	8001c78 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023cc:	f7fe fe16 	bl	8000ffc <HAL_GetTick>
 80023d0:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80023d2:	e00d      	b.n	80023f0 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023d4:	f7fe fe12 	bl	8000ffc <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b11      	cmp	r3, #17
 80023e0:	d906      	bls.n	80023f0 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e1c7      	b.n	8002776 <HAL_RCC_OscConfig+0x72a>
 80023e6:	bf00      	nop
 80023e8:	20000000 	.word	0x20000000
 80023ec:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 80023f0:	f7ff fc52 	bl	8001c98 <LL_RCC_LSI_IsReady>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1ec      	bne.n	80023d4 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80023fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002402:	f023 0210 	bic.w	r2, r3, #16
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800240e:	4313      	orrs	r3, r2
 8002410:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002414:	f7ff fc20 	bl	8001c58 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002418:	f7fe fdf0 	bl	8000ffc <HAL_GetTick>
 800241c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002420:	f7fe fdec 	bl	8000ffc <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b11      	cmp	r3, #17
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e1a1      	b.n	8002776 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002432:	f7ff fc31 	bl	8001c98 <LL_RCC_LSI_IsReady>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0f1      	beq.n	8002420 <HAL_RCC_OscConfig+0x3d4>
 800243c:	e013      	b.n	8002466 <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800243e:	f7ff fc1b 	bl	8001c78 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002442:	f7fe fddb 	bl	8000ffc <HAL_GetTick>
 8002446:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002448:	e008      	b.n	800245c <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800244a:	f7fe fdd7 	bl	8000ffc <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b11      	cmp	r3, #17
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e18c      	b.n	8002776 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 800245c:	f7ff fc1c 	bl	8001c98 <LL_RCC_LSI_IsReady>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f1      	bne.n	800244a <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0304 	and.w	r3, r3, #4
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 80d8 	beq.w	8002624 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002474:	f7ff fb32 	bl	8001adc <LL_PWR_IsEnabledBkUpAccess>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d113      	bne.n	80024a6 <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800247e:	f7ff fb13 	bl	8001aa8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002482:	f7fe fdbb 	bl	8000ffc <HAL_GetTick>
 8002486:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800248a:	f7fe fdb7 	bl	8000ffc <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e16c      	b.n	8002776 <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800249c:	f7ff fb1e 	bl	8001adc <LL_PWR_IsEnabledBkUpAccess>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0f1      	beq.n	800248a <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d07b      	beq.n	80025a6 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	2b85      	cmp	r3, #133	; 0x85
 80024b4:	d003      	beq.n	80024be <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	2b05      	cmp	r3, #5
 80024bc:	d109      	bne.n	80024d2 <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80024be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024ca:	f043 0304 	orr.w	r3, r3, #4
 80024ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d2:	f7fe fd93 	bl	8000ffc <HAL_GetTick>
 80024d6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80024d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80024ec:	e00a      	b.n	8002504 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ee:	f7fe fd85 	bl	8000ffc <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e138      	b.n	8002776 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002504:	f7ff fb97 	bl	8001c36 <LL_RCC_LSE_IsReady>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0ef      	beq.n	80024ee <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	2b81      	cmp	r3, #129	; 0x81
 8002514:	d003      	beq.n	800251e <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	2b85      	cmp	r3, #133	; 0x85
 800251c:	d121      	bne.n	8002562 <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251e:	f7fe fd6d 	bl	8000ffc <HAL_GetTick>
 8002522:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002534:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002538:	e00a      	b.n	8002550 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800253a:	f7fe fd5f 	bl	8000ffc <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	f241 3288 	movw	r2, #5000	; 0x1388
 8002548:	4293      	cmp	r3, r2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e112      	b.n	8002776 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002558:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800255c:	2b00      	cmp	r3, #0
 800255e:	d0ec      	beq.n	800253a <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002560:	e060      	b.n	8002624 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002562:	f7fe fd4b 	bl	8000ffc <HAL_GetTick>
 8002566:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800256c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002570:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002574:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002578:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800257c:	e00a      	b.n	8002594 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800257e:	f7fe fd3d 	bl	8000ffc <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	f241 3288 	movw	r2, #5000	; 0x1388
 800258c:	4293      	cmp	r3, r2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e0f0      	b.n	8002776 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002594:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800259c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1ec      	bne.n	800257e <HAL_RCC_OscConfig+0x532>
 80025a4:	e03e      	b.n	8002624 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a6:	f7fe fd29 	bl	8000ffc <HAL_GetTick>
 80025aa:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80025ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80025c0:	e00a      	b.n	80025d8 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c2:	f7fe fd1b 	bl	8000ffc <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e0ce      	b.n	8002776 <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80025d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1ec      	bne.n	80025c2 <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e8:	f7fe fd08 	bl	8000ffc <HAL_GetTick>
 80025ec:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80025ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025fa:	f023 0301 	bic.w	r3, r3, #1
 80025fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002602:	e00a      	b.n	800261a <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002604:	f7fe fcfa 	bl	8000ffc <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002612:	4293      	cmp	r3, r2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e0ad      	b.n	8002776 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 800261a:	f7ff fb0c 	bl	8001c36 <LL_RCC_LSE_IsReady>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1ef      	bne.n	8002604 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 80a3 	beq.w	8002774 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	2b0c      	cmp	r3, #12
 8002632:	d076      	beq.n	8002722 <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002638:	2b02      	cmp	r3, #2
 800263a:	d14b      	bne.n	80026d4 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800263c:	f7ff fc62 	bl	8001f04 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002640:	f7fe fcdc 	bl	8000ffc <HAL_GetTick>
 8002644:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002648:	f7fe fcd8 	bl	8000ffc <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b0a      	cmp	r3, #10
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e08d      	b.n	8002776 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 800265a:	f7ff fc61 	bl	8001f20 <LL_RCC_PLL_IsReady>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1f1      	bne.n	8002648 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002668:	68da      	ldr	r2, [r3, #12]
 800266a:	4b45      	ldr	r3, [pc, #276]	; (8002780 <HAL_RCC_OscConfig+0x734>)
 800266c:	4013      	ands	r3, r2
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002676:	4311      	orrs	r1, r2
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800267c:	0212      	lsls	r2, r2, #8
 800267e:	4311      	orrs	r1, r2
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002684:	4311      	orrs	r1, r2
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800268a:	4311      	orrs	r1, r2
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002690:	430a      	orrs	r2, r1
 8002692:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002696:	4313      	orrs	r3, r2
 8002698:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800269a:	f7ff fc25 	bl	8001ee8 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800269e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ac:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ae:	f7fe fca5 	bl	8000ffc <HAL_GetTick>
 80026b2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b6:	f7fe fca1 	bl	8000ffc <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b0a      	cmp	r3, #10
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e056      	b.n	8002776 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 80026c8:	f7ff fc2a 	bl	8001f20 <LL_RCC_PLL_IsReady>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0f1      	beq.n	80026b6 <HAL_RCC_OscConfig+0x66a>
 80026d2:	e04f      	b.n	8002774 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d4:	f7ff fc16 	bl	8001f04 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80026d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026e2:	f023 0303 	bic.w	r3, r3, #3
 80026e6:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 80026e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026f2:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80026f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026fa:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026fc:	f7fe fc7e 	bl	8000ffc <HAL_GetTick>
 8002700:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002704:	f7fe fc7a 	bl	8000ffc <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b0a      	cmp	r3, #10
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e02f      	b.n	8002776 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002716:	f7ff fc03 	bl	8001f20 <LL_RCC_PLL_IsReady>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1f1      	bne.n	8002704 <HAL_RCC_OscConfig+0x6b8>
 8002720:	e028      	b.n	8002774 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002726:	2b01      	cmp	r3, #1
 8002728:	d101      	bne.n	800272e <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e023      	b.n	8002776 <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800272e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	f003 0203 	and.w	r2, r3, #3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002740:	429a      	cmp	r2, r3
 8002742:	d115      	bne.n	8002770 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800274e:	429a      	cmp	r2, r3
 8002750:	d10e      	bne.n	8002770 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275c:	021b      	lsls	r3, r3, #8
 800275e:	429a      	cmp	r2, r3
 8002760:	d106      	bne.n	8002770 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276c:	429a      	cmp	r2, r3
 800276e:	d001      	beq.n	8002774 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e000      	b.n	8002776 <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3720      	adds	r7, #32
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	11c1808c 	.word	0x11c1808c

08002784 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e12c      	b.n	80029f2 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002798:	4b98      	ldr	r3, [pc, #608]	; (80029fc <HAL_RCC_ClockConfig+0x278>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d91b      	bls.n	80027de <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a6:	4b95      	ldr	r3, [pc, #596]	; (80029fc <HAL_RCC_ClockConfig+0x278>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f023 0207 	bic.w	r2, r3, #7
 80027ae:	4993      	ldr	r1, [pc, #588]	; (80029fc <HAL_RCC_ClockConfig+0x278>)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027b6:	f7fe fc21 	bl	8000ffc <HAL_GetTick>
 80027ba:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80027be:	f7fe fc1d 	bl	8000ffc <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e110      	b.n	80029f2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d0:	4b8a      	ldr	r3, [pc, #552]	; (80029fc <HAL_RCC_ClockConfig+0x278>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d1ef      	bne.n	80027be <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d016      	beq.n	8002818 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff fae8 	bl	8001dc4 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80027f4:	f7fe fc02 	bl	8000ffc <HAL_GetTick>
 80027f8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80027fa:	e008      	b.n	800280e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80027fc:	f7fe fbfe 	bl	8000ffc <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e0f1      	b.n	80029f2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800280e:	f7ff fbc5 	bl	8001f9c <LL_RCC_IsActiveFlag_HPRE>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0f1      	beq.n	80027fc <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0320 	and.w	r3, r3, #32
 8002820:	2b00      	cmp	r3, #0
 8002822:	d016      	beq.n	8002852 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff fade 	bl	8001dea <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800282e:	f7fe fbe5 	bl	8000ffc <HAL_GetTick>
 8002832:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002834:	e008      	b.n	8002848 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002836:	f7fe fbe1 	bl	8000ffc <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e0d4      	b.n	80029f2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002848:	f7ff fbb9 	bl	8001fbe <LL_RCC_IsActiveFlag_C2HPRE>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0f1      	beq.n	8002836 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800285a:	2b00      	cmp	r3, #0
 800285c:	d016      	beq.n	800288c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff fad6 	bl	8001e14 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002868:	f7fe fbc8 	bl	8000ffc <HAL_GetTick>
 800286c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800286e:	e008      	b.n	8002882 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002870:	f7fe fbc4 	bl	8000ffc <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e0b7      	b.n	80029f2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002882:	f7ff fbae 	bl	8001fe2 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d0f1      	beq.n	8002870 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	d016      	beq.n	80028c6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff facf 	bl	8001e40 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80028a2:	f7fe fbab 	bl	8000ffc <HAL_GetTick>
 80028a6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80028a8:	e008      	b.n	80028bc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80028aa:	f7fe fba7 	bl	8000ffc <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e09a      	b.n	80029f2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80028bc:	f7ff fba3 	bl	8002006 <LL_RCC_IsActiveFlag_PPRE1>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0f1      	beq.n	80028aa <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0308 	and.w	r3, r3, #8
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d017      	beq.n	8002902 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff fac4 	bl	8001e66 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80028de:	f7fe fb8d 	bl	8000ffc <HAL_GetTick>
 80028e2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80028e6:	f7fe fb89 	bl	8000ffc <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e07c      	b.n	80029f2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80028f8:	f7ff fb96 	bl	8002028 <LL_RCC_IsActiveFlag_PPRE2>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0f1      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	d043      	beq.n	8002996 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b02      	cmp	r3, #2
 8002914:	d106      	bne.n	8002924 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002916:	f7ff f93c 	bl	8001b92 <LL_RCC_HSE_IsReady>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d11e      	bne.n	800295e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e066      	b.n	80029f2 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b03      	cmp	r3, #3
 800292a:	d106      	bne.n	800293a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800292c:	f7ff faf8 	bl	8001f20 <LL_RCC_PLL_IsReady>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d113      	bne.n	800295e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e05b      	b.n	80029f2 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d106      	bne.n	8002950 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002942:	f7ff f9d6 	bl	8001cf2 <LL_RCC_MSI_IsReady>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d108      	bne.n	800295e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e050      	b.n	80029f2 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002950:	f7ff f94c 	bl	8001bec <LL_RCC_HSI_IsReady>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e049      	b.n	80029f2 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff fa10 	bl	8001d88 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002968:	f7fe fb48 	bl	8000ffc <HAL_GetTick>
 800296c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800296e:	e00a      	b.n	8002986 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002970:	f7fe fb44 	bl	8000ffc <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	f241 3288 	movw	r2, #5000	; 0x1388
 800297e:	4293      	cmp	r3, r2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e035      	b.n	80029f2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002986:	f7ff fa12 	bl	8001dae <LL_RCC_GetSysClkSource>
 800298a:	4602      	mov	r2, r0
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	429a      	cmp	r2, r3
 8002994:	d1ec      	bne.n	8002970 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002996:	4b19      	ldr	r3, [pc, #100]	; (80029fc <HAL_RCC_ClockConfig+0x278>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d21b      	bcs.n	80029dc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a4:	4b15      	ldr	r3, [pc, #84]	; (80029fc <HAL_RCC_ClockConfig+0x278>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f023 0207 	bic.w	r2, r3, #7
 80029ac:	4913      	ldr	r1, [pc, #76]	; (80029fc <HAL_RCC_ClockConfig+0x278>)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029b4:	f7fe fb22 	bl	8000ffc <HAL_GetTick>
 80029b8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80029bc:	f7fe fb1e 	bl	8000ffc <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e011      	b.n	80029f2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ce:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <HAL_RCC_ClockConfig+0x278>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d1ef      	bne.n	80029bc <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80029dc:	f000 f8b4 	bl	8002b48 <HAL_RCC_GetHCLKFreq>
 80029e0:	4603      	mov	r3, r0
 80029e2:	4a07      	ldr	r2, [pc, #28]	; (8002a00 <HAL_RCC_ClockConfig+0x27c>)
 80029e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80029e6:	4b07      	ldr	r3, [pc, #28]	; (8002a04 <HAL_RCC_ClockConfig+0x280>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fe faba 	bl	8000f64 <HAL_InitTick>
 80029f0:	4603      	mov	r3, r0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	58004000 	.word	0x58004000
 8002a00:	20000000 	.word	0x20000000
 8002a04:	20000004 	.word	0x20000004

08002a08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a08:	b590      	push	{r4, r7, lr}
 8002a0a:	b087      	sub	sp, #28
 8002a0c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002a12:	2300      	movs	r3, #0
 8002a14:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a16:	f7ff f9ca 	bl	8001dae <LL_RCC_GetSysClkSource>
 8002a1a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a1c:	f7ff fab3 	bl	8001f86 <LL_RCC_PLL_GetMainSource>
 8002a20:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d005      	beq.n	8002a34 <HAL_RCC_GetSysClockFreq+0x2c>
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	2b0c      	cmp	r3, #12
 8002a2c:	d139      	bne.n	8002aa2 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d136      	bne.n	8002aa2 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002a34:	f7ff f96d 	bl	8001d12 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d115      	bne.n	8002a6a <HAL_RCC_GetSysClockFreq+0x62>
 8002a3e:	f7ff f968 	bl	8001d12 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d106      	bne.n	8002a56 <HAL_RCC_GetSysClockFreq+0x4e>
 8002a48:	f7ff f973 	bl	8001d32 <LL_RCC_MSI_GetRange>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	0a1b      	lsrs	r3, r3, #8
 8002a50:	f003 030f 	and.w	r3, r3, #15
 8002a54:	e005      	b.n	8002a62 <HAL_RCC_GetSysClockFreq+0x5a>
 8002a56:	f7ff f977 	bl	8001d48 <LL_RCC_MSI_GetRangeAfterStandby>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	0a1b      	lsrs	r3, r3, #8
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	4a36      	ldr	r2, [pc, #216]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x134>)
 8002a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a68:	e014      	b.n	8002a94 <HAL_RCC_GetSysClockFreq+0x8c>
 8002a6a:	f7ff f952 	bl	8001d12 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d106      	bne.n	8002a82 <HAL_RCC_GetSysClockFreq+0x7a>
 8002a74:	f7ff f95d 	bl	8001d32 <LL_RCC_MSI_GetRange>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	091b      	lsrs	r3, r3, #4
 8002a7c:	f003 030f 	and.w	r3, r3, #15
 8002a80:	e005      	b.n	8002a8e <HAL_RCC_GetSysClockFreq+0x86>
 8002a82:	f7ff f961 	bl	8001d48 <LL_RCC_MSI_GetRangeAfterStandby>
 8002a86:	4603      	mov	r3, r0
 8002a88:	091b      	lsrs	r3, r3, #4
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	4a2b      	ldr	r2, [pc, #172]	; (8002b3c <HAL_RCC_GetSysClockFreq+0x134>)
 8002a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a94:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d115      	bne.n	8002ac8 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002aa0:	e012      	b.n	8002ac8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2b04      	cmp	r3, #4
 8002aa6:	d102      	bne.n	8002aae <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002aa8:	4b25      	ldr	r3, [pc, #148]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x138>)
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	e00c      	b.n	8002ac8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2b08      	cmp	r3, #8
 8002ab2:	d109      	bne.n	8002ac8 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002ab4:	f7ff f840 	bl	8001b38 <LL_RCC_HSE_IsEnabledDiv2>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d102      	bne.n	8002ac4 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002abe:	4b20      	ldr	r3, [pc, #128]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x138>)
 8002ac0:	617b      	str	r3, [r7, #20]
 8002ac2:	e001      	b.n	8002ac8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002ac4:	4b1f      	ldr	r3, [pc, #124]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002ac6:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ac8:	f7ff f971 	bl	8001dae <LL_RCC_GetSysClkSource>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b0c      	cmp	r3, #12
 8002ad0:	d12f      	bne.n	8002b32 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002ad2:	f7ff fa58 	bl	8001f86 <LL_RCC_PLL_GetMainSource>
 8002ad6:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d003      	beq.n	8002ae6 <HAL_RCC_GetSysClockFreq+0xde>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2b03      	cmp	r3, #3
 8002ae2:	d003      	beq.n	8002aec <HAL_RCC_GetSysClockFreq+0xe4>
 8002ae4:	e00d      	b.n	8002b02 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002ae6:	4b16      	ldr	r3, [pc, #88]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x138>)
 8002ae8:	60fb      	str	r3, [r7, #12]
        break;
 8002aea:	e00d      	b.n	8002b08 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002aec:	f7ff f824 	bl	8001b38 <LL_RCC_HSE_IsEnabledDiv2>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d102      	bne.n	8002afc <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002af6:	4b12      	ldr	r3, [pc, #72]	; (8002b40 <HAL_RCC_GetSysClockFreq+0x138>)
 8002af8:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002afa:	e005      	b.n	8002b08 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002afc:	4b11      	ldr	r3, [pc, #68]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002afe:	60fb      	str	r3, [r7, #12]
        break;
 8002b00:	e002      	b.n	8002b08 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	60fb      	str	r3, [r7, #12]
        break;
 8002b06:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002b08:	f7ff fa1b 	bl	8001f42 <LL_RCC_PLL_GetN>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	fb03 f402 	mul.w	r4, r3, r2
 8002b14:	f7ff fa2c 	bl	8001f70 <LL_RCC_PLL_GetDivider>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	091b      	lsrs	r3, r3, #4
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	fbb4 f4f3 	udiv	r4, r4, r3
 8002b22:	f7ff fa1a 	bl	8001f5a <LL_RCC_PLL_GetR>
 8002b26:	4603      	mov	r3, r0
 8002b28:	0f5b      	lsrs	r3, r3, #29
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	fbb4 f3f3 	udiv	r3, r4, r3
 8002b30:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002b32:	697b      	ldr	r3, [r7, #20]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	371c      	adds	r7, #28
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd90      	pop	{r4, r7, pc}
 8002b3c:	08004ac4 	.word	0x08004ac4
 8002b40:	00f42400 	.word	0x00f42400
 8002b44:	01e84800 	.word	0x01e84800

08002b48 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b48:	b598      	push	{r3, r4, r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002b4c:	f7ff ff5c 	bl	8002a08 <HAL_RCC_GetSysClockFreq>
 8002b50:	4604      	mov	r4, r0
 8002b52:	f7ff f99b 	bl	8001e8c <LL_RCC_GetAHBPrescaler>
 8002b56:	4603      	mov	r3, r0
 8002b58:	091b      	lsrs	r3, r3, #4
 8002b5a:	f003 030f 	and.w	r3, r3, #15
 8002b5e:	4a03      	ldr	r2, [pc, #12]	; (8002b6c <HAL_RCC_GetHCLKFreq+0x24>)
 8002b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b64:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	bd98      	pop	{r3, r4, r7, pc}
 8002b6c:	08004a64 	.word	0x08004a64

08002b70 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b70:	b598      	push	{r3, r4, r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002b74:	f7ff ffe8 	bl	8002b48 <HAL_RCC_GetHCLKFreq>
 8002b78:	4604      	mov	r4, r0
 8002b7a:	f7ff f99f 	bl	8001ebc <LL_RCC_GetAPB1Prescaler>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	0a1b      	lsrs	r3, r3, #8
 8002b82:	4a03      	ldr	r2, [pc, #12]	; (8002b90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b88:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	bd98      	pop	{r3, r4, r7, pc}
 8002b90:	08004aa4 	.word	0x08004aa4

08002b94 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b94:	b598      	push	{r3, r4, r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002b98:	f7ff ffd6 	bl	8002b48 <HAL_RCC_GetHCLKFreq>
 8002b9c:	4604      	mov	r4, r0
 8002b9e:	f7ff f998 	bl	8001ed2 <LL_RCC_GetAPB2Prescaler>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	0adb      	lsrs	r3, r3, #11
 8002ba6:	4a03      	ldr	r2, [pc, #12]	; (8002bb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bac:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	bd98      	pop	{r3, r4, r7, pc}
 8002bb4:	08004aa4 	.word	0x08004aa4

08002bb8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002bb8:	b590      	push	{r4, r7, lr}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	091b      	lsrs	r3, r3, #4
 8002bc4:	f003 030f 	and.w	r3, r3, #15
 8002bc8:	4a10      	ldr	r2, [pc, #64]	; (8002c0c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8002bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bce:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002bd0:	f7ff f967 	bl	8001ea2 <LL_RCC_GetAHB3Prescaler>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	091b      	lsrs	r3, r3, #4
 8002bd8:	f003 030f 	and.w	r3, r3, #15
 8002bdc:	4a0c      	ldr	r2, [pc, #48]	; (8002c10 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be8:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	4a09      	ldr	r2, [pc, #36]	; (8002c14 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002bee:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf2:	0c9c      	lsrs	r4, r3, #18
 8002bf4:	f7fe ff66 	bl	8001ac4 <HAL_PWREx_GetVoltageRange>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	4620      	mov	r0, r4
 8002bfe:	f000 f80b 	bl	8002c18 <RCC_SetFlashLatency>
 8002c02:	4603      	mov	r3, r0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3714      	adds	r7, #20
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd90      	pop	{r4, r7, pc}
 8002c0c:	08004ac4 	.word	0x08004ac4
 8002c10:	08004a64 	.word	0x08004a64
 8002c14:	431bde83 	.word	0x431bde83

08002c18 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08e      	sub	sp, #56	; 0x38
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002c22:	4a3a      	ldr	r2, [pc, #232]	; (8002d0c <RCC_SetFlashLatency+0xf4>)
 8002c24:	f107 0320 	add.w	r3, r7, #32
 8002c28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c2c:	6018      	str	r0, [r3, #0]
 8002c2e:	3304      	adds	r3, #4
 8002c30:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002c32:	4a37      	ldr	r2, [pc, #220]	; (8002d10 <RCC_SetFlashLatency+0xf8>)
 8002c34:	f107 0318 	add.w	r3, r7, #24
 8002c38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c3c:	6018      	str	r0, [r3, #0]
 8002c3e:	3304      	adds	r3, #4
 8002c40:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002c42:	4a34      	ldr	r2, [pc, #208]	; (8002d14 <RCC_SetFlashLatency+0xfc>)
 8002c44:	f107 030c 	add.w	r3, r7, #12
 8002c48:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002c4e:	2300      	movs	r3, #0
 8002c50:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c58:	d11b      	bne.n	8002c92 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	633b      	str	r3, [r7, #48]	; 0x30
 8002c5e:	e014      	b.n	8002c8a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	3338      	adds	r3, #56	; 0x38
 8002c66:	443b      	add	r3, r7
 8002c68:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d807      	bhi.n	8002c84 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	3338      	adds	r3, #56	; 0x38
 8002c7a:	443b      	add	r3, r7
 8002c7c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002c80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002c82:	e021      	b.n	8002cc8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c86:	3301      	adds	r3, #1
 8002c88:	633b      	str	r3, [r7, #48]	; 0x30
 8002c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d9e7      	bls.n	8002c60 <RCC_SetFlashLatency+0x48>
 8002c90:	e01a      	b.n	8002cc8 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002c92:	2300      	movs	r3, #0
 8002c94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c96:	e014      	b.n	8002cc2 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	3338      	adds	r3, #56	; 0x38
 8002c9e:	443b      	add	r3, r7
 8002ca0:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d807      	bhi.n	8002cbc <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	3338      	adds	r3, #56	; 0x38
 8002cb2:	443b      	add	r3, r7
 8002cb4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002cb8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002cba:	e005      	b.n	8002cc8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d9e7      	bls.n	8002c98 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002cc8:	4b13      	ldr	r3, [pc, #76]	; (8002d18 <RCC_SetFlashLatency+0x100>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f023 0207 	bic.w	r2, r3, #7
 8002cd0:	4911      	ldr	r1, [pc, #68]	; (8002d18 <RCC_SetFlashLatency+0x100>)
 8002cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002cd8:	f7fe f990 	bl	8000ffc <HAL_GetTick>
 8002cdc:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002cde:	e008      	b.n	8002cf2 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002ce0:	f7fe f98c 	bl	8000ffc <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d901      	bls.n	8002cf2 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e007      	b.n	8002d02 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002cf2:	4b09      	ldr	r3, [pc, #36]	; (8002d18 <RCC_SetFlashLatency+0x100>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d1ef      	bne.n	8002ce0 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3738      	adds	r7, #56	; 0x38
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	08004a48 	.word	0x08004a48
 8002d10:	08004a50 	.word	0x08004a50
 8002d14:	08004a58 	.word	0x08004a58
 8002d18:	58004000 	.word	0x58004000

08002d1c <LL_RCC_LSE_IsReady>:
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d101      	bne.n	8002d34 <LL_RCC_LSE_IsReady+0x18>
 8002d30:	2301      	movs	r3, #1
 8002d32:	e000      	b.n	8002d36 <LL_RCC_LSE_IsReady+0x1a>
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bc80      	pop	{r7}
 8002d3c:	4770      	bx	lr

08002d3e <LL_RCC_SetUSARTClockSource>:
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d4a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	0c1b      	lsrs	r3, r3, #16
 8002d52:	43db      	mvns	r3, r3
 8002d54:	401a      	ands	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bc80      	pop	{r7}
 8002d6c:	4770      	bx	lr

08002d6e <LL_RCC_SetI2SClockSource>:
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr

08002d98 <LL_RCC_SetLPUARTClockSource>:
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002dac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr

08002dc2 <LL_RCC_SetI2CClockSource>:
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b083      	sub	sp, #12
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	091b      	lsrs	r3, r3, #4
 8002dd6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	401a      	ands	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	011b      	lsls	r3, r3, #4
 8002de2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002de6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dea:	4313      	orrs	r3, r2
 8002dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bc80      	pop	{r7}
 8002df8:	4770      	bx	lr

08002dfa <LL_RCC_SetLPTIMClockSource>:
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b083      	sub	sp, #12
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002e02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e06:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	0c1b      	lsrs	r3, r3, #16
 8002e0e:	041b      	lsls	r3, r3, #16
 8002e10:	43db      	mvns	r3, r3
 8002e12:	401a      	ands	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	041b      	lsls	r3, r3, #16
 8002e18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr

08002e2c <LL_RCC_SetRNGClockSource>:
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002e40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bc80      	pop	{r7}
 8002e54:	4770      	bx	lr

08002e56 <LL_RCC_SetADCClockSource>:
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e66:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr

08002e80 <LL_RCC_SetRTCClockSource>:
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bc80      	pop	{r7}
 8002ea8:	4770      	bx	lr

08002eaa <LL_RCC_GetRTCClockSource>:
{
 8002eaa:	b480      	push	{r7}
 8002eac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bc80      	pop	{r7}
 8002ec0:	4770      	bx	lr

08002ec2 <LL_RCC_ForceBackupDomainReset>:
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ece:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002eda:	bf00      	nop
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bc80      	pop	{r7}
 8002ee0:	4770      	bx	lr

08002ee2 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002efa:	bf00      	nop
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bc80      	pop	{r7}
 8002f00:	4770      	bx	lr
	...

08002f04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002f10:	2300      	movs	r3, #0
 8002f12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002f14:	2300      	movs	r3, #0
 8002f16:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d058      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002f24:	f7fe fdc0 	bl	8001aa8 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f28:	f7fe f868 	bl	8000ffc <HAL_GetTick>
 8002f2c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002f2e:	e009      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f30:	f7fe f864 	bl	8000ffc <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d902      	bls.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	74fb      	strb	r3, [r7, #19]
        break;
 8002f42:	e006      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002f44:	4b7b      	ldr	r3, [pc, #492]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f50:	d1ee      	bne.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002f52:	7cfb      	ldrb	r3, [r7, #19]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d13c      	bne.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002f58:	f7ff ffa7 	bl	8002eaa <LL_RCC_GetRTCClockSource>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d00f      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f72:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f74:	f7ff ffa5 	bl	8002ec2 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f78:	f7ff ffb3 	bl	8002ee2 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d014      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f90:	f7fe f834 	bl	8000ffc <HAL_GetTick>
 8002f94:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002f96:	e00b      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f98:	f7fe f830 	bl	8000ffc <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d902      	bls.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	74fb      	strb	r3, [r7, #19]
            break;
 8002fae:	e004      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002fb0:	f7ff feb4 	bl	8002d1c <LL_RCC_LSE_IsReady>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d1ee      	bne.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002fba:	7cfb      	ldrb	r3, [r7, #19]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d105      	bne.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff ff5b 	bl	8002e80 <LL_RCC_SetRTCClockSource>
 8002fca:	e004      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fcc:	7cfb      	ldrb	r3, [r7, #19]
 8002fce:	74bb      	strb	r3, [r7, #18]
 8002fd0:	e001      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fd2:	7cfb      	ldrb	r3, [r7, #19]
 8002fd4:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d004      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7ff fea9 	bl	8002d3e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d004      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff fe9e 	bl	8002d3e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0320 	and.w	r3, r3, #32
 800300a:	2b00      	cmp	r3, #0
 800300c:	d004      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	4618      	mov	r0, r3
 8003014:	f7ff fec0 	bl	8002d98 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003020:	2b00      	cmp	r3, #0
 8003022:	d004      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff fee6 	bl	8002dfa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003036:	2b00      	cmp	r3, #0
 8003038:	d004      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff fedb 	bl	8002dfa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800304c:	2b00      	cmp	r3, #0
 800304e:	d004      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff fed0 	bl	8002dfa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003062:	2b00      	cmp	r3, #0
 8003064:	d004      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff fea9 	bl	8002dc2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003078:	2b00      	cmp	r3, #0
 800307a:	d004      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff fe9e 	bl	8002dc2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308e:	2b00      	cmp	r3, #0
 8003090:	d004      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff fe93 	bl	8002dc2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0310 	and.w	r3, r3, #16
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d011      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff fe5e 	bl	8002d6e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030ba:	d107      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80030bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d010      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff fea5 	bl	8002e2c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d107      	bne.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80030ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030f8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d011      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff fea3 	bl	8002e56 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003114:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003118:	d107      	bne.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800311a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003128:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800312a:	7cbb      	ldrb	r3, [r7, #18]
}
 800312c:	4618      	mov	r0, r3
 800312e:	3718      	adds	r7, #24
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	58000400 	.word	0x58000400

08003138 <LL_RCC_GetUSARTClockSource>:
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8003140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003144:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	401a      	ands	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	041b      	lsls	r3, r3, #16
 8003150:	4313      	orrs	r3, r2
}
 8003152:	4618      	mov	r0, r3
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	bc80      	pop	{r7}
 800315a:	4770      	bx	lr

0800315c <LL_RCC_GetLPUARTClockSource>:
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003168:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4013      	ands	r3, r2
}
 8003170:	4618      	mov	r0, r3
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	bc80      	pop	{r7}
 8003178:	4770      	bx	lr

0800317a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b082      	sub	sp, #8
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e042      	b.n	8003212 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003192:	2b00      	cmp	r3, #0
 8003194:	d106      	bne.n	80031a4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7fd fd1a 	bl	8000bd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2224      	movs	r2, #36	; 0x24
 80031a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0201 	bic.w	r2, r2, #1
 80031ba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 fdf9 	bl	8003db4 <UART_SetConfig>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d101      	bne.n	80031cc <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e022      	b.n	8003212 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d002      	beq.n	80031da <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f001 f861 	bl	800429c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031e8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031f8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f042 0201 	orr.w	r2, r2, #1
 8003208:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f001 f8e7 	bl	80043de <UART_CheckIdleState>
 8003210:	4603      	mov	r3, r0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b08a      	sub	sp, #40	; 0x28
 800321e:	af02      	add	r7, sp, #8
 8003220:	60f8      	str	r0, [r7, #12]
 8003222:	60b9      	str	r1, [r7, #8]
 8003224:	603b      	str	r3, [r7, #0]
 8003226:	4613      	mov	r3, r2
 8003228:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003230:	2b20      	cmp	r3, #32
 8003232:	f040 8083 	bne.w	800333c <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d002      	beq.n	8003242 <HAL_UART_Transmit+0x28>
 800323c:	88fb      	ldrh	r3, [r7, #6]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e07b      	b.n	800333e <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800324c:	2b01      	cmp	r3, #1
 800324e:	d101      	bne.n	8003254 <HAL_UART_Transmit+0x3a>
 8003250:	2302      	movs	r3, #2
 8003252:	e074      	b.n	800333e <HAL_UART_Transmit+0x124>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2221      	movs	r2, #33	; 0x21
 8003268:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800326c:	f7fd fec6 	bl	8000ffc <HAL_GetTick>
 8003270:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	88fa      	ldrh	r2, [r7, #6]
 8003276:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	88fa      	ldrh	r2, [r7, #6]
 800327e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800328a:	d108      	bne.n	800329e <HAL_UART_Transmit+0x84>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d104      	bne.n	800329e <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003294:	2300      	movs	r3, #0
 8003296:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	61bb      	str	r3, [r7, #24]
 800329c:	e003      	b.n	80032a6 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032a2:	2300      	movs	r3, #0
 80032a4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80032ae:	e02c      	b.n	800330a <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	2200      	movs	r2, #0
 80032b8:	2180      	movs	r1, #128	; 0x80
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f001 f8da 	bl	8004474 <UART_WaitOnFlagUntilTimeout>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e039      	b.n	800333e <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10b      	bne.n	80032e8 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	881b      	ldrh	r3, [r3, #0]
 80032d4:	461a      	mov	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032de:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	3302      	adds	r3, #2
 80032e4:	61bb      	str	r3, [r7, #24]
 80032e6:	e007      	b.n	80032f8 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	781a      	ldrb	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	3301      	adds	r3, #1
 80032f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80032fe:	b29b      	uxth	r3, r3
 8003300:	3b01      	subs	r3, #1
 8003302:	b29a      	uxth	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003310:	b29b      	uxth	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1cc      	bne.n	80032b0 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	2200      	movs	r2, #0
 800331e:	2140      	movs	r1, #64	; 0x40
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f001 f8a7 	bl	8004474 <UART_WaitOnFlagUntilTimeout>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e006      	b.n	800333e <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2220      	movs	r2, #32
 8003334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003338:	2300      	movs	r3, #0
 800333a:	e000      	b.n	800333e <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800333c:	2302      	movs	r3, #2
  }
}
 800333e:	4618      	mov	r0, r3
 8003340:	3720      	adds	r7, #32
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b08a      	sub	sp, #40	; 0x28
 800334a:	af02      	add	r7, sp, #8
 800334c:	60f8      	str	r0, [r7, #12]
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	603b      	str	r3, [r7, #0]
 8003352:	4613      	mov	r3, r2
 8003354:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335c:	2b20      	cmp	r3, #32
 800335e:	f040 80c0 	bne.w	80034e2 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d002      	beq.n	800336e <HAL_UART_Receive+0x28>
 8003368:	88fb      	ldrh	r3, [r7, #6]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e0b8      	b.n	80034e4 <HAL_UART_Receive+0x19e>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003378:	2b01      	cmp	r3, #1
 800337a:	d101      	bne.n	8003380 <HAL_UART_Receive+0x3a>
 800337c:	2302      	movs	r3, #2
 800337e:	e0b1      	b.n	80034e4 <HAL_UART_Receive+0x19e>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2222      	movs	r2, #34	; 0x22
 8003394:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800339e:	f7fd fe2d 	bl	8000ffc <HAL_GetTick>
 80033a2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	88fa      	ldrh	r2, [r7, #6]
 80033a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	88fa      	ldrh	r2, [r7, #6]
 80033b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033bc:	d10e      	bne.n	80033dc <HAL_UART_Receive+0x96>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d105      	bne.n	80033d2 <HAL_UART_Receive+0x8c>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80033cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80033d0:	e02d      	b.n	800342e <HAL_UART_Receive+0xe8>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	22ff      	movs	r2, #255	; 0xff
 80033d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80033da:	e028      	b.n	800342e <HAL_UART_Receive+0xe8>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10d      	bne.n	8003400 <HAL_UART_Receive+0xba>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d104      	bne.n	80033f6 <HAL_UART_Receive+0xb0>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	22ff      	movs	r2, #255	; 0xff
 80033f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80033f4:	e01b      	b.n	800342e <HAL_UART_Receive+0xe8>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	227f      	movs	r2, #127	; 0x7f
 80033fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80033fe:	e016      	b.n	800342e <HAL_UART_Receive+0xe8>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003408:	d10d      	bne.n	8003426 <HAL_UART_Receive+0xe0>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d104      	bne.n	800341c <HAL_UART_Receive+0xd6>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	227f      	movs	r2, #127	; 0x7f
 8003416:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800341a:	e008      	b.n	800342e <HAL_UART_Receive+0xe8>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	223f      	movs	r2, #63	; 0x3f
 8003420:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003424:	e003      	b.n	800342e <HAL_UART_Receive+0xe8>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003434:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800343e:	d108      	bne.n	8003452 <HAL_UART_Receive+0x10c>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d104      	bne.n	8003452 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8003448:	2300      	movs	r3, #0
 800344a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	61bb      	str	r3, [r7, #24]
 8003450:	e003      	b.n	800345a <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003456:	2300      	movs	r3, #0
 8003458:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003462:	e032      	b.n	80034ca <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	2200      	movs	r2, #0
 800346c:	2120      	movs	r1, #32
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f001 f800 	bl	8004474 <UART_WaitOnFlagUntilTimeout>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e032      	b.n	80034e4 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10c      	bne.n	800349e <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	b29a      	uxth	r2, r3
 800348c:	8a7b      	ldrh	r3, [r7, #18]
 800348e:	4013      	ands	r3, r2
 8003490:	b29a      	uxth	r2, r3
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	3302      	adds	r3, #2
 800349a:	61bb      	str	r3, [r7, #24]
 800349c:	e00c      	b.n	80034b8 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	8a7b      	ldrh	r3, [r7, #18]
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	4013      	ands	r3, r2
 80034ac:	b2da      	uxtb	r2, r3
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	3301      	adds	r3, #1
 80034b6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80034be:	b29b      	uxth	r3, r3
 80034c0:	3b01      	subs	r3, #1
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1c6      	bne.n	8003464 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2220      	movs	r2, #32
 80034da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80034de:	2300      	movs	r3, #0
 80034e0:	e000      	b.n	80034e4 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 80034e2:	2302      	movs	r3, #2
  }
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3720      	adds	r7, #32
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_UART_DMAPause>:
  * @brief Pause the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b09d      	sub	sp, #116	; 0x74
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034fa:	66fb      	str	r3, [r7, #108]	; 0x6c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003502:	66bb      	str	r3, [r7, #104]	; 0x68

  __HAL_LOCK(huart);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800350a:	2b01      	cmp	r3, #1
 800350c:	d101      	bne.n	8003512 <HAL_UART_DMAPause+0x26>
 800350e:	2302      	movs	r3, #2
 8003510:	e083      	b.n	800361a <HAL_UART_DMAPause+0x12e>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003524:	2b80      	cmp	r3, #128	; 0x80
 8003526:	d11c      	bne.n	8003562 <HAL_UART_DMAPause+0x76>
 8003528:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800352a:	2b21      	cmp	r3, #33	; 0x21
 800352c:	d119      	bne.n	8003562 <HAL_UART_DMAPause+0x76>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    /* Disable the UART DMA Tx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	3308      	adds	r3, #8
 8003534:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003538:	e853 3f00 	ldrex	r3, [r3]
 800353c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800353e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003540:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003544:	667b      	str	r3, [r7, #100]	; 0x64
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	3308      	adds	r3, #8
 800354c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800354e:	657a      	str	r2, [r7, #84]	; 0x54
 8003550:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003552:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003554:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003556:	e841 2300 	strex	r3, r2, [r1]
 800355a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800355c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1e5      	bne.n	800352e <HAL_UART_DMAPause+0x42>
  }
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800356c:	2b40      	cmp	r3, #64	; 0x40
 800356e:	d14f      	bne.n	8003610 <HAL_UART_DMAPause+0x124>
 8003570:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003572:	2b22      	cmp	r3, #34	; 0x22
 8003574:	d14c      	bne.n	8003610 <HAL_UART_DMAPause+0x124>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800357c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800357e:	e853 3f00 	ldrex	r3, [r3]
 8003582:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003586:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800358a:	663b      	str	r3, [r7, #96]	; 0x60
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	461a      	mov	r2, r3
 8003592:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003594:	643b      	str	r3, [r7, #64]	; 0x40
 8003596:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003598:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800359a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800359c:	e841 2300 	strex	r3, r2, [r1]
 80035a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1e6      	bne.n	8003576 <HAL_UART_DMAPause+0x8a>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	3308      	adds	r3, #8
 80035ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b0:	6a3b      	ldr	r3, [r7, #32]
 80035b2:	e853 3f00 	ldrex	r3, [r3]
 80035b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	f023 0301 	bic.w	r3, r3, #1
 80035be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	3308      	adds	r3, #8
 80035c6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80035c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035d0:	e841 2300 	strex	r3, r2, [r1]
 80035d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1e5      	bne.n	80035a8 <HAL_UART_DMAPause+0xbc>

    /* Disable the UART DMA Rx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	3308      	adds	r3, #8
 80035e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	e853 3f00 	ldrex	r3, [r3]
 80035ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	3308      	adds	r3, #8
 80035fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035fc:	61ba      	str	r2, [r7, #24]
 80035fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003600:	6979      	ldr	r1, [r7, #20]
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	e841 2300 	strex	r3, r2, [r1]
 8003608:	613b      	str	r3, [r7, #16]
   return(result);
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1e5      	bne.n	80035dc <HAL_UART_DMAPause+0xf0>
  }

  __HAL_UNLOCK(huart);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3774      	adds	r7, #116	; 0x74
 800361e:	46bd      	mov	sp, r7
 8003620:	bc80      	pop	{r7}
 8003622:	4770      	bx	lr

08003624 <HAL_UART_DMAResume>:
  * @brief Resume the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 8003624:	b480      	push	{r7}
 8003626:	b09b      	sub	sp, #108	; 0x6c
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003632:	2b01      	cmp	r3, #1
 8003634:	d101      	bne.n	800363a <HAL_UART_DMAResume+0x16>
 8003636:	2302      	movs	r3, #2
 8003638:	e081      	b.n	800373e <HAL_UART_DMAResume+0x11a>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003648:	2b21      	cmp	r3, #33	; 0x21
 800364a:	d119      	bne.n	8003680 <HAL_UART_DMAResume+0x5c>
  {
    /* Enable the UART DMA Tx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	3308      	adds	r3, #8
 8003652:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003654:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003656:	e853 3f00 	ldrex	r3, [r3]
 800365a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800365c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800365e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003662:	667b      	str	r3, [r7, #100]	; 0x64
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	3308      	adds	r3, #8
 800366a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800366c:	657a      	str	r2, [r7, #84]	; 0x54
 800366e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003670:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003672:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003674:	e841 2300 	strex	r3, r2, [r1]
 8003678:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800367a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1e5      	bne.n	800364c <HAL_UART_DMAResume+0x28>
  }
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003686:	2b22      	cmp	r3, #34	; 0x22
 8003688:	d154      	bne.n	8003734 <HAL_UART_DMAResume+0x110>
  {
    /* Clear the Overrun flag before resuming the Rx transfer */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2208      	movs	r2, #8
 8003690:	621a      	str	r2, [r3, #32]

    /* Re-enable PE and ERR (Frame error, noise error, overrun error) interrupts */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d018      	beq.n	80036cc <HAL_UART_DMAResume+0xa8>
    {    
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a2:	e853 3f00 	ldrex	r3, [r3]
 80036a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80036a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ae:	663b      	str	r3, [r7, #96]	; 0x60
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	461a      	mov	r2, r3
 80036b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036b8:	643b      	str	r3, [r7, #64]	; 0x40
 80036ba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80036be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036c0:	e841 2300 	strex	r3, r2, [r1]
 80036c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80036c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1e6      	bne.n	800369a <HAL_UART_DMAResume+0x76>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	3308      	adds	r3, #8
 80036d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	e853 3f00 	ldrex	r3, [r3]
 80036da:	61fb      	str	r3, [r7, #28]
   return(result);
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f043 0301 	orr.w	r3, r3, #1
 80036e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	3308      	adds	r3, #8
 80036ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80036ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036f4:	e841 2300 	strex	r3, r2, [r1]
 80036f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1e5      	bne.n	80036cc <HAL_UART_DMAResume+0xa8>

    /* Enable the UART DMA Rx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	3308      	adds	r3, #8
 8003706:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	e853 3f00 	ldrex	r3, [r3]
 800370e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003716:	65bb      	str	r3, [r7, #88]	; 0x58
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	3308      	adds	r3, #8
 800371e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003720:	61ba      	str	r2, [r7, #24]
 8003722:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003724:	6979      	ldr	r1, [r7, #20]
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	e841 2300 	strex	r3, r2, [r1]
 800372c:	613b      	str	r3, [r7, #16]
   return(result);
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1e5      	bne.n	8003700 <HAL_UART_DMAResume+0xdc>
  }

  __HAL_UNLOCK(huart);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	376c      	adds	r7, #108	; 0x6c
 8003742:	46bd      	mov	sp, r7
 8003744:	bc80      	pop	{r7}
 8003746:	4770      	bx	lr

08003748 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b0ba      	sub	sp, #232	; 0xe8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800376e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003772:	f640 030f 	movw	r3, #2063	; 0x80f
 8003776:	4013      	ands	r3, r2
 8003778:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800377c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003780:	2b00      	cmp	r3, #0
 8003782:	d11b      	bne.n	80037bc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003788:	f003 0320 	and.w	r3, r3, #32
 800378c:	2b00      	cmp	r3, #0
 800378e:	d015      	beq.n	80037bc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003794:	f003 0320 	and.w	r3, r3, #32
 8003798:	2b00      	cmp	r3, #0
 800379a:	d105      	bne.n	80037a8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800379c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d009      	beq.n	80037bc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f000 82d6 	beq.w	8003d5e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	4798      	blx	r3
      }
      return;
 80037ba:	e2d0      	b.n	8003d5e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80037bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 811f 	beq.w	8003a04 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80037c6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80037ca:	4b8b      	ldr	r3, [pc, #556]	; (80039f8 <HAL_UART_IRQHandler+0x2b0>)
 80037cc:	4013      	ands	r3, r2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d106      	bne.n	80037e0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80037d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80037d6:	4b89      	ldr	r3, [pc, #548]	; (80039fc <HAL_UART_IRQHandler+0x2b4>)
 80037d8:	4013      	ands	r3, r2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 8112 	beq.w	8003a04 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80037e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d011      	beq.n	8003810 <HAL_UART_IRQHandler+0xc8>
 80037ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00b      	beq.n	8003810 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2201      	movs	r2, #1
 80037fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003806:	f043 0201 	orr.w	r2, r3, #1
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d011      	beq.n	8003840 <HAL_UART_IRQHandler+0xf8>
 800381c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00b      	beq.n	8003840 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2202      	movs	r2, #2
 800382e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003836:	f043 0204 	orr.w	r2, r3, #4
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b00      	cmp	r3, #0
 800384a:	d011      	beq.n	8003870 <HAL_UART_IRQHandler+0x128>
 800384c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00b      	beq.n	8003870 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2204      	movs	r2, #4
 800385e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003866:	f043 0202 	orr.w	r2, r3, #2
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003874:	f003 0308 	and.w	r3, r3, #8
 8003878:	2b00      	cmp	r3, #0
 800387a:	d017      	beq.n	80038ac <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800387c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003880:	f003 0320 	and.w	r3, r3, #32
 8003884:	2b00      	cmp	r3, #0
 8003886:	d105      	bne.n	8003894 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003888:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800388c:	4b5a      	ldr	r3, [pc, #360]	; (80039f8 <HAL_UART_IRQHandler+0x2b0>)
 800388e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00b      	beq.n	80038ac <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2208      	movs	r2, #8
 800389a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038a2:	f043 0208 	orr.w	r2, r3, #8
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80038ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d012      	beq.n	80038de <HAL_UART_IRQHandler+0x196>
 80038b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00c      	beq.n	80038de <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038d4:	f043 0220 	orr.w	r2, r3, #32
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 823c 	beq.w	8003d62 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80038ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ee:	f003 0320 	and.w	r3, r3, #32
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d013      	beq.n	800391e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80038f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038fa:	f003 0320 	and.w	r3, r3, #32
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d105      	bne.n	800390e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003902:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d007      	beq.n	800391e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003924:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003932:	2b40      	cmp	r3, #64	; 0x40
 8003934:	d005      	beq.n	8003942 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003936:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800393a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800393e:	2b00      	cmp	r3, #0
 8003940:	d04f      	beq.n	80039e2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 fe5e 	bl	8004604 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003952:	2b40      	cmp	r3, #64	; 0x40
 8003954:	d141      	bne.n	80039da <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	3308      	adds	r3, #8
 800395c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003960:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003964:	e853 3f00 	ldrex	r3, [r3]
 8003968:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800396c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003970:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003974:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	3308      	adds	r3, #8
 800397e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003982:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003986:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800398e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003992:	e841 2300 	strex	r3, r2, [r1]
 8003996:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800399a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1d9      	bne.n	8003956 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d013      	beq.n	80039d2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039ae:	4a14      	ldr	r2, [pc, #80]	; (8003a00 <HAL_UART_IRQHandler+0x2b8>)
 80039b0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fd fd3c 	bl	8001434 <HAL_DMA_Abort_IT>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d017      	beq.n	80039f2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80039cc:	4610      	mov	r0, r2
 80039ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039d0:	e00f      	b.n	80039f2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f9d9 	bl	8003d8a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039d8:	e00b      	b.n	80039f2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f9d5 	bl	8003d8a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039e0:	e007      	b.n	80039f2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f9d1 	bl	8003d8a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80039f0:	e1b7      	b.n	8003d62 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039f2:	bf00      	nop
    return;
 80039f4:	e1b5      	b.n	8003d62 <HAL_UART_IRQHandler+0x61a>
 80039f6:	bf00      	nop
 80039f8:	10000001 	.word	0x10000001
 80039fc:	04000120 	.word	0x04000120
 8003a00:	080046cf 	.word	0x080046cf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	f040 814a 	bne.w	8003ca2 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a12:	f003 0310 	and.w	r3, r3, #16
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f000 8143 	beq.w	8003ca2 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a20:	f003 0310 	and.w	r3, r3, #16
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 813c 	beq.w	8003ca2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2210      	movs	r2, #16
 8003a30:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3c:	2b40      	cmp	r3, #64	; 0x40
 8003a3e:	f040 80b5 	bne.w	8003bac <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8003a4e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f000 8187 	beq.w	8003d66 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003a5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a62:	429a      	cmp	r2, r3
 8003a64:	f080 817f 	bcs.w	8003d66 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a6e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0320 	and.w	r3, r3, #32
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f040 8086 	bne.w	8003b90 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a90:	e853 3f00 	ldrex	r3, [r3]
 8003a94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003a98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aa0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003aae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003ab2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003aba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003abe:	e841 2300 	strex	r3, r2, [r1]
 8003ac2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003ac6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1da      	bne.n	8003a84 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	3308      	adds	r3, #8
 8003ad4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ad8:	e853 3f00 	ldrex	r3, [r3]
 8003adc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003ade:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ae0:	f023 0301 	bic.w	r3, r3, #1
 8003ae4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	3308      	adds	r3, #8
 8003aee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003af2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003af6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003afa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003afe:	e841 2300 	strex	r3, r2, [r1]
 8003b02:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003b04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1e1      	bne.n	8003ace <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	3308      	adds	r3, #8
 8003b10:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b14:	e853 3f00 	ldrex	r3, [r3]
 8003b18:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003b1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	3308      	adds	r3, #8
 8003b2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003b2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003b34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b36:	e841 2300 	strex	r3, r2, [r1]
 8003b3a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003b3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1e3      	bne.n	8003b0a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2220      	movs	r2, #32
 8003b46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b58:	e853 3f00 	ldrex	r3, [r3]
 8003b5c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003b5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b60:	f023 0310 	bic.w	r3, r3, #16
 8003b64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b72:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b74:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b7a:	e841 2300 	strex	r3, r2, [r1]
 8003b7e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003b80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1e4      	bne.n	8003b50 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fd fbf4 	bl	8001378 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 f8f9 	bl	8003d9c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003baa:	e0dc      	b.n	8003d66 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 80ce 	beq.w	8003d6a <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8003bce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 80c9 	beq.w	8003d6a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be0:	e853 3f00 	ldrex	r3, [r3]
 8003be4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003be8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003bfa:	647b      	str	r3, [r7, #68]	; 0x44
 8003bfc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c02:	e841 2300 	strex	r3, r2, [r1]
 8003c06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1e4      	bne.n	8003bd8 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	3308      	adds	r3, #8
 8003c14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	e853 3f00 	ldrex	r3, [r3]
 8003c1c:	623b      	str	r3, [r7, #32]
   return(result);
 8003c1e:	6a3b      	ldr	r3, [r7, #32]
 8003c20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c24:	f023 0301 	bic.w	r3, r3, #1
 8003c28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	3308      	adds	r3, #8
 8003c32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003c36:	633a      	str	r2, [r7, #48]	; 0x30
 8003c38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c3e:	e841 2300 	strex	r3, r2, [r1]
 8003c42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1e1      	bne.n	8003c0e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	e853 3f00 	ldrex	r3, [r3]
 8003c6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f023 0310 	bic.w	r3, r3, #16
 8003c72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c80:	61fb      	str	r3, [r7, #28]
 8003c82:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c84:	69b9      	ldr	r1, [r7, #24]
 8003c86:	69fa      	ldr	r2, [r7, #28]
 8003c88:	e841 2300 	strex	r3, r2, [r1]
 8003c8c:	617b      	str	r3, [r7, #20]
   return(result);
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1e4      	bne.n	8003c5e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c98:	4619      	mov	r1, r3
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f87e 	bl	8003d9c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003ca0:	e063      	b.n	8003d6a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ca6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00e      	beq.n	8003ccc <HAL_UART_IRQHandler+0x584>
 8003cae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d008      	beq.n	8003ccc <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003cc2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 fd43 	bl	8004750 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003cca:	e051      	b.n	8003d70 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d014      	beq.n	8003d02 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d105      	bne.n	8003cf0 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003ce4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ce8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d008      	beq.n	8003d02 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d03a      	beq.n	8003d6e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	4798      	blx	r3
    }
    return;
 8003d00:	e035      	b.n	8003d6e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d009      	beq.n	8003d22 <HAL_UART_IRQHandler+0x5da>
 8003d0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 fced 	bl	80046fa <UART_EndTransmit_IT>
    return;
 8003d20:	e026      	b.n	8003d70 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d009      	beq.n	8003d42 <HAL_UART_IRQHandler+0x5fa>
 8003d2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d32:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d003      	beq.n	8003d42 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 fd1a 	bl	8004774 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d40:	e016      	b.n	8003d70 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d010      	beq.n	8003d70 <HAL_UART_IRQHandler+0x628>
 8003d4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	da0c      	bge.n	8003d70 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 fd03 	bl	8004762 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d5c:	e008      	b.n	8003d70 <HAL_UART_IRQHandler+0x628>
      return;
 8003d5e:	bf00      	nop
 8003d60:	e006      	b.n	8003d70 <HAL_UART_IRQHandler+0x628>
    return;
 8003d62:	bf00      	nop
 8003d64:	e004      	b.n	8003d70 <HAL_UART_IRQHandler+0x628>
      return;
 8003d66:	bf00      	nop
 8003d68:	e002      	b.n	8003d70 <HAL_UART_IRQHandler+0x628>
      return;
 8003d6a:	bf00      	nop
 8003d6c:	e000      	b.n	8003d70 <HAL_UART_IRQHandler+0x628>
    return;
 8003d6e:	bf00      	nop
  }
}
 8003d70:	37e8      	adds	r7, #232	; 0xe8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop

08003d78 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bc80      	pop	{r7}
 8003d88:	4770      	bx	lr

08003d8a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b083      	sub	sp, #12
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003d92:	bf00      	nop
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bc80      	pop	{r7}
 8003d9a:	4770      	bx	lr

08003d9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	460b      	mov	r3, r1
 8003da6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bc80      	pop	{r7}
 8003db0:	4770      	bx	lr
	...

08003db4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003db4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003db8:	b08c      	sub	sp, #48	; 0x30
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	4b94      	ldr	r3, [pc, #592]	; (8004034 <UART_SetConfig+0x280>)
 8003de4:	4013      	ands	r3, r2
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	6812      	ldr	r2, [r2, #0]
 8003dea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003dec:	430b      	orrs	r3, r1
 8003dee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	68da      	ldr	r2, [r3, #12]
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a89      	ldr	r2, [pc, #548]	; (8004038 <UART_SetConfig+0x284>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d004      	beq.n	8003e20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003e2a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	6812      	ldr	r2, [r2, #0]
 8003e32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e34:	430b      	orrs	r3, r1
 8003e36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3e:	f023 010f 	bic.w	r1, r3, #15
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a7a      	ldr	r2, [pc, #488]	; (800403c <UART_SetConfig+0x288>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d127      	bne.n	8003ea8 <UART_SetConfig+0xf4>
 8003e58:	2003      	movs	r0, #3
 8003e5a:	f7ff f96d 	bl	8003138 <LL_RCC_GetUSARTClockSource>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8003e64:	2b03      	cmp	r3, #3
 8003e66:	d81b      	bhi.n	8003ea0 <UART_SetConfig+0xec>
 8003e68:	a201      	add	r2, pc, #4	; (adr r2, 8003e70 <UART_SetConfig+0xbc>)
 8003e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e6e:	bf00      	nop
 8003e70:	08003e81 	.word	0x08003e81
 8003e74:	08003e91 	.word	0x08003e91
 8003e78:	08003e89 	.word	0x08003e89
 8003e7c:	08003e99 	.word	0x08003e99
 8003e80:	2301      	movs	r3, #1
 8003e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e86:	e080      	b.n	8003f8a <UART_SetConfig+0x1d6>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e8e:	e07c      	b.n	8003f8a <UART_SetConfig+0x1d6>
 8003e90:	2304      	movs	r3, #4
 8003e92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e96:	e078      	b.n	8003f8a <UART_SetConfig+0x1d6>
 8003e98:	2308      	movs	r3, #8
 8003e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e9e:	e074      	b.n	8003f8a <UART_SetConfig+0x1d6>
 8003ea0:	2310      	movs	r3, #16
 8003ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ea6:	e070      	b.n	8003f8a <UART_SetConfig+0x1d6>
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a64      	ldr	r2, [pc, #400]	; (8004040 <UART_SetConfig+0x28c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d138      	bne.n	8003f24 <UART_SetConfig+0x170>
 8003eb2:	200c      	movs	r0, #12
 8003eb4:	f7ff f940 	bl	8003138 <LL_RCC_GetUSARTClockSource>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8003ebe:	2b0c      	cmp	r3, #12
 8003ec0:	d82c      	bhi.n	8003f1c <UART_SetConfig+0x168>
 8003ec2:	a201      	add	r2, pc, #4	; (adr r2, 8003ec8 <UART_SetConfig+0x114>)
 8003ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec8:	08003efd 	.word	0x08003efd
 8003ecc:	08003f1d 	.word	0x08003f1d
 8003ed0:	08003f1d 	.word	0x08003f1d
 8003ed4:	08003f1d 	.word	0x08003f1d
 8003ed8:	08003f0d 	.word	0x08003f0d
 8003edc:	08003f1d 	.word	0x08003f1d
 8003ee0:	08003f1d 	.word	0x08003f1d
 8003ee4:	08003f1d 	.word	0x08003f1d
 8003ee8:	08003f05 	.word	0x08003f05
 8003eec:	08003f1d 	.word	0x08003f1d
 8003ef0:	08003f1d 	.word	0x08003f1d
 8003ef4:	08003f1d 	.word	0x08003f1d
 8003ef8:	08003f15 	.word	0x08003f15
 8003efc:	2300      	movs	r3, #0
 8003efe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f02:	e042      	b.n	8003f8a <UART_SetConfig+0x1d6>
 8003f04:	2302      	movs	r3, #2
 8003f06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f0a:	e03e      	b.n	8003f8a <UART_SetConfig+0x1d6>
 8003f0c:	2304      	movs	r3, #4
 8003f0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f12:	e03a      	b.n	8003f8a <UART_SetConfig+0x1d6>
 8003f14:	2308      	movs	r3, #8
 8003f16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f1a:	e036      	b.n	8003f8a <UART_SetConfig+0x1d6>
 8003f1c:	2310      	movs	r3, #16
 8003f1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f22:	e032      	b.n	8003f8a <UART_SetConfig+0x1d6>
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a43      	ldr	r2, [pc, #268]	; (8004038 <UART_SetConfig+0x284>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d12a      	bne.n	8003f84 <UART_SetConfig+0x1d0>
 8003f2e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003f32:	f7ff f913 	bl	800315c <LL_RCC_GetLPUARTClockSource>
 8003f36:	4603      	mov	r3, r0
 8003f38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f3c:	d01a      	beq.n	8003f74 <UART_SetConfig+0x1c0>
 8003f3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f42:	d81b      	bhi.n	8003f7c <UART_SetConfig+0x1c8>
 8003f44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f48:	d00c      	beq.n	8003f64 <UART_SetConfig+0x1b0>
 8003f4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f4e:	d815      	bhi.n	8003f7c <UART_SetConfig+0x1c8>
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <UART_SetConfig+0x1a8>
 8003f54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f58:	d008      	beq.n	8003f6c <UART_SetConfig+0x1b8>
 8003f5a:	e00f      	b.n	8003f7c <UART_SetConfig+0x1c8>
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f62:	e012      	b.n	8003f8a <UART_SetConfig+0x1d6>
 8003f64:	2302      	movs	r3, #2
 8003f66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f6a:	e00e      	b.n	8003f8a <UART_SetConfig+0x1d6>
 8003f6c:	2304      	movs	r3, #4
 8003f6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f72:	e00a      	b.n	8003f8a <UART_SetConfig+0x1d6>
 8003f74:	2308      	movs	r3, #8
 8003f76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f7a:	e006      	b.n	8003f8a <UART_SetConfig+0x1d6>
 8003f7c:	2310      	movs	r3, #16
 8003f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f82:	e002      	b.n	8003f8a <UART_SetConfig+0x1d6>
 8003f84:	2310      	movs	r3, #16
 8003f86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a2a      	ldr	r2, [pc, #168]	; (8004038 <UART_SetConfig+0x284>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	f040 80a4 	bne.w	80040de <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f9a:	2b08      	cmp	r3, #8
 8003f9c:	d823      	bhi.n	8003fe6 <UART_SetConfig+0x232>
 8003f9e:	a201      	add	r2, pc, #4	; (adr r2, 8003fa4 <UART_SetConfig+0x1f0>)
 8003fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa4:	08003fc9 	.word	0x08003fc9
 8003fa8:	08003fe7 	.word	0x08003fe7
 8003fac:	08003fd1 	.word	0x08003fd1
 8003fb0:	08003fe7 	.word	0x08003fe7
 8003fb4:	08003fd7 	.word	0x08003fd7
 8003fb8:	08003fe7 	.word	0x08003fe7
 8003fbc:	08003fe7 	.word	0x08003fe7
 8003fc0:	08003fe7 	.word	0x08003fe7
 8003fc4:	08003fdf 	.word	0x08003fdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fc8:	f7fe fdd2 	bl	8002b70 <HAL_RCC_GetPCLK1Freq>
 8003fcc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fce:	e010      	b.n	8003ff2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fd0:	4b1c      	ldr	r3, [pc, #112]	; (8004044 <UART_SetConfig+0x290>)
 8003fd2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003fd4:	e00d      	b.n	8003ff2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fd6:	f7fe fd17 	bl	8002a08 <HAL_RCC_GetSysClockFreq>
 8003fda:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fdc:	e009      	b.n	8003ff2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fe2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003fe4:	e005      	b.n	8003ff2 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003ff0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 8137 	beq.w	8004268 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffe:	4a12      	ldr	r2, [pc, #72]	; (8004048 <UART_SetConfig+0x294>)
 8004000:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004004:	461a      	mov	r2, r3
 8004006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004008:	fbb3 f3f2 	udiv	r3, r3, r2
 800400c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	4613      	mov	r3, r2
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	4413      	add	r3, r2
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	429a      	cmp	r2, r3
 800401c:	d305      	bcc.n	800402a <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	429a      	cmp	r2, r3
 8004028:	d910      	bls.n	800404c <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004030:	e11a      	b.n	8004268 <UART_SetConfig+0x4b4>
 8004032:	bf00      	nop
 8004034:	cfff69f3 	.word	0xcfff69f3
 8004038:	40008000 	.word	0x40008000
 800403c:	40013800 	.word	0x40013800
 8004040:	40004400 	.word	0x40004400
 8004044:	00f42400 	.word	0x00f42400
 8004048:	08004b04 	.word	0x08004b04
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404e:	2200      	movs	r2, #0
 8004050:	60bb      	str	r3, [r7, #8]
 8004052:	60fa      	str	r2, [r7, #12]
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004058:	4a8e      	ldr	r2, [pc, #568]	; (8004294 <UART_SetConfig+0x4e0>)
 800405a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800405e:	b29b      	uxth	r3, r3
 8004060:	2200      	movs	r2, #0
 8004062:	603b      	str	r3, [r7, #0]
 8004064:	607a      	str	r2, [r7, #4]
 8004066:	e9d7 2300 	ldrd	r2, r3, [r7]
 800406a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800406e:	f7fc f883 	bl	8000178 <__aeabi_uldivmod>
 8004072:	4602      	mov	r2, r0
 8004074:	460b      	mov	r3, r1
 8004076:	4610      	mov	r0, r2
 8004078:	4619      	mov	r1, r3
 800407a:	f04f 0200 	mov.w	r2, #0
 800407e:	f04f 0300 	mov.w	r3, #0
 8004082:	020b      	lsls	r3, r1, #8
 8004084:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004088:	0202      	lsls	r2, r0, #8
 800408a:	6979      	ldr	r1, [r7, #20]
 800408c:	6849      	ldr	r1, [r1, #4]
 800408e:	0849      	lsrs	r1, r1, #1
 8004090:	2000      	movs	r0, #0
 8004092:	460c      	mov	r4, r1
 8004094:	4605      	mov	r5, r0
 8004096:	eb12 0804 	adds.w	r8, r2, r4
 800409a:	eb43 0905 	adc.w	r9, r3, r5
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	469a      	mov	sl, r3
 80040a6:	4693      	mov	fp, r2
 80040a8:	4652      	mov	r2, sl
 80040aa:	465b      	mov	r3, fp
 80040ac:	4640      	mov	r0, r8
 80040ae:	4649      	mov	r1, r9
 80040b0:	f7fc f862 	bl	8000178 <__aeabi_uldivmod>
 80040b4:	4602      	mov	r2, r0
 80040b6:	460b      	mov	r3, r1
 80040b8:	4613      	mov	r3, r2
 80040ba:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040bc:	6a3b      	ldr	r3, [r7, #32]
 80040be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040c2:	d308      	bcc.n	80040d6 <UART_SetConfig+0x322>
 80040c4:	6a3b      	ldr	r3, [r7, #32]
 80040c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040ca:	d204      	bcs.n	80040d6 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6a3a      	ldr	r2, [r7, #32]
 80040d2:	60da      	str	r2, [r3, #12]
 80040d4:	e0c8      	b.n	8004268 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80040dc:	e0c4      	b.n	8004268 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	69db      	ldr	r3, [r3, #28]
 80040e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040e6:	d168      	bne.n	80041ba <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80040e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d828      	bhi.n	8004142 <UART_SetConfig+0x38e>
 80040f0:	a201      	add	r2, pc, #4	; (adr r2, 80040f8 <UART_SetConfig+0x344>)
 80040f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f6:	bf00      	nop
 80040f8:	0800411d 	.word	0x0800411d
 80040fc:	08004125 	.word	0x08004125
 8004100:	0800412d 	.word	0x0800412d
 8004104:	08004143 	.word	0x08004143
 8004108:	08004133 	.word	0x08004133
 800410c:	08004143 	.word	0x08004143
 8004110:	08004143 	.word	0x08004143
 8004114:	08004143 	.word	0x08004143
 8004118:	0800413b 	.word	0x0800413b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800411c:	f7fe fd28 	bl	8002b70 <HAL_RCC_GetPCLK1Freq>
 8004120:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004122:	e014      	b.n	800414e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004124:	f7fe fd36 	bl	8002b94 <HAL_RCC_GetPCLK2Freq>
 8004128:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800412a:	e010      	b.n	800414e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800412c:	4b5a      	ldr	r3, [pc, #360]	; (8004298 <UART_SetConfig+0x4e4>)
 800412e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004130:	e00d      	b.n	800414e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004132:	f7fe fc69 	bl	8002a08 <HAL_RCC_GetSysClockFreq>
 8004136:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004138:	e009      	b.n	800414e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800413a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800413e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004140:	e005      	b.n	800414e <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8004142:	2300      	movs	r3, #0
 8004144:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800414c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 8089 	beq.w	8004268 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	4a4e      	ldr	r2, [pc, #312]	; (8004294 <UART_SetConfig+0x4e0>)
 800415c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004160:	461a      	mov	r2, r3
 8004162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004164:	fbb3 f3f2 	udiv	r3, r3, r2
 8004168:	005a      	lsls	r2, r3, #1
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	085b      	lsrs	r3, r3, #1
 8004170:	441a      	add	r2, r3
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	fbb2 f3f3 	udiv	r3, r2, r3
 800417a:	b29b      	uxth	r3, r3
 800417c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800417e:	6a3b      	ldr	r3, [r7, #32]
 8004180:	2b0f      	cmp	r3, #15
 8004182:	d916      	bls.n	80041b2 <UART_SetConfig+0x3fe>
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800418a:	d212      	bcs.n	80041b2 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800418c:	6a3b      	ldr	r3, [r7, #32]
 800418e:	b29b      	uxth	r3, r3
 8004190:	f023 030f 	bic.w	r3, r3, #15
 8004194:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004196:	6a3b      	ldr	r3, [r7, #32]
 8004198:	085b      	lsrs	r3, r3, #1
 800419a:	b29b      	uxth	r3, r3
 800419c:	f003 0307 	and.w	r3, r3, #7
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	8bfb      	ldrh	r3, [r7, #30]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	8bfa      	ldrh	r2, [r7, #30]
 80041ae:	60da      	str	r2, [r3, #12]
 80041b0:	e05a      	b.n	8004268 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80041b8:	e056      	b.n	8004268 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80041be:	2b08      	cmp	r3, #8
 80041c0:	d827      	bhi.n	8004212 <UART_SetConfig+0x45e>
 80041c2:	a201      	add	r2, pc, #4	; (adr r2, 80041c8 <UART_SetConfig+0x414>)
 80041c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c8:	080041ed 	.word	0x080041ed
 80041cc:	080041f5 	.word	0x080041f5
 80041d0:	080041fd 	.word	0x080041fd
 80041d4:	08004213 	.word	0x08004213
 80041d8:	08004203 	.word	0x08004203
 80041dc:	08004213 	.word	0x08004213
 80041e0:	08004213 	.word	0x08004213
 80041e4:	08004213 	.word	0x08004213
 80041e8:	0800420b 	.word	0x0800420b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041ec:	f7fe fcc0 	bl	8002b70 <HAL_RCC_GetPCLK1Freq>
 80041f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80041f2:	e014      	b.n	800421e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041f4:	f7fe fcce 	bl	8002b94 <HAL_RCC_GetPCLK2Freq>
 80041f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80041fa:	e010      	b.n	800421e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041fc:	4b26      	ldr	r3, [pc, #152]	; (8004298 <UART_SetConfig+0x4e4>)
 80041fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004200:	e00d      	b.n	800421e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004202:	f7fe fc01 	bl	8002a08 <HAL_RCC_GetSysClockFreq>
 8004206:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004208:	e009      	b.n	800421e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800420a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800420e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004210:	e005      	b.n	800421e <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8004212:	2300      	movs	r3, #0
 8004214:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800421c:	bf00      	nop
    }

    if (pclk != 0U)
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	2b00      	cmp	r3, #0
 8004222:	d021      	beq.n	8004268 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	4a1a      	ldr	r2, [pc, #104]	; (8004294 <UART_SetConfig+0x4e0>)
 800422a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800422e:	461a      	mov	r2, r3
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	fbb3 f2f2 	udiv	r2, r3, r2
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	085b      	lsrs	r3, r3, #1
 800423c:	441a      	add	r2, r3
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	fbb2 f3f3 	udiv	r3, r2, r3
 8004246:	b29b      	uxth	r3, r3
 8004248:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800424a:	6a3b      	ldr	r3, [r7, #32]
 800424c:	2b0f      	cmp	r3, #15
 800424e:	d908      	bls.n	8004262 <UART_SetConfig+0x4ae>
 8004250:	6a3b      	ldr	r3, [r7, #32]
 8004252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004256:	d204      	bcs.n	8004262 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6a3a      	ldr	r2, [r7, #32]
 800425e:	60da      	str	r2, [r3, #12]
 8004260:	e002      	b.n	8004268 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	2201      	movs	r2, #1
 800426c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	2201      	movs	r2, #1
 8004274:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	2200      	movs	r2, #0
 800427c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	2200      	movs	r2, #0
 8004282:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004284:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004288:	4618      	mov	r0, r3
 800428a:	3730      	adds	r7, #48	; 0x30
 800428c:	46bd      	mov	sp, r7
 800428e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004292:	bf00      	nop
 8004294:	08004b04 	.word	0x08004b04
 8004298:	00f42400 	.word	0x00f42400

0800429c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00a      	beq.n	80042c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00a      	beq.n	80042e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	430a      	orrs	r2, r1
 80042e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ec:	f003 0304 	and.w	r3, r3, #4
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00a      	beq.n	800430a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	430a      	orrs	r2, r1
 8004308:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430e:	f003 0308 	and.w	r3, r3, #8
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00a      	beq.n	800432c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	430a      	orrs	r2, r1
 800432a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004330:	f003 0310 	and.w	r3, r3, #16
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00a      	beq.n	800434e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	430a      	orrs	r2, r1
 800434c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004352:	f003 0320 	and.w	r3, r3, #32
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00a      	beq.n	8004370 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	430a      	orrs	r2, r1
 800436e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004378:	2b00      	cmp	r3, #0
 800437a:	d01a      	beq.n	80043b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004396:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800439a:	d10a      	bne.n	80043b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00a      	beq.n	80043d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	605a      	str	r2, [r3, #4]
  }
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	bc80      	pop	{r7}
 80043dc:	4770      	bx	lr

080043de <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b086      	sub	sp, #24
 80043e2:	af02      	add	r7, sp, #8
 80043e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043ee:	f7fc fe05 	bl	8000ffc <HAL_GetTick>
 80043f2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0308 	and.w	r3, r3, #8
 80043fe:	2b08      	cmp	r3, #8
 8004400:	d10e      	bne.n	8004420 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004402:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004406:	9300      	str	r3, [sp, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 f82f 	bl	8004474 <UART_WaitOnFlagUntilTimeout>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e025      	b.n	800446c <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0304 	and.w	r3, r3, #4
 800442a:	2b04      	cmp	r3, #4
 800442c:	d10e      	bne.n	800444c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800442e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004432:	9300      	str	r3, [sp, #0]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f819 	bl	8004474 <UART_WaitOnFlagUntilTimeout>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e00f      	b.n	800446c <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2220      	movs	r2, #32
 8004450:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2220      	movs	r2, #32
 8004458:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b09c      	sub	sp, #112	; 0x70
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	603b      	str	r3, [r7, #0]
 8004480:	4613      	mov	r3, r2
 8004482:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004484:	e0a9      	b.n	80045da <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004486:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004488:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800448c:	f000 80a5 	beq.w	80045da <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004490:	f7fc fdb4 	bl	8000ffc <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800449c:	429a      	cmp	r2, r3
 800449e:	d302      	bcc.n	80044a6 <UART_WaitOnFlagUntilTimeout+0x32>
 80044a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d140      	bne.n	8004528 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044ae:	e853 3f00 	ldrex	r3, [r3]
 80044b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80044b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044ba:	667b      	str	r3, [r7, #100]	; 0x64
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	461a      	mov	r2, r3
 80044c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044c6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80044ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80044cc:	e841 2300 	strex	r3, r2, [r1]
 80044d0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80044d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1e6      	bne.n	80044a6 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	3308      	adds	r3, #8
 80044de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044e2:	e853 3f00 	ldrex	r3, [r3]
 80044e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ea:	f023 0301 	bic.w	r3, r3, #1
 80044ee:	663b      	str	r3, [r7, #96]	; 0x60
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	3308      	adds	r3, #8
 80044f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80044f8:	64ba      	str	r2, [r7, #72]	; 0x48
 80044fa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80044fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004500:	e841 2300 	strex	r3, r2, [r1]
 8004504:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1e5      	bne.n	80044d8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2220      	movs	r2, #32
 8004510:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2220      	movs	r2, #32
 8004518:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e069      	b.n	80045fc <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0304 	and.w	r3, r3, #4
 8004532:	2b00      	cmp	r3, #0
 8004534:	d051      	beq.n	80045da <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	69db      	ldr	r3, [r3, #28]
 800453c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004540:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004544:	d149      	bne.n	80045da <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800454e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004558:	e853 3f00 	ldrex	r3, [r3]
 800455c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004564:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	461a      	mov	r2, r3
 800456c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800456e:	637b      	str	r3, [r7, #52]	; 0x34
 8004570:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004572:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004574:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004576:	e841 2300 	strex	r3, r2, [r1]
 800457a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800457c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1e6      	bne.n	8004550 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	3308      	adds	r3, #8
 8004588:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	e853 3f00 	ldrex	r3, [r3]
 8004590:	613b      	str	r3, [r7, #16]
   return(result);
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	f023 0301 	bic.w	r3, r3, #1
 8004598:	66bb      	str	r3, [r7, #104]	; 0x68
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	3308      	adds	r3, #8
 80045a0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80045a2:	623a      	str	r2, [r7, #32]
 80045a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a6:	69f9      	ldr	r1, [r7, #28]
 80045a8:	6a3a      	ldr	r2, [r7, #32]
 80045aa:	e841 2300 	strex	r3, r2, [r1]
 80045ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1e5      	bne.n	8004582 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2220      	movs	r2, #32
 80045ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2220      	movs	r2, #32
 80045c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2220      	movs	r2, #32
 80045ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e010      	b.n	80045fc <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	69da      	ldr	r2, [r3, #28]
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	4013      	ands	r3, r2
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	bf0c      	ite	eq
 80045ea:	2301      	moveq	r3, #1
 80045ec:	2300      	movne	r3, #0
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	461a      	mov	r2, r3
 80045f2:	79fb      	ldrb	r3, [r7, #7]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	f43f af46 	beq.w	8004486 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3770      	adds	r7, #112	; 0x70
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004604:	b480      	push	{r7}
 8004606:	b095      	sub	sp, #84	; 0x54
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004614:	e853 3f00 	ldrex	r3, [r3]
 8004618:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800461a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004620:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	461a      	mov	r2, r3
 8004628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800462a:	643b      	str	r3, [r7, #64]	; 0x40
 800462c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004630:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004632:	e841 2300 	strex	r3, r2, [r1]
 8004636:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1e6      	bne.n	800460c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3308      	adds	r3, #8
 8004644:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004646:	6a3b      	ldr	r3, [r7, #32]
 8004648:	e853 3f00 	ldrex	r3, [r3]
 800464c:	61fb      	str	r3, [r7, #28]
   return(result);
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004654:	f023 0301 	bic.w	r3, r3, #1
 8004658:	64bb      	str	r3, [r7, #72]	; 0x48
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	3308      	adds	r3, #8
 8004660:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004662:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004664:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004666:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004668:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800466a:	e841 2300 	strex	r3, r2, [r1]
 800466e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1e3      	bne.n	800463e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800467a:	2b01      	cmp	r3, #1
 800467c:	d118      	bne.n	80046b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	e853 3f00 	ldrex	r3, [r3]
 800468a:	60bb      	str	r3, [r7, #8]
   return(result);
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	f023 0310 	bic.w	r3, r3, #16
 8004692:	647b      	str	r3, [r7, #68]	; 0x44
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	461a      	mov	r2, r3
 800469a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800469c:	61bb      	str	r3, [r7, #24]
 800469e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a0:	6979      	ldr	r1, [r7, #20]
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	e841 2300 	strex	r3, r2, [r1]
 80046a8:	613b      	str	r3, [r7, #16]
   return(result);
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1e6      	bne.n	800467e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2220      	movs	r2, #32
 80046b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	671a      	str	r2, [r3, #112]	; 0x70
}
 80046c4:	bf00      	nop
 80046c6:	3754      	adds	r7, #84	; 0x54
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bc80      	pop	{r7}
 80046cc:	4770      	bx	lr

080046ce <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b084      	sub	sp, #16
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f7ff fb4c 	bl	8003d8a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046f2:	bf00      	nop
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b088      	sub	sp, #32
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	e853 3f00 	ldrex	r3, [r3]
 800470e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004716:	61fb      	str	r3, [r7, #28]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	461a      	mov	r2, r3
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	61bb      	str	r3, [r7, #24]
 8004722:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004724:	6979      	ldr	r1, [r7, #20]
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	e841 2300 	strex	r3, r2, [r1]
 800472c:	613b      	str	r3, [r7, #16]
   return(result);
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1e6      	bne.n	8004702 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2220      	movs	r2, #32
 8004738:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f7ff fb18 	bl	8003d78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004748:	bf00      	nop
 800474a:	3720      	adds	r7, #32
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	bc80      	pop	{r7}
 8004760:	4770      	bx	lr

08004762 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004762:	b480      	push	{r7}
 8004764:	b083      	sub	sp, #12
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800476a:	bf00      	nop
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	bc80      	pop	{r7}
 8004772:	4770      	bx	lr

08004774 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	bc80      	pop	{r7}
 8004784:	4770      	bx	lr

08004786 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b084      	sub	sp, #16
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004794:	2b01      	cmp	r3, #1
 8004796:	d101      	bne.n	800479c <HAL_UARTEx_EnableFifoMode+0x16>
 8004798:	2302      	movs	r3, #2
 800479a:	e02b      	b.n	80047f4 <HAL_UARTEx_EnableFifoMode+0x6e>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2224      	movs	r2, #36	; 0x24
 80047a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f022 0201 	bic.w	r2, r2, #1
 80047c2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80047ca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80047d2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 f889 	bl	80048f4 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2220      	movs	r2, #32
 80047e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800480c:	2b01      	cmp	r3, #1
 800480e:	d101      	bne.n	8004814 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004810:	2302      	movs	r3, #2
 8004812:	e02d      	b.n	8004870 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2224      	movs	r2, #36	; 0x24
 8004820:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 0201 	bic.w	r2, r2, #1
 800483a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	430a      	orrs	r2, r1
 800484e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f84f 	bl	80048f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2220      	movs	r2, #32
 8004862:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004888:	2b01      	cmp	r3, #1
 800488a:	d101      	bne.n	8004890 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800488c:	2302      	movs	r3, #2
 800488e:	e02d      	b.n	80048ec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2224      	movs	r2, #36	; 0x24
 800489c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 0201 	bic.w	r2, r2, #1
 80048b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	430a      	orrs	r2, r1
 80048ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 f811 	bl	80048f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2220      	movs	r2, #32
 80048de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004900:	2b00      	cmp	r3, #0
 8004902:	d108      	bne.n	8004916 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004914:	e031      	b.n	800497a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004916:	2308      	movs	r3, #8
 8004918:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800491a:	2308      	movs	r3, #8
 800491c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	0e5b      	lsrs	r3, r3, #25
 8004926:	b2db      	uxtb	r3, r3
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	0f5b      	lsrs	r3, r3, #29
 8004936:	b2db      	uxtb	r3, r3
 8004938:	f003 0307 	and.w	r3, r3, #7
 800493c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800493e:	7bbb      	ldrb	r3, [r7, #14]
 8004940:	7b3a      	ldrb	r2, [r7, #12]
 8004942:	4910      	ldr	r1, [pc, #64]	; (8004984 <UARTEx_SetNbDataToProcess+0x90>)
 8004944:	5c8a      	ldrb	r2, [r1, r2]
 8004946:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800494a:	7b3a      	ldrb	r2, [r7, #12]
 800494c:	490e      	ldr	r1, [pc, #56]	; (8004988 <UARTEx_SetNbDataToProcess+0x94>)
 800494e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004950:	fb93 f3f2 	sdiv	r3, r3, r2
 8004954:	b29a      	uxth	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800495c:	7bfb      	ldrb	r3, [r7, #15]
 800495e:	7b7a      	ldrb	r2, [r7, #13]
 8004960:	4908      	ldr	r1, [pc, #32]	; (8004984 <UARTEx_SetNbDataToProcess+0x90>)
 8004962:	5c8a      	ldrb	r2, [r1, r2]
 8004964:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004968:	7b7a      	ldrb	r2, [r7, #13]
 800496a:	4907      	ldr	r1, [pc, #28]	; (8004988 <UARTEx_SetNbDataToProcess+0x94>)
 800496c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800496e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004972:	b29a      	uxth	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800497a:	bf00      	nop
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	bc80      	pop	{r7}
 8004982:	4770      	bx	lr
 8004984:	08004b1c 	.word	0x08004b1c
 8004988:	08004b24 	.word	0x08004b24

0800498c <__libc_init_array>:
 800498c:	b570      	push	{r4, r5, r6, lr}
 800498e:	4d0d      	ldr	r5, [pc, #52]	; (80049c4 <__libc_init_array+0x38>)
 8004990:	4c0d      	ldr	r4, [pc, #52]	; (80049c8 <__libc_init_array+0x3c>)
 8004992:	1b64      	subs	r4, r4, r5
 8004994:	10a4      	asrs	r4, r4, #2
 8004996:	2600      	movs	r6, #0
 8004998:	42a6      	cmp	r6, r4
 800499a:	d109      	bne.n	80049b0 <__libc_init_array+0x24>
 800499c:	4d0b      	ldr	r5, [pc, #44]	; (80049cc <__libc_init_array+0x40>)
 800499e:	4c0c      	ldr	r4, [pc, #48]	; (80049d0 <__libc_init_array+0x44>)
 80049a0:	f000 f82e 	bl	8004a00 <_init>
 80049a4:	1b64      	subs	r4, r4, r5
 80049a6:	10a4      	asrs	r4, r4, #2
 80049a8:	2600      	movs	r6, #0
 80049aa:	42a6      	cmp	r6, r4
 80049ac:	d105      	bne.n	80049ba <__libc_init_array+0x2e>
 80049ae:	bd70      	pop	{r4, r5, r6, pc}
 80049b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80049b4:	4798      	blx	r3
 80049b6:	3601      	adds	r6, #1
 80049b8:	e7ee      	b.n	8004998 <__libc_init_array+0xc>
 80049ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80049be:	4798      	blx	r3
 80049c0:	3601      	adds	r6, #1
 80049c2:	e7f2      	b.n	80049aa <__libc_init_array+0x1e>
 80049c4:	08004b34 	.word	0x08004b34
 80049c8:	08004b34 	.word	0x08004b34
 80049cc:	08004b34 	.word	0x08004b34
 80049d0:	08004b38 	.word	0x08004b38

080049d4 <memcpy>:
 80049d4:	440a      	add	r2, r1
 80049d6:	4291      	cmp	r1, r2
 80049d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80049dc:	d100      	bne.n	80049e0 <memcpy+0xc>
 80049de:	4770      	bx	lr
 80049e0:	b510      	push	{r4, lr}
 80049e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049ea:	4291      	cmp	r1, r2
 80049ec:	d1f9      	bne.n	80049e2 <memcpy+0xe>
 80049ee:	bd10      	pop	{r4, pc}

080049f0 <memset>:
 80049f0:	4402      	add	r2, r0
 80049f2:	4603      	mov	r3, r0
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d100      	bne.n	80049fa <memset+0xa>
 80049f8:	4770      	bx	lr
 80049fa:	f803 1b01 	strb.w	r1, [r3], #1
 80049fe:	e7f9      	b.n	80049f4 <memset+0x4>

08004a00 <_init>:
 8004a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a02:	bf00      	nop
 8004a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a06:	bc08      	pop	{r3}
 8004a08:	469e      	mov	lr, r3
 8004a0a:	4770      	bx	lr

08004a0c <_fini>:
 8004a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a0e:	bf00      	nop
 8004a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a12:	bc08      	pop	{r3}
 8004a14:	469e      	mov	lr, r3
 8004a16:	4770      	bx	lr
