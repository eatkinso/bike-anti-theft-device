
UART_nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004994  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08004acc  08004acc  00014acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c0c  08004c0c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004c0c  08004c0c  00014c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c14  08004c14  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c14  08004c14  00014c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c18  08004c18  00014c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004c1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  2000000c  08004c28  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08004c28  00020278  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000109ed  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002531  00000000  00000000  00030a23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001018  00000000  00000000  00032f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f50  00000000  00000000  00033f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c1b5  00000000  00000000  00034ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f6c1  00000000  00000000  00051075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af14e  00000000  00000000  00060736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010f884  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004274  00000000  00000000  0010f8d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000000c 	.word	0x2000000c
 8000154:	00000000 	.word	0x00000000
 8000158:	08004ab4 	.word	0x08004ab4

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000010 	.word	0x20000010
 8000174:	08004ab4 	.word	0x08004ab4

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000188:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800018c:	f000 b974 	b.w	8000478 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9e08      	ldr	r6, [sp, #32]
 80001ae:	460d      	mov	r5, r1
 80001b0:	4604      	mov	r4, r0
 80001b2:	4688      	mov	r8, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14d      	bne.n	8000254 <__udivmoddi4+0xac>
 80001b8:	428a      	cmp	r2, r1
 80001ba:	4694      	mov	ip, r2
 80001bc:	d968      	bls.n	8000290 <__udivmoddi4+0xe8>
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	b152      	cbz	r2, 80001da <__udivmoddi4+0x32>
 80001c4:	fa01 f302 	lsl.w	r3, r1, r2
 80001c8:	f1c2 0120 	rsb	r1, r2, #32
 80001cc:	fa20 f101 	lsr.w	r1, r0, r1
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	ea41 0803 	orr.w	r8, r1, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80001de:	0c21      	lsrs	r1, r4, #16
 80001e0:	fbb8 fef5 	udiv	lr, r8, r5
 80001e4:	fa1f f78c 	uxth.w	r7, ip
 80001e8:	fb05 831e 	mls	r3, r5, lr, r8
 80001ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f0:	fb0e f107 	mul.w	r1, lr, r7
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d90b      	bls.n	8000210 <__udivmoddi4+0x68>
 80001f8:	eb1c 0303 	adds.w	r3, ip, r3
 80001fc:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 8000200:	f080 811e 	bcs.w	8000440 <__udivmoddi4+0x298>
 8000204:	4299      	cmp	r1, r3
 8000206:	f240 811b 	bls.w	8000440 <__udivmoddi4+0x298>
 800020a:	f1ae 0e02 	sub.w	lr, lr, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a5b      	subs	r3, r3, r1
 8000212:	b2a4      	uxth	r4, r4
 8000214:	fbb3 f0f5 	udiv	r0, r3, r5
 8000218:	fb05 3310 	mls	r3, r5, r0, r3
 800021c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000220:	fb00 f707 	mul.w	r7, r0, r7
 8000224:	42a7      	cmp	r7, r4
 8000226:	d90a      	bls.n	800023e <__udivmoddi4+0x96>
 8000228:	eb1c 0404 	adds.w	r4, ip, r4
 800022c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000230:	f080 8108 	bcs.w	8000444 <__udivmoddi4+0x29c>
 8000234:	42a7      	cmp	r7, r4
 8000236:	f240 8105 	bls.w	8000444 <__udivmoddi4+0x29c>
 800023a:	4464      	add	r4, ip
 800023c:	3802      	subs	r0, #2
 800023e:	1be4      	subs	r4, r4, r7
 8000240:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa8>
 8000248:	40d4      	lsrs	r4, r2
 800024a:	2300      	movs	r3, #0
 800024c:	e9c6 4300 	strd	r4, r3, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	428b      	cmp	r3, r1
 8000256:	d908      	bls.n	800026a <__udivmoddi4+0xc2>
 8000258:	2e00      	cmp	r6, #0
 800025a:	f000 80ee 	beq.w	800043a <__udivmoddi4+0x292>
 800025e:	2100      	movs	r1, #0
 8000260:	e9c6 0500 	strd	r0, r5, [r6]
 8000264:	4608      	mov	r0, r1
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f183 	clz	r1, r3
 800026e:	2900      	cmp	r1, #0
 8000270:	d14a      	bne.n	8000308 <__udivmoddi4+0x160>
 8000272:	42ab      	cmp	r3, r5
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd4>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80f9 	bhi.w	800046e <__udivmoddi4+0x2c6>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb65 0303 	sbc.w	r3, r5, r3
 8000282:	2001      	movs	r0, #1
 8000284:	4698      	mov	r8, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e2      	beq.n	8000250 <__udivmoddi4+0xa8>
 800028a:	e9c6 4800 	strd	r4, r8, [r6]
 800028e:	e7df      	b.n	8000250 <__udivmoddi4+0xa8>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xec>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 8091 	bne.w	80003c0 <__udivmoddi4+0x218>
 800029e:	eba1 050c 	sub.w	r5, r1, ip
 80002a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a6:	fa1f fe8c 	uxth.w	lr, ip
 80002aa:	2101      	movs	r1, #1
 80002ac:	fbb5 f3f7 	udiv	r3, r5, r7
 80002b0:	fb07 5013 	mls	r0, r7, r3, r5
 80002b4:	0c25      	lsrs	r5, r4, #16
 80002b6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ba:	fb0e f003 	mul.w	r0, lr, r3
 80002be:	42a8      	cmp	r0, r5
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x12c>
 80002c2:	eb1c 0505 	adds.w	r5, ip, r5
 80002c6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x12a>
 80002cc:	42a8      	cmp	r0, r5
 80002ce:	f200 80cb 	bhi.w	8000468 <__udivmoddi4+0x2c0>
 80002d2:	4643      	mov	r3, r8
 80002d4:	1a2d      	subs	r5, r5, r0
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0f7 	udiv	r0, r5, r7
 80002dc:	fb07 5510 	mls	r5, r7, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb0e fe00 	mul.w	lr, lr, r0
 80002e8:	45a6      	cmp	lr, r4
 80002ea:	d908      	bls.n	80002fe <__udivmoddi4+0x156>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80002f4:	d202      	bcs.n	80002fc <__udivmoddi4+0x154>
 80002f6:	45a6      	cmp	lr, r4
 80002f8:	f200 80bb 	bhi.w	8000472 <__udivmoddi4+0x2ca>
 80002fc:	4628      	mov	r0, r5
 80002fe:	eba4 040e 	sub.w	r4, r4, lr
 8000302:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000306:	e79e      	b.n	8000246 <__udivmoddi4+0x9e>
 8000308:	f1c1 0720 	rsb	r7, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000312:	ea4c 0c03 	orr.w	ip, ip, r3
 8000316:	fa20 f407 	lsr.w	r4, r0, r7
 800031a:	fa05 f301 	lsl.w	r3, r5, r1
 800031e:	431c      	orrs	r4, r3
 8000320:	40fd      	lsrs	r5, r7
 8000322:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000326:	fa00 f301 	lsl.w	r3, r0, r1
 800032a:	fbb5 f8f9 	udiv	r8, r5, r9
 800032e:	0c20      	lsrs	r0, r4, #16
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	fb09 5518 	mls	r5, r9, r8, r5
 8000338:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800033c:	fb08 f00e 	mul.w	r0, r8, lr
 8000340:	42a8      	cmp	r0, r5
 8000342:	fa02 f201 	lsl.w	r2, r2, r1
 8000346:	d90b      	bls.n	8000360 <__udivmoddi4+0x1b8>
 8000348:	eb1c 0505 	adds.w	r5, ip, r5
 800034c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000350:	f080 8088 	bcs.w	8000464 <__udivmoddi4+0x2bc>
 8000354:	42a8      	cmp	r0, r5
 8000356:	f240 8085 	bls.w	8000464 <__udivmoddi4+0x2bc>
 800035a:	f1a8 0802 	sub.w	r8, r8, #2
 800035e:	4465      	add	r5, ip
 8000360:	1a2d      	subs	r5, r5, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb5 f0f9 	udiv	r0, r5, r9
 8000368:	fb09 5510 	mls	r5, r9, r0, r5
 800036c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000370:	fb00 fe0e 	mul.w	lr, r0, lr
 8000374:	45ae      	cmp	lr, r5
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1e2>
 8000378:	eb1c 0505 	adds.w	r5, ip, r5
 800037c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000380:	d26c      	bcs.n	800045c <__udivmoddi4+0x2b4>
 8000382:	45ae      	cmp	lr, r5
 8000384:	d96a      	bls.n	800045c <__udivmoddi4+0x2b4>
 8000386:	3802      	subs	r0, #2
 8000388:	4465      	add	r5, ip
 800038a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800038e:	fba0 9402 	umull	r9, r4, r0, r2
 8000392:	eba5 050e 	sub.w	r5, r5, lr
 8000396:	42a5      	cmp	r5, r4
 8000398:	46c8      	mov	r8, r9
 800039a:	46a6      	mov	lr, r4
 800039c:	d356      	bcc.n	800044c <__udivmoddi4+0x2a4>
 800039e:	d053      	beq.n	8000448 <__udivmoddi4+0x2a0>
 80003a0:	b15e      	cbz	r6, 80003ba <__udivmoddi4+0x212>
 80003a2:	ebb3 0208 	subs.w	r2, r3, r8
 80003a6:	eb65 050e 	sbc.w	r5, r5, lr
 80003aa:	fa05 f707 	lsl.w	r7, r5, r7
 80003ae:	fa22 f301 	lsr.w	r3, r2, r1
 80003b2:	40cd      	lsrs	r5, r1
 80003b4:	431f      	orrs	r7, r3
 80003b6:	e9c6 7500 	strd	r7, r5, [r6]
 80003ba:	2100      	movs	r1, #0
 80003bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c0:	f1c2 0320 	rsb	r3, r2, #32
 80003c4:	fa20 f103 	lsr.w	r1, r0, r3
 80003c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003cc:	fa25 f303 	lsr.w	r3, r5, r3
 80003d0:	4095      	lsls	r5, r2
 80003d2:	430d      	orrs	r5, r1
 80003d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3011 	mls	r0, r7, r1, r3
 80003e4:	0c2b      	lsrs	r3, r5, #16
 80003e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80003ea:	fb01 f00e 	mul.w	r0, r1, lr
 80003ee:	4298      	cmp	r0, r3
 80003f0:	fa04 f402 	lsl.w	r4, r4, r2
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x260>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80003fe:	d22f      	bcs.n	8000460 <__udivmoddi4+0x2b8>
 8000400:	4298      	cmp	r0, r3
 8000402:	d92d      	bls.n	8000460 <__udivmoddi4+0x2b8>
 8000404:	3902      	subs	r1, #2
 8000406:	4463      	add	r3, ip
 8000408:	1a1b      	subs	r3, r3, r0
 800040a:	b2ad      	uxth	r5, r5
 800040c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000410:	fb07 3310 	mls	r3, r7, r0, r3
 8000414:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000418:	fb00 f30e 	mul.w	r3, r0, lr
 800041c:	42ab      	cmp	r3, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x28a>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000428:	d216      	bcs.n	8000458 <__udivmoddi4+0x2b0>
 800042a:	42ab      	cmp	r3, r5
 800042c:	d914      	bls.n	8000458 <__udivmoddi4+0x2b0>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	1aed      	subs	r5, r5, r3
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	e738      	b.n	80002ac <__udivmoddi4+0x104>
 800043a:	4631      	mov	r1, r6
 800043c:	4630      	mov	r0, r6
 800043e:	e707      	b.n	8000250 <__udivmoddi4+0xa8>
 8000440:	4686      	mov	lr, r0
 8000442:	e6e5      	b.n	8000210 <__udivmoddi4+0x68>
 8000444:	4618      	mov	r0, r3
 8000446:	e6fa      	b.n	800023e <__udivmoddi4+0x96>
 8000448:	454b      	cmp	r3, r9
 800044a:	d2a9      	bcs.n	80003a0 <__udivmoddi4+0x1f8>
 800044c:	ebb9 0802 	subs.w	r8, r9, r2
 8000450:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000454:	3801      	subs	r0, #1
 8000456:	e7a3      	b.n	80003a0 <__udivmoddi4+0x1f8>
 8000458:	4640      	mov	r0, r8
 800045a:	e7ea      	b.n	8000432 <__udivmoddi4+0x28a>
 800045c:	4620      	mov	r0, r4
 800045e:	e794      	b.n	800038a <__udivmoddi4+0x1e2>
 8000460:	4641      	mov	r1, r8
 8000462:	e7d1      	b.n	8000408 <__udivmoddi4+0x260>
 8000464:	46d0      	mov	r8, sl
 8000466:	e77b      	b.n	8000360 <__udivmoddi4+0x1b8>
 8000468:	3b02      	subs	r3, #2
 800046a:	4465      	add	r5, ip
 800046c:	e732      	b.n	80002d4 <__udivmoddi4+0x12c>
 800046e:	4608      	mov	r0, r1
 8000470:	e709      	b.n	8000286 <__udivmoddi4+0xde>
 8000472:	4464      	add	r4, ip
 8000474:	3802      	subs	r0, #2
 8000476:	e742      	b.n	80002fe <__udivmoddi4+0x156>

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800048c:	f023 0218 	bic.w	r2, r3, #24
 8000490:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	4313      	orrs	r3, r2
 8000498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800049c:	bf00      	nop
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr

080004a6 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004a6:	b480      	push	{r7}
 80004a8:	b085      	sub	sp, #20
 80004aa:	af00      	add	r7, sp, #0
 80004ac:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80004ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80004b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4313      	orrs	r3, r2
 80004bc:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80004be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4013      	ands	r3, r2
 80004c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004ca:	68fb      	ldr	r3, [r7, #12]
}
 80004cc:	bf00      	nop
 80004ce:	3714      	adds	r7, #20
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bc80      	pop	{r7}
 80004d4:	4770      	bx	lr

080004d6 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004d6:	b480      	push	{r7}
 80004d8:	b085      	sub	sp, #20
 80004da:	af00      	add	r7, sp, #0
 80004dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	4313      	orrs	r3, r2
 80004ec:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	4013      	ands	r3, r2
 80004f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004fa:	68fb      	ldr	r3, [r7, #12]
}
 80004fc:	bf00      	nop
 80004fe:	3714      	adds	r7, #20
 8000500:	46bd      	mov	sp, r7
 8000502:	bc80      	pop	{r7}
 8000504:	4770      	bx	lr
	...

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b09a      	sub	sp, #104	; 0x68
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fbd1 	bl	8000cb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f825 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f93d 	bl	8000794 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800051a:	f000 f8db 	bl	80006d4 <MX_USART1_UART_Init>
  MX_DMA_Init();
 800051e:	f000 f927 	bl	8000770 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000522:	f000 f889 	bl	8000638 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t rxdata[90]= {
 8000526:	4a0a      	ldr	r2, [pc, #40]	; (8000550 <main+0x48>)
 8000528:	f107 030c 	add.w	r3, r7, #12
 800052c:	4611      	mov	r1, r2
 800052e:	225a      	movs	r2, #90	; 0x5a
 8000530:	4618      	mov	r0, r3
 8000532:	f004 faa9 	bl	8004a88 <memcpy>
		  0,0,0,0,0,0,0,0,0,0,
		  0,0,0,0,0,0,0,0,0,0,
		  0,0,0,0,0,0,0,0,0,0
  };

  uint8_t rxdata1[2]= {
 8000536:	2300      	movs	r3, #0
 8000538:	813b      	strh	r3, [r7, #8]
  		 0,0
    };

  uint8_t txdata[2] = {
 800053a:	f64e 33ec 	movw	r3, #60396	; 0xebec
 800053e:	80bb      	strh	r3, [r7, #4]
			for (int i =0; i<40; i++){
				HAL_UART_Receive(&huart1, &testrxdata[j][i], 1, 100000);
			//	HAL_UART_Transmit(&huart1, txdata, 2, 100);
	  }
	  }*/
	  VLU_Init(&huart1, gps_buffer, dma_buffer, 100);
 8000540:	2364      	movs	r3, #100	; 0x64
 8000542:	4a04      	ldr	r2, [pc, #16]	; (8000554 <main+0x4c>)
 8000544:	4904      	ldr	r1, [pc, #16]	; (8000558 <main+0x50>)
 8000546:	4805      	ldr	r0, [pc, #20]	; (800055c <main+0x54>)
 8000548:	f000 fafe 	bl	8000b48 <VLU_Init>
 800054c:	e7f8      	b.n	8000540 <main+0x38>
 800054e:	bf00      	nop
 8000550:	08004acc 	.word	0x08004acc
 8000554:	2000020c 	.word	0x2000020c
 8000558:	200001a8 	.word	0x200001a8
 800055c:	200000b8 	.word	0x200000b8

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b09a      	sub	sp, #104	; 0x68
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0320 	add.w	r3, r7, #32
 800056a:	2248      	movs	r2, #72	; 0x48
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f004 fa98 	bl	8004aa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]
 8000582:	615a      	str	r2, [r3, #20]
 8000584:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000586:	f001 fa11 	bl	80019ac <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800058a:	2000      	movs	r0, #0
 800058c:	f7ff ff76 	bl	800047c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000590:	4b28      	ldr	r3, [pc, #160]	; (8000634 <SystemClock_Config+0xd4>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000598:	4a26      	ldr	r2, [pc, #152]	; (8000634 <SystemClock_Config+0xd4>)
 800059a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800059e:	6013      	str	r3, [r2, #0]
 80005a0:	4b24      	ldr	r3, [pc, #144]	; (8000634 <SystemClock_Config+0xd4>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80005a8:	603b      	str	r3, [r7, #0]
 80005aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 80005ac:	2326      	movs	r3, #38	; 0x26
 80005ae:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005b0:	2381      	movs	r3, #129	; 0x81
 80005b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005b8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005ba:	2301      	movs	r3, #1
 80005bc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005be:	2340      	movs	r3, #64	; 0x40
 80005c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80005c2:	2300      	movs	r3, #0
 80005c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80005c6:	23b0      	movs	r3, #176	; 0xb0
 80005c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ca:	2302      	movs	r3, #2
 80005cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005ce:	2301      	movs	r3, #1
 80005d0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005d2:	2330      	movs	r3, #48	; 0x30
 80005d4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 80005d6:	2308      	movs	r3, #8
 80005d8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80005de:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005e0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80005e4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80005ea:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ec:	f107 0320 	add.w	r3, r7, #32
 80005f0:	4618      	mov	r0, r3
 80005f2:	f001 fcad 	bl	8001f50 <HAL_RCC_OscConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80005fc:	f000 f934 	bl	8000868 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000600:	234f      	movs	r3, #79	; 0x4f
 8000602:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000604:	2303      	movs	r3, #3
 8000606:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	2102      	movs	r1, #2
 800061c:	4618      	mov	r0, r3
 800061e:	f002 f833 	bl	8002688 <HAL_RCC_ClockConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000628:	f000 f91e 	bl	8000868 <Error_Handler>
  }
}
 800062c:	bf00      	nop
 800062e:	3768      	adds	r7, #104	; 0x68
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	58000400 	.word	0x58000400

08000638 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800063c:	4b23      	ldr	r3, [pc, #140]	; (80006cc <MX_LPUART1_UART_Init+0x94>)
 800063e:	4a24      	ldr	r2, [pc, #144]	; (80006d0 <MX_LPUART1_UART_Init+0x98>)
 8000640:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8000642:	4b22      	ldr	r3, [pc, #136]	; (80006cc <MX_LPUART1_UART_Init+0x94>)
 8000644:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000648:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800064a:	4b20      	ldr	r3, [pc, #128]	; (80006cc <MX_LPUART1_UART_Init+0x94>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000650:	4b1e      	ldr	r3, [pc, #120]	; (80006cc <MX_LPUART1_UART_Init+0x94>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000656:	4b1d      	ldr	r3, [pc, #116]	; (80006cc <MX_LPUART1_UART_Init+0x94>)
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800065c:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <MX_LPUART1_UART_Init+0x94>)
 800065e:	220c      	movs	r2, #12
 8000660:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000662:	4b1a      	ldr	r3, [pc, #104]	; (80006cc <MX_LPUART1_UART_Init+0x94>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 8000668:	4b18      	ldr	r3, [pc, #96]	; (80006cc <MX_LPUART1_UART_Init+0x94>)
 800066a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800066e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000670:	4b16      	ldr	r3, [pc, #88]	; (80006cc <MX_LPUART1_UART_Init+0x94>)
 8000672:	2200      	movs	r2, #0
 8000674:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000676:	4b15      	ldr	r3, [pc, #84]	; (80006cc <MX_LPUART1_UART_Init+0x94>)
 8000678:	2200      	movs	r2, #0
 800067a:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_ENABLE;
 800067c:	4b13      	ldr	r3, [pc, #76]	; (80006cc <MX_LPUART1_UART_Init+0x94>)
 800067e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000682:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000684:	4811      	ldr	r0, [pc, #68]	; (80006cc <MX_LPUART1_UART_Init+0x94>)
 8000686:	f002 fcfa 	bl	800307e <HAL_UART_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 8000690:	f000 f8ea 	bl	8000868 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000694:	2100      	movs	r1, #0
 8000696:	480d      	ldr	r0, [pc, #52]	; (80006cc <MX_LPUART1_UART_Init+0x94>)
 8000698:	f004 f909 	bl	80048ae <HAL_UARTEx_SetTxFifoThreshold>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_LPUART1_UART_Init+0x6e>
  {
    Error_Handler();
 80006a2:	f000 f8e1 	bl	8000868 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006a6:	2100      	movs	r1, #0
 80006a8:	4808      	ldr	r0, [pc, #32]	; (80006cc <MX_LPUART1_UART_Init+0x94>)
 80006aa:	f004 f93e 	bl	800492a <HAL_UARTEx_SetRxFifoThreshold>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_LPUART1_UART_Init+0x80>
  {
    Error_Handler();
 80006b4:	f000 f8d8 	bl	8000868 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&hlpuart1) != HAL_OK)
 80006b8:	4804      	ldr	r0, [pc, #16]	; (80006cc <MX_LPUART1_UART_Init+0x94>)
 80006ba:	f004 f8bd 	bl	8004838 <HAL_UARTEx_EnableFifoMode>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_LPUART1_UART_Init+0x90>
  {
    Error_Handler();
 80006c4:	f000 f8d0 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000028 	.word	0x20000028
 80006d0:	40008000 	.word	0x40008000

080006d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006d8:	4b23      	ldr	r3, [pc, #140]	; (8000768 <MX_USART1_UART_Init+0x94>)
 80006da:	4a24      	ldr	r2, [pc, #144]	; (800076c <MX_USART1_UART_Init+0x98>)
 80006dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006de:	4b22      	ldr	r3, [pc, #136]	; (8000768 <MX_USART1_UART_Init+0x94>)
 80006e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006e6:	4b20      	ldr	r3, [pc, #128]	; (8000768 <MX_USART1_UART_Init+0x94>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006ec:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <MX_USART1_UART_Init+0x94>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006f2:	4b1d      	ldr	r3, [pc, #116]	; (8000768 <MX_USART1_UART_Init+0x94>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006f8:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <MX_USART1_UART_Init+0x94>)
 80006fa:	220c      	movs	r2, #12
 80006fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fe:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <MX_USART1_UART_Init+0x94>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8000704:	4b18      	ldr	r3, [pc, #96]	; (8000768 <MX_USART1_UART_Init+0x94>)
 8000706:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800070a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 800070c:	4b16      	ldr	r3, [pc, #88]	; (8000768 <MX_USART1_UART_Init+0x94>)
 800070e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000712:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_USART1_UART_Init+0x94>)
 8000716:	2200      	movs	r2, #0
 8000718:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_USART1_UART_Init+0x94>)
 800071c:	2200      	movs	r2, #0
 800071e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000720:	4811      	ldr	r0, [pc, #68]	; (8000768 <MX_USART1_UART_Init+0x94>)
 8000722:	f002 fcac 	bl	800307e <HAL_UART_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 800072c:	f000 f89c 	bl	8000868 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000730:	2100      	movs	r1, #0
 8000732:	480d      	ldr	r0, [pc, #52]	; (8000768 <MX_USART1_UART_Init+0x94>)
 8000734:	f004 f8bb 	bl	80048ae <HAL_UARTEx_SetTxFifoThreshold>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 800073e:	f000 f893 	bl	8000868 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000742:	2100      	movs	r1, #0
 8000744:	4808      	ldr	r0, [pc, #32]	; (8000768 <MX_USART1_UART_Init+0x94>)
 8000746:	f004 f8f0 	bl	800492a <HAL_UARTEx_SetRxFifoThreshold>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8000750:	f000 f88a 	bl	8000868 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <MX_USART1_UART_Init+0x94>)
 8000756:	f004 f86f 	bl	8004838 <HAL_UARTEx_EnableFifoMode>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8000760:	f000 f882 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	200000b8 	.word	0x200000b8
 800076c:	40013800 	.word	0x40013800

08000770 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000774:	2004      	movs	r0, #4
 8000776:	f7ff fe96 	bl	80004a6 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800077a:	2001      	movs	r0, #1
 800077c:	f7ff fe93 	bl	80004a6 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000780:	2200      	movs	r2, #0
 8000782:	2100      	movs	r1, #0
 8000784:	200b      	movs	r0, #11
 8000786:	f000 fbe2 	bl	8000f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800078a:	200b      	movs	r0, #11
 800078c:	f000 fbf9 	bl	8000f82 <HAL_NVIC_EnableIRQ>

}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}

08000794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a8:	2001      	movs	r0, #1
 80007aa:	f7ff fe94 	bl	80004d6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	2002      	movs	r0, #2
 80007b0:	f7ff fe91 	bl	80004d6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b4:	2004      	movs	r0, #4
 80007b6:	f7ff fe8e 	bl	80004d6 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 80007c0:	4827      	ldr	r0, [pc, #156]	; (8000860 <MX_GPIO_Init+0xcc>)
 80007c2:	f001 f8db 	bl	800197c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2138      	movs	r1, #56	; 0x38
 80007ca:	4826      	ldr	r0, [pc, #152]	; (8000864 <MX_GPIO_Init+0xd0>)
 80007cc:	f001 f8d6 	bl	800197c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80007d0:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 80007d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d6:	2301      	movs	r3, #1
 80007d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007de:	2302      	movs	r3, #2
 80007e0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	4619      	mov	r1, r3
 80007e6:	481e      	ldr	r0, [pc, #120]	; (8000860 <MX_GPIO_Init+0xcc>)
 80007e8:	f000 ff68 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 80007ec:	2338      	movs	r3, #56	; 0x38
 80007ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f0:	2301      	movs	r3, #1
 80007f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f8:	2303      	movs	r3, #3
 80007fa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	4619      	mov	r1, r3
 8000800:	4818      	ldr	r0, [pc, #96]	; (8000864 <MX_GPIO_Init+0xd0>)
 8000802:	f000 ff5b 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin B2_Pin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 8000806:	2303      	movs	r3, #3
 8000808:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800080a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800080e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000810:	2301      	movs	r3, #1
 8000812:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	4619      	mov	r1, r3
 8000818:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800081c:	f000 ff4e 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pin : B3_Pin */
  GPIO_InitStruct.Pin = B3_Pin;
 8000820:	2340      	movs	r3, #64	; 0x40
 8000822:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000824:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000828:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800082a:	2301      	movs	r3, #1
 800082c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	4619      	mov	r1, r3
 8000832:	480c      	ldr	r0, [pc, #48]	; (8000864 <MX_GPIO_Init+0xd0>)
 8000834:	f000 ff42 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pins : T_VCP_RX_Pin T_VCP_RXA2_Pin */
  GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000838:	230c      	movs	r3, #12
 800083a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083c:	2302      	movs	r3, #2
 800083e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	2300      	movs	r3, #0
 8000846:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000848:	2307      	movs	r3, #7
 800084a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	4619      	mov	r1, r3
 8000850:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000854:	f000 ff32 	bl	80016bc <HAL_GPIO_Init>

}
 8000858:	bf00      	nop
 800085a:	3718      	adds	r7, #24
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	48000400 	.word	0x48000400
 8000864:	48000800 	.word	0x48000800

08000868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800086c:	b672      	cpsid	i
}
 800086e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000870:	e7fe      	b.n	8000870 <Error_Handler+0x8>

08000872 <LL_AHB2_GRP1_EnableClock>:
{
 8000872:	b480      	push	{r7}
 8000874:	b085      	sub	sp, #20
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800087a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800087e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000880:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4313      	orrs	r3, r2
 8000888:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800088a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800088e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	4013      	ands	r3, r2
 8000894:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000896:	68fb      	ldr	r3, [r7, #12]
}
 8000898:	bf00      	nop
 800089a:	3714      	adds	r7, #20
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr

080008a2 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80008a2:	b480      	push	{r7}
 80008a4:	b085      	sub	sp, #20
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80008aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80008b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4313      	orrs	r3, r2
 80008b8:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80008ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	4013      	ands	r3, r2
 80008c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008c6:	68fb      	ldr	r3, [r7, #12]
}
 80008c8:	bf00      	nop
 80008ca:	3714      	adds	r7, #20
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr

080008d2 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80008d2:	b480      	push	{r7}
 80008d4:	b085      	sub	sp, #20
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80008da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80008e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	4313      	orrs	r3, r2
 80008e8:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80008ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008ee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4013      	ands	r3, r2
 80008f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008f6:	68fb      	ldr	r3, [r7, #12]
}
 80008f8:	bf00      	nop
 80008fa:	3714      	adds	r7, #20
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr

08000902 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	bc80      	pop	{r7}
 800090c:	4770      	bx	lr
	...

08000910 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b096      	sub	sp, #88	; 0x58
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	2238      	movs	r2, #56	; 0x38
 800092e:	2100      	movs	r1, #0
 8000930:	4618      	mov	r0, r3
 8000932:	f004 f8b7 	bl	8004aa4 <memset>
  if(huart->Instance==LPUART1)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a4c      	ldr	r2, [pc, #304]	; (8000a6c <HAL_UART_MspInit+0x15c>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d12d      	bne.n	800099c <HAL_UART_MspInit+0x8c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000940:	2320      	movs	r3, #32
 8000942:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 8000944:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000948:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	4618      	mov	r0, r3
 8000950:	f002 fa5a 	bl	8002e08 <HAL_RCCEx_PeriphCLKConfig>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800095a:	f7ff ff85 	bl	8000868 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800095e:	2001      	movs	r0, #1
 8000960:	f7ff ff9f 	bl	80008a2 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000964:	2004      	movs	r0, #4
 8000966:	f7ff ff84 	bl	8000872 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    PC0     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 800096a:	2303      	movs	r3, #3
 800096c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	2302      	movs	r3, #2
 8000970:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800097a:	2308      	movs	r3, #8
 800097c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800097e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000982:	4619      	mov	r1, r3
 8000984:	483a      	ldr	r0, [pc, #232]	; (8000a70 <HAL_UART_MspInit+0x160>)
 8000986:	f000 fe99 	bl	80016bc <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	2100      	movs	r1, #0
 800098e:	2026      	movs	r0, #38	; 0x26
 8000990:	f000 fadd 	bl	8000f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000994:	2026      	movs	r0, #38	; 0x26
 8000996:	f000 faf4 	bl	8000f82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800099a:	e063      	b.n	8000a64 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART1)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a34      	ldr	r2, [pc, #208]	; (8000a74 <HAL_UART_MspInit+0x164>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d15e      	bne.n	8000a64 <HAL_UART_MspInit+0x154>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80009a6:	2301      	movs	r3, #1
 80009a8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 80009aa:	4b33      	ldr	r3, [pc, #204]	; (8000a78 <HAL_UART_MspInit+0x168>)
 80009ac:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009ae:	f107 030c 	add.w	r3, r7, #12
 80009b2:	4618      	mov	r0, r3
 80009b4:	f002 fa28 	bl	8002e08 <HAL_RCCEx_PeriphCLKConfig>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <HAL_UART_MspInit+0xb2>
      Error_Handler();
 80009be:	f7ff ff53 	bl	8000868 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80009c2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80009c6:	f7ff ff84 	bl	80008d2 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	2002      	movs	r0, #2
 80009cc:	f7ff ff51 	bl	8000872 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80009d0:	23c0      	movs	r3, #192	; 0xc0
 80009d2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d4:	2302      	movs	r3, #2
 80009d6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2300      	movs	r3, #0
 80009de:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009e0:	2307      	movs	r3, #7
 80009e2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009e8:	4619      	mov	r1, r3
 80009ea:	4824      	ldr	r0, [pc, #144]	; (8000a7c <HAL_UART_MspInit+0x16c>)
 80009ec:	f000 fe66 	bl	80016bc <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80009f0:	4b23      	ldr	r3, [pc, #140]	; (8000a80 <HAL_UART_MspInit+0x170>)
 80009f2:	4a24      	ldr	r2, [pc, #144]	; (8000a84 <HAL_UART_MspInit+0x174>)
 80009f4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80009f6:	4b22      	ldr	r3, [pc, #136]	; (8000a80 <HAL_UART_MspInit+0x170>)
 80009f8:	2211      	movs	r2, #17
 80009fa:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009fc:	4b20      	ldr	r3, [pc, #128]	; (8000a80 <HAL_UART_MspInit+0x170>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a02:	4b1f      	ldr	r3, [pc, #124]	; (8000a80 <HAL_UART_MspInit+0x170>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a08:	4b1d      	ldr	r3, [pc, #116]	; (8000a80 <HAL_UART_MspInit+0x170>)
 8000a0a:	2280      	movs	r2, #128	; 0x80
 8000a0c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <HAL_UART_MspInit+0x170>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a14:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <HAL_UART_MspInit+0x170>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000a1a:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <HAL_UART_MspInit+0x170>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a20:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <HAL_UART_MspInit+0x170>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000a26:	4816      	ldr	r0, [pc, #88]	; (8000a80 <HAL_UART_MspInit+0x170>)
 8000a28:	f000 fac6 	bl	8000fb8 <HAL_DMA_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <HAL_UART_MspInit+0x126>
      Error_Handler();
 8000a32:	f7ff ff19 	bl	8000868 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000a36:	2110      	movs	r1, #16
 8000a38:	4811      	ldr	r0, [pc, #68]	; (8000a80 <HAL_UART_MspInit+0x170>)
 8000a3a:	f000 fd67 	bl	800150c <HAL_DMA_ConfigChannelAttributes>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <HAL_UART_MspInit+0x138>
      Error_Handler();
 8000a44:	f7ff ff10 	bl	8000868 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a0d      	ldr	r2, [pc, #52]	; (8000a80 <HAL_UART_MspInit+0x170>)
 8000a4c:	67da      	str	r2, [r3, #124]	; 0x7c
 8000a4e:	4a0c      	ldr	r2, [pc, #48]	; (8000a80 <HAL_UART_MspInit+0x170>)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2100      	movs	r1, #0
 8000a58:	2024      	movs	r0, #36	; 0x24
 8000a5a:	f000 fa78 	bl	8000f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a5e:	2024      	movs	r0, #36	; 0x24
 8000a60:	f000 fa8f 	bl	8000f82 <HAL_NVIC_EnableIRQ>
}
 8000a64:	bf00      	nop
 8000a66:	3758      	adds	r7, #88	; 0x58
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40008000 	.word	0x40008000
 8000a70:	48000800 	.word	0x48000800
 8000a74:	40013800 	.word	0x40013800
 8000a78:	00030002 	.word	0x00030002
 8000a7c:	48000400 	.word	0x48000400
 8000a80:	20000148 	.word	0x20000148
 8000a84:	40020008 	.word	0x40020008

08000a88 <gps_parser>:

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */
void gps_parser(uint8_t * gpsbuffer){
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	return;
 8000a90:	bf00      	nop
}
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr

08000a9a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <NMI_Handler+0x4>

08000aa0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <HardFault_Handler+0x4>

08000aa6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <MemManage_Handler+0x4>

08000aac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <BusFault_Handler+0x4>

08000ab2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <UsageFault_Handler+0x4>

08000ab8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr

08000ac4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr

08000ad0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr

08000adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae0:	f000 f942 	bl	8000d68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000aec:	4802      	ldr	r0, [pc, #8]	; (8000af8 <DMA1_Channel1_IRQHandler+0x10>)
 8000aee:	f000 fc47 	bl	8001380 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000148 	.word	0x20000148

08000afc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN USART1_IRQn 0 */
	extern uint8_t gps_buffer[100];
	extern uint8_t dma_buffer[100];
	VLU_IdleLineHandler(&huart1, &hdma_usart1_rx, gps_buffer, dma_buffer, &gps_parser);
 8000b02:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <USART1_IRQHandler+0x24>)
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <USART1_IRQHandler+0x28>)
 8000b08:	4a07      	ldr	r2, [pc, #28]	; (8000b28 <USART1_IRQHandler+0x2c>)
 8000b0a:	4908      	ldr	r1, [pc, #32]	; (8000b2c <USART1_IRQHandler+0x30>)
 8000b0c:	4808      	ldr	r0, [pc, #32]	; (8000b30 <USART1_IRQHandler+0x34>)
 8000b0e:	f000 f847 	bl	8000ba0 <VLU_IdleLineHandler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b12:	4807      	ldr	r0, [pc, #28]	; (8000b30 <USART1_IRQHandler+0x34>)
 8000b14:	f002 fc88 	bl	8003428 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	08000a89 	.word	0x08000a89
 8000b24:	2000020c 	.word	0x2000020c
 8000b28:	200001a8 	.word	0x200001a8
 8000b2c:	20000148 	.word	0x20000148
 8000b30:	200000b8 	.word	0x200000b8

08000b34 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000b38:	4802      	ldr	r0, [pc, #8]	; (8000b44 <LPUART1_IRQHandler+0x10>)
 8000b3a:	f002 fc75 	bl	8003428 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000028 	.word	0x20000028

08000b48 <VLU_Init>:
 * 
 * Note that this function will cause an idle line interrupt to be fired immediately after it completes.
 * This behavior is intentional, as that interrupt will return no data but disable again until more data is received.
 */
void VLU_Init(UART_HandleTypeDef * huart, uint8_t * working_buffer, uint8_t * byte_buffer, uint8_t buffer_len)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
 8000b54:	70fb      	strb	r3, [r7, #3]
  // Clear the buffers.
  memset(byte_buffer, 0, buffer_len);
 8000b56:	78fb      	ldrb	r3, [r7, #3]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f003 ffa1 	bl	8004aa4 <memset>
  memset(byte_buffer, 0, buffer_len);
 8000b62:	78fb      	ldrb	r3, [r7, #3]
 8000b64:	461a      	mov	r2, r3
 8000b66:	2100      	movs	r1, #0
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f003 ff9b 	bl	8004aa4 <memset>
  // Set the global buffer length.
  BUFFER_LENGTH = buffer_len;
 8000b6e:	4a0b      	ldr	r2, [pc, #44]	; (8000b9c <VLU_Init+0x54>)
 8000b70:	78fb      	ldrb	r3, [r7, #3]
 8000b72:	7013      	strb	r3, [r2, #0]
  // Start reading and enable the interrupt.
  HAL_UART_Receive_DMA(huart, byte_buffer, buffer_len);
 8000b74:	78fb      	ldrb	r3, [r7, #3]
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	461a      	mov	r2, r3
 8000b7a:	6879      	ldr	r1, [r7, #4]
 8000b7c:	68f8      	ldr	r0, [r7, #12]
 8000b7e:	f002 facf 	bl	8003120 <HAL_UART_Receive_DMA>
  __HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f042 0210 	orr.w	r2, r2, #16
 8000b90:	601a      	str	r2, [r3, #0]
}
 8000b92:	bf00      	nop
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000270 	.word	0x20000270

08000ba0 <VLU_IdleLineHandler>:
void VLU_IdleLineHandler(UART_HandleTypeDef * huart, 
                          DMA_HandleTypeDef * hdma, 
                          uint8_t * working_buffer, 
                          uint8_t * byte_buffer,
                          void (*msgproc)(uint8_t *))
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
 8000bac:	603b      	str	r3, [r7, #0]
  // Check to see if the IDLE bit is flipped.
  // This mask isolates the IDLE bit.
  // uint32_t mask = 0b00000000000000000000000000010000;
  uint32_t mask = 0x00000010;
 8000bae:	2310      	movs	r3, #16
 8000bb0:	617b      	str	r3, [r7, #20]
  if (huart->Instance->ISR && mask) {
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	69db      	ldr	r3, [r3, #28]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d03f      	beq.n	8000c3c <VLU_IdleLineHandler+0x9c>
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d03c      	beq.n	8000c3c <VLU_IdleLineHandler+0x9c>
    // The IDLE bit is flipped, so this was an IDLE interrupt.
    // Turn the IDLE bit off.
    huart->Instance->ICR |= mask;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	6a19      	ldr	r1, [r3, #32]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	697a      	ldr	r2, [r7, #20]
 8000bce:	430a      	orrs	r2, r1
 8000bd0:	621a      	str	r2, [r3, #32]
    /* WORKAROUND for the first byte missing thing.  
    If we have only read one byte, don't treat it as a separate message. */
    if (hdma->Instance->CNDTR >= BUFFER_LENGTH-1) goto endirq;
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	4a1d      	ldr	r2, [pc, #116]	; (8000c50 <VLU_IdleLineHandler+0xb0>)
 8000bda:	7812      	ldrb	r2, [r2, #0]
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d22e      	bcs.n	8000c40 <VLU_IdleLineHandler+0xa0>
    // Copy the message to the working buffer.
    memcpy(working_buffer, byte_buffer, BUFFER_LENGTH);
 8000be2:	4b1b      	ldr	r3, [pc, #108]	; (8000c50 <VLU_IdleLineHandler+0xb0>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	461a      	mov	r2, r3
 8000be8:	6839      	ldr	r1, [r7, #0]
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f003 ff4c 	bl	8004a88 <memcpy>
    memset(byte_buffer, 0, BUFFER_LENGTH);
 8000bf0:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <VLU_IdleLineHandler+0xb0>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	6838      	ldr	r0, [r7, #0]
 8000bfa:	f003 ff53 	bl	8004aa4 <memset>
    // Attempt to reset the DMA controller
    HAL_UART_DMAPause(huart);
 8000bfe:	68f8      	ldr	r0, [r7, #12]
 8000c00:	f002 fae4 	bl	80031cc <HAL_UART_DMAPause>
    hdma->Instance->CCR &= -2;
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f022 0201 	bic.w	r2, r2, #1
 8000c12:	601a      	str	r2, [r3, #0]
    hdma->Instance->CNDTR = BUFFER_LENGTH;
 8000c14:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <VLU_IdleLineHandler+0xb0>)
 8000c16:	781a      	ldrb	r2, [r3, #0]
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
    hdma->Instance->CCR |= 1;
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f042 0201 	orr.w	r2, r2, #1
 8000c2c:	601a      	str	r2, [r3, #0]
    HAL_UART_DMAResume(huart);
 8000c2e:	68f8      	ldr	r0, [r7, #12]
 8000c30:	f002 fb68 	bl	8003304 <HAL_UART_DMAResume>
    // Run the message processing subroutine.
    msgproc(working_buffer);
 8000c34:	6a3b      	ldr	r3, [r7, #32]
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	4798      	blx	r3
 8000c3a:	e002      	b.n	8000c42 <VLU_IdleLineHandler+0xa2>
    // The message processing routine is responsible for resetting the working buffer when it is done.
  }
  endirq:
 8000c3c:	bf00      	nop
 8000c3e:	e000      	b.n	8000c42 <VLU_IdleLineHandler+0xa2>
    if (hdma->Instance->CNDTR >= BUFFER_LENGTH-1) goto endirq;
 8000c40:	bf00      	nop
  HAL_UART_IRQHandler(huart);
 8000c42:	68f8      	ldr	r0, [r7, #12]
 8000c44:	f002 fbf0 	bl	8003428 <HAL_UART_IRQHandler>
 8000c48:	bf00      	nop
 8000c4a:	3718      	adds	r7, #24
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000270 	.word	0x20000270

08000c54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c54:	480d      	ldr	r0, [pc, #52]	; (8000c8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c56:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c58:	f000 f825 	bl	8000ca6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c5c:	480c      	ldr	r0, [pc, #48]	; (8000c90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c5e:	490d      	ldr	r1, [pc, #52]	; (8000c94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c60:	4a0d      	ldr	r2, [pc, #52]	; (8000c98 <LoopForever+0xe>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c64:	e002      	b.n	8000c6c <LoopCopyDataInit>

08000c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6a:	3304      	adds	r3, #4

08000c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c70:	d3f9      	bcc.n	8000c66 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c72:	4a0a      	ldr	r2, [pc, #40]	; (8000c9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c74:	4c0a      	ldr	r4, [pc, #40]	; (8000ca0 <LoopForever+0x16>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c78:	e001      	b.n	8000c7e <LoopFillZerobss>

08000c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c7c:	3204      	adds	r2, #4

08000c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c80:	d3fb      	bcc.n	8000c7a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c82:	f003 fedd 	bl	8004a40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c86:	f7ff fc3f 	bl	8000508 <main>

08000c8a <LoopForever>:

LoopForever:
    b LoopForever
 8000c8a:	e7fe      	b.n	8000c8a <LoopForever>
  ldr   r0, =_estack
 8000c8c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c94:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c98:	08004c1c 	.word	0x08004c1c
  ldr r2, =_sbss
 8000c9c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ca0:	20000278 	.word	0x20000278

08000ca4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ca4:	e7fe      	b.n	8000ca4 <ADC_IRQHandler>

08000ca6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr
	...

08000cb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cbe:	2003      	movs	r0, #3
 8000cc0:	f000 f93a 	bl	8000f38 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000cc4:	f001 fec2 	bl	8002a4c <HAL_RCC_GetHCLKFreq>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	4a09      	ldr	r2, [pc, #36]	; (8000cf0 <HAL_Init+0x3c>)
 8000ccc:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f000 f810 	bl	8000cf4 <HAL_InitTick>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d002      	beq.n	8000ce0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	71fb      	strb	r3, [r7, #7]
 8000cde:	e001      	b.n	8000ce4 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ce0:	f7ff fe0f 	bl	8000902 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000000 	.word	0x20000000

08000cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d00:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <HAL_InitTick+0x6c>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d024      	beq.n	8000d52 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d08:	f001 fea0 	bl	8002a4c <HAL_RCC_GetHCLKFreq>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <HAL_InitTick+0x6c>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	4619      	mov	r1, r3
 8000d14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d18:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d20:	4618      	mov	r0, r3
 8000d22:	f000 f93c 	bl	8000f9e <HAL_SYSTICK_Config>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d10f      	bne.n	8000d4c <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2b0f      	cmp	r3, #15
 8000d30:	d809      	bhi.n	8000d46 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d32:	2200      	movs	r2, #0
 8000d34:	6879      	ldr	r1, [r7, #4]
 8000d36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d3a:	f000 f908 	bl	8000f4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d3e:	4a09      	ldr	r2, [pc, #36]	; (8000d64 <HAL_InitTick+0x70>)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6013      	str	r3, [r2, #0]
 8000d44:	e007      	b.n	8000d56 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	73fb      	strb	r3, [r7, #15]
 8000d4a:	e004      	b.n	8000d56 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	73fb      	strb	r3, [r7, #15]
 8000d50:	e001      	b.n	8000d56 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3710      	adds	r7, #16
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000008 	.word	0x20000008
 8000d64:	20000004 	.word	0x20000004

08000d68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d6c:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <HAL_IncTick+0x1c>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	461a      	mov	r2, r3
 8000d72:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <HAL_IncTick+0x20>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4413      	add	r3, r2
 8000d78:	4a03      	ldr	r2, [pc, #12]	; (8000d88 <HAL_IncTick+0x20>)
 8000d7a:	6013      	str	r3, [r2, #0]
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr
 8000d84:	20000008 	.word	0x20000008
 8000d88:	20000274 	.word	0x20000274

08000d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d90:	4b02      	ldr	r3, [pc, #8]	; (8000d9c <HAL_GetTick+0x10>)
 8000d92:	681b      	ldr	r3, [r3, #0]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr
 8000d9c:	20000274 	.word	0x20000274

08000da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd2:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	60d3      	str	r3, [r2, #12]
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <__NVIC_GetPriorityGrouping+0x18>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	0a1b      	lsrs	r3, r3, #8
 8000df2:	f003 0307 	and.w	r3, r3, #7
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bc80      	pop	{r7}
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	db0b      	blt.n	8000e2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	f003 021f 	and.w	r2, r3, #31
 8000e1c:	4906      	ldr	r1, [pc, #24]	; (8000e38 <__NVIC_EnableIRQ+0x34>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	095b      	lsrs	r3, r3, #5
 8000e24:	2001      	movs	r0, #1
 8000e26:	fa00 f202 	lsl.w	r2, r0, r2
 8000e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr
 8000e38:	e000e100 	.word	0xe000e100

08000e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	6039      	str	r1, [r7, #0]
 8000e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	db0a      	blt.n	8000e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	490c      	ldr	r1, [pc, #48]	; (8000e88 <__NVIC_SetPriority+0x4c>)
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	0112      	lsls	r2, r2, #4
 8000e5c:	b2d2      	uxtb	r2, r2
 8000e5e:	440b      	add	r3, r1
 8000e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e64:	e00a      	b.n	8000e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	4908      	ldr	r1, [pc, #32]	; (8000e8c <__NVIC_SetPriority+0x50>)
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	f003 030f 	and.w	r3, r3, #15
 8000e72:	3b04      	subs	r3, #4
 8000e74:	0112      	lsls	r2, r2, #4
 8000e76:	b2d2      	uxtb	r2, r2
 8000e78:	440b      	add	r3, r1
 8000e7a:	761a      	strb	r2, [r3, #24]
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000e100 	.word	0xe000e100
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b089      	sub	sp, #36	; 0x24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	f1c3 0307 	rsb	r3, r3, #7
 8000eaa:	2b04      	cmp	r3, #4
 8000eac:	bf28      	it	cs
 8000eae:	2304      	movcs	r3, #4
 8000eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	2b06      	cmp	r3, #6
 8000eb8:	d902      	bls.n	8000ec0 <NVIC_EncodePriority+0x30>
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3b03      	subs	r3, #3
 8000ebe:	e000      	b.n	8000ec2 <NVIC_EncodePriority+0x32>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43da      	mvns	r2, r3
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee2:	43d9      	mvns	r1, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	4313      	orrs	r3, r2
         );
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3724      	adds	r7, #36	; 0x24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr

08000ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f04:	d301      	bcc.n	8000f0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f06:	2301      	movs	r3, #1
 8000f08:	e00f      	b.n	8000f2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <SysTick_Config+0x40>)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f12:	210f      	movs	r1, #15
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f18:	f7ff ff90 	bl	8000e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f1c:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <SysTick_Config+0x40>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f22:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <SysTick_Config+0x40>)
 8000f24:	2207      	movs	r2, #7
 8000f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	e000e010 	.word	0xe000e010

08000f38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff ff2d 	bl	8000da0 <__NVIC_SetPriorityGrouping>
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b086      	sub	sp, #24
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	4603      	mov	r3, r0
 8000f56:	60b9      	str	r1, [r7, #8]
 8000f58:	607a      	str	r2, [r7, #4]
 8000f5a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f5c:	f7ff ff44 	bl	8000de8 <__NVIC_GetPriorityGrouping>
 8000f60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	68b9      	ldr	r1, [r7, #8]
 8000f66:	6978      	ldr	r0, [r7, #20]
 8000f68:	f7ff ff92 	bl	8000e90 <NVIC_EncodePriority>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f72:	4611      	mov	r1, r2
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff ff61 	bl	8000e3c <__NVIC_SetPriority>
}
 8000f7a:	bf00      	nop
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	4603      	mov	r3, r0
 8000f8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff37 	bl	8000e04 <__NVIC_EnableIRQ>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff ffa4 	bl	8000ef4 <SysTick_Config>
 8000fac:	4603      	mov	r3, r0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d101      	bne.n	8000fca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e08e      	b.n	80010e8 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	4b47      	ldr	r3, [pc, #284]	; (80010f0 <HAL_DMA_Init+0x138>)
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d80f      	bhi.n	8000ff6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	461a      	mov	r2, r3
 8000fdc:	4b45      	ldr	r3, [pc, #276]	; (80010f4 <HAL_DMA_Init+0x13c>)
 8000fde:	4413      	add	r3, r2
 8000fe0:	4a45      	ldr	r2, [pc, #276]	; (80010f8 <HAL_DMA_Init+0x140>)
 8000fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe6:	091b      	lsrs	r3, r3, #4
 8000fe8:	009a      	lsls	r2, r3, #2
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a42      	ldr	r2, [pc, #264]	; (80010fc <HAL_DMA_Init+0x144>)
 8000ff2:	641a      	str	r2, [r3, #64]	; 0x40
 8000ff4:	e00e      	b.n	8001014 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	4b40      	ldr	r3, [pc, #256]	; (8001100 <HAL_DMA_Init+0x148>)
 8000ffe:	4413      	add	r3, r2
 8001000:	4a3d      	ldr	r2, [pc, #244]	; (80010f8 <HAL_DMA_Init+0x140>)
 8001002:	fba2 2303 	umull	r2, r3, r2, r3
 8001006:	091b      	lsrs	r3, r3, #4
 8001008:	009a      	lsls	r2, r3, #2
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a3c      	ldr	r2, [pc, #240]	; (8001104 <HAL_DMA_Init+0x14c>)
 8001012:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2202      	movs	r2, #2
 8001018:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	6812      	ldr	r2, [r2, #0]
 8001026:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800102a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800102e:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	6819      	ldr	r1, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	689a      	ldr	r2, [r3, #8]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	431a      	orrs	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	691b      	ldr	r3, [r3, #16]
 8001044:	431a      	orrs	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	431a      	orrs	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	431a      	orrs	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	431a      	orrs	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a1b      	ldr	r3, [r3, #32]
 800105c:	431a      	orrs	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	430a      	orrs	r2, r1
 8001064:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 fabc 	bl	80015e4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001074:	d102      	bne.n	800107c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685a      	ldr	r2, [r3, #4]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001084:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001088:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001092:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d010      	beq.n	80010be <HAL_DMA_Init+0x106>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	2b04      	cmp	r3, #4
 80010a2:	d80c      	bhi.n	80010be <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f000 fae5 	bl	8001674 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	e008      	b.n	80010d0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2201      	movs	r2, #1
 80010da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80010e6:	2300      	movs	r3, #0
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40020407 	.word	0x40020407
 80010f4:	bffdfff8 	.word	0xbffdfff8
 80010f8:	cccccccd 	.word	0xcccccccd
 80010fc:	40020000 	.word	0x40020000
 8001100:	bffdfbf8 	.word	0xbffdfbf8
 8001104:	40020400 	.word	0x40020400

08001108 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
 8001114:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001116:	2300      	movs	r3, #0
 8001118:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001120:	2b01      	cmp	r3, #1
 8001122:	d101      	bne.n	8001128 <HAL_DMA_Start_IT+0x20>
 8001124:	2302      	movs	r3, #2
 8001126:	e069      	b.n	80011fc <HAL_DMA_Start_IT+0xf4>
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2201      	movs	r2, #1
 800112c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b01      	cmp	r3, #1
 800113a:	d155      	bne.n	80011e8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2202      	movs	r2, #2
 8001140:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2200      	movs	r2, #0
 8001148:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f022 0201 	bic.w	r2, r2, #1
 8001158:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	68b9      	ldr	r1, [r7, #8]
 8001160:	68f8      	ldr	r0, [r7, #12]
 8001162:	f000 fa02 	bl	800156a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	2b00      	cmp	r3, #0
 800116c:	d008      	beq.n	8001180 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f042 020e 	orr.w	r2, r2, #14
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	e00f      	b.n	80011a0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f022 0204 	bic.w	r2, r2, #4
 800118e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f042 020a 	orr.w	r2, r2, #10
 800119e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d007      	beq.n	80011be <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011bc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d007      	beq.n	80011d6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011d4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f042 0201 	orr.w	r2, r2, #1
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	e008      	b.n	80011fa <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2280      	movs	r2, #128	; 0x80
 80011ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80011fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e04f      	b.n	80012b6 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b02      	cmp	r3, #2
 8001220:	d008      	beq.n	8001234 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2204      	movs	r2, #4
 8001226:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e040      	b.n	80012b6 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f022 020e 	bic.w	r2, r2, #14
 8001242:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800124e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001252:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f022 0201 	bic.w	r2, r2, #1
 8001262:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001268:	f003 021c 	and.w	r2, r3, #28
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001270:	2101      	movs	r1, #1
 8001272:	fa01 f202 	lsl.w	r2, r1, r2
 8001276:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001280:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001286:	2b00      	cmp	r3, #0
 8001288:	d00c      	beq.n	80012a4 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001294:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001298:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80012a2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2201      	movs	r2, #1
 80012a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr

080012c0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012c8:	2300      	movs	r3, #0
 80012ca:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d005      	beq.n	80012e4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2204      	movs	r2, #4
 80012dc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	73fb      	strb	r3, [r7, #15]
 80012e2:	e047      	b.n	8001374 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f022 020e 	bic.w	r2, r2, #14
 80012f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f022 0201 	bic.w	r2, r2, #1
 8001302:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800130e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001312:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001318:	f003 021c 	and.w	r2, r3, #28
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001320:	2101      	movs	r1, #1
 8001322:	fa01 f202 	lsl.w	r2, r1, r2
 8001326:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001330:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001336:	2b00      	cmp	r3, #0
 8001338:	d00c      	beq.n	8001354 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001344:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001348:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001352:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2201      	movs	r2, #1
 8001358:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001368:	2b00      	cmp	r3, #0
 800136a:	d003      	beq.n	8001374 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	4798      	blx	r3
    }
  }
  return status;
 8001374:	7bfb      	ldrb	r3, [r7, #15]
}
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139c:	f003 031c 	and.w	r3, r3, #28
 80013a0:	2204      	movs	r2, #4
 80013a2:	409a      	lsls	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4013      	ands	r3, r2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d027      	beq.n	80013fc <HAL_DMA_IRQHandler+0x7c>
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	f003 0304 	and.w	r3, r3, #4
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d022      	beq.n	80013fc <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0320 	and.w	r3, r3, #32
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d107      	bne.n	80013d4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f022 0204 	bic.w	r2, r2, #4
 80013d2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d8:	f003 021c 	and.w	r2, r3, #28
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e0:	2104      	movs	r1, #4
 80013e2:	fa01 f202 	lsl.w	r2, r1, r2
 80013e6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 8081 	beq.w	80014f4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80013fa:	e07b      	b.n	80014f4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001400:	f003 031c 	and.w	r3, r3, #28
 8001404:	2202      	movs	r2, #2
 8001406:	409a      	lsls	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4013      	ands	r3, r2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d03d      	beq.n	800148c <HAL_DMA_IRQHandler+0x10c>
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d038      	beq.n	800148c <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0320 	and.w	r3, r3, #32
 8001424:	2b00      	cmp	r3, #0
 8001426:	d10b      	bne.n	8001440 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f022 020a 	bic.w	r2, r2, #10
 8001436:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2201      	movs	r2, #1
 800143c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	461a      	mov	r2, r3
 8001446:	4b2e      	ldr	r3, [pc, #184]	; (8001500 <HAL_DMA_IRQHandler+0x180>)
 8001448:	429a      	cmp	r2, r3
 800144a:	d909      	bls.n	8001460 <HAL_DMA_IRQHandler+0xe0>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001450:	f003 031c 	and.w	r3, r3, #28
 8001454:	4a2b      	ldr	r2, [pc, #172]	; (8001504 <HAL_DMA_IRQHandler+0x184>)
 8001456:	2102      	movs	r1, #2
 8001458:	fa01 f303 	lsl.w	r3, r1, r3
 800145c:	6053      	str	r3, [r2, #4]
 800145e:	e008      	b.n	8001472 <HAL_DMA_IRQHandler+0xf2>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001464:	f003 031c 	and.w	r3, r3, #28
 8001468:	4a27      	ldr	r2, [pc, #156]	; (8001508 <HAL_DMA_IRQHandler+0x188>)
 800146a:	2102      	movs	r1, #2
 800146c:	fa01 f303 	lsl.w	r3, r1, r3
 8001470:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147e:	2b00      	cmp	r3, #0
 8001480:	d038      	beq.n	80014f4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800148a:	e033      	b.n	80014f4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001490:	f003 031c 	and.w	r3, r3, #28
 8001494:	2208      	movs	r2, #8
 8001496:	409a      	lsls	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4013      	ands	r3, r2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d02a      	beq.n	80014f6 <HAL_DMA_IRQHandler+0x176>
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	f003 0308 	and.w	r3, r3, #8
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d025      	beq.n	80014f6 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f022 020e 	bic.w	r2, r2, #14
 80014b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	f003 021c 	and.w	r2, r3, #28
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	2101      	movs	r1, #1
 80014c8:	fa01 f202 	lsl.w	r2, r1, r2
 80014cc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2201      	movs	r2, #1
 80014d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2201      	movs	r2, #1
 80014d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d004      	beq.n	80014f6 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80014f4:	bf00      	nop
 80014f6:	bf00      	nop
}
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40020080 	.word	0x40020080
 8001504:	40020400 	.word	0x40020400
 8001508:	40020000 	.word	0x40020000

0800150c <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001516:	2300      	movs	r3, #0
 8001518:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d103      	bne.n	8001528 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	72fb      	strb	r3, [r7, #11]
    return status;
 8001524:	7afb      	ldrb	r3, [r7, #11]
 8001526:	e01b      	b.n	8001560 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	f003 0310 	and.w	r3, r3, #16
 8001536:	2b00      	cmp	r3, #0
 8001538:	d00d      	beq.n	8001556 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d004      	beq.n	800154e <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	e003      	b.n	8001556 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001554:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	601a      	str	r2, [r3, #0]

  return status;
 800155e:	7afb      	ldrb	r3, [r7, #11]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr

0800156a <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800156a:	b480      	push	{r7}
 800156c:	b085      	sub	sp, #20
 800156e:	af00      	add	r7, sp, #0
 8001570:	60f8      	str	r0, [r7, #12]
 8001572:	60b9      	str	r1, [r7, #8]
 8001574:	607a      	str	r2, [r7, #4]
 8001576:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157c:	68fa      	ldr	r2, [r7, #12]
 800157e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001580:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001586:	2b00      	cmp	r3, #0
 8001588:	d004      	beq.n	8001594 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001592:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001598:	f003 021c 	and.w	r2, r3, #28
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a0:	2101      	movs	r1, #1
 80015a2:	fa01 f202 	lsl.w	r2, r1, r2
 80015a6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	2b10      	cmp	r3, #16
 80015b6:	d108      	bne.n	80015ca <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	68ba      	ldr	r2, [r7, #8]
 80015c6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80015c8:	e007      	b.n	80015da <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	60da      	str	r2, [r3, #12]
}
 80015da:	bf00      	nop
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr

080015e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	461a      	mov	r2, r3
 80015f2:	4b1c      	ldr	r3, [pc, #112]	; (8001664 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d813      	bhi.n	8001620 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fc:	089b      	lsrs	r3, r3, #2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001604:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	b2db      	uxtb	r3, r3
 8001612:	3b08      	subs	r3, #8
 8001614:	4a14      	ldr	r2, [pc, #80]	; (8001668 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8001616:	fba2 2303 	umull	r2, r3, r2, r3
 800161a:	091b      	lsrs	r3, r3, #4
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	e011      	b.n	8001644 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001624:	089b      	lsrs	r3, r3, #2
 8001626:	009a      	lsls	r2, r3, #2
 8001628:	4b10      	ldr	r3, [pc, #64]	; (800166c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800162a:	4413      	add	r3, r2
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	b2db      	uxtb	r3, r3
 8001636:	3b08      	subs	r3, #8
 8001638:	4a0b      	ldr	r2, [pc, #44]	; (8001668 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800163a:	fba2 2303 	umull	r2, r3, r2, r3
 800163e:	091b      	lsrs	r3, r3, #4
 8001640:	3307      	adds	r3, #7
 8001642:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a0a      	ldr	r2, [pc, #40]	; (8001670 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8001648:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f003 031f 	and.w	r3, r3, #31
 8001650:	2201      	movs	r2, #1
 8001652:	409a      	lsls	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001658:	bf00      	nop
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	40020407 	.word	0x40020407
 8001668:	cccccccd 	.word	0xcccccccd
 800166c:	4002081c 	.word	0x4002081c
 8001670:	40020880 	.word	0x40020880

08001674 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001684:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800168a:	4413      	add	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	461a      	mov	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a08      	ldr	r2, [pc, #32]	; (80016b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001698:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	3b01      	subs	r3, #1
 800169e:	f003 0303 	and.w	r3, r3, #3
 80016a2:	2201      	movs	r2, #1
 80016a4:	409a      	lsls	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80016aa:	bf00      	nop
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr
 80016b4:	1000823f 	.word	0x1000823f
 80016b8:	40020940 	.word	0x40020940

080016bc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016bc:	b480      	push	{r7}
 80016be:	b087      	sub	sp, #28
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ca:	e140      	b.n	800194e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	2101      	movs	r1, #1
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	fa01 f303 	lsl.w	r3, r1, r3
 80016d8:	4013      	ands	r3, r2
 80016da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 8132 	beq.w	8001948 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 0303 	and.w	r3, r3, #3
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d005      	beq.n	80016fc <HAL_GPIO_Init+0x40>
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 0303 	and.w	r3, r3, #3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d130      	bne.n	800175e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	2203      	movs	r2, #3
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	4013      	ands	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	68da      	ldr	r2, [r3, #12]
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	4313      	orrs	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001732:	2201      	movs	r2, #1
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43db      	mvns	r3, r3
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	4013      	ands	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	091b      	lsrs	r3, r3, #4
 8001748:	f003 0201 	and.w	r2, r3, #1
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	4313      	orrs	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f003 0303 	and.w	r3, r3, #3
 8001766:	2b03      	cmp	r3, #3
 8001768:	d017      	beq.n	800179a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	2203      	movs	r2, #3
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	4013      	ands	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	689a      	ldr	r2, [r3, #8]
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	4313      	orrs	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d123      	bne.n	80017ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	08da      	lsrs	r2, r3, #3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	3208      	adds	r2, #8
 80017ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	220f      	movs	r2, #15
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	43db      	mvns	r3, r3
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	4013      	ands	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	691a      	ldr	r2, [r3, #16]
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	f003 0307 	and.w	r3, r3, #7
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4313      	orrs	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	08da      	lsrs	r2, r3, #3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3208      	adds	r2, #8
 80017e8:	6939      	ldr	r1, [r7, #16]
 80017ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	2203      	movs	r2, #3
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43db      	mvns	r3, r3
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	4013      	ands	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f003 0203 	and.w	r2, r3, #3
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4313      	orrs	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800182a:	2b00      	cmp	r3, #0
 800182c:	f000 808c 	beq.w	8001948 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001830:	4a4e      	ldr	r2, [pc, #312]	; (800196c <HAL_GPIO_Init+0x2b0>)
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	089b      	lsrs	r3, r3, #2
 8001836:	3302      	adds	r3, #2
 8001838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800183c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	f003 0303 	and.w	r3, r3, #3
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	2207      	movs	r2, #7
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4013      	ands	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800185a:	d00d      	beq.n	8001878 <HAL_GPIO_Init+0x1bc>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a44      	ldr	r2, [pc, #272]	; (8001970 <HAL_GPIO_Init+0x2b4>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d007      	beq.n	8001874 <HAL_GPIO_Init+0x1b8>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a43      	ldr	r2, [pc, #268]	; (8001974 <HAL_GPIO_Init+0x2b8>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d101      	bne.n	8001870 <HAL_GPIO_Init+0x1b4>
 800186c:	2302      	movs	r3, #2
 800186e:	e004      	b.n	800187a <HAL_GPIO_Init+0x1be>
 8001870:	2307      	movs	r3, #7
 8001872:	e002      	b.n	800187a <HAL_GPIO_Init+0x1be>
 8001874:	2301      	movs	r3, #1
 8001876:	e000      	b.n	800187a <HAL_GPIO_Init+0x1be>
 8001878:	2300      	movs	r3, #0
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	f002 0203 	and.w	r2, r2, #3
 8001880:	0092      	lsls	r2, r2, #2
 8001882:	4093      	lsls	r3, r2
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4313      	orrs	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800188a:	4938      	ldr	r1, [pc, #224]	; (800196c <HAL_GPIO_Init+0x2b0>)
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	089b      	lsrs	r3, r3, #2
 8001890:	3302      	adds	r3, #2
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001898:	4b37      	ldr	r3, [pc, #220]	; (8001978 <HAL_GPIO_Init+0x2bc>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	43db      	mvns	r3, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4013      	ands	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d003      	beq.n	80018bc <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018bc:	4a2e      	ldr	r2, [pc, #184]	; (8001978 <HAL_GPIO_Init+0x2bc>)
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80018c2:	4b2d      	ldr	r3, [pc, #180]	; (8001978 <HAL_GPIO_Init+0x2bc>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	43db      	mvns	r3, r3
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4013      	ands	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018e6:	4a24      	ldr	r2, [pc, #144]	; (8001978 <HAL_GPIO_Init+0x2bc>)
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80018ec:	4b22      	ldr	r3, [pc, #136]	; (8001978 <HAL_GPIO_Init+0x2bc>)
 80018ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018f2:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	43db      	mvns	r3, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4013      	ands	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4313      	orrs	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001912:	4a19      	ldr	r2, [pc, #100]	; (8001978 <HAL_GPIO_Init+0x2bc>)
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800191a:	4b17      	ldr	r3, [pc, #92]	; (8001978 <HAL_GPIO_Init+0x2bc>)
 800191c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001920:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	43db      	mvns	r3, r3
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	4013      	ands	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d003      	beq.n	8001940 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	4313      	orrs	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001940:	4a0d      	ldr	r2, [pc, #52]	; (8001978 <HAL_GPIO_Init+0x2bc>)
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	3301      	adds	r3, #1
 800194c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	fa22 f303 	lsr.w	r3, r2, r3
 8001958:	2b00      	cmp	r3, #0
 800195a:	f47f aeb7 	bne.w	80016cc <HAL_GPIO_Init+0x10>
  }
}
 800195e:	bf00      	nop
 8001960:	bf00      	nop
 8001962:	371c      	adds	r7, #28
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	40010000 	.word	0x40010000
 8001970:	48000400 	.word	0x48000400
 8001974:	48000800 	.word	0x48000800
 8001978:	58000800 	.word	0x58000800

0800197c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	460b      	mov	r3, r1
 8001986:	807b      	strh	r3, [r7, #2]
 8001988:	4613      	mov	r3, r2
 800198a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800198c:	787b      	ldrb	r3, [r7, #1]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001992:	887a      	ldrh	r2, [r7, #2]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001998:	e002      	b.n	80019a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800199a:	887a      	ldrh	r2, [r7, #2]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr
	...

080019ac <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019b0:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a03      	ldr	r2, [pc, #12]	; (80019c4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80019b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ba:	6013      	str	r3, [r2, #0]
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr
 80019c4:	58000400 	.word	0x58000400

080019c8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80019cc:	4b03      	ldr	r3, [pc, #12]	; (80019dc <HAL_PWREx_GetVoltageRange+0x14>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr
 80019dc:	58000400 	.word	0x58000400

080019e0 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019f0:	d101      	bne.n	80019f6 <LL_PWR_IsEnabledBkUpAccess+0x16>
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr
 8001a00:	58000400 	.word	0x58000400

08001a04 <LL_RCC_HSE_EnableTcxo>:
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a16:	6013      	str	r3, [r2, #0]
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr

08001a20 <LL_RCC_HSE_DisableTcxo>:
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a32:	6013      	str	r3, [r2, #0]
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr

08001a3c <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a4e:	d101      	bne.n	8001a54 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001a50:	2301      	movs	r3, #1
 8001a52:	e000      	b.n	8001a56 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr

08001a5e <LL_RCC_HSE_Enable>:
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a70:	6013      	str	r3, [r2, #0]
}
 8001a72:	bf00      	nop
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr

08001a7a <LL_RCC_HSE_Disable>:
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a8c:	6013      	str	r3, [r2, #0]
}
 8001a8e:	bf00      	nop
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr

08001a96 <LL_RCC_HSE_IsReady>:
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001aa8:	d101      	bne.n	8001aae <LL_RCC_HSE_IsReady+0x18>
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e000      	b.n	8001ab0 <LL_RCC_HSE_IsReady+0x1a>
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr

08001ab8 <LL_RCC_HSI_Enable>:
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001abc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aca:	6013      	str	r3, [r2, #0]
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr

08001ad4 <LL_RCC_HSI_Disable>:
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ae2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ae6:	6013      	str	r3, [r2, #0]
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr

08001af0 <LL_RCC_HSI_IsReady>:
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b02:	d101      	bne.n	8001b08 <LL_RCC_HSI_IsReady+0x18>
 8001b04:	2301      	movs	r3, #1
 8001b06:	e000      	b.n	8001b0a <LL_RCC_HSI_IsReady+0x1a>
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr

08001b12 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001b1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	061b      	lsls	r3, r3, #24
 8001b28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	604b      	str	r3, [r1, #4]
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bc80      	pop	{r7}
 8001b38:	4770      	bx	lr

08001b3a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d101      	bne.n	8001b52 <LL_RCC_LSE_IsReady+0x18>
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e000      	b.n	8001b54 <LL_RCC_LSE_IsReady+0x1a>
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr

08001b5c <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr

08001b7c <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b8c:	f023 0301 	bic.w	r3, r3, #1
 8001b90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr

08001b9c <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d101      	bne.n	8001bb4 <LL_RCC_LSI_IsReady+0x18>
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e000      	b.n	8001bb6 <LL_RCC_LSI_IsReady+0x1a>
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr

08001bbe <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	6013      	str	r3, [r2, #0]
}
 8001bd2:	bf00      	nop
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr

08001bda <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001be8:	f023 0301 	bic.w	r3, r3, #1
 8001bec:	6013      	str	r3, [r2, #0]
}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr

08001bf6 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d101      	bne.n	8001c0c <LL_RCC_MSI_IsReady+0x16>
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e000      	b.n	8001c0e <LL_RCC_MSI_IsReady+0x18>
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr

08001c16 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001c16:	b480      	push	{r7}
 8001c18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0308 	and.w	r3, r3, #8
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d101      	bne.n	8001c2c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e000      	b.n	8001c2e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr

08001c36 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr

08001c4c <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c58:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr

08001c64 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	021b      	lsls	r3, r3, #8
 8001c7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	604b      	str	r3, [r1, #4]
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr

08001c8c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f023 0203 	bic.w	r2, r3, #3
 8001c9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	608b      	str	r3, [r1, #8]
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc80      	pop	{r7}
 8001cb0:	4770      	bx	lr

08001cb2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f003 030c 	and.w	r3, r3, #12
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr

08001cc8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	608b      	str	r3, [r1, #8]
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr

08001cee <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cfa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001cfe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bc80      	pop	{r7}
 8001d16:	4770      	bx	lr

08001d18 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d24:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d28:	f023 020f 	bic.w	r2, r3, #15
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	091b      	lsrs	r3, r3, #4
 8001d30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d34:	4313      	orrs	r3, r2
 8001d36:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr

08001d44 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	608b      	str	r3, [r1, #8]
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bc80      	pop	{r7}
 8001d68:	4770      	bx	lr

08001d6a <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	608b      	str	r3, [r1, #8]
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr

08001d90 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bc80      	pop	{r7}
 8001da4:	4770      	bx	lr

08001da6 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001da6:	b480      	push	{r7}
 8001da8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001db2:	011b      	lsls	r3, r3, #4
 8001db4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr

08001dc0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr

08001dd6 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr

08001dec <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dfe:	6013      	str	r3, [r2, #0]
}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr

08001e08 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e1a:	6013      	str	r3, [r2, #0]
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr

08001e24 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e36:	d101      	bne.n	8001e3c <LL_RCC_PLL_IsReady+0x18>
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e000      	b.n	8001e3e <LL_RCC_PLL_IsReady+0x1a>
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr

08001e46 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	0a1b      	lsrs	r3, r3, #8
 8001e52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr

08001e5e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr

08001e74 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr

08001e8a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	f003 0303 	and.w	r3, r3, #3
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr

08001ea0 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb2:	d101      	bne.n	8001eb8 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e000      	b.n	8001eba <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr

08001ec2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ed6:	d101      	bne.n	8001edc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e000      	b.n	8001ede <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr

08001ee6 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001efa:	d101      	bne.n	8001f00 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001efc:	2301      	movs	r3, #1
 8001efe:	e000      	b.n	8001f02 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr

08001f0a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f1c:	d101      	bne.n	8001f22 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr

08001f2c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001f3e:	d101      	bne.n	8001f44 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001f40:	2301      	movs	r3, #1
 8001f42:	e000      	b.n	8001f46 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bc80      	pop	{r7}
 8001f4c:	4770      	bx	lr
	...

08001f50 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b088      	sub	sp, #32
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e38b      	b.n	800267a <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f62:	f7ff fea6 	bl	8001cb2 <LL_RCC_GetSysClkSource>
 8001f66:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f68:	f7ff ff8f 	bl	8001e8a <LL_RCC_PLL_GetMainSource>
 8001f6c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0320 	and.w	r3, r3, #32
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 80c9 	beq.w	800210e <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d005      	beq.n	8001f8e <HAL_RCC_OscConfig+0x3e>
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	2b0c      	cmp	r3, #12
 8001f86:	d17b      	bne.n	8002080 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d178      	bne.n	8002080 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f8e:	f7ff fe32 	bl	8001bf6 <LL_RCC_MSI_IsReady>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d005      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x54>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e36a      	b.n	800267a <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d005      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x72>
 8001fb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fc0:	e006      	b.n	8001fd0 <HAL_RCC_OscConfig+0x80>
 8001fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fca:	091b      	lsrs	r3, r3, #4
 8001fcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d222      	bcs.n	800201a <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f000 fd6f 	bl	8002abc <RCC_SetFlashLatencyFromMSIRange>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e348      	b.n	800267a <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ff2:	f043 0308 	orr.w	r3, r3, #8
 8001ff6:	6013      	str	r3, [r2, #0]
 8001ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002006:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800200a:	4313      	orrs	r3, r2
 800200c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff fe26 	bl	8001c64 <LL_RCC_MSI_SetCalibTrimming>
 8002018:	e021      	b.n	800205e <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800201a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002024:	f043 0308 	orr.w	r3, r3, #8
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002038:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800203c:	4313      	orrs	r3, r2
 800203e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff fe0d 	bl	8001c64 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204e:	4618      	mov	r0, r3
 8002050:	f000 fd34 	bl	8002abc <RCC_SetFlashLatencyFromMSIRange>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e30d      	b.n	800267a <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800205e:	f000 fcf5 	bl	8002a4c <HAL_RCC_GetHCLKFreq>
 8002062:	4603      	mov	r3, r0
 8002064:	4aa1      	ldr	r2, [pc, #644]	; (80022ec <HAL_RCC_OscConfig+0x39c>)
 8002066:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002068:	4ba1      	ldr	r3, [pc, #644]	; (80022f0 <HAL_RCC_OscConfig+0x3a0>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f7fe fe41 	bl	8000cf4 <HAL_InitTick>
 8002072:	4603      	mov	r3, r0
 8002074:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002076:	7cfb      	ldrb	r3, [r7, #19]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d047      	beq.n	800210c <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 800207c:	7cfb      	ldrb	r3, [r7, #19]
 800207e:	e2fc      	b.n	800267a <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d02c      	beq.n	80020e2 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002088:	f7ff fd99 	bl	8001bbe <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800208c:	f7fe fe7e 	bl	8000d8c <HAL_GetTick>
 8002090:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002094:	f7fe fe7a 	bl	8000d8c <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e2e9      	b.n	800267a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 80020a6:	f7ff fda6 	bl	8001bf6 <LL_RCC_MSI_IsReady>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0f1      	beq.n	8002094 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020ba:	f043 0308 	orr.w	r3, r3, #8
 80020be:	6013      	str	r3, [r2, #0]
 80020c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020d2:	4313      	orrs	r3, r2
 80020d4:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff fdc2 	bl	8001c64 <LL_RCC_MSI_SetCalibTrimming>
 80020e0:	e015      	b.n	800210e <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020e2:	f7ff fd7a 	bl	8001bda <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020e6:	f7fe fe51 	bl	8000d8c <HAL_GetTick>
 80020ea:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020ee:	f7fe fe4d 	bl	8000d8c <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e2bc      	b.n	800267a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002100:	f7ff fd79 	bl	8001bf6 <LL_RCC_MSI_IsReady>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1f1      	bne.n	80020ee <HAL_RCC_OscConfig+0x19e>
 800210a:	e000      	b.n	800210e <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800210c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b00      	cmp	r3, #0
 8002118:	d05f      	beq.n	80021da <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	2b08      	cmp	r3, #8
 800211e:	d005      	beq.n	800212c <HAL_RCC_OscConfig+0x1dc>
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	2b0c      	cmp	r3, #12
 8002124:	d10d      	bne.n	8002142 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	2b03      	cmp	r3, #3
 800212a:	d10a      	bne.n	8002142 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800212c:	f7ff fcb3 	bl	8001a96 <LL_RCC_HSE_IsReady>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d050      	beq.n	80021d8 <HAL_RCC_OscConfig+0x288>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d14c      	bne.n	80021d8 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e29b      	b.n	800267a <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002154:	4313      	orrs	r3, r2
 8002156:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002160:	d102      	bne.n	8002168 <HAL_RCC_OscConfig+0x218>
 8002162:	f7ff fc7c 	bl	8001a5e <LL_RCC_HSE_Enable>
 8002166:	e00d      	b.n	8002184 <HAL_RCC_OscConfig+0x234>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002170:	d104      	bne.n	800217c <HAL_RCC_OscConfig+0x22c>
 8002172:	f7ff fc47 	bl	8001a04 <LL_RCC_HSE_EnableTcxo>
 8002176:	f7ff fc72 	bl	8001a5e <LL_RCC_HSE_Enable>
 800217a:	e003      	b.n	8002184 <HAL_RCC_OscConfig+0x234>
 800217c:	f7ff fc7d 	bl	8001a7a <LL_RCC_HSE_Disable>
 8002180:	f7ff fc4e 	bl	8001a20 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d012      	beq.n	80021b2 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218c:	f7fe fdfe 	bl	8000d8c <HAL_GetTick>
 8002190:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002194:	f7fe fdfa 	bl	8000d8c <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b64      	cmp	r3, #100	; 0x64
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e269      	b.n	800267a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 80021a6:	f7ff fc76 	bl	8001a96 <LL_RCC_HSE_IsReady>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0f1      	beq.n	8002194 <HAL_RCC_OscConfig+0x244>
 80021b0:	e013      	b.n	80021da <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b2:	f7fe fdeb 	bl	8000d8c <HAL_GetTick>
 80021b6:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021ba:	f7fe fde7 	bl	8000d8c <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b64      	cmp	r3, #100	; 0x64
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e256      	b.n	800267a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 80021cc:	f7ff fc63 	bl	8001a96 <LL_RCC_HSE_IsReady>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f1      	bne.n	80021ba <HAL_RCC_OscConfig+0x26a>
 80021d6:	e000      	b.n	80021da <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d8:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d04b      	beq.n	800227e <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	2b04      	cmp	r3, #4
 80021ea:	d005      	beq.n	80021f8 <HAL_RCC_OscConfig+0x2a8>
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	2b0c      	cmp	r3, #12
 80021f0:	d113      	bne.n	800221a <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d110      	bne.n	800221a <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021f8:	f7ff fc7a 	bl	8001af0 <LL_RCC_HSI_IsReady>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d005      	beq.n	800220e <HAL_RCC_OscConfig+0x2be>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e235      	b.n	800267a <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff fc7d 	bl	8001b12 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002218:	e031      	b.n	800227e <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d019      	beq.n	8002256 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002222:	f7ff fc49 	bl	8001ab8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002226:	f7fe fdb1 	bl	8000d8c <HAL_GetTick>
 800222a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800222e:	f7fe fdad 	bl	8000d8c <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e21c      	b.n	800267a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002240:	f7ff fc56 	bl	8001af0 <LL_RCC_HSI_IsReady>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0f1      	beq.n	800222e <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff fc5f 	bl	8001b12 <LL_RCC_HSI_SetCalibTrimming>
 8002254:	e013      	b.n	800227e <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002256:	f7ff fc3d 	bl	8001ad4 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225a:	f7fe fd97 	bl	8000d8c <HAL_GetTick>
 800225e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002262:	f7fe fd93 	bl	8000d8c <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e202      	b.n	800267a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002274:	f7ff fc3c 	bl	8001af0 <LL_RCC_HSI_IsReady>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f1      	bne.n	8002262 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	2b00      	cmp	r3, #0
 8002288:	d06f      	beq.n	800236a <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d057      	beq.n	8002342 <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 8002292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002296:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800229a:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69da      	ldr	r2, [r3, #28]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f003 0310 	and.w	r3, r3, #16
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d036      	beq.n	8002318 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d006      	beq.n	80022c2 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e1db      	b.n	800267a <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d018      	beq.n	80022fe <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 80022cc:	f7ff fc56 	bl	8001b7c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022d0:	f7fe fd5c 	bl	8000d8c <HAL_GetTick>
 80022d4:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80022d6:	e00d      	b.n	80022f4 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022d8:	f7fe fd58 	bl	8000d8c <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b11      	cmp	r3, #17
 80022e4:	d906      	bls.n	80022f4 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e1c7      	b.n	800267a <HAL_RCC_OscConfig+0x72a>
 80022ea:	bf00      	nop
 80022ec:	20000000 	.word	0x20000000
 80022f0:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 80022f4:	f7ff fc52 	bl	8001b9c <LL_RCC_LSI_IsReady>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1ec      	bne.n	80022d8 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80022fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002302:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002306:	f023 0210 	bic.w	r2, r3, #16
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002312:	4313      	orrs	r3, r2
 8002314:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002318:	f7ff fc20 	bl	8001b5c <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800231c:	f7fe fd36 	bl	8000d8c <HAL_GetTick>
 8002320:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002324:	f7fe fd32 	bl	8000d8c <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b11      	cmp	r3, #17
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e1a1      	b.n	800267a <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002336:	f7ff fc31 	bl	8001b9c <LL_RCC_LSI_IsReady>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0f1      	beq.n	8002324 <HAL_RCC_OscConfig+0x3d4>
 8002340:	e013      	b.n	800236a <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002342:	f7ff fc1b 	bl	8001b7c <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002346:	f7fe fd21 	bl	8000d8c <HAL_GetTick>
 800234a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800234e:	f7fe fd1d 	bl	8000d8c <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b11      	cmp	r3, #17
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e18c      	b.n	800267a <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002360:	f7ff fc1c 	bl	8001b9c <LL_RCC_LSI_IsReady>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f1      	bne.n	800234e <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 80d8 	beq.w	8002528 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002378:	f7ff fb32 	bl	80019e0 <LL_PWR_IsEnabledBkUpAccess>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d113      	bne.n	80023aa <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002382:	f7ff fb13 	bl	80019ac <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002386:	f7fe fd01 	bl	8000d8c <HAL_GetTick>
 800238a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800238e:	f7fe fcfd 	bl	8000d8c <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e16c      	b.n	800267a <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80023a0:	f7ff fb1e 	bl	80019e0 <LL_PWR_IsEnabledBkUpAccess>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0f1      	beq.n	800238e <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d07b      	beq.n	80024aa <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	2b85      	cmp	r3, #133	; 0x85
 80023b8:	d003      	beq.n	80023c2 <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	2b05      	cmp	r3, #5
 80023c0:	d109      	bne.n	80023d6 <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80023c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023ce:	f043 0304 	orr.w	r3, r3, #4
 80023d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d6:	f7fe fcd9 	bl	8000d8c <HAL_GetTick>
 80023da:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80023dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80023f0:	e00a      	b.n	8002408 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f2:	f7fe fccb 	bl	8000d8c <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002400:	4293      	cmp	r3, r2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e138      	b.n	800267a <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002408:	f7ff fb97 	bl	8001b3a <LL_RCC_LSE_IsReady>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0ef      	beq.n	80023f2 <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	2b81      	cmp	r3, #129	; 0x81
 8002418:	d003      	beq.n	8002422 <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	2b85      	cmp	r3, #133	; 0x85
 8002420:	d121      	bne.n	8002466 <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002422:	f7fe fcb3 	bl	8000d8c <HAL_GetTick>
 8002426:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800242c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002430:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002438:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800243c:	e00a      	b.n	8002454 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243e:	f7fe fca5 	bl	8000d8c <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	f241 3288 	movw	r2, #5000	; 0x1388
 800244c:	4293      	cmp	r3, r2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e112      	b.n	800267a <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002454:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002460:	2b00      	cmp	r3, #0
 8002462:	d0ec      	beq.n	800243e <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002464:	e060      	b.n	8002528 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002466:	f7fe fc91 	bl	8000d8c <HAL_GetTick>
 800246a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800246c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002474:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002478:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800247c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002480:	e00a      	b.n	8002498 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002482:	f7fe fc83 	bl	8000d8c <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002490:	4293      	cmp	r3, r2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e0f0      	b.n	800267a <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800249c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1ec      	bne.n	8002482 <HAL_RCC_OscConfig+0x532>
 80024a8:	e03e      	b.n	8002528 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024aa:	f7fe fc6f 	bl	8000d8c <HAL_GetTick>
 80024ae:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80024b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80024c4:	e00a      	b.n	80024dc <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c6:	f7fe fc61 	bl	8000d8c <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e0ce      	b.n	800267a <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80024dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1ec      	bne.n	80024c6 <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ec:	f7fe fc4e 	bl	8000d8c <HAL_GetTick>
 80024f0:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80024f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024fe:	f023 0301 	bic.w	r3, r3, #1
 8002502:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002506:	e00a      	b.n	800251e <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002508:	f7fe fc40 	bl	8000d8c <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	f241 3288 	movw	r2, #5000	; 0x1388
 8002516:	4293      	cmp	r3, r2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e0ad      	b.n	800267a <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 800251e:	f7ff fb0c 	bl	8001b3a <LL_RCC_LSE_IsReady>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1ef      	bne.n	8002508 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 80a3 	beq.w	8002678 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	2b0c      	cmp	r3, #12
 8002536:	d076      	beq.n	8002626 <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253c:	2b02      	cmp	r3, #2
 800253e:	d14b      	bne.n	80025d8 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002540:	f7ff fc62 	bl	8001e08 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002544:	f7fe fc22 	bl	8000d8c <HAL_GetTick>
 8002548:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800254c:	f7fe fc1e 	bl	8000d8c <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b0a      	cmp	r3, #10
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e08d      	b.n	800267a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 800255e:	f7ff fc61 	bl	8001e24 <LL_RCC_PLL_IsReady>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1f1      	bne.n	800254c <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800256c:	68da      	ldr	r2, [r3, #12]
 800256e:	4b45      	ldr	r3, [pc, #276]	; (8002684 <HAL_RCC_OscConfig+0x734>)
 8002570:	4013      	ands	r3, r2
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800257a:	4311      	orrs	r1, r2
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002580:	0212      	lsls	r2, r2, #8
 8002582:	4311      	orrs	r1, r2
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002588:	4311      	orrs	r1, r2
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800258e:	4311      	orrs	r1, r2
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002594:	430a      	orrs	r2, r1
 8002596:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800259a:	4313      	orrs	r3, r2
 800259c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800259e:	f7ff fc25 	bl	8001dec <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b2:	f7fe fbeb 	bl	8000d8c <HAL_GetTick>
 80025b6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80025b8:	e008      	b.n	80025cc <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ba:	f7fe fbe7 	bl	8000d8c <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b0a      	cmp	r3, #10
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e056      	b.n	800267a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 80025cc:	f7ff fc2a 	bl	8001e24 <LL_RCC_PLL_IsReady>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0f1      	beq.n	80025ba <HAL_RCC_OscConfig+0x66a>
 80025d6:	e04f      	b.n	8002678 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d8:	f7ff fc16 	bl	8001e08 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80025dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025e6:	f023 0303 	bic.w	r3, r3, #3
 80025ea:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 80025ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025f6:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80025fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025fe:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002600:	f7fe fbc4 	bl	8000d8c <HAL_GetTick>
 8002604:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002608:	f7fe fbc0 	bl	8000d8c <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b0a      	cmp	r3, #10
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e02f      	b.n	800267a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 800261a:	f7ff fc03 	bl	8001e24 <LL_RCC_PLL_IsReady>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1f1      	bne.n	8002608 <HAL_RCC_OscConfig+0x6b8>
 8002624:	e028      	b.n	8002678 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262a:	2b01      	cmp	r3, #1
 800262c:	d101      	bne.n	8002632 <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e023      	b.n	800267a <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	f003 0203 	and.w	r2, r3, #3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002644:	429a      	cmp	r2, r3
 8002646:	d115      	bne.n	8002674 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002652:	429a      	cmp	r2, r3
 8002654:	d10e      	bne.n	8002674 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002660:	021b      	lsls	r3, r3, #8
 8002662:	429a      	cmp	r2, r3
 8002664:	d106      	bne.n	8002674 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002670:	429a      	cmp	r2, r3
 8002672:	d001      	beq.n	8002678 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e000      	b.n	800267a <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3720      	adds	r7, #32
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	11c1808c 	.word	0x11c1808c

08002688 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e12c      	b.n	80028f6 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800269c:	4b98      	ldr	r3, [pc, #608]	; (8002900 <HAL_RCC_ClockConfig+0x278>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d91b      	bls.n	80026e2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026aa:	4b95      	ldr	r3, [pc, #596]	; (8002900 <HAL_RCC_ClockConfig+0x278>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f023 0207 	bic.w	r2, r3, #7
 80026b2:	4993      	ldr	r1, [pc, #588]	; (8002900 <HAL_RCC_ClockConfig+0x278>)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026ba:	f7fe fb67 	bl	8000d8c <HAL_GetTick>
 80026be:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80026c2:	f7fe fb63 	bl	8000d8c <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e110      	b.n	80028f6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d4:	4b8a      	ldr	r3, [pc, #552]	; (8002900 <HAL_RCC_ClockConfig+0x278>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d1ef      	bne.n	80026c2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d016      	beq.n	800271c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff fae8 	bl	8001cc8 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80026f8:	f7fe fb48 	bl	8000d8c <HAL_GetTick>
 80026fc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002700:	f7fe fb44 	bl	8000d8c <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e0f1      	b.n	80028f6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002712:	f7ff fbc5 	bl	8001ea0 <LL_RCC_IsActiveFlag_HPRE>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0f1      	beq.n	8002700 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0320 	and.w	r3, r3, #32
 8002724:	2b00      	cmp	r3, #0
 8002726:	d016      	beq.n	8002756 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff fade 	bl	8001cee <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002732:	f7fe fb2b 	bl	8000d8c <HAL_GetTick>
 8002736:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002738:	e008      	b.n	800274c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800273a:	f7fe fb27 	bl	8000d8c <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d901      	bls.n	800274c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e0d4      	b.n	80028f6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800274c:	f7ff fbb9 	bl	8001ec2 <LL_RCC_IsActiveFlag_C2HPRE>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0f1      	beq.n	800273a <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800275e:	2b00      	cmp	r3, #0
 8002760:	d016      	beq.n	8002790 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff fad6 	bl	8001d18 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800276c:	f7fe fb0e 	bl	8000d8c <HAL_GetTick>
 8002770:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002772:	e008      	b.n	8002786 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002774:	f7fe fb0a 	bl	8000d8c <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e0b7      	b.n	80028f6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002786:	f7ff fbae 	bl	8001ee6 <LL_RCC_IsActiveFlag_SHDHPRE>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0f1      	beq.n	8002774 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	d016      	beq.n	80027ca <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff facf 	bl	8001d44 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80027a6:	f7fe faf1 	bl	8000d8c <HAL_GetTick>
 80027aa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80027ae:	f7fe faed 	bl	8000d8c <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e09a      	b.n	80028f6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80027c0:	f7ff fba3 	bl	8001f0a <LL_RCC_IsActiveFlag_PPRE1>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d0f1      	beq.n	80027ae <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0308 	and.w	r3, r3, #8
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d017      	beq.n	8002806 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff fac4 	bl	8001d6a <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80027e2:	f7fe fad3 	bl	8000d8c <HAL_GetTick>
 80027e6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80027ea:	f7fe facf 	bl	8000d8c <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e07c      	b.n	80028f6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80027fc:	f7ff fb96 	bl	8001f2c <LL_RCC_IsActiveFlag_PPRE2>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0f1      	beq.n	80027ea <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b00      	cmp	r3, #0
 8002810:	d043      	beq.n	800289a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	2b02      	cmp	r3, #2
 8002818:	d106      	bne.n	8002828 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800281a:	f7ff f93c 	bl	8001a96 <LL_RCC_HSE_IsReady>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d11e      	bne.n	8002862 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e066      	b.n	80028f6 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2b03      	cmp	r3, #3
 800282e:	d106      	bne.n	800283e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002830:	f7ff faf8 	bl	8001e24 <LL_RCC_PLL_IsReady>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d113      	bne.n	8002862 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e05b      	b.n	80028f6 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d106      	bne.n	8002854 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002846:	f7ff f9d6 	bl	8001bf6 <LL_RCC_MSI_IsReady>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d108      	bne.n	8002862 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e050      	b.n	80028f6 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002854:	f7ff f94c 	bl	8001af0 <LL_RCC_HSI_IsReady>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e049      	b.n	80028f6 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff fa10 	bl	8001c8c <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800286c:	f7fe fa8e 	bl	8000d8c <HAL_GetTick>
 8002870:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002872:	e00a      	b.n	800288a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002874:	f7fe fa8a 	bl	8000d8c <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002882:	4293      	cmp	r3, r2
 8002884:	d901      	bls.n	800288a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e035      	b.n	80028f6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800288a:	f7ff fa12 	bl	8001cb2 <LL_RCC_GetSysClkSource>
 800288e:	4602      	mov	r2, r0
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	429a      	cmp	r2, r3
 8002898:	d1ec      	bne.n	8002874 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800289a:	4b19      	ldr	r3, [pc, #100]	; (8002900 <HAL_RCC_ClockConfig+0x278>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d21b      	bcs.n	80028e0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a8:	4b15      	ldr	r3, [pc, #84]	; (8002900 <HAL_RCC_ClockConfig+0x278>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f023 0207 	bic.w	r2, r3, #7
 80028b0:	4913      	ldr	r1, [pc, #76]	; (8002900 <HAL_RCC_ClockConfig+0x278>)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028b8:	f7fe fa68 	bl	8000d8c <HAL_GetTick>
 80028bc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80028c0:	f7fe fa64 	bl	8000d8c <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e011      	b.n	80028f6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d2:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <HAL_RCC_ClockConfig+0x278>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d1ef      	bne.n	80028c0 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80028e0:	f000 f8b4 	bl	8002a4c <HAL_RCC_GetHCLKFreq>
 80028e4:	4603      	mov	r3, r0
 80028e6:	4a07      	ldr	r2, [pc, #28]	; (8002904 <HAL_RCC_ClockConfig+0x27c>)
 80028e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80028ea:	4b07      	ldr	r3, [pc, #28]	; (8002908 <HAL_RCC_ClockConfig+0x280>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fe fa00 	bl	8000cf4 <HAL_InitTick>
 80028f4:	4603      	mov	r3, r0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	58004000 	.word	0x58004000
 8002904:	20000000 	.word	0x20000000
 8002908:	20000004 	.word	0x20000004

0800290c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800290c:	b590      	push	{r4, r7, lr}
 800290e:	b087      	sub	sp, #28
 8002910:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002916:	2300      	movs	r3, #0
 8002918:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800291a:	f7ff f9ca 	bl	8001cb2 <LL_RCC_GetSysClkSource>
 800291e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002920:	f7ff fab3 	bl	8001e8a <LL_RCC_PLL_GetMainSource>
 8002924:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d005      	beq.n	8002938 <HAL_RCC_GetSysClockFreq+0x2c>
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	2b0c      	cmp	r3, #12
 8002930:	d139      	bne.n	80029a6 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d136      	bne.n	80029a6 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002938:	f7ff f96d 	bl	8001c16 <LL_RCC_MSI_IsEnabledRangeSelect>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d115      	bne.n	800296e <HAL_RCC_GetSysClockFreq+0x62>
 8002942:	f7ff f968 	bl	8001c16 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002946:	4603      	mov	r3, r0
 8002948:	2b01      	cmp	r3, #1
 800294a:	d106      	bne.n	800295a <HAL_RCC_GetSysClockFreq+0x4e>
 800294c:	f7ff f973 	bl	8001c36 <LL_RCC_MSI_GetRange>
 8002950:	4603      	mov	r3, r0
 8002952:	0a1b      	lsrs	r3, r3, #8
 8002954:	f003 030f 	and.w	r3, r3, #15
 8002958:	e005      	b.n	8002966 <HAL_RCC_GetSysClockFreq+0x5a>
 800295a:	f7ff f977 	bl	8001c4c <LL_RCC_MSI_GetRangeAfterStandby>
 800295e:	4603      	mov	r3, r0
 8002960:	0a1b      	lsrs	r3, r3, #8
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	4a36      	ldr	r2, [pc, #216]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x134>)
 8002968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800296c:	e014      	b.n	8002998 <HAL_RCC_GetSysClockFreq+0x8c>
 800296e:	f7ff f952 	bl	8001c16 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002972:	4603      	mov	r3, r0
 8002974:	2b01      	cmp	r3, #1
 8002976:	d106      	bne.n	8002986 <HAL_RCC_GetSysClockFreq+0x7a>
 8002978:	f7ff f95d 	bl	8001c36 <LL_RCC_MSI_GetRange>
 800297c:	4603      	mov	r3, r0
 800297e:	091b      	lsrs	r3, r3, #4
 8002980:	f003 030f 	and.w	r3, r3, #15
 8002984:	e005      	b.n	8002992 <HAL_RCC_GetSysClockFreq+0x86>
 8002986:	f7ff f961 	bl	8001c4c <LL_RCC_MSI_GetRangeAfterStandby>
 800298a:	4603      	mov	r3, r0
 800298c:	091b      	lsrs	r3, r3, #4
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	4a2b      	ldr	r2, [pc, #172]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x134>)
 8002994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002998:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d115      	bne.n	80029cc <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80029a4:	e012      	b.n	80029cc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2b04      	cmp	r3, #4
 80029aa:	d102      	bne.n	80029b2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029ac:	4b25      	ldr	r3, [pc, #148]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x138>)
 80029ae:	617b      	str	r3, [r7, #20]
 80029b0:	e00c      	b.n	80029cc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2b08      	cmp	r3, #8
 80029b6:	d109      	bne.n	80029cc <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80029b8:	f7ff f840 	bl	8001a3c <LL_RCC_HSE_IsEnabledDiv2>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d102      	bne.n	80029c8 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80029c2:	4b20      	ldr	r3, [pc, #128]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x138>)
 80029c4:	617b      	str	r3, [r7, #20]
 80029c6:	e001      	b.n	80029cc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80029c8:	4b1f      	ldr	r3, [pc, #124]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x13c>)
 80029ca:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029cc:	f7ff f971 	bl	8001cb2 <LL_RCC_GetSysClkSource>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b0c      	cmp	r3, #12
 80029d4:	d12f      	bne.n	8002a36 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80029d6:	f7ff fa58 	bl	8001e8a <LL_RCC_PLL_GetMainSource>
 80029da:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d003      	beq.n	80029ea <HAL_RCC_GetSysClockFreq+0xde>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2b03      	cmp	r3, #3
 80029e6:	d003      	beq.n	80029f0 <HAL_RCC_GetSysClockFreq+0xe4>
 80029e8:	e00d      	b.n	8002a06 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80029ea:	4b16      	ldr	r3, [pc, #88]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x138>)
 80029ec:	60fb      	str	r3, [r7, #12]
        break;
 80029ee:	e00d      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80029f0:	f7ff f824 	bl	8001a3c <LL_RCC_HSE_IsEnabledDiv2>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d102      	bne.n	8002a00 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80029fa:	4b12      	ldr	r3, [pc, #72]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x138>)
 80029fc:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80029fe:	e005      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002a00:	4b11      	ldr	r3, [pc, #68]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002a02:	60fb      	str	r3, [r7, #12]
        break;
 8002a04:	e002      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	60fb      	str	r3, [r7, #12]
        break;
 8002a0a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002a0c:	f7ff fa1b 	bl	8001e46 <LL_RCC_PLL_GetN>
 8002a10:	4602      	mov	r2, r0
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	fb03 f402 	mul.w	r4, r3, r2
 8002a18:	f7ff fa2c 	bl	8001e74 <LL_RCC_PLL_GetDivider>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	091b      	lsrs	r3, r3, #4
 8002a20:	3301      	adds	r3, #1
 8002a22:	fbb4 f4f3 	udiv	r4, r4, r3
 8002a26:	f7ff fa1a 	bl	8001e5e <LL_RCC_PLL_GetR>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	0f5b      	lsrs	r3, r3, #29
 8002a2e:	3301      	adds	r3, #1
 8002a30:	fbb4 f3f3 	udiv	r3, r4, r3
 8002a34:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002a36:	697b      	ldr	r3, [r7, #20]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	371c      	adds	r7, #28
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd90      	pop	{r4, r7, pc}
 8002a40:	08004ba4 	.word	0x08004ba4
 8002a44:	00f42400 	.word	0x00f42400
 8002a48:	01e84800 	.word	0x01e84800

08002a4c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a4c:	b598      	push	{r3, r4, r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002a50:	f7ff ff5c 	bl	800290c <HAL_RCC_GetSysClockFreq>
 8002a54:	4604      	mov	r4, r0
 8002a56:	f7ff f99b 	bl	8001d90 <LL_RCC_GetAHBPrescaler>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	091b      	lsrs	r3, r3, #4
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	4a03      	ldr	r2, [pc, #12]	; (8002a70 <HAL_RCC_GetHCLKFreq+0x24>)
 8002a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a68:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	bd98      	pop	{r3, r4, r7, pc}
 8002a70:	08004b44 	.word	0x08004b44

08002a74 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a74:	b598      	push	{r3, r4, r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002a78:	f7ff ffe8 	bl	8002a4c <HAL_RCC_GetHCLKFreq>
 8002a7c:	4604      	mov	r4, r0
 8002a7e:	f7ff f99f 	bl	8001dc0 <LL_RCC_GetAPB1Prescaler>
 8002a82:	4603      	mov	r3, r0
 8002a84:	0a1b      	lsrs	r3, r3, #8
 8002a86:	4a03      	ldr	r2, [pc, #12]	; (8002a94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a8c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	bd98      	pop	{r3, r4, r7, pc}
 8002a94:	08004b84 	.word	0x08004b84

08002a98 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a98:	b598      	push	{r3, r4, r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002a9c:	f7ff ffd6 	bl	8002a4c <HAL_RCC_GetHCLKFreq>
 8002aa0:	4604      	mov	r4, r0
 8002aa2:	f7ff f998 	bl	8001dd6 <LL_RCC_GetAPB2Prescaler>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	0adb      	lsrs	r3, r3, #11
 8002aaa:	4a03      	ldr	r2, [pc, #12]	; (8002ab8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	bd98      	pop	{r3, r4, r7, pc}
 8002ab8:	08004b84 	.word	0x08004b84

08002abc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002abc:	b590      	push	{r4, r7, lr}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	091b      	lsrs	r3, r3, #4
 8002ac8:	f003 030f 	and.w	r3, r3, #15
 8002acc:	4a10      	ldr	r2, [pc, #64]	; (8002b10 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8002ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ad2:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002ad4:	f7ff f967 	bl	8001da6 <LL_RCC_GetAHB3Prescaler>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	091b      	lsrs	r3, r3, #4
 8002adc:	f003 030f 	and.w	r3, r3, #15
 8002ae0:	4a0c      	ldr	r2, [pc, #48]	; (8002b14 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aec:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	4a09      	ldr	r2, [pc, #36]	; (8002b18 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002af2:	fba2 2303 	umull	r2, r3, r2, r3
 8002af6:	0c9c      	lsrs	r4, r3, #18
 8002af8:	f7fe ff66 	bl	80019c8 <HAL_PWREx_GetVoltageRange>
 8002afc:	4603      	mov	r3, r0
 8002afe:	4619      	mov	r1, r3
 8002b00:	4620      	mov	r0, r4
 8002b02:	f000 f80b 	bl	8002b1c <RCC_SetFlashLatency>
 8002b06:	4603      	mov	r3, r0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd90      	pop	{r4, r7, pc}
 8002b10:	08004ba4 	.word	0x08004ba4
 8002b14:	08004b44 	.word	0x08004b44
 8002b18:	431bde83 	.word	0x431bde83

08002b1c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b08e      	sub	sp, #56	; 0x38
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002b26:	4a3a      	ldr	r2, [pc, #232]	; (8002c10 <RCC_SetFlashLatency+0xf4>)
 8002b28:	f107 0320 	add.w	r3, r7, #32
 8002b2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b30:	6018      	str	r0, [r3, #0]
 8002b32:	3304      	adds	r3, #4
 8002b34:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002b36:	4a37      	ldr	r2, [pc, #220]	; (8002c14 <RCC_SetFlashLatency+0xf8>)
 8002b38:	f107 0318 	add.w	r3, r7, #24
 8002b3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b40:	6018      	str	r0, [r3, #0]
 8002b42:	3304      	adds	r3, #4
 8002b44:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002b46:	4a34      	ldr	r2, [pc, #208]	; (8002c18 <RCC_SetFlashLatency+0xfc>)
 8002b48:	f107 030c 	add.w	r3, r7, #12
 8002b4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002b52:	2300      	movs	r3, #0
 8002b54:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b5c:	d11b      	bne.n	8002b96 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002b5e:	2300      	movs	r3, #0
 8002b60:	633b      	str	r3, [r7, #48]	; 0x30
 8002b62:	e014      	b.n	8002b8e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	3338      	adds	r3, #56	; 0x38
 8002b6a:	443b      	add	r3, r7
 8002b6c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002b70:	461a      	mov	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d807      	bhi.n	8002b88 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	3338      	adds	r3, #56	; 0x38
 8002b7e:	443b      	add	r3, r7
 8002b80:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002b84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002b86:	e021      	b.n	8002bcc <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	633b      	str	r3, [r7, #48]	; 0x30
 8002b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d9e7      	bls.n	8002b64 <RCC_SetFlashLatency+0x48>
 8002b94:	e01a      	b.n	8002bcc <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002b96:	2300      	movs	r3, #0
 8002b98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b9a:	e014      	b.n	8002bc6 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	3338      	adds	r3, #56	; 0x38
 8002ba2:	443b      	add	r3, r7
 8002ba4:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d807      	bhi.n	8002bc0 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	3338      	adds	r3, #56	; 0x38
 8002bb6:	443b      	add	r3, r7
 8002bb8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002bbc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002bbe:	e005      	b.n	8002bcc <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d9e7      	bls.n	8002b9c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002bcc:	4b13      	ldr	r3, [pc, #76]	; (8002c1c <RCC_SetFlashLatency+0x100>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f023 0207 	bic.w	r2, r3, #7
 8002bd4:	4911      	ldr	r1, [pc, #68]	; (8002c1c <RCC_SetFlashLatency+0x100>)
 8002bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002bdc:	f7fe f8d6 	bl	8000d8c <HAL_GetTick>
 8002be0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002be2:	e008      	b.n	8002bf6 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002be4:	f7fe f8d2 	bl	8000d8c <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e007      	b.n	8002c06 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002bf6:	4b09      	ldr	r3, [pc, #36]	; (8002c1c <RCC_SetFlashLatency+0x100>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d1ef      	bne.n	8002be4 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3738      	adds	r7, #56	; 0x38
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	08004b28 	.word	0x08004b28
 8002c14:	08004b30 	.word	0x08004b30
 8002c18:	08004b38 	.word	0x08004b38
 8002c1c:	58004000 	.word	0x58004000

08002c20 <LL_RCC_LSE_IsReady>:
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d101      	bne.n	8002c38 <LL_RCC_LSE_IsReady+0x18>
 8002c34:	2301      	movs	r3, #1
 8002c36:	e000      	b.n	8002c3a <LL_RCC_LSE_IsReady+0x1a>
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bc80      	pop	{r7}
 8002c40:	4770      	bx	lr

08002c42 <LL_RCC_SetUSARTClockSource>:
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c4e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	0c1b      	lsrs	r3, r3, #16
 8002c56:	43db      	mvns	r3, r3
 8002c58:	401a      	ands	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c62:	4313      	orrs	r3, r2
 8002c64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bc80      	pop	{r7}
 8002c70:	4770      	bx	lr

08002c72 <LL_RCC_SetI2SClockSource>:
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bc80      	pop	{r7}
 8002c9a:	4770      	bx	lr

08002c9c <LL_RCC_SetLPUARTClockSource>:
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002cb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr

08002cc6 <LL_RCC_SetI2CClockSource>:
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	091b      	lsrs	r3, r3, #4
 8002cda:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	401a      	ands	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	011b      	lsls	r3, r3, #4
 8002ce6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002cea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr

08002cfe <LL_RCC_SetLPTIMClockSource>:
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d0a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	0c1b      	lsrs	r3, r3, #16
 8002d12:	041b      	lsls	r3, r3, #16
 8002d14:	43db      	mvns	r3, r3
 8002d16:	401a      	ands	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	041b      	lsls	r3, r3, #16
 8002d1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d20:	4313      	orrs	r3, r2
 8002d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr

08002d30 <LL_RCC_SetRNGClockSource>:
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d40:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002d44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bc80      	pop	{r7}
 8002d58:	4770      	bx	lr

08002d5a <LL_RCC_SetADCClockSource>:
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d6a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr

08002d84 <LL_RCC_SetRTCClockSource>:
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bc80      	pop	{r7}
 8002dac:	4770      	bx	lr

08002dae <LL_RCC_GetRTCClockSource>:
{
 8002dae:	b480      	push	{r7}
 8002db0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bc80      	pop	{r7}
 8002dc4:	4770      	bx	lr

08002dc6 <LL_RCC_ForceBackupDomainReset>:
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002dde:	bf00      	nop
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bc80      	pop	{r7}
 8002de4:	4770      	bx	lr

08002de6 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002de6:	b480      	push	{r7}
 8002de8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002dea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002dfe:	bf00      	nop
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bc80      	pop	{r7}
 8002e04:	4770      	bx	lr
	...

08002e08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002e10:	2300      	movs	r3, #0
 8002e12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002e14:	2300      	movs	r3, #0
 8002e16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002e18:	2300      	movs	r3, #0
 8002e1a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d058      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002e28:	f7fe fdc0 	bl	80019ac <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e2c:	f7fd ffae 	bl	8000d8c <HAL_GetTick>
 8002e30:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002e32:	e009      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e34:	f7fd ffaa 	bl	8000d8c <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d902      	bls.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	74fb      	strb	r3, [r7, #19]
        break;
 8002e46:	e006      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002e48:	4b7b      	ldr	r3, [pc, #492]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e54:	d1ee      	bne.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002e56:	7cfb      	ldrb	r3, [r7, #19]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d13c      	bne.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002e5c:	f7ff ffa7 	bl	8002dae <LL_RCC_GetRTCClockSource>
 8002e60:	4602      	mov	r2, r0
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d00f      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e76:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e78:	f7ff ffa5 	bl	8002dc6 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e7c:	f7ff ffb3 	bl	8002de6 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d014      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e94:	f7fd ff7a 	bl	8000d8c <HAL_GetTick>
 8002e98:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002e9a:	e00b      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e9c:	f7fd ff76 	bl	8000d8c <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d902      	bls.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	74fb      	strb	r3, [r7, #19]
            break;
 8002eb2:	e004      	b.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002eb4:	f7ff feb4 	bl	8002c20 <LL_RCC_LSE_IsReady>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d1ee      	bne.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002ebe:	7cfb      	ldrb	r3, [r7, #19]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d105      	bne.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff ff5b 	bl	8002d84 <LL_RCC_SetRTCClockSource>
 8002ece:	e004      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ed0:	7cfb      	ldrb	r3, [r7, #19]
 8002ed2:	74bb      	strb	r3, [r7, #18]
 8002ed4:	e001      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ed6:	7cfb      	ldrb	r3, [r7, #19]
 8002ed8:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d004      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff fea9 	bl	8002c42 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d004      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff fe9e 	bl	8002c42 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0320 	and.w	r3, r3, #32
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d004      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff fec0 	bl	8002c9c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d004      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff fee6 	bl	8002cfe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d004      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7ff fedb 	bl	8002cfe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d004      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff fed0 	bl	8002cfe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d004      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff fea9 	bl	8002cc6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d004      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff fe9e 	bl	8002cc6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d004      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff fe93 	bl	8002cc6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0310 	and.w	r3, r3, #16
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d011      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff fe5e 	bl	8002c72 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fbe:	d107      	bne.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d010      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff fea5 	bl	8002d30 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d107      	bne.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ff8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ffc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d011      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300e:	4618      	mov	r0, r3
 8003010:	f7ff fea3 	bl	8002d5a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003018:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800301c:	d107      	bne.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800301e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800302c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800302e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003030:	4618      	mov	r0, r3
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	58000400 	.word	0x58000400

0800303c <LL_RCC_GetUSARTClockSource>:
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8003044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003048:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	401a      	ands	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	041b      	lsls	r3, r3, #16
 8003054:	4313      	orrs	r3, r2
}
 8003056:	4618      	mov	r0, r3
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	bc80      	pop	{r7}
 800305e:	4770      	bx	lr

08003060 <LL_RCC_GetLPUARTClockSource>:
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800306c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4013      	ands	r3, r2
}
 8003074:	4618      	mov	r0, r3
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	bc80      	pop	{r7}
 800307c:	4770      	bx	lr

0800307e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b082      	sub	sp, #8
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e042      	b.n	8003116 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003096:	2b00      	cmp	r3, #0
 8003098:	d106      	bne.n	80030a8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7fd fc34 	bl	8000910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2224      	movs	r2, #36	; 0x24
 80030ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 0201 	bic.w	r2, r2, #1
 80030be:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 fcf9 	bl	8003ab8 <UART_SetConfig>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d101      	bne.n	80030d0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e022      	b.n	8003116 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d002      	beq.n	80030de <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 ff61 	bl	8003fa0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030ec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030fc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f042 0201 	orr.w	r2, r2, #1
 800310c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 ffe7 	bl	80040e2 <UART_CheckIdleState>
 8003114:	4603      	mov	r3, r0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
	...

08003120 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b08a      	sub	sp, #40	; 0x28
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	4613      	mov	r3, r2
 800312c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003134:	2b20      	cmp	r3, #32
 8003136:	d142      	bne.n	80031be <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d002      	beq.n	8003144 <HAL_UART_Receive_DMA+0x24>
 800313e:	88fb      	ldrh	r3, [r7, #6]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e03b      	b.n	80031c0 <HAL_UART_Receive_DMA+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800314e:	2b01      	cmp	r3, #1
 8003150:	d101      	bne.n	8003156 <HAL_UART_Receive_DMA+0x36>
 8003152:	2302      	movs	r3, #2
 8003154:	e034      	b.n	80031c0 <HAL_UART_Receive_DMA+0xa0>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a17      	ldr	r2, [pc, #92]	; (80031c8 <HAL_UART_Receive_DMA+0xa8>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d01f      	beq.n	80031ae <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d018      	beq.n	80031ae <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	e853 3f00 	ldrex	r3, [r3]
 8003188:	613b      	str	r3, [r7, #16]
   return(result);
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003190:	627b      	str	r3, [r7, #36]	; 0x24
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	461a      	mov	r2, r3
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	623b      	str	r3, [r7, #32]
 800319c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319e:	69f9      	ldr	r1, [r7, #28]
 80031a0:	6a3a      	ldr	r2, [r7, #32]
 80031a2:	e841 2300 	strex	r3, r2, [r1]
 80031a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1e6      	bne.n	800317c <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80031ae:	88fb      	ldrh	r3, [r7, #6]
 80031b0:	461a      	mov	r2, r3
 80031b2:	68b9      	ldr	r1, [r7, #8]
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f001 f8a7 	bl	8004308 <UART_Start_Receive_DMA>
 80031ba:	4603      	mov	r3, r0
 80031bc:	e000      	b.n	80031c0 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80031be:	2302      	movs	r3, #2
  }
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3728      	adds	r7, #40	; 0x28
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	40008000 	.word	0x40008000

080031cc <HAL_UART_DMAPause>:
  * @brief Pause the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b09d      	sub	sp, #116	; 0x74
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031da:	66fb      	str	r3, [r7, #108]	; 0x6c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e2:	66bb      	str	r3, [r7, #104]	; 0x68

  __HAL_LOCK(huart);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d101      	bne.n	80031f2 <HAL_UART_DMAPause+0x26>
 80031ee:	2302      	movs	r3, #2
 80031f0:	e083      	b.n	80032fa <HAL_UART_DMAPause+0x12e>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003204:	2b80      	cmp	r3, #128	; 0x80
 8003206:	d11c      	bne.n	8003242 <HAL_UART_DMAPause+0x76>
 8003208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800320a:	2b21      	cmp	r3, #33	; 0x21
 800320c:	d119      	bne.n	8003242 <HAL_UART_DMAPause+0x76>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    /* Disable the UART DMA Tx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	3308      	adds	r3, #8
 8003214:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003216:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003218:	e853 3f00 	ldrex	r3, [r3]
 800321c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800321e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003220:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003224:	667b      	str	r3, [r7, #100]	; 0x64
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	3308      	adds	r3, #8
 800322c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800322e:	657a      	str	r2, [r7, #84]	; 0x54
 8003230:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003232:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003234:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003236:	e841 2300 	strex	r3, r2, [r1]
 800323a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800323c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1e5      	bne.n	800320e <HAL_UART_DMAPause+0x42>
  }
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800324c:	2b40      	cmp	r3, #64	; 0x40
 800324e:	d14f      	bne.n	80032f0 <HAL_UART_DMAPause+0x124>
 8003250:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003252:	2b22      	cmp	r3, #34	; 0x22
 8003254:	d14c      	bne.n	80032f0 <HAL_UART_DMAPause+0x124>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800325e:	e853 3f00 	ldrex	r3, [r3]
 8003262:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003266:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800326a:	663b      	str	r3, [r7, #96]	; 0x60
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	461a      	mov	r2, r3
 8003272:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003274:	643b      	str	r3, [r7, #64]	; 0x40
 8003276:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003278:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800327a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800327c:	e841 2300 	strex	r3, r2, [r1]
 8003280:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1e6      	bne.n	8003256 <HAL_UART_DMAPause+0x8a>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	3308      	adds	r3, #8
 800328e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003290:	6a3b      	ldr	r3, [r7, #32]
 8003292:	e853 3f00 	ldrex	r3, [r3]
 8003296:	61fb      	str	r3, [r7, #28]
   return(result);
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	f023 0301 	bic.w	r3, r3, #1
 800329e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	3308      	adds	r3, #8
 80032a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80032a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032b0:	e841 2300 	strex	r3, r2, [r1]
 80032b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1e5      	bne.n	8003288 <HAL_UART_DMAPause+0xbc>

    /* Disable the UART DMA Rx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	3308      	adds	r3, #8
 80032c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	e853 3f00 	ldrex	r3, [r3]
 80032ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	3308      	adds	r3, #8
 80032da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032dc:	61ba      	str	r2, [r7, #24]
 80032de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032e0:	6979      	ldr	r1, [r7, #20]
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	e841 2300 	strex	r3, r2, [r1]
 80032e8:	613b      	str	r3, [r7, #16]
   return(result);
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1e5      	bne.n	80032bc <HAL_UART_DMAPause+0xf0>
  }

  __HAL_UNLOCK(huart);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3774      	adds	r7, #116	; 0x74
 80032fe:	46bd      	mov	sp, r7
 8003300:	bc80      	pop	{r7}
 8003302:	4770      	bx	lr

08003304 <HAL_UART_DMAResume>:
  * @brief Resume the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 8003304:	b480      	push	{r7}
 8003306:	b09b      	sub	sp, #108	; 0x6c
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003312:	2b01      	cmp	r3, #1
 8003314:	d101      	bne.n	800331a <HAL_UART_DMAResume+0x16>
 8003316:	2302      	movs	r3, #2
 8003318:	e081      	b.n	800341e <HAL_UART_DMAResume+0x11a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003328:	2b21      	cmp	r3, #33	; 0x21
 800332a:	d119      	bne.n	8003360 <HAL_UART_DMAResume+0x5c>
  {
    /* Enable the UART DMA Tx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	3308      	adds	r3, #8
 8003332:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003334:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003336:	e853 3f00 	ldrex	r3, [r3]
 800333a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800333c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800333e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003342:	667b      	str	r3, [r7, #100]	; 0x64
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	3308      	adds	r3, #8
 800334a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800334c:	657a      	str	r2, [r7, #84]	; 0x54
 800334e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003350:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003352:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003354:	e841 2300 	strex	r3, r2, [r1]
 8003358:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800335a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1e5      	bne.n	800332c <HAL_UART_DMAResume+0x28>
  }
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003366:	2b22      	cmp	r3, #34	; 0x22
 8003368:	d154      	bne.n	8003414 <HAL_UART_DMAResume+0x110>
  {
    /* Clear the Overrun flag before resuming the Rx transfer */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2208      	movs	r2, #8
 8003370:	621a      	str	r2, [r3, #32]

    /* Re-enable PE and ERR (Frame error, noise error, overrun error) interrupts */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d018      	beq.n	80033ac <HAL_UART_DMAResume+0xa8>
    {    
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003382:	e853 3f00 	ldrex	r3, [r3]
 8003386:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800338e:	663b      	str	r3, [r7, #96]	; 0x60
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	461a      	mov	r2, r3
 8003396:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003398:	643b      	str	r3, [r7, #64]	; 0x40
 800339a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800339c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800339e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80033a0:	e841 2300 	strex	r3, r2, [r1]
 80033a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80033a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1e6      	bne.n	800337a <HAL_UART_DMAResume+0x76>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3308      	adds	r3, #8
 80033b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b4:	6a3b      	ldr	r3, [r7, #32]
 80033b6:	e853 3f00 	ldrex	r3, [r3]
 80033ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	f043 0301 	orr.w	r3, r3, #1
 80033c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	3308      	adds	r3, #8
 80033ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80033cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033d4:	e841 2300 	strex	r3, r2, [r1]
 80033d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1e5      	bne.n	80033ac <HAL_UART_DMAResume+0xa8>

    /* Enable the UART DMA Rx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	3308      	adds	r3, #8
 80033e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	e853 3f00 	ldrex	r3, [r3]
 80033ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	3308      	adds	r3, #8
 80033fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003400:	61ba      	str	r2, [r7, #24]
 8003402:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003404:	6979      	ldr	r1, [r7, #20]
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	e841 2300 	strex	r3, r2, [r1]
 800340c:	613b      	str	r3, [r7, #16]
   return(result);
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1e5      	bne.n	80033e0 <HAL_UART_DMAResume+0xdc>
  }

  __HAL_UNLOCK(huart);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	376c      	adds	r7, #108	; 0x6c
 8003422:	46bd      	mov	sp, r7
 8003424:	bc80      	pop	{r7}
 8003426:	4770      	bx	lr

08003428 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b0ba      	sub	sp, #232	; 0xe8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800344e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003452:	f640 030f 	movw	r3, #2063	; 0x80f
 8003456:	4013      	ands	r3, r2
 8003458:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800345c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003460:	2b00      	cmp	r3, #0
 8003462:	d11b      	bne.n	800349c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003468:	f003 0320 	and.w	r3, r3, #32
 800346c:	2b00      	cmp	r3, #0
 800346e:	d015      	beq.n	800349c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003474:	f003 0320 	and.w	r3, r3, #32
 8003478:	2b00      	cmp	r3, #0
 800347a:	d105      	bne.n	8003488 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800347c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d009      	beq.n	800349c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348c:	2b00      	cmp	r3, #0
 800348e:	f000 82d6 	beq.w	8003a3e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	4798      	blx	r3
      }
      return;
 800349a:	e2d0      	b.n	8003a3e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800349c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 811f 	beq.w	80036e4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80034a6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80034aa:	4b8b      	ldr	r3, [pc, #556]	; (80036d8 <HAL_UART_IRQHandler+0x2b0>)
 80034ac:	4013      	ands	r3, r2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d106      	bne.n	80034c0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80034b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80034b6:	4b89      	ldr	r3, [pc, #548]	; (80036dc <HAL_UART_IRQHandler+0x2b4>)
 80034b8:	4013      	ands	r3, r2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 8112 	beq.w	80036e4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80034c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d011      	beq.n	80034f0 <HAL_UART_IRQHandler+0xc8>
 80034cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00b      	beq.n	80034f0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2201      	movs	r2, #1
 80034de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034e6:	f043 0201 	orr.w	r2, r3, #1
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d011      	beq.n	8003520 <HAL_UART_IRQHandler+0xf8>
 80034fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00b      	beq.n	8003520 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2202      	movs	r2, #2
 800350e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003516:	f043 0204 	orr.w	r2, r3, #4
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	2b00      	cmp	r3, #0
 800352a:	d011      	beq.n	8003550 <HAL_UART_IRQHandler+0x128>
 800352c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00b      	beq.n	8003550 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2204      	movs	r2, #4
 800353e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003546:	f043 0202 	orr.w	r2, r3, #2
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003554:	f003 0308 	and.w	r3, r3, #8
 8003558:	2b00      	cmp	r3, #0
 800355a:	d017      	beq.n	800358c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800355c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003560:	f003 0320 	and.w	r3, r3, #32
 8003564:	2b00      	cmp	r3, #0
 8003566:	d105      	bne.n	8003574 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003568:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800356c:	4b5a      	ldr	r3, [pc, #360]	; (80036d8 <HAL_UART_IRQHandler+0x2b0>)
 800356e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00b      	beq.n	800358c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2208      	movs	r2, #8
 800357a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003582:	f043 0208 	orr.w	r2, r3, #8
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800358c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003590:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003594:	2b00      	cmp	r3, #0
 8003596:	d012      	beq.n	80035be <HAL_UART_IRQHandler+0x196>
 8003598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800359c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00c      	beq.n	80035be <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035b4:	f043 0220 	orr.w	r2, r3, #32
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 823c 	beq.w	8003a42 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80035ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ce:	f003 0320 	and.w	r3, r3, #32
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d013      	beq.n	80035fe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80035d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035da:	f003 0320 	and.w	r3, r3, #32
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d105      	bne.n	80035ee <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80035e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d007      	beq.n	80035fe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003604:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003612:	2b40      	cmp	r3, #64	; 0x40
 8003614:	d005      	beq.n	8003622 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003616:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800361a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800361e:	2b00      	cmp	r3, #0
 8003620:	d04f      	beq.n	80036c2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 ff58 	bl	80044d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003632:	2b40      	cmp	r3, #64	; 0x40
 8003634:	d141      	bne.n	80036ba <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	3308      	adds	r3, #8
 800363c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003640:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003644:	e853 3f00 	ldrex	r3, [r3]
 8003648:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800364c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003650:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003654:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	3308      	adds	r3, #8
 800365e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003662:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003666:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800366a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800366e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003672:	e841 2300 	strex	r3, r2, [r1]
 8003676:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800367a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1d9      	bne.n	8003636 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003686:	2b00      	cmp	r3, #0
 8003688:	d013      	beq.n	80036b2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800368e:	4a14      	ldr	r2, [pc, #80]	; (80036e0 <HAL_UART_IRQHandler+0x2b8>)
 8003690:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003696:	4618      	mov	r0, r3
 8003698:	f7fd fe12 	bl	80012c0 <HAL_DMA_Abort_IT>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d017      	beq.n	80036d2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80036ac:	4610      	mov	r0, r2
 80036ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036b0:	e00f      	b.n	80036d2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f9eb 	bl	8003a8e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036b8:	e00b      	b.n	80036d2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f9e7 	bl	8003a8e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036c0:	e007      	b.n	80036d2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 f9e3 	bl	8003a8e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80036d0:	e1b7      	b.n	8003a42 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036d2:	bf00      	nop
    return;
 80036d4:	e1b5      	b.n	8003a42 <HAL_UART_IRQHandler+0x61a>
 80036d6:	bf00      	nop
 80036d8:	10000001 	.word	0x10000001
 80036dc:	04000120 	.word	0x04000120
 80036e0:	08004781 	.word	0x08004781

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	f040 814a 	bne.w	8003982 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80036ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036f2:	f003 0310 	and.w	r3, r3, #16
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 8143 	beq.w	8003982 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80036fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003700:	f003 0310 	and.w	r3, r3, #16
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 813c 	beq.w	8003982 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2210      	movs	r2, #16
 8003710:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371c:	2b40      	cmp	r3, #64	; 0x40
 800371e:	f040 80b5 	bne.w	800388c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 800372e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 8187 	beq.w	8003a46 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800373e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003742:	429a      	cmp	r2, r3
 8003744:	f080 817f 	bcs.w	8003a46 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800374e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0320 	and.w	r3, r3, #32
 800375e:	2b00      	cmp	r3, #0
 8003760:	f040 8086 	bne.w	8003870 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003770:	e853 3f00 	ldrex	r3, [r3]
 8003774:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003778:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800377c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003780:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	461a      	mov	r2, r3
 800378a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800378e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003792:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003796:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800379a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800379e:	e841 2300 	strex	r3, r2, [r1]
 80037a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80037a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1da      	bne.n	8003764 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	3308      	adds	r3, #8
 80037b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037b8:	e853 3f00 	ldrex	r3, [r3]
 80037bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80037be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037c0:	f023 0301 	bic.w	r3, r3, #1
 80037c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	3308      	adds	r3, #8
 80037ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80037d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80037d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80037da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80037de:	e841 2300 	strex	r3, r2, [r1]
 80037e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80037e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1e1      	bne.n	80037ae <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	3308      	adds	r3, #8
 80037f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037f4:	e853 3f00 	ldrex	r3, [r3]
 80037f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80037fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003800:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	3308      	adds	r3, #8
 800380a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800380e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003810:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003812:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003814:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003816:	e841 2300 	strex	r3, r2, [r1]
 800381a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800381c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1e3      	bne.n	80037ea <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2220      	movs	r2, #32
 8003826:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003838:	e853 3f00 	ldrex	r3, [r3]
 800383c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800383e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003840:	f023 0310 	bic.w	r3, r3, #16
 8003844:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	461a      	mov	r2, r3
 800384e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003852:	65bb      	str	r3, [r7, #88]	; 0x58
 8003854:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003856:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003858:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800385a:	e841 2300 	strex	r3, r2, [r1]
 800385e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1e4      	bne.n	8003830 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800386a:	4618      	mov	r0, r3
 800386c:	f7fd fcca 	bl	8001204 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800387c:	b29b      	uxth	r3, r3
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	b29b      	uxth	r3, r3
 8003882:	4619      	mov	r1, r3
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 f90b 	bl	8003aa0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800388a:	e0dc      	b.n	8003a46 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003898:	b29b      	uxth	r3, r3
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 80ce 	beq.w	8003a4a <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 80038ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f000 80c9 	beq.w	8003a4a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c0:	e853 3f00 	ldrex	r3, [r3]
 80038c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80038c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	461a      	mov	r2, r3
 80038d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80038da:	647b      	str	r3, [r7, #68]	; 0x44
 80038dc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80038e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038e2:	e841 2300 	strex	r3, r2, [r1]
 80038e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80038e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1e4      	bne.n	80038b8 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	3308      	adds	r3, #8
 80038f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f8:	e853 3f00 	ldrex	r3, [r3]
 80038fc:	623b      	str	r3, [r7, #32]
   return(result);
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003904:	f023 0301 	bic.w	r3, r3, #1
 8003908:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	3308      	adds	r3, #8
 8003912:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003916:	633a      	str	r2, [r7, #48]	; 0x30
 8003918:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800391c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800391e:	e841 2300 	strex	r3, r2, [r1]
 8003922:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1e1      	bne.n	80038ee <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2220      	movs	r2, #32
 800392e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	e853 3f00 	ldrex	r3, [r3]
 800394a:	60fb      	str	r3, [r7, #12]
   return(result);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f023 0310 	bic.w	r3, r3, #16
 8003952:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	461a      	mov	r2, r3
 800395c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003960:	61fb      	str	r3, [r7, #28]
 8003962:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003964:	69b9      	ldr	r1, [r7, #24]
 8003966:	69fa      	ldr	r2, [r7, #28]
 8003968:	e841 2300 	strex	r3, r2, [r1]
 800396c:	617b      	str	r3, [r7, #20]
   return(result);
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1e4      	bne.n	800393e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003974:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003978:	4619      	mov	r1, r3
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f890 	bl	8003aa0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003980:	e063      	b.n	8003a4a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003986:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00e      	beq.n	80039ac <HAL_UART_IRQHandler+0x584>
 800398e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d008      	beq.n	80039ac <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80039a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 ff2c 	bl	8004802 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80039aa:	e051      	b.n	8003a50 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80039ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d014      	beq.n	80039e2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80039b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d105      	bne.n	80039d0 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80039c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d008      	beq.n	80039e2 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d03a      	beq.n	8003a4e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	4798      	blx	r3
    }
    return;
 80039e0:	e035      	b.n	8003a4e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80039e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d009      	beq.n	8003a02 <HAL_UART_IRQHandler+0x5da>
 80039ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 fed6 	bl	80047ac <UART_EndTransmit_IT>
    return;
 8003a00:	e026      	b.n	8003a50 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d009      	beq.n	8003a22 <HAL_UART_IRQHandler+0x5fa>
 8003a0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 ff03 	bl	8004826 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a20:	e016      	b.n	8003a50 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d010      	beq.n	8003a50 <HAL_UART_IRQHandler+0x628>
 8003a2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	da0c      	bge.n	8003a50 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 feec 	bl	8004814 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a3c:	e008      	b.n	8003a50 <HAL_UART_IRQHandler+0x628>
      return;
 8003a3e:	bf00      	nop
 8003a40:	e006      	b.n	8003a50 <HAL_UART_IRQHandler+0x628>
    return;
 8003a42:	bf00      	nop
 8003a44:	e004      	b.n	8003a50 <HAL_UART_IRQHandler+0x628>
      return;
 8003a46:	bf00      	nop
 8003a48:	e002      	b.n	8003a50 <HAL_UART_IRQHandler+0x628>
      return;
 8003a4a:	bf00      	nop
 8003a4c:	e000      	b.n	8003a50 <HAL_UART_IRQHandler+0x628>
    return;
 8003a4e:	bf00      	nop
  }
}
 8003a50:	37e8      	adds	r7, #232	; 0xe8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop

08003a58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bc80      	pop	{r7}
 8003a68:	4770      	bx	lr

08003a6a <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b083      	sub	sp, #12
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003a72:	bf00      	nop
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bc80      	pop	{r7}
 8003a7a:	4770      	bx	lr

08003a7c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bc80      	pop	{r7}
 8003a8c:	4770      	bx	lr

08003a8e <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	b083      	sub	sp, #12
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003a96:	bf00      	nop
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bc80      	pop	{r7}
 8003a9e:	4770      	bx	lr

08003aa0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bc80      	pop	{r7}
 8003ab4:	4770      	bx	lr
	...

08003ab8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003abc:	b08c      	sub	sp, #48	; 0x30
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	69db      	ldr	r3, [r3, #28]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	4b94      	ldr	r3, [pc, #592]	; (8003d38 <UART_SetConfig+0x280>)
 8003ae8:	4013      	ands	r3, r2
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	6812      	ldr	r2, [r2, #0]
 8003aee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003af0:	430b      	orrs	r3, r1
 8003af2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	68da      	ldr	r2, [r3, #12]
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a89      	ldr	r2, [pc, #548]	; (8003d3c <UART_SetConfig+0x284>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d004      	beq.n	8003b24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b20:	4313      	orrs	r3, r2
 8003b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003b2e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	6812      	ldr	r2, [r2, #0]
 8003b36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b38:	430b      	orrs	r3, r1
 8003b3a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b42:	f023 010f 	bic.w	r1, r3, #15
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a7a      	ldr	r2, [pc, #488]	; (8003d40 <UART_SetConfig+0x288>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d127      	bne.n	8003bac <UART_SetConfig+0xf4>
 8003b5c:	2003      	movs	r0, #3
 8003b5e:	f7ff fa6d 	bl	800303c <LL_RCC_GetUSARTClockSource>
 8003b62:	4603      	mov	r3, r0
 8003b64:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8003b68:	2b03      	cmp	r3, #3
 8003b6a:	d81b      	bhi.n	8003ba4 <UART_SetConfig+0xec>
 8003b6c:	a201      	add	r2, pc, #4	; (adr r2, 8003b74 <UART_SetConfig+0xbc>)
 8003b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b72:	bf00      	nop
 8003b74:	08003b85 	.word	0x08003b85
 8003b78:	08003b95 	.word	0x08003b95
 8003b7c:	08003b8d 	.word	0x08003b8d
 8003b80:	08003b9d 	.word	0x08003b9d
 8003b84:	2301      	movs	r3, #1
 8003b86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b8a:	e080      	b.n	8003c8e <UART_SetConfig+0x1d6>
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b92:	e07c      	b.n	8003c8e <UART_SetConfig+0x1d6>
 8003b94:	2304      	movs	r3, #4
 8003b96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b9a:	e078      	b.n	8003c8e <UART_SetConfig+0x1d6>
 8003b9c:	2308      	movs	r3, #8
 8003b9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ba2:	e074      	b.n	8003c8e <UART_SetConfig+0x1d6>
 8003ba4:	2310      	movs	r3, #16
 8003ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003baa:	e070      	b.n	8003c8e <UART_SetConfig+0x1d6>
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a64      	ldr	r2, [pc, #400]	; (8003d44 <UART_SetConfig+0x28c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d138      	bne.n	8003c28 <UART_SetConfig+0x170>
 8003bb6:	200c      	movs	r0, #12
 8003bb8:	f7ff fa40 	bl	800303c <LL_RCC_GetUSARTClockSource>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8003bc2:	2b0c      	cmp	r3, #12
 8003bc4:	d82c      	bhi.n	8003c20 <UART_SetConfig+0x168>
 8003bc6:	a201      	add	r2, pc, #4	; (adr r2, 8003bcc <UART_SetConfig+0x114>)
 8003bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bcc:	08003c01 	.word	0x08003c01
 8003bd0:	08003c21 	.word	0x08003c21
 8003bd4:	08003c21 	.word	0x08003c21
 8003bd8:	08003c21 	.word	0x08003c21
 8003bdc:	08003c11 	.word	0x08003c11
 8003be0:	08003c21 	.word	0x08003c21
 8003be4:	08003c21 	.word	0x08003c21
 8003be8:	08003c21 	.word	0x08003c21
 8003bec:	08003c09 	.word	0x08003c09
 8003bf0:	08003c21 	.word	0x08003c21
 8003bf4:	08003c21 	.word	0x08003c21
 8003bf8:	08003c21 	.word	0x08003c21
 8003bfc:	08003c19 	.word	0x08003c19
 8003c00:	2300      	movs	r3, #0
 8003c02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c06:	e042      	b.n	8003c8e <UART_SetConfig+0x1d6>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c0e:	e03e      	b.n	8003c8e <UART_SetConfig+0x1d6>
 8003c10:	2304      	movs	r3, #4
 8003c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c16:	e03a      	b.n	8003c8e <UART_SetConfig+0x1d6>
 8003c18:	2308      	movs	r3, #8
 8003c1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c1e:	e036      	b.n	8003c8e <UART_SetConfig+0x1d6>
 8003c20:	2310      	movs	r3, #16
 8003c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c26:	e032      	b.n	8003c8e <UART_SetConfig+0x1d6>
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a43      	ldr	r2, [pc, #268]	; (8003d3c <UART_SetConfig+0x284>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d12a      	bne.n	8003c88 <UART_SetConfig+0x1d0>
 8003c32:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003c36:	f7ff fa13 	bl	8003060 <LL_RCC_GetLPUARTClockSource>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c40:	d01a      	beq.n	8003c78 <UART_SetConfig+0x1c0>
 8003c42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c46:	d81b      	bhi.n	8003c80 <UART_SetConfig+0x1c8>
 8003c48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c4c:	d00c      	beq.n	8003c68 <UART_SetConfig+0x1b0>
 8003c4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c52:	d815      	bhi.n	8003c80 <UART_SetConfig+0x1c8>
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d003      	beq.n	8003c60 <UART_SetConfig+0x1a8>
 8003c58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c5c:	d008      	beq.n	8003c70 <UART_SetConfig+0x1b8>
 8003c5e:	e00f      	b.n	8003c80 <UART_SetConfig+0x1c8>
 8003c60:	2300      	movs	r3, #0
 8003c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c66:	e012      	b.n	8003c8e <UART_SetConfig+0x1d6>
 8003c68:	2302      	movs	r3, #2
 8003c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c6e:	e00e      	b.n	8003c8e <UART_SetConfig+0x1d6>
 8003c70:	2304      	movs	r3, #4
 8003c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c76:	e00a      	b.n	8003c8e <UART_SetConfig+0x1d6>
 8003c78:	2308      	movs	r3, #8
 8003c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c7e:	e006      	b.n	8003c8e <UART_SetConfig+0x1d6>
 8003c80:	2310      	movs	r3, #16
 8003c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c86:	e002      	b.n	8003c8e <UART_SetConfig+0x1d6>
 8003c88:	2310      	movs	r3, #16
 8003c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a2a      	ldr	r2, [pc, #168]	; (8003d3c <UART_SetConfig+0x284>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	f040 80a4 	bne.w	8003de2 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003c9e:	2b08      	cmp	r3, #8
 8003ca0:	d823      	bhi.n	8003cea <UART_SetConfig+0x232>
 8003ca2:	a201      	add	r2, pc, #4	; (adr r2, 8003ca8 <UART_SetConfig+0x1f0>)
 8003ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca8:	08003ccd 	.word	0x08003ccd
 8003cac:	08003ceb 	.word	0x08003ceb
 8003cb0:	08003cd5 	.word	0x08003cd5
 8003cb4:	08003ceb 	.word	0x08003ceb
 8003cb8:	08003cdb 	.word	0x08003cdb
 8003cbc:	08003ceb 	.word	0x08003ceb
 8003cc0:	08003ceb 	.word	0x08003ceb
 8003cc4:	08003ceb 	.word	0x08003ceb
 8003cc8:	08003ce3 	.word	0x08003ce3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ccc:	f7fe fed2 	bl	8002a74 <HAL_RCC_GetPCLK1Freq>
 8003cd0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003cd2:	e010      	b.n	8003cf6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cd4:	4b1c      	ldr	r3, [pc, #112]	; (8003d48 <UART_SetConfig+0x290>)
 8003cd6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003cd8:	e00d      	b.n	8003cf6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cda:	f7fe fe17 	bl	800290c <HAL_RCC_GetSysClockFreq>
 8003cde:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ce0:	e009      	b.n	8003cf6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ce6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ce8:	e005      	b.n	8003cf6 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003cf4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 8137 	beq.w	8003f6c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d02:	4a12      	ldr	r2, [pc, #72]	; (8003d4c <UART_SetConfig+0x294>)
 8003d04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d08:	461a      	mov	r2, r3
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d10:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	4613      	mov	r3, r2
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	4413      	add	r3, r2
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d305      	bcc.n	8003d2e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d910      	bls.n	8003d50 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003d34:	e11a      	b.n	8003f6c <UART_SetConfig+0x4b4>
 8003d36:	bf00      	nop
 8003d38:	cfff69f3 	.word	0xcfff69f3
 8003d3c:	40008000 	.word	0x40008000
 8003d40:	40013800 	.word	0x40013800
 8003d44:	40004400 	.word	0x40004400
 8003d48:	00f42400 	.word	0x00f42400
 8003d4c:	08004be4 	.word	0x08004be4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	2200      	movs	r2, #0
 8003d54:	60bb      	str	r3, [r7, #8]
 8003d56:	60fa      	str	r2, [r7, #12]
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	4a8e      	ldr	r2, [pc, #568]	; (8003f98 <UART_SetConfig+0x4e0>)
 8003d5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	2200      	movs	r2, #0
 8003d66:	603b      	str	r3, [r7, #0]
 8003d68:	607a      	str	r2, [r7, #4]
 8003d6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003d72:	f7fc fa01 	bl	8000178 <__aeabi_uldivmod>
 8003d76:	4602      	mov	r2, r0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	4610      	mov	r0, r2
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	f04f 0200 	mov.w	r2, #0
 8003d82:	f04f 0300 	mov.w	r3, #0
 8003d86:	020b      	lsls	r3, r1, #8
 8003d88:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003d8c:	0202      	lsls	r2, r0, #8
 8003d8e:	6979      	ldr	r1, [r7, #20]
 8003d90:	6849      	ldr	r1, [r1, #4]
 8003d92:	0849      	lsrs	r1, r1, #1
 8003d94:	2000      	movs	r0, #0
 8003d96:	460c      	mov	r4, r1
 8003d98:	4605      	mov	r5, r0
 8003d9a:	eb12 0804 	adds.w	r8, r2, r4
 8003d9e:	eb43 0905 	adc.w	r9, r3, r5
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	469a      	mov	sl, r3
 8003daa:	4693      	mov	fp, r2
 8003dac:	4652      	mov	r2, sl
 8003dae:	465b      	mov	r3, fp
 8003db0:	4640      	mov	r0, r8
 8003db2:	4649      	mov	r1, r9
 8003db4:	f7fc f9e0 	bl	8000178 <__aeabi_uldivmod>
 8003db8:	4602      	mov	r2, r0
 8003dba:	460b      	mov	r3, r1
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003dc0:	6a3b      	ldr	r3, [r7, #32]
 8003dc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dc6:	d308      	bcc.n	8003dda <UART_SetConfig+0x322>
 8003dc8:	6a3b      	ldr	r3, [r7, #32]
 8003dca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dce:	d204      	bcs.n	8003dda <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6a3a      	ldr	r2, [r7, #32]
 8003dd6:	60da      	str	r2, [r3, #12]
 8003dd8:	e0c8      	b.n	8003f6c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003de0:	e0c4      	b.n	8003f6c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dea:	d168      	bne.n	8003ebe <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8003dec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003df0:	2b08      	cmp	r3, #8
 8003df2:	d828      	bhi.n	8003e46 <UART_SetConfig+0x38e>
 8003df4:	a201      	add	r2, pc, #4	; (adr r2, 8003dfc <UART_SetConfig+0x344>)
 8003df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfa:	bf00      	nop
 8003dfc:	08003e21 	.word	0x08003e21
 8003e00:	08003e29 	.word	0x08003e29
 8003e04:	08003e31 	.word	0x08003e31
 8003e08:	08003e47 	.word	0x08003e47
 8003e0c:	08003e37 	.word	0x08003e37
 8003e10:	08003e47 	.word	0x08003e47
 8003e14:	08003e47 	.word	0x08003e47
 8003e18:	08003e47 	.word	0x08003e47
 8003e1c:	08003e3f 	.word	0x08003e3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e20:	f7fe fe28 	bl	8002a74 <HAL_RCC_GetPCLK1Freq>
 8003e24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e26:	e014      	b.n	8003e52 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e28:	f7fe fe36 	bl	8002a98 <HAL_RCC_GetPCLK2Freq>
 8003e2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e2e:	e010      	b.n	8003e52 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e30:	4b5a      	ldr	r3, [pc, #360]	; (8003f9c <UART_SetConfig+0x4e4>)
 8003e32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e34:	e00d      	b.n	8003e52 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e36:	f7fe fd69 	bl	800290c <HAL_RCC_GetSysClockFreq>
 8003e3a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e3c:	e009      	b.n	8003e52 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e44:	e005      	b.n	8003e52 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8003e46:	2300      	movs	r3, #0
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003e50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 8089 	beq.w	8003f6c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5e:	4a4e      	ldr	r2, [pc, #312]	; (8003f98 <UART_SetConfig+0x4e0>)
 8003e60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e64:	461a      	mov	r2, r3
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e6c:	005a      	lsls	r2, r3, #1
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	085b      	lsrs	r3, r3, #1
 8003e74:	441a      	add	r2, r3
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	2b0f      	cmp	r3, #15
 8003e86:	d916      	bls.n	8003eb6 <UART_SetConfig+0x3fe>
 8003e88:	6a3b      	ldr	r3, [r7, #32]
 8003e8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e8e:	d212      	bcs.n	8003eb6 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	f023 030f 	bic.w	r3, r3, #15
 8003e98:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e9a:	6a3b      	ldr	r3, [r7, #32]
 8003e9c:	085b      	lsrs	r3, r3, #1
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	f003 0307 	and.w	r3, r3, #7
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	8bfb      	ldrh	r3, [r7, #30]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	8bfa      	ldrh	r2, [r7, #30]
 8003eb2:	60da      	str	r2, [r3, #12]
 8003eb4:	e05a      	b.n	8003f6c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003ebc:	e056      	b.n	8003f6c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ebe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ec2:	2b08      	cmp	r3, #8
 8003ec4:	d827      	bhi.n	8003f16 <UART_SetConfig+0x45e>
 8003ec6:	a201      	add	r2, pc, #4	; (adr r2, 8003ecc <UART_SetConfig+0x414>)
 8003ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ecc:	08003ef1 	.word	0x08003ef1
 8003ed0:	08003ef9 	.word	0x08003ef9
 8003ed4:	08003f01 	.word	0x08003f01
 8003ed8:	08003f17 	.word	0x08003f17
 8003edc:	08003f07 	.word	0x08003f07
 8003ee0:	08003f17 	.word	0x08003f17
 8003ee4:	08003f17 	.word	0x08003f17
 8003ee8:	08003f17 	.word	0x08003f17
 8003eec:	08003f0f 	.word	0x08003f0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ef0:	f7fe fdc0 	bl	8002a74 <HAL_RCC_GetPCLK1Freq>
 8003ef4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ef6:	e014      	b.n	8003f22 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ef8:	f7fe fdce 	bl	8002a98 <HAL_RCC_GetPCLK2Freq>
 8003efc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003efe:	e010      	b.n	8003f22 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f00:	4b26      	ldr	r3, [pc, #152]	; (8003f9c <UART_SetConfig+0x4e4>)
 8003f02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f04:	e00d      	b.n	8003f22 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f06:	f7fe fd01 	bl	800290c <HAL_RCC_GetSysClockFreq>
 8003f0a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f0c:	e009      	b.n	8003f22 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f14:	e005      	b.n	8003f22 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8003f16:	2300      	movs	r3, #0
 8003f18:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003f20:	bf00      	nop
    }

    if (pclk != 0U)
 8003f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d021      	beq.n	8003f6c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	4a1a      	ldr	r2, [pc, #104]	; (8003f98 <UART_SetConfig+0x4e0>)
 8003f2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f32:	461a      	mov	r2, r3
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	fbb3 f2f2 	udiv	r2, r3, r2
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	085b      	lsrs	r3, r3, #1
 8003f40:	441a      	add	r2, r3
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f4e:	6a3b      	ldr	r3, [r7, #32]
 8003f50:	2b0f      	cmp	r3, #15
 8003f52:	d908      	bls.n	8003f66 <UART_SetConfig+0x4ae>
 8003f54:	6a3b      	ldr	r3, [r7, #32]
 8003f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f5a:	d204      	bcs.n	8003f66 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6a3a      	ldr	r2, [r7, #32]
 8003f62:	60da      	str	r2, [r3, #12]
 8003f64:	e002      	b.n	8003f6c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	2200      	movs	r2, #0
 8003f86:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003f88:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3730      	adds	r7, #48	; 0x30
 8003f90:	46bd      	mov	sp, r7
 8003f92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f96:	bf00      	nop
 8003f98:	08004be4 	.word	0x08004be4
 8003f9c:	00f42400 	.word	0x00f42400

08003fa0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00a      	beq.n	8003fca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00a      	beq.n	8003fec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00a      	beq.n	800400e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00a      	beq.n	8004030 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004034:	f003 0310 	and.w	r3, r3, #16
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00a      	beq.n	8004052 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004056:	f003 0320 	and.w	r3, r3, #32
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00a      	beq.n	8004074 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407c:	2b00      	cmp	r3, #0
 800407e:	d01a      	beq.n	80040b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800409e:	d10a      	bne.n	80040b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00a      	beq.n	80040d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	605a      	str	r2, [r3, #4]
  }
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	bc80      	pop	{r7}
 80040e0:	4770      	bx	lr

080040e2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b086      	sub	sp, #24
 80040e6:	af02      	add	r7, sp, #8
 80040e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040f2:	f7fc fe4b 	bl	8000d8c <HAL_GetTick>
 80040f6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0308 	and.w	r3, r3, #8
 8004102:	2b08      	cmp	r3, #8
 8004104:	d10e      	bne.n	8004124 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004106:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f82f 	bl	8004178 <UART_WaitOnFlagUntilTimeout>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e025      	b.n	8004170 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0304 	and.w	r3, r3, #4
 800412e:	2b04      	cmp	r3, #4
 8004130:	d10e      	bne.n	8004150 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004132:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004136:	9300      	str	r3, [sp, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 f819 	bl	8004178 <UART_WaitOnFlagUntilTimeout>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e00f      	b.n	8004170 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2220      	movs	r2, #32
 8004154:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2220      	movs	r2, #32
 800415c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b09c      	sub	sp, #112	; 0x70
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	603b      	str	r3, [r7, #0]
 8004184:	4613      	mov	r3, r2
 8004186:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004188:	e0a9      	b.n	80042de <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800418a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800418c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004190:	f000 80a5 	beq.w	80042de <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004194:	f7fc fdfa 	bl	8000d8c <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d302      	bcc.n	80041aa <UART_WaitOnFlagUntilTimeout+0x32>
 80041a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d140      	bne.n	800422c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041b2:	e853 3f00 	ldrex	r3, [r3]
 80041b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80041b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041be:	667b      	str	r3, [r7, #100]	; 0x64
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	461a      	mov	r2, r3
 80041c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041ca:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041cc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80041ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80041d0:	e841 2300 	strex	r3, r2, [r1]
 80041d4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80041d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1e6      	bne.n	80041aa <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	3308      	adds	r3, #8
 80041e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041e6:	e853 3f00 	ldrex	r3, [r3]
 80041ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ee:	f023 0301 	bic.w	r3, r3, #1
 80041f2:	663b      	str	r3, [r7, #96]	; 0x60
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	3308      	adds	r3, #8
 80041fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041fc:	64ba      	str	r2, [r7, #72]	; 0x48
 80041fe:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004200:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004202:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004204:	e841 2300 	strex	r3, r2, [r1]
 8004208:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800420a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1e5      	bne.n	80041dc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2220      	movs	r2, #32
 8004214:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2220      	movs	r2, #32
 800421c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e069      	b.n	8004300 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0304 	and.w	r3, r3, #4
 8004236:	2b00      	cmp	r3, #0
 8004238:	d051      	beq.n	80042de <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	69db      	ldr	r3, [r3, #28]
 8004240:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004244:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004248:	d149      	bne.n	80042de <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004252:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425c:	e853 3f00 	ldrex	r3, [r3]
 8004260:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004264:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004268:	66fb      	str	r3, [r7, #108]	; 0x6c
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	461a      	mov	r2, r3
 8004270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004272:	637b      	str	r3, [r7, #52]	; 0x34
 8004274:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004276:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004278:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800427a:	e841 2300 	strex	r3, r2, [r1]
 800427e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1e6      	bne.n	8004254 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	3308      	adds	r3, #8
 800428c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	e853 3f00 	ldrex	r3, [r3]
 8004294:	613b      	str	r3, [r7, #16]
   return(result);
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	f023 0301 	bic.w	r3, r3, #1
 800429c:	66bb      	str	r3, [r7, #104]	; 0x68
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	3308      	adds	r3, #8
 80042a4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80042a6:	623a      	str	r2, [r7, #32]
 80042a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042aa:	69f9      	ldr	r1, [r7, #28]
 80042ac:	6a3a      	ldr	r2, [r7, #32]
 80042ae:	e841 2300 	strex	r3, r2, [r1]
 80042b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1e5      	bne.n	8004286 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2220      	movs	r2, #32
 80042be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2220      	movs	r2, #32
 80042ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e010      	b.n	8004300 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	69da      	ldr	r2, [r3, #28]
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	4013      	ands	r3, r2
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	bf0c      	ite	eq
 80042ee:	2301      	moveq	r3, #1
 80042f0:	2300      	movne	r3, #0
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	461a      	mov	r2, r3
 80042f6:	79fb      	ldrb	r3, [r7, #7]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	f43f af46 	beq.w	800418a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3770      	adds	r7, #112	; 0x70
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b096      	sub	sp, #88	; 0x58
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	4613      	mov	r3, r2
 8004314:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	88fa      	ldrh	r2, [r7, #6]
 8004320:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2222      	movs	r2, #34	; 0x22
 8004330:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004338:	2b00      	cmp	r3, #0
 800433a:	d02c      	beq.n	8004396 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004340:	4a42      	ldr	r2, [pc, #264]	; (800444c <UART_Start_Receive_DMA+0x144>)
 8004342:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004348:	4a41      	ldr	r2, [pc, #260]	; (8004450 <UART_Start_Receive_DMA+0x148>)
 800434a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004350:	4a40      	ldr	r2, [pc, #256]	; (8004454 <UART_Start_Receive_DMA+0x14c>)
 8004352:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004358:	2200      	movs	r2, #0
 800435a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	3324      	adds	r3, #36	; 0x24
 8004366:	4619      	mov	r1, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800436c:	461a      	mov	r2, r3
 800436e:	88fb      	ldrh	r3, [r7, #6]
 8004370:	f7fc feca 	bl	8001108 <HAL_DMA_Start_IT>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00d      	beq.n	8004396 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2210      	movs	r2, #16
 800437e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2220      	movs	r2, #32
 800438e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e055      	b.n	8004442 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d018      	beq.n	80043d8 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043ae:	e853 3f00 	ldrex	r3, [r3]
 80043b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ba:	657b      	str	r3, [r7, #84]	; 0x54
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	461a      	mov	r2, r3
 80043c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80043c6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80043ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043cc:	e841 2300 	strex	r3, r2, [r1]
 80043d0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80043d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1e6      	bne.n	80043a6 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	3308      	adds	r3, #8
 80043de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e2:	e853 3f00 	ldrex	r3, [r3]
 80043e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	f043 0301 	orr.w	r3, r3, #1
 80043ee:	653b      	str	r3, [r7, #80]	; 0x50
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	3308      	adds	r3, #8
 80043f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80043f8:	637a      	str	r2, [r7, #52]	; 0x34
 80043fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004400:	e841 2300 	strex	r3, r2, [r1]
 8004404:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1e5      	bne.n	80043d8 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	3308      	adds	r3, #8
 8004412:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	e853 3f00 	ldrex	r3, [r3]
 800441a:	613b      	str	r3, [r7, #16]
   return(result);
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004422:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	3308      	adds	r3, #8
 800442a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800442c:	623a      	str	r2, [r7, #32]
 800442e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004430:	69f9      	ldr	r1, [r7, #28]
 8004432:	6a3a      	ldr	r2, [r7, #32]
 8004434:	e841 2300 	strex	r3, r2, [r1]
 8004438:	61bb      	str	r3, [r7, #24]
   return(result);
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1e5      	bne.n	800440c <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3758      	adds	r7, #88	; 0x58
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	080045a3 	.word	0x080045a3
 8004450:	080046c9 	.word	0x080046c9
 8004454:	08004701 	.word	0x08004701

08004458 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004458:	b480      	push	{r7}
 800445a:	b08f      	sub	sp, #60	; 0x3c
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004466:	6a3b      	ldr	r3, [r7, #32]
 8004468:	e853 3f00 	ldrex	r3, [r3]
 800446c:	61fb      	str	r3, [r7, #28]
   return(result);
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004474:	637b      	str	r3, [r7, #52]	; 0x34
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	461a      	mov	r2, r3
 800447c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800447e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004480:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004482:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004484:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004486:	e841 2300 	strex	r3, r2, [r1]
 800448a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800448c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1e6      	bne.n	8004460 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	3308      	adds	r3, #8
 8004498:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	e853 3f00 	ldrex	r3, [r3]
 80044a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80044a8:	633b      	str	r3, [r7, #48]	; 0x30
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	3308      	adds	r3, #8
 80044b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044b2:	61ba      	str	r2, [r7, #24]
 80044b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b6:	6979      	ldr	r1, [r7, #20]
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	e841 2300 	strex	r3, r2, [r1]
 80044be:	613b      	str	r3, [r7, #16]
   return(result);
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1e5      	bne.n	8004492 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2220      	movs	r2, #32
 80044ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80044ce:	bf00      	nop
 80044d0:	373c      	adds	r7, #60	; 0x3c
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bc80      	pop	{r7}
 80044d6:	4770      	bx	lr

080044d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044d8:	b480      	push	{r7}
 80044da:	b095      	sub	sp, #84	; 0x54
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e8:	e853 3f00 	ldrex	r3, [r3]
 80044ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	461a      	mov	r2, r3
 80044fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044fe:	643b      	str	r3, [r7, #64]	; 0x40
 8004500:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004502:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004504:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004506:	e841 2300 	strex	r3, r2, [r1]
 800450a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800450c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1e6      	bne.n	80044e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	3308      	adds	r3, #8
 8004518:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451a:	6a3b      	ldr	r3, [r7, #32]
 800451c:	e853 3f00 	ldrex	r3, [r3]
 8004520:	61fb      	str	r3, [r7, #28]
   return(result);
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004528:	f023 0301 	bic.w	r3, r3, #1
 800452c:	64bb      	str	r3, [r7, #72]	; 0x48
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	3308      	adds	r3, #8
 8004534:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004536:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004538:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800453c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800453e:	e841 2300 	strex	r3, r2, [r1]
 8004542:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1e3      	bne.n	8004512 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800454e:	2b01      	cmp	r3, #1
 8004550:	d118      	bne.n	8004584 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	e853 3f00 	ldrex	r3, [r3]
 800455e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	f023 0310 	bic.w	r3, r3, #16
 8004566:	647b      	str	r3, [r7, #68]	; 0x44
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	461a      	mov	r2, r3
 800456e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004570:	61bb      	str	r3, [r7, #24]
 8004572:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004574:	6979      	ldr	r1, [r7, #20]
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	e841 2300 	strex	r3, r2, [r1]
 800457c:	613b      	str	r3, [r7, #16]
   return(result);
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1e6      	bne.n	8004552 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2220      	movs	r2, #32
 8004588:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	671a      	str	r2, [r3, #112]	; 0x70
}
 8004598:	bf00      	nop
 800459a:	3754      	adds	r7, #84	; 0x54
 800459c:	46bd      	mov	sp, r7
 800459e:	bc80      	pop	{r7}
 80045a0:	4770      	bx	lr

080045a2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b09c      	sub	sp, #112	; 0x70
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ae:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0320 	and.w	r3, r3, #32
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d171      	bne.n	80046a2 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80045be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045c0:	2200      	movs	r2, #0
 80045c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ce:	e853 3f00 	ldrex	r3, [r3]
 80045d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80045d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045da:	66bb      	str	r3, [r7, #104]	; 0x68
 80045dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	461a      	mov	r2, r3
 80045e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80045e6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045ec:	e841 2300 	strex	r3, r2, [r1]
 80045f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80045f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1e6      	bne.n	80045c6 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	3308      	adds	r3, #8
 80045fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004602:	e853 3f00 	ldrex	r3, [r3]
 8004606:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800460a:	f023 0301 	bic.w	r3, r3, #1
 800460e:	667b      	str	r3, [r7, #100]	; 0x64
 8004610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	3308      	adds	r3, #8
 8004616:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004618:	647a      	str	r2, [r7, #68]	; 0x44
 800461a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800461e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004620:	e841 2300 	strex	r3, r2, [r1]
 8004624:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1e5      	bne.n	80045f8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800462c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	3308      	adds	r3, #8
 8004632:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	e853 3f00 	ldrex	r3, [r3]
 800463a:	623b      	str	r3, [r7, #32]
   return(result);
 800463c:	6a3b      	ldr	r3, [r7, #32]
 800463e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004642:	663b      	str	r3, [r7, #96]	; 0x60
 8004644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	3308      	adds	r3, #8
 800464a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800464c:	633a      	str	r2, [r7, #48]	; 0x30
 800464e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004650:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004652:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004654:	e841 2300 	strex	r3, r2, [r1]
 8004658:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800465a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1e5      	bne.n	800462c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004662:	2220      	movs	r2, #32
 8004664:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800466a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800466c:	2b01      	cmp	r3, #1
 800466e:	d118      	bne.n	80046a2 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	e853 3f00 	ldrex	r3, [r3]
 800467c:	60fb      	str	r3, [r7, #12]
   return(result);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f023 0310 	bic.w	r3, r3, #16
 8004684:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	461a      	mov	r2, r3
 800468c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800468e:	61fb      	str	r3, [r7, #28]
 8004690:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004692:	69b9      	ldr	r1, [r7, #24]
 8004694:	69fa      	ldr	r2, [r7, #28]
 8004696:	e841 2300 	strex	r3, r2, [r1]
 800469a:	617b      	str	r3, [r7, #20]
   return(result);
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1e6      	bne.n	8004670 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d107      	bne.n	80046ba <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80046b0:	4619      	mov	r1, r3
 80046b2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80046b4:	f7ff f9f4 	bl	8003aa0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80046b8:	e002      	b.n	80046c0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80046ba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80046bc:	f7ff f9d5 	bl	8003a6a <HAL_UART_RxCpltCallback>
}
 80046c0:	bf00      	nop
 80046c2:	3770      	adds	r7, #112	; 0x70
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d109      	bne.n	80046f2 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80046e4:	085b      	lsrs	r3, r3, #1
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	4619      	mov	r1, r3
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f7ff f9d8 	bl	8003aa0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80046f0:	e002      	b.n	80046f8 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f7ff f9c2 	bl	8003a7c <HAL_UART_RxHalfCpltCallback>
}
 80046f8:	bf00      	nop
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004714:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004728:	2b80      	cmp	r3, #128	; 0x80
 800472a:	d109      	bne.n	8004740 <UART_DMAError+0x40>
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	2b21      	cmp	r3, #33	; 0x21
 8004730:	d106      	bne.n	8004740 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	2200      	movs	r2, #0
 8004736:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800473a:	6978      	ldr	r0, [r7, #20]
 800473c:	f7ff fe8c 	bl	8004458 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800474a:	2b40      	cmp	r3, #64	; 0x40
 800474c:	d109      	bne.n	8004762 <UART_DMAError+0x62>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2b22      	cmp	r3, #34	; 0x22
 8004752:	d106      	bne.n	8004762 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	2200      	movs	r2, #0
 8004758:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800475c:	6978      	ldr	r0, [r7, #20]
 800475e:	f7ff febb 	bl	80044d8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004768:	f043 0210 	orr.w	r2, r3, #16
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004772:	6978      	ldr	r0, [r7, #20]
 8004774:	f7ff f98b 	bl	8003a8e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004778:	bf00      	nop
 800477a:	3718      	adds	r7, #24
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f7ff f975 	bl	8003a8e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047a4:	bf00      	nop
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b088      	sub	sp, #32
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	e853 3f00 	ldrex	r3, [r3]
 80047c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047c8:	61fb      	str	r3, [r7, #28]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	461a      	mov	r2, r3
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	61bb      	str	r3, [r7, #24]
 80047d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d6:	6979      	ldr	r1, [r7, #20]
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	e841 2300 	strex	r3, r2, [r1]
 80047de:	613b      	str	r3, [r7, #16]
   return(result);
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1e6      	bne.n	80047b4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2220      	movs	r2, #32
 80047ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f7ff f92f 	bl	8003a58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047fa:	bf00      	nop
 80047fc:	3720      	adds	r7, #32
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004802:	b480      	push	{r7}
 8004804:	b083      	sub	sp, #12
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800480a:	bf00      	nop
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	bc80      	pop	{r7}
 8004812:	4770      	bx	lr

08004814 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	bc80      	pop	{r7}
 8004824:	4770      	bx	lr

08004826 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004826:	b480      	push	{r7}
 8004828:	b083      	sub	sp, #12
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800482e:	bf00      	nop
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	bc80      	pop	{r7}
 8004836:	4770      	bx	lr

08004838 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004846:	2b01      	cmp	r3, #1
 8004848:	d101      	bne.n	800484e <HAL_UARTEx_EnableFifoMode+0x16>
 800484a:	2302      	movs	r3, #2
 800484c:	e02b      	b.n	80048a6 <HAL_UARTEx_EnableFifoMode+0x6e>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2224      	movs	r2, #36	; 0x24
 800485a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 0201 	bic.w	r2, r2, #1
 8004874:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800487c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004884:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f88a 	bl	80049a8 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2220      	movs	r2, #32
 8004898:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b084      	sub	sp, #16
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
 80048b6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d101      	bne.n	80048c6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80048c2:	2302      	movs	r3, #2
 80048c4:	e02d      	b.n	8004922 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2224      	movs	r2, #36	; 0x24
 80048d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f022 0201 	bic.w	r2, r2, #1
 80048ec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	430a      	orrs	r2, r1
 8004900:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f850 	bl	80049a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2220      	movs	r2, #32
 8004914:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b084      	sub	sp, #16
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
 8004932:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800493a:	2b01      	cmp	r3, #1
 800493c:	d101      	bne.n	8004942 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800493e:	2302      	movs	r3, #2
 8004940:	e02d      	b.n	800499e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2224      	movs	r2, #36	; 0x24
 800494e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 0201 	bic.w	r2, r2, #1
 8004968:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	430a      	orrs	r2, r1
 800497c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f812 	bl	80049a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2220      	movs	r2, #32
 8004990:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
	...

080049a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d108      	bne.n	80049ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80049c8:	e031      	b.n	8004a2e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80049ca:	2308      	movs	r3, #8
 80049cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80049ce:	2308      	movs	r3, #8
 80049d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	0e5b      	lsrs	r3, r3, #25
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	f003 0307 	and.w	r3, r3, #7
 80049e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	0f5b      	lsrs	r3, r3, #29
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	f003 0307 	and.w	r3, r3, #7
 80049f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80049f2:	7bbb      	ldrb	r3, [r7, #14]
 80049f4:	7b3a      	ldrb	r2, [r7, #12]
 80049f6:	4910      	ldr	r1, [pc, #64]	; (8004a38 <UARTEx_SetNbDataToProcess+0x90>)
 80049f8:	5c8a      	ldrb	r2, [r1, r2]
 80049fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80049fe:	7b3a      	ldrb	r2, [r7, #12]
 8004a00:	490e      	ldr	r1, [pc, #56]	; (8004a3c <UARTEx_SetNbDataToProcess+0x94>)
 8004a02:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004a04:	fb93 f3f2 	sdiv	r3, r3, r2
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
 8004a12:	7b7a      	ldrb	r2, [r7, #13]
 8004a14:	4908      	ldr	r1, [pc, #32]	; (8004a38 <UARTEx_SetNbDataToProcess+0x90>)
 8004a16:	5c8a      	ldrb	r2, [r1, r2]
 8004a18:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004a1c:	7b7a      	ldrb	r2, [r7, #13]
 8004a1e:	4907      	ldr	r1, [pc, #28]	; (8004a3c <UARTEx_SetNbDataToProcess+0x94>)
 8004a20:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004a22:	fb93 f3f2 	sdiv	r3, r3, r2
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004a2e:	bf00      	nop
 8004a30:	3714      	adds	r7, #20
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bc80      	pop	{r7}
 8004a36:	4770      	bx	lr
 8004a38:	08004bfc 	.word	0x08004bfc
 8004a3c:	08004c04 	.word	0x08004c04

08004a40 <__libc_init_array>:
 8004a40:	b570      	push	{r4, r5, r6, lr}
 8004a42:	4d0d      	ldr	r5, [pc, #52]	; (8004a78 <__libc_init_array+0x38>)
 8004a44:	4c0d      	ldr	r4, [pc, #52]	; (8004a7c <__libc_init_array+0x3c>)
 8004a46:	1b64      	subs	r4, r4, r5
 8004a48:	10a4      	asrs	r4, r4, #2
 8004a4a:	2600      	movs	r6, #0
 8004a4c:	42a6      	cmp	r6, r4
 8004a4e:	d109      	bne.n	8004a64 <__libc_init_array+0x24>
 8004a50:	4d0b      	ldr	r5, [pc, #44]	; (8004a80 <__libc_init_array+0x40>)
 8004a52:	4c0c      	ldr	r4, [pc, #48]	; (8004a84 <__libc_init_array+0x44>)
 8004a54:	f000 f82e 	bl	8004ab4 <_init>
 8004a58:	1b64      	subs	r4, r4, r5
 8004a5a:	10a4      	asrs	r4, r4, #2
 8004a5c:	2600      	movs	r6, #0
 8004a5e:	42a6      	cmp	r6, r4
 8004a60:	d105      	bne.n	8004a6e <__libc_init_array+0x2e>
 8004a62:	bd70      	pop	{r4, r5, r6, pc}
 8004a64:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a68:	4798      	blx	r3
 8004a6a:	3601      	adds	r6, #1
 8004a6c:	e7ee      	b.n	8004a4c <__libc_init_array+0xc>
 8004a6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a72:	4798      	blx	r3
 8004a74:	3601      	adds	r6, #1
 8004a76:	e7f2      	b.n	8004a5e <__libc_init_array+0x1e>
 8004a78:	08004c14 	.word	0x08004c14
 8004a7c:	08004c14 	.word	0x08004c14
 8004a80:	08004c14 	.word	0x08004c14
 8004a84:	08004c18 	.word	0x08004c18

08004a88 <memcpy>:
 8004a88:	440a      	add	r2, r1
 8004a8a:	4291      	cmp	r1, r2
 8004a8c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004a90:	d100      	bne.n	8004a94 <memcpy+0xc>
 8004a92:	4770      	bx	lr
 8004a94:	b510      	push	{r4, lr}
 8004a96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a9e:	4291      	cmp	r1, r2
 8004aa0:	d1f9      	bne.n	8004a96 <memcpy+0xe>
 8004aa2:	bd10      	pop	{r4, pc}

08004aa4 <memset>:
 8004aa4:	4402      	add	r2, r0
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d100      	bne.n	8004aae <memset+0xa>
 8004aac:	4770      	bx	lr
 8004aae:	f803 1b01 	strb.w	r1, [r3], #1
 8004ab2:	e7f9      	b.n	8004aa8 <memset+0x4>

08004ab4 <_init>:
 8004ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ab6:	bf00      	nop
 8004ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aba:	bc08      	pop	{r3}
 8004abc:	469e      	mov	lr, r3
 8004abe:	4770      	bx	lr

08004ac0 <_fini>:
 8004ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ac2:	bf00      	nop
 8004ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ac6:	bc08      	pop	{r3}
 8004ac8:	469e      	mov	lr, r3
 8004aca:	4770      	bx	lr
