
UART_nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054a0  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  080055d8  080055d8  000155d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056d4  080056d4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080056d4  080056d4  000156d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056dc  080056dc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056dc  080056dc  000156dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056e0  080056e0  000156e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080056e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  2000000c  080056f0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  080056f0  00020274  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011090  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000260f  00000000  00000000  000310c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001048  00000000  00000000  000336d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f70  00000000  00000000  00034720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c0c3  00000000  00000000  00035690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd60  00000000  00000000  00051753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afa61  00000000  00000000  000614b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00110f14  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042b8  00000000  00000000  00110f64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000000c 	.word	0x2000000c
 8000154:	00000000 	.word	0x00000000
 8000158:	080055c0 	.word	0x080055c0

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000010 	.word	0x20000010
 8000174:	080055c0 	.word	0x080055c0

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000188:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800018c:	f000 b974 	b.w	8000478 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9e08      	ldr	r6, [sp, #32]
 80001ae:	460d      	mov	r5, r1
 80001b0:	4604      	mov	r4, r0
 80001b2:	4688      	mov	r8, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14d      	bne.n	8000254 <__udivmoddi4+0xac>
 80001b8:	428a      	cmp	r2, r1
 80001ba:	4694      	mov	ip, r2
 80001bc:	d968      	bls.n	8000290 <__udivmoddi4+0xe8>
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	b152      	cbz	r2, 80001da <__udivmoddi4+0x32>
 80001c4:	fa01 f302 	lsl.w	r3, r1, r2
 80001c8:	f1c2 0120 	rsb	r1, r2, #32
 80001cc:	fa20 f101 	lsr.w	r1, r0, r1
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	ea41 0803 	orr.w	r8, r1, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80001de:	0c21      	lsrs	r1, r4, #16
 80001e0:	fbb8 fef5 	udiv	lr, r8, r5
 80001e4:	fa1f f78c 	uxth.w	r7, ip
 80001e8:	fb05 831e 	mls	r3, r5, lr, r8
 80001ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f0:	fb0e f107 	mul.w	r1, lr, r7
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d90b      	bls.n	8000210 <__udivmoddi4+0x68>
 80001f8:	eb1c 0303 	adds.w	r3, ip, r3
 80001fc:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 8000200:	f080 811e 	bcs.w	8000440 <__udivmoddi4+0x298>
 8000204:	4299      	cmp	r1, r3
 8000206:	f240 811b 	bls.w	8000440 <__udivmoddi4+0x298>
 800020a:	f1ae 0e02 	sub.w	lr, lr, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a5b      	subs	r3, r3, r1
 8000212:	b2a4      	uxth	r4, r4
 8000214:	fbb3 f0f5 	udiv	r0, r3, r5
 8000218:	fb05 3310 	mls	r3, r5, r0, r3
 800021c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000220:	fb00 f707 	mul.w	r7, r0, r7
 8000224:	42a7      	cmp	r7, r4
 8000226:	d90a      	bls.n	800023e <__udivmoddi4+0x96>
 8000228:	eb1c 0404 	adds.w	r4, ip, r4
 800022c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000230:	f080 8108 	bcs.w	8000444 <__udivmoddi4+0x29c>
 8000234:	42a7      	cmp	r7, r4
 8000236:	f240 8105 	bls.w	8000444 <__udivmoddi4+0x29c>
 800023a:	4464      	add	r4, ip
 800023c:	3802      	subs	r0, #2
 800023e:	1be4      	subs	r4, r4, r7
 8000240:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa8>
 8000248:	40d4      	lsrs	r4, r2
 800024a:	2300      	movs	r3, #0
 800024c:	e9c6 4300 	strd	r4, r3, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	428b      	cmp	r3, r1
 8000256:	d908      	bls.n	800026a <__udivmoddi4+0xc2>
 8000258:	2e00      	cmp	r6, #0
 800025a:	f000 80ee 	beq.w	800043a <__udivmoddi4+0x292>
 800025e:	2100      	movs	r1, #0
 8000260:	e9c6 0500 	strd	r0, r5, [r6]
 8000264:	4608      	mov	r0, r1
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f183 	clz	r1, r3
 800026e:	2900      	cmp	r1, #0
 8000270:	d14a      	bne.n	8000308 <__udivmoddi4+0x160>
 8000272:	42ab      	cmp	r3, r5
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd4>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80f9 	bhi.w	800046e <__udivmoddi4+0x2c6>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb65 0303 	sbc.w	r3, r5, r3
 8000282:	2001      	movs	r0, #1
 8000284:	4698      	mov	r8, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e2      	beq.n	8000250 <__udivmoddi4+0xa8>
 800028a:	e9c6 4800 	strd	r4, r8, [r6]
 800028e:	e7df      	b.n	8000250 <__udivmoddi4+0xa8>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xec>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 8091 	bne.w	80003c0 <__udivmoddi4+0x218>
 800029e:	eba1 050c 	sub.w	r5, r1, ip
 80002a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a6:	fa1f fe8c 	uxth.w	lr, ip
 80002aa:	2101      	movs	r1, #1
 80002ac:	fbb5 f3f7 	udiv	r3, r5, r7
 80002b0:	fb07 5013 	mls	r0, r7, r3, r5
 80002b4:	0c25      	lsrs	r5, r4, #16
 80002b6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ba:	fb0e f003 	mul.w	r0, lr, r3
 80002be:	42a8      	cmp	r0, r5
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x12c>
 80002c2:	eb1c 0505 	adds.w	r5, ip, r5
 80002c6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x12a>
 80002cc:	42a8      	cmp	r0, r5
 80002ce:	f200 80cb 	bhi.w	8000468 <__udivmoddi4+0x2c0>
 80002d2:	4643      	mov	r3, r8
 80002d4:	1a2d      	subs	r5, r5, r0
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0f7 	udiv	r0, r5, r7
 80002dc:	fb07 5510 	mls	r5, r7, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb0e fe00 	mul.w	lr, lr, r0
 80002e8:	45a6      	cmp	lr, r4
 80002ea:	d908      	bls.n	80002fe <__udivmoddi4+0x156>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80002f4:	d202      	bcs.n	80002fc <__udivmoddi4+0x154>
 80002f6:	45a6      	cmp	lr, r4
 80002f8:	f200 80bb 	bhi.w	8000472 <__udivmoddi4+0x2ca>
 80002fc:	4628      	mov	r0, r5
 80002fe:	eba4 040e 	sub.w	r4, r4, lr
 8000302:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000306:	e79e      	b.n	8000246 <__udivmoddi4+0x9e>
 8000308:	f1c1 0720 	rsb	r7, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000312:	ea4c 0c03 	orr.w	ip, ip, r3
 8000316:	fa20 f407 	lsr.w	r4, r0, r7
 800031a:	fa05 f301 	lsl.w	r3, r5, r1
 800031e:	431c      	orrs	r4, r3
 8000320:	40fd      	lsrs	r5, r7
 8000322:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000326:	fa00 f301 	lsl.w	r3, r0, r1
 800032a:	fbb5 f8f9 	udiv	r8, r5, r9
 800032e:	0c20      	lsrs	r0, r4, #16
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	fb09 5518 	mls	r5, r9, r8, r5
 8000338:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800033c:	fb08 f00e 	mul.w	r0, r8, lr
 8000340:	42a8      	cmp	r0, r5
 8000342:	fa02 f201 	lsl.w	r2, r2, r1
 8000346:	d90b      	bls.n	8000360 <__udivmoddi4+0x1b8>
 8000348:	eb1c 0505 	adds.w	r5, ip, r5
 800034c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000350:	f080 8088 	bcs.w	8000464 <__udivmoddi4+0x2bc>
 8000354:	42a8      	cmp	r0, r5
 8000356:	f240 8085 	bls.w	8000464 <__udivmoddi4+0x2bc>
 800035a:	f1a8 0802 	sub.w	r8, r8, #2
 800035e:	4465      	add	r5, ip
 8000360:	1a2d      	subs	r5, r5, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb5 f0f9 	udiv	r0, r5, r9
 8000368:	fb09 5510 	mls	r5, r9, r0, r5
 800036c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000370:	fb00 fe0e 	mul.w	lr, r0, lr
 8000374:	45ae      	cmp	lr, r5
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1e2>
 8000378:	eb1c 0505 	adds.w	r5, ip, r5
 800037c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000380:	d26c      	bcs.n	800045c <__udivmoddi4+0x2b4>
 8000382:	45ae      	cmp	lr, r5
 8000384:	d96a      	bls.n	800045c <__udivmoddi4+0x2b4>
 8000386:	3802      	subs	r0, #2
 8000388:	4465      	add	r5, ip
 800038a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800038e:	fba0 9402 	umull	r9, r4, r0, r2
 8000392:	eba5 050e 	sub.w	r5, r5, lr
 8000396:	42a5      	cmp	r5, r4
 8000398:	46c8      	mov	r8, r9
 800039a:	46a6      	mov	lr, r4
 800039c:	d356      	bcc.n	800044c <__udivmoddi4+0x2a4>
 800039e:	d053      	beq.n	8000448 <__udivmoddi4+0x2a0>
 80003a0:	b15e      	cbz	r6, 80003ba <__udivmoddi4+0x212>
 80003a2:	ebb3 0208 	subs.w	r2, r3, r8
 80003a6:	eb65 050e 	sbc.w	r5, r5, lr
 80003aa:	fa05 f707 	lsl.w	r7, r5, r7
 80003ae:	fa22 f301 	lsr.w	r3, r2, r1
 80003b2:	40cd      	lsrs	r5, r1
 80003b4:	431f      	orrs	r7, r3
 80003b6:	e9c6 7500 	strd	r7, r5, [r6]
 80003ba:	2100      	movs	r1, #0
 80003bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c0:	f1c2 0320 	rsb	r3, r2, #32
 80003c4:	fa20 f103 	lsr.w	r1, r0, r3
 80003c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003cc:	fa25 f303 	lsr.w	r3, r5, r3
 80003d0:	4095      	lsls	r5, r2
 80003d2:	430d      	orrs	r5, r1
 80003d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3011 	mls	r0, r7, r1, r3
 80003e4:	0c2b      	lsrs	r3, r5, #16
 80003e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80003ea:	fb01 f00e 	mul.w	r0, r1, lr
 80003ee:	4298      	cmp	r0, r3
 80003f0:	fa04 f402 	lsl.w	r4, r4, r2
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x260>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80003fe:	d22f      	bcs.n	8000460 <__udivmoddi4+0x2b8>
 8000400:	4298      	cmp	r0, r3
 8000402:	d92d      	bls.n	8000460 <__udivmoddi4+0x2b8>
 8000404:	3902      	subs	r1, #2
 8000406:	4463      	add	r3, ip
 8000408:	1a1b      	subs	r3, r3, r0
 800040a:	b2ad      	uxth	r5, r5
 800040c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000410:	fb07 3310 	mls	r3, r7, r0, r3
 8000414:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000418:	fb00 f30e 	mul.w	r3, r0, lr
 800041c:	42ab      	cmp	r3, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x28a>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000428:	d216      	bcs.n	8000458 <__udivmoddi4+0x2b0>
 800042a:	42ab      	cmp	r3, r5
 800042c:	d914      	bls.n	8000458 <__udivmoddi4+0x2b0>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	1aed      	subs	r5, r5, r3
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	e738      	b.n	80002ac <__udivmoddi4+0x104>
 800043a:	4631      	mov	r1, r6
 800043c:	4630      	mov	r0, r6
 800043e:	e707      	b.n	8000250 <__udivmoddi4+0xa8>
 8000440:	4686      	mov	lr, r0
 8000442:	e6e5      	b.n	8000210 <__udivmoddi4+0x68>
 8000444:	4618      	mov	r0, r3
 8000446:	e6fa      	b.n	800023e <__udivmoddi4+0x96>
 8000448:	454b      	cmp	r3, r9
 800044a:	d2a9      	bcs.n	80003a0 <__udivmoddi4+0x1f8>
 800044c:	ebb9 0802 	subs.w	r8, r9, r2
 8000450:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000454:	3801      	subs	r0, #1
 8000456:	e7a3      	b.n	80003a0 <__udivmoddi4+0x1f8>
 8000458:	4640      	mov	r0, r8
 800045a:	e7ea      	b.n	8000432 <__udivmoddi4+0x28a>
 800045c:	4620      	mov	r0, r4
 800045e:	e794      	b.n	800038a <__udivmoddi4+0x1e2>
 8000460:	4641      	mov	r1, r8
 8000462:	e7d1      	b.n	8000408 <__udivmoddi4+0x260>
 8000464:	46d0      	mov	r8, sl
 8000466:	e77b      	b.n	8000360 <__udivmoddi4+0x1b8>
 8000468:	3b02      	subs	r3, #2
 800046a:	4465      	add	r5, ip
 800046c:	e732      	b.n	80002d4 <__udivmoddi4+0x12c>
 800046e:	4608      	mov	r0, r1
 8000470:	e709      	b.n	8000286 <__udivmoddi4+0xde>
 8000472:	4464      	add	r4, ip
 8000474:	3802      	subs	r0, #2
 8000476:	e742      	b.n	80002fe <__udivmoddi4+0x156>

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <get_gps>:
  * @brief Query the GPS for a GPGGA packet (UTC time, lat, long).
  * @param h.uart UART handle for the GPS
  * @param msgbuf pointer to the struct to store the final message
  * @retval 0 on success, 1 on failure
  */
int get_gps(UART_HandleTypeDef * huart, nmea_gpgga_t * msgbuf){
 800047c:	b5b0      	push	{r4, r5, r7, lr}
 800047e:	b0a6      	sub	sp, #152	; 0x98
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
 8000484:	6039      	str	r1, [r7, #0]
	char raw[100] = {"0"};
 8000486:	2330      	movs	r3, #48	; 0x30
 8000488:	627b      	str	r3, [r7, #36]	; 0x24
 800048a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800048e:	2260      	movs	r2, #96	; 0x60
 8000490:	2100      	movs	r1, #0
 8000492:	4618      	mov	r0, r3
 8000494:	f005 f88c 	bl	80055b0 <memset>
		pfix,
		sat,
		nomsg,
		msgdone
	} nmea_field_t;
	nmea_field_t next_field=nomsg;
 8000498:	2308      	movs	r3, #8
 800049a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	int field_i = 0;
 800049e:	2300      	movs	r3, #0
 80004a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	// query the GGA message from the GPS.
	char queryGGA[]= "$PSRF103,00,01,10,00,\r\n";
 80004a4:	4bb5      	ldr	r3, [pc, #724]	; (800077c <get_gps+0x300>)
 80004a6:	f107 040c 	add.w	r4, r7, #12
 80004aa:	461d      	mov	r5, r3
 80004ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004b0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80004b4:	e884 0003 	stmia.w	r4, {r0, r1}
	HAL_UART_Transmit(huart, (uint8_t *)queryGGA, 25, 100);
 80004b8:	f107 010c 	add.w	r1, r7, #12
 80004bc:	2364      	movs	r3, #100	; 0x64
 80004be:	2219      	movs	r2, #25
 80004c0:	6878      	ldr	r0, [r7, #4]
 80004c2:	f002 ffe4 	bl	800348e <HAL_UART_Transmit>
	// Receive bytes one-by-one into the raw buffer.
	for (int i =0; i<90; i++){
 80004c6:	2300      	movs	r3, #0
 80004c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80004cc:	e00f      	b.n	80004ee <get_gps+0x72>
		HAL_UART_Receive(huart, (uint8_t *)&raw[i], 1, 1000);
 80004ce:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80004d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80004d6:	18d1      	adds	r1, r2, r3
 80004d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004dc:	2201      	movs	r2, #1
 80004de:	6878      	ldr	r0, [r7, #4]
 80004e0:	f003 f86b 	bl	80035ba <HAL_UART_Receive>
	for (int i =0; i<90; i++){
 80004e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80004e8:	3301      	adds	r3, #1
 80004ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80004ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80004f2:	2b59      	cmp	r3, #89	; 0x59
 80004f4:	ddeb      	ble.n	80004ce <get_gps+0x52>
	  }
	// Process the raw message buffer to get the message.
	for (int i=0; i<90; i++){
 80004f6:	2300      	movs	r3, #0
 80004f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80004fc:	e133      	b.n	8000766 <get_gps+0x2ea>
		switch(next_field){
 80004fe:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000502:	2b09      	cmp	r3, #9
 8000504:	f200 812a 	bhi.w	800075c <get_gps+0x2e0>
 8000508:	a201      	add	r2, pc, #4	; (adr r2, 8000510 <get_gps+0x94>)
 800050a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800050e:	bf00      	nop
 8000510:	080005b7 	.word	0x080005b7
 8000514:	080005d7 	.word	0x080005d7
 8000518:	08000619 	.word	0x08000619
 800051c:	0800065d 	.word	0x0800065d
 8000520:	0800068d 	.word	0x0800068d
 8000524:	080006d1 	.word	0x080006d1
 8000528:	08000701 	.word	0x08000701
 800052c:	0800072b 	.word	0x0800072b
 8000530:	08000539 	.word	0x08000539
 8000534:	0800075d 	.word	0x0800075d
			case nomsg	:
				// check for the $GPGGA that starts the message.
				if ((raw[i]=='$')&&(raw[i+1]=='G')&&(raw[i+2]=='P')&&(raw[i+3]=='G')&&(raw[i+4]=='G')&&(raw[i+5]=='A')){
 8000538:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800053c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000540:	4413      	add	r3, r2
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2b24      	cmp	r3, #36	; 0x24
 8000546:	f040 8106 	bne.w	8000756 <get_gps+0x2da>
 800054a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800054e:	3301      	adds	r3, #1
 8000550:	3398      	adds	r3, #152	; 0x98
 8000552:	443b      	add	r3, r7
 8000554:	f813 3c74 	ldrb.w	r3, [r3, #-116]
 8000558:	2b47      	cmp	r3, #71	; 0x47
 800055a:	f040 80fc 	bne.w	8000756 <get_gps+0x2da>
 800055e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000562:	3302      	adds	r3, #2
 8000564:	3398      	adds	r3, #152	; 0x98
 8000566:	443b      	add	r3, r7
 8000568:	f813 3c74 	ldrb.w	r3, [r3, #-116]
 800056c:	2b50      	cmp	r3, #80	; 0x50
 800056e:	f040 80f2 	bne.w	8000756 <get_gps+0x2da>
 8000572:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000576:	3303      	adds	r3, #3
 8000578:	3398      	adds	r3, #152	; 0x98
 800057a:	443b      	add	r3, r7
 800057c:	f813 3c74 	ldrb.w	r3, [r3, #-116]
 8000580:	2b47      	cmp	r3, #71	; 0x47
 8000582:	f040 80e8 	bne.w	8000756 <get_gps+0x2da>
 8000586:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800058a:	3304      	adds	r3, #4
 800058c:	3398      	adds	r3, #152	; 0x98
 800058e:	443b      	add	r3, r7
 8000590:	f813 3c74 	ldrb.w	r3, [r3, #-116]
 8000594:	2b47      	cmp	r3, #71	; 0x47
 8000596:	f040 80de 	bne.w	8000756 <get_gps+0x2da>
 800059a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800059e:	3305      	adds	r3, #5
 80005a0:	3398      	adds	r3, #152	; 0x98
 80005a2:	443b      	add	r3, r7
 80005a4:	f813 3c74 	ldrb.w	r3, [r3, #-116]
 80005a8:	2b41      	cmp	r3, #65	; 0x41
 80005aa:	f040 80d4 	bne.w	8000756 <get_gps+0x2da>
					next_field=header; // increment to the next field
 80005ae:	2300      	movs	r3, #0
 80005b0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				}
				break;
 80005b4:	e0cf      	b.n	8000756 <get_gps+0x2da>
			case header :
				if (raw[i] == ','){
 80005b6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80005ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80005be:	4413      	add	r3, r2
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	2b2c      	cmp	r3, #44	; 0x2c
 80005c4:	f040 80c9 	bne.w	800075a <get_gps+0x2de>
					next_field=utc; // increment to the next field on the delimiter comma
 80005c8:	2301      	movs	r3, #1
 80005ca:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					field_i = 0; // reset the field index
 80005ce:	2300      	movs	r3, #0
 80005d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
					break;
 80005d4:	e0c2      	b.n	800075c <get_gps+0x2e0>
				}
				break;
			case utc	:
				if (raw[i] == ','){
 80005d6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80005da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80005de:	4413      	add	r3, r2
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b2c      	cmp	r3, #44	; 0x2c
 80005e4:	d106      	bne.n	80005f4 <get_gps+0x178>
					next_field=lat; // increment to the next field on the delimiter comma
 80005e6:	2302      	movs	r3, #2
 80005e8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					field_i = 0; // reset the field index
 80005ec:	2300      	movs	r3, #0
 80005ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
					break;
 80005f2:	e0b3      	b.n	800075c <get_gps+0x2e0>
				}
				msgbuf->UTC_Time[field_i] = raw[i];
 80005f4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80005f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80005fc:	4413      	add	r3, r2
 80005fe:	7819      	ldrb	r1, [r3, #0]
 8000600:	683a      	ldr	r2, [r7, #0]
 8000602:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000606:	4413      	add	r3, r2
 8000608:	460a      	mov	r2, r1
 800060a:	701a      	strb	r2, [r3, #0]
				field_i ++;
 800060c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000610:	3301      	adds	r3, #1
 8000612:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				break;
 8000616:	e0a1      	b.n	800075c <get_gps+0x2e0>
			case lat	:
				if (raw[i] == ','){
 8000618:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800061c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000620:	4413      	add	r3, r2
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b2c      	cmp	r3, #44	; 0x2c
 8000626:	d106      	bne.n	8000636 <get_gps+0x1ba>
					next_field=ns; // increment to the next field on the delimiter comma
 8000628:	2303      	movs	r3, #3
 800062a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					field_i = 0; // reset the field index
 800062e:	2300      	movs	r3, #0
 8000630:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
					break;
 8000634:	e092      	b.n	800075c <get_gps+0x2e0>
				}
				msgbuf->latitude[field_i] = raw[i];
 8000636:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800063a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800063e:	4413      	add	r3, r2
 8000640:	7819      	ldrb	r1, [r3, #0]
 8000642:	683a      	ldr	r2, [r7, #0]
 8000644:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000648:	4413      	add	r3, r2
 800064a:	330a      	adds	r3, #10
 800064c:	460a      	mov	r2, r1
 800064e:	701a      	strb	r2, [r3, #0]
				field_i ++;
 8000650:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000654:	3301      	adds	r3, #1
 8000656:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				break;
 800065a:	e07f      	b.n	800075c <get_gps+0x2e0>
			case ns		:
				if (raw[i] == ','){
 800065c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000660:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000664:	4413      	add	r3, r2
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b2c      	cmp	r3, #44	; 0x2c
 800066a:	d106      	bne.n	800067a <get_gps+0x1fe>
					next_field=lontd; // increment to the next field on the delimiter comma
 800066c:	2304      	movs	r3, #4
 800066e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					field_i = 0; // reset the field index
 8000672:	2300      	movs	r3, #0
 8000674:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
					break;
 8000678:	e070      	b.n	800075c <get_gps+0x2e0>
				}
				msgbuf->NS=raw[i];
 800067a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800067e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000682:	4413      	add	r3, r2
 8000684:	781a      	ldrb	r2, [r3, #0]
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	74da      	strb	r2, [r3, #19]
				break;
 800068a:	e067      	b.n	800075c <get_gps+0x2e0>
			case lontd	:
				if (raw[i] == ','){
 800068c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000690:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000694:	4413      	add	r3, r2
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b2c      	cmp	r3, #44	; 0x2c
 800069a:	d106      	bne.n	80006aa <get_gps+0x22e>
					next_field=ew; // increment to the next field on the delimiter comma
 800069c:	2305      	movs	r3, #5
 800069e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					field_i = 0; // reset the field index
 80006a2:	2300      	movs	r3, #0
 80006a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
					break;
 80006a8:	e058      	b.n	800075c <get_gps+0x2e0>
				}
				msgbuf->longitude[field_i]=raw[i];
 80006aa:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80006ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80006b2:	4413      	add	r3, r2
 80006b4:	7819      	ldrb	r1, [r3, #0]
 80006b6:	683a      	ldr	r2, [r7, #0]
 80006b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80006bc:	4413      	add	r3, r2
 80006be:	3314      	adds	r3, #20
 80006c0:	460a      	mov	r2, r1
 80006c2:	701a      	strb	r2, [r3, #0]
				field_i ++;
 80006c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80006c8:	3301      	adds	r3, #1
 80006ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				break;
 80006ce:	e045      	b.n	800075c <get_gps+0x2e0>
			case ew		:
				if (raw[i] == ','){
 80006d0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80006d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80006d8:	4413      	add	r3, r2
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b2c      	cmp	r3, #44	; 0x2c
 80006de:	d106      	bne.n	80006ee <get_gps+0x272>
					next_field=pfix; // increment to the next field on the delimiter comma
 80006e0:	2306      	movs	r3, #6
 80006e2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					field_i = 0; // reset the field index
 80006e6:	2300      	movs	r3, #0
 80006e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
					break;
 80006ec:	e036      	b.n	800075c <get_gps+0x2e0>
				}
				msgbuf->EW=raw[i];
 80006ee:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80006f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80006f6:	4413      	add	r3, r2
 80006f8:	781a      	ldrb	r2, [r3, #0]
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	779a      	strb	r2, [r3, #30]
				break;
 80006fe:	e02d      	b.n	800075c <get_gps+0x2e0>
			case pfix	:
				if (raw[i] == ','){
 8000700:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000704:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000708:	4413      	add	r3, r2
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b2c      	cmp	r3, #44	; 0x2c
 800070e:	d103      	bne.n	8000718 <get_gps+0x29c>
					next_field=sat; // finished message
 8000710:	2307      	movs	r3, #7
 8000712:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					break;
 8000716:	e021      	b.n	800075c <get_gps+0x2e0>
				}
				msgbuf->pos_fix=raw[i];
 8000718:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800071c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000720:	4413      	add	r3, r2
 8000722:	781a      	ldrb	r2, [r3, #0]
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	77da      	strb	r2, [r3, #31]
				break;
 8000728:	e018      	b.n	800075c <get_gps+0x2e0>
			case sat	:
				if (raw[i] == ','){
 800072a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800072e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000732:	4413      	add	r3, r2
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b2c      	cmp	r3, #44	; 0x2c
 8000738:	d103      	bne.n	8000742 <get_gps+0x2c6>
					next_field=msgdone; // finished message
 800073a:	2309      	movs	r3, #9
 800073c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					break;
 8000740:	e00c      	b.n	800075c <get_gps+0x2e0>
				}
				msgbuf->sat_used=raw[i];
 8000742:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000746:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800074a:	4413      	add	r3, r2
 800074c:	781a      	ldrb	r2, [r3, #0]
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	f883 2020 	strb.w	r2, [r3, #32]
			case msgdone:
				break;
 8000754:	e002      	b.n	800075c <get_gps+0x2e0>
				break;
 8000756:	bf00      	nop
 8000758:	e000      	b.n	800075c <get_gps+0x2e0>
				break;
 800075a:	bf00      	nop
	for (int i=0; i<90; i++){
 800075c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000760:	3301      	adds	r3, #1
 8000762:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000766:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800076a:	2b59      	cmp	r3, #89	; 0x59
 800076c:	f77f aec7 	ble.w	80004fe <get_gps+0x82>
			}
	}
	return 0;
 8000770:	2300      	movs	r3, #0
}
 8000772:	4618      	mov	r0, r3
 8000774:	3798      	adds	r7, #152	; 0x98
 8000776:	46bd      	mov	sp, r7
 8000778:	bdb0      	pop	{r4, r5, r7, pc}
 800077a:	bf00      	nop
 800077c:	080055d8 	.word	0x080055d8

08000780 <get_rfid_msg>:
 *
 */

#include "btrfid.h"

int get_rfid_msg(uint8_t * rfidmsgbuf, uint8_t * rawmsgbuf2){
 8000780:	b480      	push	{r7}
 8000782:	b087      	sub	sp, #28
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	6039      	str	r1, [r7, #0]
	typedef enum rfid_field{
		before,
		msg,
		after
	}rfid_field_t;
	rfid_field_t next_field=before;
 800078a:	2300      	movs	r3, #0
 800078c:	74fb      	strb	r3, [r7, #19]
	for (int i = 0; i < 50; i ++){
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	e03b      	b.n	800080c <get_rfid_msg+0x8c>
		switch (next_field){
 8000794:	7cfb      	ldrb	r3, [r7, #19]
 8000796:	2b02      	cmp	r3, #2
 8000798:	d030      	beq.n	80007fc <get_rfid_msg+0x7c>
 800079a:	2b02      	cmp	r3, #2
 800079c:	dc33      	bgt.n	8000806 <get_rfid_msg+0x86>
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d002      	beq.n	80007a8 <get_rfid_msg+0x28>
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d016      	beq.n	80007d4 <get_rfid_msg+0x54>
 80007a6:	e02e      	b.n	8000806 <get_rfid_msg+0x86>
		case before:
			if (rawmsgbuf2[i]==0x3F){
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	683a      	ldr	r2, [r7, #0]
 80007ac:	4413      	add	r3, r2
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2b3f      	cmp	r3, #63	; 0x3f
 80007b2:	d125      	bne.n	8000800 <get_rfid_msg+0x80>
				next_field=msg;
 80007b4:	2301      	movs	r3, #1
 80007b6:	74fb      	strb	r3, [r7, #19]
				msgindex=0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
				rfidmsgbuf[msgindex]=rawmsgbuf2[i];
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	683a      	ldr	r2, [r7, #0]
 80007c0:	441a      	add	r2, r3
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	6879      	ldr	r1, [r7, #4]
 80007c6:	440b      	add	r3, r1
 80007c8:	7812      	ldrb	r2, [r2, #0]
 80007ca:	701a      	strb	r2, [r3, #0]
				msgindex++;
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	3301      	adds	r3, #1
 80007d0:	617b      	str	r3, [r7, #20]
			}
			break;
 80007d2:	e015      	b.n	8000800 <get_rfid_msg+0x80>
		case msg:
			rfidmsgbuf[msgindex]=rawmsgbuf2[i];
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	683a      	ldr	r2, [r7, #0]
 80007d8:	441a      	add	r2, r3
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	6879      	ldr	r1, [r7, #4]
 80007de:	440b      	add	r3, r1
 80007e0:	7812      	ldrb	r2, [r2, #0]
 80007e2:	701a      	strb	r2, [r3, #0]
			msgindex++;
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	3301      	adds	r3, #1
 80007e8:	617b      	str	r3, [r7, #20]
			if (rawmsgbuf2[i]==0xF2){
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	683a      	ldr	r2, [r7, #0]
 80007ee:	4413      	add	r3, r2
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2bf2      	cmp	r3, #242	; 0xf2
 80007f4:	d106      	bne.n	8000804 <get_rfid_msg+0x84>
				next_field=after;
 80007f6:	2302      	movs	r3, #2
 80007f8:	74fb      	strb	r3, [r7, #19]
			}
			break;
 80007fa:	e003      	b.n	8000804 <get_rfid_msg+0x84>
		case after:
				break;
 80007fc:	bf00      	nop
 80007fe:	e002      	b.n	8000806 <get_rfid_msg+0x86>
			break;
 8000800:	bf00      	nop
 8000802:	e000      	b.n	8000806 <get_rfid_msg+0x86>
			break;
 8000804:	bf00      	nop
	for (int i = 0; i < 50; i ++){
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	3301      	adds	r3, #1
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	2b31      	cmp	r3, #49	; 0x31
 8000810:	ddc0      	ble.n	8000794 <get_rfid_msg+0x14>
		}
	}
	return 0;
 8000812:	2300      	movs	r3, #0
}
 8000814:	4618      	mov	r0, r3
 8000816:	371c      	adds	r7, #28
 8000818:	46bd      	mov	sp, r7
 800081a:	bc80      	pop	{r7}
 800081c:	4770      	bx	lr

0800081e <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800081e:	b480      	push	{r7}
 8000820:	b083      	sub	sp, #12
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000826:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800082a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800082e:	f023 0218 	bic.w	r2, r3, #24
 8000832:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4313      	orrs	r3, r2
 800083a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800083e:	bf00      	nop
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr

08000848 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000854:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000856:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4313      	orrs	r3, r2
 800085e:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000864:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4013      	ands	r3, r2
 800086a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800086c:	68fb      	ldr	r3, [r7, #12]
}
 800086e:	bf00      	nop
 8000870:	3714      	adds	r7, #20
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr

08000878 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000884:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000886:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4313      	orrs	r3, r2
 800088e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000894:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4013      	ands	r3, r2
 800089a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800089c:	68fb      	ldr	r3, [r7, #12]
}
 800089e:	bf00      	nop
 80008a0:	3714      	adds	r7, #20
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr

080008a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	mystate=BT_IDLE;
 80008ae:	4b62      	ldr	r3, [pc, #392]	; (8000a38 <main+0x190>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008b4:	f000 fc70 	bl	8001198 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b8:	f000 f8ca 	bl	8000a50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008bc:	f000 fa06 	bl	8000ccc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80008c0:	f000 f9a4 	bl	8000c0c <MX_USART1_UART_Init>
  MX_DMA_Init();
 80008c4:	f000 f9f0 	bl	8000ca8 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80008c8:	f000 f94a 	bl	8000b60 <MX_LPUART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80008cc:	f000 f92c 	bl	8000b28 <MX_NVIC_Init>
  /// Enabling interrupts???
  //__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE); // flag receive
  //__HAL_UART_ENABLE_IT(&huart1, UART_IT_TC); // flat Tx_IT


  HAL_GPIO_WritePin(IDLE_GPIO_Port, IDLE_Pin, GPIO_PIN_SET);
 80008d0:	2201      	movs	r2, #1
 80008d2:	2110      	movs	r1, #16
 80008d4:	4859      	ldr	r0, [pc, #356]	; (8000a3c <main+0x194>)
 80008d6:	f001 fa09 	bl	8001cec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IDLE_GPIO_Port, IDLE_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	2110      	movs	r1, #16
 80008de:	4857      	ldr	r0, [pc, #348]	; (8000a3c <main+0x194>)
 80008e0:	f001 fa04 	bl	8001cec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(UNLOCKED_GPIO_Port, UNLOCKED_Pin, GPIO_PIN_SET);
 80008e4:	2201      	movs	r2, #1
 80008e6:	2120      	movs	r1, #32
 80008e8:	4854      	ldr	r0, [pc, #336]	; (8000a3c <main+0x194>)
 80008ea:	f001 f9ff 	bl	8001cec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(UNLOCKED_GPIO_Port, UNLOCKED_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2120      	movs	r1, #32
 80008f2:	4852      	ldr	r0, [pc, #328]	; (8000a3c <main+0x194>)
 80008f4:	f001 f9fa 	bl	8001cec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRANSIT_GPIO_Port, TRANSIT_Pin, GPIO_PIN_SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000902:	f001 f9f3 	bl	8001cec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRANSIT_GPIO_Port, TRANSIT_Pin, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800090c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000910:	f001 f9ec 	bl	8001cec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, GPIO_PIN_SET);
 8000914:	2201      	movs	r2, #1
 8000916:	f44f 7100 	mov.w	r1, #512	; 0x200
 800091a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091e:	f001 f9e5 	bl	8001cec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000928:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800092c:	f001 f9de 	bl	8001cec <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 // prev_gpsmsgbuf = cur_gpsmsgbuf;
 	  get_gps(&huart1,&cur_gpsmsgbuf);
 8000930:	4943      	ldr	r1, [pc, #268]	; (8000a40 <main+0x198>)
 8000932:	4844      	ldr	r0, [pc, #272]	; (8000a44 <main+0x19c>)
 8000934:	f7ff fda2 	bl	800047c <get_gps>
	  //HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
	  //HAL_StatusTypeDef res = HAL_UART_Receive_DMA(&hlpuart1, rfidbuf, 13);

 //	  HAL_UART_Transmit(&hlpuart1, rfiddummydata, 13, 100);
	//int res = get_gps(&huart1, &msgbuf);
	  switch (mystate){
 8000938:	4b3f      	ldr	r3, [pc, #252]	; (8000a38 <main+0x190>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b03      	cmp	r3, #3
 800093e:	d8f7      	bhi.n	8000930 <main+0x88>
 8000940:	a201      	add	r2, pc, #4	; (adr r2, 8000948 <main+0xa0>)
 8000942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000946:	bf00      	nop
 8000948:	08000959 	.word	0x08000959
 800094c:	08000999 	.word	0x08000999
 8000950:	080009d3 	.word	0x080009d3
 8000954:	08000a05 	.word	0x08000a05
	  case BT_IDLE	:
		  /*** Indicator LEDS ****/
		  HAL_GPIO_WritePin(IDLE_GPIO_Port, IDLE_Pin, GPIO_PIN_SET);
 8000958:	2201      	movs	r2, #1
 800095a:	2110      	movs	r1, #16
 800095c:	4837      	ldr	r0, [pc, #220]	; (8000a3c <main+0x194>)
 800095e:	f001 f9c5 	bl	8001cec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(UNLOCKED_GPIO_Port, UNLOCKED_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	2120      	movs	r1, #32
 8000966:	4835      	ldr	r0, [pc, #212]	; (8000a3c <main+0x194>)
 8000968:	f001 f9c0 	bl	8001cec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TRANSIT_GPIO_Port, TRANSIT_Pin, GPIO_PIN_RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000972:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000976:	f001 f9b9 	bl	8001cec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, GPIO_PIN_RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000980:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000984:	f001 f9b2 	bl	8001cec <HAL_GPIO_WritePin>
		  /*** Read RFID ***/
		  HAL_StatusTypeDef res = HAL_UART_Receive_IT(&hlpuart1,rfidrawbuf,40);
 8000988:	2228      	movs	r2, #40	; 0x28
 800098a:	492f      	ldr	r1, [pc, #188]	; (8000a48 <main+0x1a0>)
 800098c:	482f      	ldr	r0, [pc, #188]	; (8000a4c <main+0x1a4>)
 800098e:	f002 fee7 	bl	8003760 <HAL_UART_Receive_IT>
 8000992:	4603      	mov	r3, r0
 8000994:	71fb      	strb	r3, [r7, #7]
		  /*** Read GPS ***/
		  break;
 8000996:	e04d      	b.n	8000a34 <main+0x18c>
	  case BT_UNLOCKED	:
		  HAL_GPIO_WritePin(IDLE_GPIO_Port, IDLE_Pin, GPIO_PIN_RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	2110      	movs	r1, #16
 800099c:	4827      	ldr	r0, [pc, #156]	; (8000a3c <main+0x194>)
 800099e:	f001 f9a5 	bl	8001cec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(UNLOCKED_GPIO_Port, UNLOCKED_Pin, GPIO_PIN_SET);
 80009a2:	2201      	movs	r2, #1
 80009a4:	2120      	movs	r1, #32
 80009a6:	4825      	ldr	r0, [pc, #148]	; (8000a3c <main+0x194>)
 80009a8:	f001 f9a0 	bl	8001cec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TRANSIT_GPIO_Port, TRANSIT_Pin, GPIO_PIN_RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b6:	f001 f999 	bl	8001cec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c4:	f001 f992 	bl	8001cec <HAL_GPIO_WritePin>
		  get_gps(&huart1,&cur_gpsmsgbuf);
 80009c8:	491d      	ldr	r1, [pc, #116]	; (8000a40 <main+0x198>)
 80009ca:	481e      	ldr	r0, [pc, #120]	; (8000a44 <main+0x19c>)
 80009cc:	f7ff fd56 	bl	800047c <get_gps>
		  break;
 80009d0:	e030      	b.n	8000a34 <main+0x18c>
	  case BT_TRANSIT	:
		  HAL_GPIO_WritePin(IDLE_GPIO_Port, IDLE_Pin, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2110      	movs	r1, #16
 80009d6:	4819      	ldr	r0, [pc, #100]	; (8000a3c <main+0x194>)
 80009d8:	f001 f988 	bl	8001cec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(UNLOCKED_GPIO_Port, UNLOCKED_Pin, GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	2120      	movs	r1, #32
 80009e0:	4816      	ldr	r0, [pc, #88]	; (8000a3c <main+0x194>)
 80009e2:	f001 f983 	bl	8001cec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TRANSIT_GPIO_Port, TRANSIT_Pin, GPIO_PIN_SET);
 80009e6:	2201      	movs	r2, #1
 80009e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f0:	f001 f97c 	bl	8001cec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009fe:	f001 f975 	bl	8001cec <HAL_GPIO_WritePin>
		  break;
 8000a02:	e017      	b.n	8000a34 <main+0x18c>
	  case BT_ALARM:
		  HAL_GPIO_WritePin(IDLE_GPIO_Port, IDLE_Pin, GPIO_PIN_RESET);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2110      	movs	r1, #16
 8000a08:	480c      	ldr	r0, [pc, #48]	; (8000a3c <main+0x194>)
 8000a0a:	f001 f96f 	bl	8001cec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(UNLOCKED_GPIO_Port, UNLOCKED_Pin, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2120      	movs	r1, #32
 8000a12:	480a      	ldr	r0, [pc, #40]	; (8000a3c <main+0x194>)
 8000a14:	f001 f96a 	bl	8001cec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(TRANSIT_GPIO_Port, TRANSIT_Pin, GPIO_PIN_RESET);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a22:	f001 f963 	bl	8001cec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(ALARM_GPIO_Port, ALARM_Pin, GPIO_PIN_SET);
 8000a26:	2201      	movs	r2, #1
 8000a28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a30:	f001 f95c 	bl	8001cec <HAL_GPIO_WritePin>
 	  get_gps(&huart1,&cur_gpsmsgbuf);
 8000a34:	e77c      	b.n	8000930 <main+0x88>
 8000a36:	bf00      	nop
 8000a38:	20000229 	.word	0x20000229
 8000a3c:	48000400 	.word	0x48000400
 8000a40:	20000208 	.word	0x20000208
 8000a44:	200000b8 	.word	0x200000b8
 8000a48:	2000022c 	.word	0x2000022c
 8000a4c:	20000028 	.word	0x20000028

08000a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b09a      	sub	sp, #104	; 0x68
 8000a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a56:	f107 0320 	add.w	r3, r7, #32
 8000a5a:	2248      	movs	r2, #72	; 0x48
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f004 fda6 	bl	80055b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]
 8000a70:	611a      	str	r2, [r3, #16]
 8000a72:	615a      	str	r2, [r3, #20]
 8000a74:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a76:	f001 f951 	bl	8001d1c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f7ff fecf 	bl	800081e <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a80:	4b28      	ldr	r3, [pc, #160]	; (8000b24 <SystemClock_Config+0xd4>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000a88:	4a26      	ldr	r2, [pc, #152]	; (8000b24 <SystemClock_Config+0xd4>)
 8000a8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a8e:	6013      	str	r3, [r2, #0]
 8000a90:	4b24      	ldr	r3, [pc, #144]	; (8000b24 <SystemClock_Config+0xd4>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000a98:	603b      	str	r3, [r7, #0]
 8000a9a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8000a9c:	2326      	movs	r3, #38	; 0x26
 8000a9e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000aa0:	2381      	movs	r3, #129	; 0x81
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aa8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aae:	2340      	movs	r3, #64	; 0x40
 8000ab0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000ab6:	23b0      	movs	r3, #176	; 0xb0
 8000ab8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aba:	2302      	movs	r3, #2
 8000abc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000ac2:	2330      	movs	r3, #48	; 0x30
 8000ac4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000ac6:	2308      	movs	r3, #8
 8000ac8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ace:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ad0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000ad4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ad6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ada:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000adc:	f107 0320 	add.w	r3, r7, #32
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f001 fbed 	bl	80022c0 <HAL_RCC_OscConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000aec:	f000 f980 	bl	8000df0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000af0:	234f      	movs	r3, #79	; 0x4f
 8000af2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af4:	2303      	movs	r3, #3
 8000af6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000afc:	2300      	movs	r3, #0
 8000afe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	2102      	movs	r1, #2
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f001 ff73 	bl	80029f8 <HAL_RCC_ClockConfig>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000b18:	f000 f96a 	bl	8000df0 <Error_Handler>
  }
}
 8000b1c:	bf00      	nop
 8000b1e:	3768      	adds	r7, #104	; 0x68
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	58000400 	.word	0x58000400

08000b28 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2100      	movs	r1, #0
 8000b30:	200b      	movs	r0, #11
 8000b32:	f000 fc7e 	bl	8001432 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b36:	200b      	movs	r0, #11
 8000b38:	f000 fc95 	bl	8001466 <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2100      	movs	r1, #0
 8000b40:	2024      	movs	r0, #36	; 0x24
 8000b42:	f000 fc76 	bl	8001432 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b46:	2024      	movs	r0, #36	; 0x24
 8000b48:	f000 fc8d 	bl	8001466 <HAL_NVIC_EnableIRQ>
  /* LPUART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2100      	movs	r1, #0
 8000b50:	2026      	movs	r0, #38	; 0x26
 8000b52:	f000 fc6e 	bl	8001432 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000b56:	2026      	movs	r0, #38	; 0x26
 8000b58:	f000 fc85 	bl	8001466 <HAL_NVIC_EnableIRQ>
}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000b64:	4b27      	ldr	r3, [pc, #156]	; (8000c04 <MX_LPUART1_UART_Init+0xa4>)
 8000b66:	4a28      	ldr	r2, [pc, #160]	; (8000c08 <MX_LPUART1_UART_Init+0xa8>)
 8000b68:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8000b6a:	4b26      	ldr	r3, [pc, #152]	; (8000c04 <MX_LPUART1_UART_Init+0xa4>)
 8000b6c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b70:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b72:	4b24      	ldr	r3, [pc, #144]	; (8000c04 <MX_LPUART1_UART_Init+0xa4>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b78:	4b22      	ldr	r3, [pc, #136]	; (8000c04 <MX_LPUART1_UART_Init+0xa4>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000b7e:	4b21      	ldr	r3, [pc, #132]	; (8000c04 <MX_LPUART1_UART_Init+0xa4>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b84:	4b1f      	ldr	r3, [pc, #124]	; (8000c04 <MX_LPUART1_UART_Init+0xa4>)
 8000b86:	220c      	movs	r2, #12
 8000b88:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b8a:	4b1e      	ldr	r3, [pc, #120]	; (8000c04 <MX_LPUART1_UART_Init+0xa4>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 8000b90:	4b1c      	ldr	r3, [pc, #112]	; (8000c04 <MX_LPUART1_UART_Init+0xa4>)
 8000b92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b96:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b98:	4b1a      	ldr	r3, [pc, #104]	; (8000c04 <MX_LPUART1_UART_Init+0xa4>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000b9e:	4b19      	ldr	r3, [pc, #100]	; (8000c04 <MX_LPUART1_UART_Init+0xa4>)
 8000ba0:	2230      	movs	r2, #48	; 0x30
 8000ba2:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000ba4:	4b17      	ldr	r3, [pc, #92]	; (8000c04 <MX_LPUART1_UART_Init+0xa4>)
 8000ba6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000baa:	63da      	str	r2, [r3, #60]	; 0x3c
  hlpuart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000bac:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <MX_LPUART1_UART_Init+0xa4>)
 8000bae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bb2:	641a      	str	r2, [r3, #64]	; 0x40
  hlpuart1.FifoMode = UART_FIFOMODE_ENABLE;
 8000bb4:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <MX_LPUART1_UART_Init+0xa4>)
 8000bb6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000bba:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000bbc:	4811      	ldr	r0, [pc, #68]	; (8000c04 <MX_LPUART1_UART_Init+0xa4>)
 8000bbe:	f002 fc16 	bl	80033ee <HAL_UART_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_LPUART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000bc8:	f000 f912 	bl	8000df0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bcc:	2100      	movs	r1, #0
 8000bce:	480d      	ldr	r0, [pc, #52]	; (8000c04 <MX_LPUART1_UART_Init+0xa4>)
 8000bd0:	f004 fc02 	bl	80053d8 <HAL_UARTEx_SetTxFifoThreshold>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_LPUART1_UART_Init+0x7e>
  {
    Error_Handler();
 8000bda:	f000 f909 	bl	8000df0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bde:	2100      	movs	r1, #0
 8000be0:	4808      	ldr	r0, [pc, #32]	; (8000c04 <MX_LPUART1_UART_Init+0xa4>)
 8000be2:	f004 fc37 	bl	8005454 <HAL_UARTEx_SetRxFifoThreshold>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_LPUART1_UART_Init+0x90>
  {
    Error_Handler();
 8000bec:	f000 f900 	bl	8000df0 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&hlpuart1) != HAL_OK)
 8000bf0:	4804      	ldr	r0, [pc, #16]	; (8000c04 <MX_LPUART1_UART_Init+0xa4>)
 8000bf2:	f004 fbb6 	bl	8005362 <HAL_UARTEx_EnableFifoMode>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_LPUART1_UART_Init+0xa0>
  {
    Error_Handler();
 8000bfc:	f000 f8f8 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000028 	.word	0x20000028
 8000c08:	40008000 	.word	0x40008000

08000c0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c10:	4b23      	ldr	r3, [pc, #140]	; (8000ca0 <MX_USART1_UART_Init+0x94>)
 8000c12:	4a24      	ldr	r2, [pc, #144]	; (8000ca4 <MX_USART1_UART_Init+0x98>)
 8000c14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9615;
 8000c16:	4b22      	ldr	r3, [pc, #136]	; (8000ca0 <MX_USART1_UART_Init+0x94>)
 8000c18:	f242 528f 	movw	r2, #9615	; 0x258f
 8000c1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c1e:	4b20      	ldr	r3, [pc, #128]	; (8000ca0 <MX_USART1_UART_Init+0x94>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c24:	4b1e      	ldr	r3, [pc, #120]	; (8000ca0 <MX_USART1_UART_Init+0x94>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ca0 <MX_USART1_UART_Init+0x94>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c30:	4b1b      	ldr	r3, [pc, #108]	; (8000ca0 <MX_USART1_UART_Init+0x94>)
 8000c32:	220c      	movs	r2, #12
 8000c34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c36:	4b1a      	ldr	r3, [pc, #104]	; (8000ca0 <MX_USART1_UART_Init+0x94>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8000c3c:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <MX_USART1_UART_Init+0x94>)
 8000c3e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c42:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 8000c44:	4b16      	ldr	r3, [pc, #88]	; (8000ca0 <MX_USART1_UART_Init+0x94>)
 8000c46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c4a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c4c:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <MX_USART1_UART_Init+0x94>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c52:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <MX_USART1_UART_Init+0x94>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c58:	4811      	ldr	r0, [pc, #68]	; (8000ca0 <MX_USART1_UART_Init+0x94>)
 8000c5a:	f002 fbc8 	bl	80033ee <HAL_UART_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8000c64:	f000 f8c4 	bl	8000df0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c68:	2100      	movs	r1, #0
 8000c6a:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <MX_USART1_UART_Init+0x94>)
 8000c6c:	f004 fbb4 	bl	80053d8 <HAL_UARTEx_SetTxFifoThreshold>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8000c76:	f000 f8bb 	bl	8000df0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4808      	ldr	r0, [pc, #32]	; (8000ca0 <MX_USART1_UART_Init+0x94>)
 8000c7e:	f004 fbe9 	bl	8005454 <HAL_UARTEx_SetRxFifoThreshold>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8000c88:	f000 f8b2 	bl	8000df0 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8000c8c:	4804      	ldr	r0, [pc, #16]	; (8000ca0 <MX_USART1_UART_Init+0x94>)
 8000c8e:	f004 fb68 	bl	8005362 <HAL_UARTEx_EnableFifoMode>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8000c98:	f000 f8aa 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	200000b8 	.word	0x200000b8
 8000ca4:	40013800 	.word	0x40013800

08000ca8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000cac:	2004      	movs	r0, #4
 8000cae:	f7ff fdcb 	bl	8000848 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	f7ff fdc8 	bl	8000848 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2100      	movs	r1, #0
 8000cbc:	200c      	movs	r0, #12
 8000cbe:	f000 fbb8 	bl	8001432 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000cc2:	200c      	movs	r0, #12
 8000cc4:	f000 fbcf 	bl	8001466 <HAL_NVIC_EnableIRQ>

}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	f7ff fdc9 	bl	8000878 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce6:	2002      	movs	r0, #2
 8000ce8:	f7ff fdc6 	bl	8000878 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cec:	2004      	movs	r0, #4
 8000cee:	f7ff fdc3 	bl	8000878 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 8000cf8:	483b      	ldr	r0, [pc, #236]	; (8000de8 <MX_GPIO_Init+0x11c>)
 8000cfa:	f000 fff7 	bl	8001cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TRANSIT_Pin|ALARM_Pin, GPIO_PIN_SET);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8000d04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d08:	f000 fff0 	bl	8001cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IDLE_Pin|UNLOCKED_Pin, GPIO_PIN_SET);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	2130      	movs	r1, #48	; 0x30
 8000d10:	4835      	ldr	r0, [pc, #212]	; (8000de8 <MX_GPIO_Init+0x11c>)
 8000d12:	f000 ffeb 	bl	8001cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2138      	movs	r1, #56	; 0x38
 8000d1a:	4834      	ldr	r0, [pc, #208]	; (8000dec <MX_GPIO_Init+0x120>)
 8000d1c:	f000 ffe6 	bl	8001cec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000d20:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 8000d24:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d26:	2301      	movs	r3, #1
 8000d28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	4619      	mov	r1, r3
 8000d36:	482c      	ldr	r0, [pc, #176]	; (8000de8 <MX_GPIO_Init+0x11c>)
 8000d38:	f000 fe78 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : TRANSIT_Pin ALARM_Pin */
  GPIO_InitStruct.Pin = TRANSIT_Pin|ALARM_Pin;
 8000d3c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000d40:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d42:	2301      	movs	r3, #1
 8000d44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	4619      	mov	r1, r3
 8000d52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d56:	f000 fe69 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : IDLE_Pin UNLOCKED_Pin */
  GPIO_InitStruct.Pin = IDLE_Pin|UNLOCKED_Pin;
 8000d5a:	2330      	movs	r3, #48	; 0x30
 8000d5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	481e      	ldr	r0, [pc, #120]	; (8000de8 <MX_GPIO_Init+0x11c>)
 8000d70:	f000 fe5c 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 8000d74:	2338      	movs	r3, #56	; 0x38
 8000d76:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d80:	2303      	movs	r3, #3
 8000d82:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	4619      	mov	r1, r3
 8000d88:	4818      	ldr	r0, [pc, #96]	; (8000dec <MX_GPIO_Init+0x120>)
 8000d8a:	f000 fe4f 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin B2_Pin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d92:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	4619      	mov	r1, r3
 8000da0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da4:	f000 fe42 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : B3_Pin */
  GPIO_InitStruct.Pin = B3_Pin;
 8000da8:	2340      	movs	r3, #64	; 0x40
 8000daa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dac:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000db0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db2:	2301      	movs	r3, #1
 8000db4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000db6:	1d3b      	adds	r3, r7, #4
 8000db8:	4619      	mov	r1, r3
 8000dba:	480c      	ldr	r0, [pc, #48]	; (8000dec <MX_GPIO_Init+0x120>)
 8000dbc:	f000 fe36 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : T_VCP_RX_Pin T_VCP_RXA2_Pin */
  GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000dc0:	230c      	movs	r3, #12
 8000dc2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dd0:	2307      	movs	r3, #7
 8000dd2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ddc:	f000 fe26 	bl	8001a2c <HAL_GPIO_Init>

}
 8000de0:	bf00      	nop
 8000de2:	3718      	adds	r7, #24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	48000400 	.word	0x48000400
 8000dec:	48000800 	.word	0x48000800

08000df0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df4:	b672      	cpsid	i
}
 8000df6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <Error_Handler+0x8>

08000dfa <LL_AHB2_GRP1_EnableClock>:
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	b085      	sub	sp, #20
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
}
 8000e20:	bf00      	nop
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr

08000e2a <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	b085      	sub	sp, #20
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000e38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000e42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
}
 8000e50:	bf00      	nop
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr

08000e5a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	b085      	sub	sp, #20
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e66:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e76:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
}
 8000e80:	bf00      	nop
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr

08000e8a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr
	...

08000e98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b096      	sub	sp, #88	; 0x58
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eb0:	f107 030c 	add.w	r3, r7, #12
 8000eb4:	2238      	movs	r2, #56	; 0x38
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f004 fb79 	bl	80055b0 <memset>
  if(huart->Instance==LPUART1)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a5d      	ldr	r2, [pc, #372]	; (8001038 <HAL_UART_MspInit+0x1a0>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d157      	bne.n	8000f78 <HAL_UART_MspInit+0xe0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000ec8:	2320      	movs	r3, #32
 8000eca:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 8000ecc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ed0:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ed2:	f107 030c 	add.w	r3, r7, #12
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f002 f94e 	bl	8003178 <HAL_RCCEx_PeriphCLKConfig>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ee2:	f7ff ff85 	bl	8000df0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	f7ff ff9f 	bl	8000e2a <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eec:	2004      	movs	r0, #4
 8000eee:	f7ff ff84 	bl	8000dfa <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    PC0     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000f02:	2308      	movs	r3, #8
 8000f04:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f06:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	484b      	ldr	r0, [pc, #300]	; (800103c <HAL_UART_MspInit+0x1a4>)
 8000f0e:	f000 fd8d 	bl	8001a2c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8000f12:	4b4b      	ldr	r3, [pc, #300]	; (8001040 <HAL_UART_MspInit+0x1a8>)
 8000f14:	4a4b      	ldr	r2, [pc, #300]	; (8001044 <HAL_UART_MspInit+0x1ac>)
 8000f16:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8000f18:	4b49      	ldr	r3, [pc, #292]	; (8001040 <HAL_UART_MspInit+0x1a8>)
 8000f1a:	2215      	movs	r2, #21
 8000f1c:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f1e:	4b48      	ldr	r3, [pc, #288]	; (8001040 <HAL_UART_MspInit+0x1a8>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f24:	4b46      	ldr	r3, [pc, #280]	; (8001040 <HAL_UART_MspInit+0x1a8>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f2a:	4b45      	ldr	r3, [pc, #276]	; (8001040 <HAL_UART_MspInit+0x1a8>)
 8000f2c:	2280      	movs	r2, #128	; 0x80
 8000f2e:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f30:	4b43      	ldr	r3, [pc, #268]	; (8001040 <HAL_UART_MspInit+0x1a8>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f36:	4b42      	ldr	r3, [pc, #264]	; (8001040 <HAL_UART_MspInit+0x1a8>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8000f3c:	4b40      	ldr	r3, [pc, #256]	; (8001040 <HAL_UART_MspInit+0x1a8>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f42:	4b3f      	ldr	r3, [pc, #252]	; (8001040 <HAL_UART_MspInit+0x1a8>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000f48:	483d      	ldr	r0, [pc, #244]	; (8001040 <HAL_UART_MspInit+0x1a8>)
 8000f4a:	f000 faa7 	bl	800149c <HAL_DMA_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8000f54:	f7ff ff4c 	bl	8000df0 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_lpuart1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000f58:	2110      	movs	r1, #16
 8000f5a:	4839      	ldr	r0, [pc, #228]	; (8001040 <HAL_UART_MspInit+0x1a8>)
 8000f5c:	f000 fcca 	bl	80018f4 <HAL_DMA_ConfigChannelAttributes>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8000f66:	f7ff ff43 	bl	8000df0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a34      	ldr	r2, [pc, #208]	; (8001040 <HAL_UART_MspInit+0x1a8>)
 8000f6e:	67da      	str	r2, [r3, #124]	; 0x7c
 8000f70:	4a33      	ldr	r2, [pc, #204]	; (8001040 <HAL_UART_MspInit+0x1a8>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f76:	e05b      	b.n	8001030 <HAL_UART_MspInit+0x198>
  else if(huart->Instance==USART1)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a32      	ldr	r2, [pc, #200]	; (8001048 <HAL_UART_MspInit+0x1b0>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d156      	bne.n	8001030 <HAL_UART_MspInit+0x198>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f82:	2301      	movs	r3, #1
 8000f84:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8000f86:	4b31      	ldr	r3, [pc, #196]	; (800104c <HAL_UART_MspInit+0x1b4>)
 8000f88:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f8a:	f107 030c 	add.w	r3, r7, #12
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f002 f8f2 	bl	8003178 <HAL_RCCEx_PeriphCLKConfig>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <HAL_UART_MspInit+0x106>
      Error_Handler();
 8000f9a:	f7ff ff29 	bl	8000df0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f9e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000fa2:	f7ff ff5a 	bl	8000e5a <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa6:	2002      	movs	r0, #2
 8000fa8:	f7ff ff27 	bl	8000dfa <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000fac:	23c0      	movs	r3, #192	; 0xc0
 8000fae:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fbc:	2307      	movs	r3, #7
 8000fbe:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4822      	ldr	r0, [pc, #136]	; (8001050 <HAL_UART_MspInit+0x1b8>)
 8000fc8:	f000 fd30 	bl	8001a2c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8000fcc:	4b21      	ldr	r3, [pc, #132]	; (8001054 <HAL_UART_MspInit+0x1bc>)
 8000fce:	4a22      	ldr	r2, [pc, #136]	; (8001058 <HAL_UART_MspInit+0x1c0>)
 8000fd0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000fd2:	4b20      	ldr	r3, [pc, #128]	; (8001054 <HAL_UART_MspInit+0x1bc>)
 8000fd4:	2211      	movs	r2, #17
 8000fd6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fd8:	4b1e      	ldr	r3, [pc, #120]	; (8001054 <HAL_UART_MspInit+0x1bc>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fde:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <HAL_UART_MspInit+0x1bc>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fe4:	4b1b      	ldr	r3, [pc, #108]	; (8001054 <HAL_UART_MspInit+0x1bc>)
 8000fe6:	2280      	movs	r2, #128	; 0x80
 8000fe8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fea:	4b1a      	ldr	r3, [pc, #104]	; (8001054 <HAL_UART_MspInit+0x1bc>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ff0:	4b18      	ldr	r3, [pc, #96]	; (8001054 <HAL_UART_MspInit+0x1bc>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000ff6:	4b17      	ldr	r3, [pc, #92]	; (8001054 <HAL_UART_MspInit+0x1bc>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ffc:	4b15      	ldr	r3, [pc, #84]	; (8001054 <HAL_UART_MspInit+0x1bc>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001002:	4814      	ldr	r0, [pc, #80]	; (8001054 <HAL_UART_MspInit+0x1bc>)
 8001004:	f000 fa4a 	bl	800149c <HAL_DMA_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_UART_MspInit+0x17a>
      Error_Handler();
 800100e:	f7ff feef 	bl	8000df0 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001012:	2110      	movs	r1, #16
 8001014:	480f      	ldr	r0, [pc, #60]	; (8001054 <HAL_UART_MspInit+0x1bc>)
 8001016:	f000 fc6d 	bl	80018f4 <HAL_DMA_ConfigChannelAttributes>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8001020:	f7ff fee6 	bl	8000df0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a0b      	ldr	r2, [pc, #44]	; (8001054 <HAL_UART_MspInit+0x1bc>)
 8001028:	67da      	str	r2, [r3, #124]	; 0x7c
 800102a:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <HAL_UART_MspInit+0x1bc>)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001030:	bf00      	nop
 8001032:	3758      	adds	r7, #88	; 0x58
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40008000 	.word	0x40008000
 800103c:	48000800 	.word	0x48000800
 8001040:	20000148 	.word	0x20000148
 8001044:	40020008 	.word	0x40020008
 8001048:	40013800 	.word	0x40013800
 800104c:	00030002 	.word	0x00030002
 8001050:	48000400 	.word	0x48000400
 8001054:	200001a8 	.word	0x200001a8
 8001058:	4002001c 	.word	0x4002001c

0800105c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <NMI_Handler+0x4>

08001062 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001066:	e7fe      	b.n	8001066 <HardFault_Handler+0x4>

08001068 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800106c:	e7fe      	b.n	800106c <MemManage_Handler+0x4>

0800106e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001072:	e7fe      	b.n	8001072 <BusFault_Handler+0x4>

08001074 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <UsageFault_Handler+0x4>

0800107a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr

08001086 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr

08001092 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr

0800109e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a2:	f000 f8d3 	bl	800124c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80010b0:	4802      	ldr	r0, [pc, #8]	; (80010bc <DMA1_Channel1_IRQHandler+0x10>)
 80010b2:	f000 fb59 	bl	8001768 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000148 	.word	0x20000148

080010c0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80010c4:	4802      	ldr	r0, [pc, #8]	; (80010d0 <DMA1_Channel2_IRQHandler+0x10>)
 80010c6:	f000 fb4f 	bl	8001768 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200001a8 	.word	0x200001a8

080010d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010d8:	4802      	ldr	r0, [pc, #8]	; (80010e4 <USART1_IRQHandler+0x10>)
 80010da:	f002 fb97 	bl	800380c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200000b8 	.word	0x200000b8

080010e8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80010ec:	2201      	movs	r2, #1
 80010ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010f2:	480c      	ldr	r0, [pc, #48]	; (8001124 <LPUART1_IRQHandler+0x3c>)
 80010f4:	f000 fdfa 	bl	8001cec <HAL_GPIO_WritePin>

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80010f8:	480b      	ldr	r0, [pc, #44]	; (8001128 <LPUART1_IRQHandler+0x40>)
 80010fa:	f002 fb87 	bl	800380c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001104:	4807      	ldr	r0, [pc, #28]	; (8001124 <LPUART1_IRQHandler+0x3c>)
 8001106:	f000 fdf1 	bl	8001cec <HAL_GPIO_WritePin>
  get_rfid_msg(rfidmsgbuf,rfidrawbuf);
 800110a:	4908      	ldr	r1, [pc, #32]	; (800112c <LPUART1_IRQHandler+0x44>)
 800110c:	4808      	ldr	r0, [pc, #32]	; (8001130 <LPUART1_IRQHandler+0x48>)
 800110e:	f7ff fb37 	bl	8000780 <get_rfid_msg>
  if (rfidmsgbuf[0] == 0x3F){
 8001112:	4b07      	ldr	r3, [pc, #28]	; (8001130 <LPUART1_IRQHandler+0x48>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b3f      	cmp	r3, #63	; 0x3f
 8001118:	d102      	bne.n	8001120 <LPUART1_IRQHandler+0x38>
	  mystate=BT_UNLOCKED;
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <LPUART1_IRQHandler+0x4c>)
 800111c:	2201      	movs	r2, #1
 800111e:	701a      	strb	r2, [r3, #0]

  // __HAL_UNLOCK(&hlpuart1);


  /* USER CODE END LPUART1_IRQn 1 */
}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	48000400 	.word	0x48000400
 8001128:	20000028 	.word	0x20000028
 800112c:	2000022c 	.word	0x2000022c
 8001130:	20000260 	.word	0x20000260
 8001134:	20000229 	.word	0x20000229

08001138 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001138:	480d      	ldr	r0, [pc, #52]	; (8001170 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800113a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800113c:	f000 f825 	bl	800118a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001140:	480c      	ldr	r0, [pc, #48]	; (8001174 <LoopForever+0x6>)
  ldr r1, =_edata
 8001142:	490d      	ldr	r1, [pc, #52]	; (8001178 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001144:	4a0d      	ldr	r2, [pc, #52]	; (800117c <LoopForever+0xe>)
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001148:	e002      	b.n	8001150 <LoopCopyDataInit>

0800114a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800114c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800114e:	3304      	adds	r3, #4

08001150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001154:	d3f9      	bcc.n	800114a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001156:	4a0a      	ldr	r2, [pc, #40]	; (8001180 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001158:	4c0a      	ldr	r4, [pc, #40]	; (8001184 <LoopForever+0x16>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800115c:	e001      	b.n	8001162 <LoopFillZerobss>

0800115e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800115e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001160:	3204      	adds	r2, #4

08001162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001164:	d3fb      	bcc.n	800115e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001166:	f004 f9ff 	bl	8005568 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800116a:	f7ff fb9d 	bl	80008a8 <main>

0800116e <LoopForever>:

LoopForever:
    b LoopForever
 800116e:	e7fe      	b.n	800116e <LoopForever>
  ldr   r0, =_estack
 8001170:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001174:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001178:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800117c:	080056e4 	.word	0x080056e4
  ldr r2, =_sbss
 8001180:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001184:	20000274 	.word	0x20000274

08001188 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001188:	e7fe      	b.n	8001188 <ADC_IRQHandler>

0800118a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800118e:	bf00      	nop
 8001190:	46bd      	mov	sp, r7
 8001192:	bc80      	pop	{r7}
 8001194:	4770      	bx	lr
	...

08001198 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800119e:	2300      	movs	r3, #0
 80011a0:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a2:	2003      	movs	r0, #3
 80011a4:	f000 f93a 	bl	800141c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80011a8:	f001 fe08 	bl	8002dbc <HAL_RCC_GetHCLKFreq>
 80011ac:	4603      	mov	r3, r0
 80011ae:	4a09      	ldr	r2, [pc, #36]	; (80011d4 <HAL_Init+0x3c>)
 80011b0:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011b2:	2000      	movs	r0, #0
 80011b4:	f000 f810 	bl	80011d8 <HAL_InitTick>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d002      	beq.n	80011c4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	71fb      	strb	r3, [r7, #7]
 80011c2:	e001      	b.n	80011c8 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011c4:	f7ff fe61 	bl	8000e8a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011c8:	79fb      	ldrb	r3, [r7, #7]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000000 	.word	0x20000000

080011d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011e0:	2300      	movs	r3, #0
 80011e2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011e4:	4b17      	ldr	r3, [pc, #92]	; (8001244 <HAL_InitTick+0x6c>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d024      	beq.n	8001236 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011ec:	f001 fde6 	bl	8002dbc <HAL_RCC_GetHCLKFreq>
 80011f0:	4602      	mov	r2, r0
 80011f2:	4b14      	ldr	r3, [pc, #80]	; (8001244 <HAL_InitTick+0x6c>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	4619      	mov	r1, r3
 80011f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fc:	fbb3 f3f1 	udiv	r3, r3, r1
 8001200:	fbb2 f3f3 	udiv	r3, r2, r3
 8001204:	4618      	mov	r0, r3
 8001206:	f000 f93c 	bl	8001482 <HAL_SYSTICK_Config>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d10f      	bne.n	8001230 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b0f      	cmp	r3, #15
 8001214:	d809      	bhi.n	800122a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001216:	2200      	movs	r2, #0
 8001218:	6879      	ldr	r1, [r7, #4]
 800121a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800121e:	f000 f908 	bl	8001432 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001222:	4a09      	ldr	r2, [pc, #36]	; (8001248 <HAL_InitTick+0x70>)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6013      	str	r3, [r2, #0]
 8001228:	e007      	b.n	800123a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	73fb      	strb	r3, [r7, #15]
 800122e:	e004      	b.n	800123a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	73fb      	strb	r3, [r7, #15]
 8001234:	e001      	b.n	800123a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800123a:	7bfb      	ldrb	r3, [r7, #15]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000008 	.word	0x20000008
 8001248:	20000004 	.word	0x20000004

0800124c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <HAL_IncTick+0x1c>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	4b05      	ldr	r3, [pc, #20]	; (800126c <HAL_IncTick+0x20>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4413      	add	r3, r2
 800125c:	4a03      	ldr	r2, [pc, #12]	; (800126c <HAL_IncTick+0x20>)
 800125e:	6013      	str	r3, [r2, #0]
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr
 8001268:	20000008 	.word	0x20000008
 800126c:	20000270 	.word	0x20000270

08001270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return uwTick;
 8001274:	4b02      	ldr	r3, [pc, #8]	; (8001280 <HAL_GetTick+0x10>)
 8001276:	681b      	ldr	r3, [r3, #0]
}
 8001278:	4618      	mov	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr
 8001280:	20000270 	.word	0x20000270

08001284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001294:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012a0:	4013      	ands	r3, r2
 80012a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012b6:	4a04      	ldr	r2, [pc, #16]	; (80012c8 <__NVIC_SetPriorityGrouping+0x44>)
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	60d3      	str	r3, [r2, #12]
}
 80012bc:	bf00      	nop
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d0:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <__NVIC_GetPriorityGrouping+0x18>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	0a1b      	lsrs	r3, r3, #8
 80012d6:	f003 0307 	and.w	r3, r3, #7
}
 80012da:	4618      	mov	r0, r3
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	db0b      	blt.n	8001312 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	f003 021f 	and.w	r2, r3, #31
 8001300:	4906      	ldr	r1, [pc, #24]	; (800131c <__NVIC_EnableIRQ+0x34>)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	095b      	lsrs	r3, r3, #5
 8001308:	2001      	movs	r0, #1
 800130a:	fa00 f202 	lsl.w	r2, r0, r2
 800130e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr
 800131c:	e000e100 	.word	0xe000e100

08001320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	6039      	str	r1, [r7, #0]
 800132a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001330:	2b00      	cmp	r3, #0
 8001332:	db0a      	blt.n	800134a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	b2da      	uxtb	r2, r3
 8001338:	490c      	ldr	r1, [pc, #48]	; (800136c <__NVIC_SetPriority+0x4c>)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	0112      	lsls	r2, r2, #4
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	440b      	add	r3, r1
 8001344:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001348:	e00a      	b.n	8001360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4908      	ldr	r1, [pc, #32]	; (8001370 <__NVIC_SetPriority+0x50>)
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	3b04      	subs	r3, #4
 8001358:	0112      	lsls	r2, r2, #4
 800135a:	b2d2      	uxtb	r2, r2
 800135c:	440b      	add	r3, r1
 800135e:	761a      	strb	r2, [r3, #24]
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000e100 	.word	0xe000e100
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001374:	b480      	push	{r7}
 8001376:	b089      	sub	sp, #36	; 0x24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f1c3 0307 	rsb	r3, r3, #7
 800138e:	2b04      	cmp	r3, #4
 8001390:	bf28      	it	cs
 8001392:	2304      	movcs	r3, #4
 8001394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3304      	adds	r3, #4
 800139a:	2b06      	cmp	r3, #6
 800139c:	d902      	bls.n	80013a4 <NVIC_EncodePriority+0x30>
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3b03      	subs	r3, #3
 80013a2:	e000      	b.n	80013a6 <NVIC_EncodePriority+0x32>
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43da      	mvns	r2, r3
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	401a      	ands	r2, r3
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	fa01 f303 	lsl.w	r3, r1, r3
 80013c6:	43d9      	mvns	r1, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	4313      	orrs	r3, r2
         );
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3724      	adds	r7, #36	; 0x24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr

080013d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013e8:	d301      	bcc.n	80013ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ea:	2301      	movs	r3, #1
 80013ec:	e00f      	b.n	800140e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ee:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <SysTick_Config+0x40>)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013f6:	210f      	movs	r1, #15
 80013f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013fc:	f7ff ff90 	bl	8001320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001400:	4b05      	ldr	r3, [pc, #20]	; (8001418 <SysTick_Config+0x40>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001406:	4b04      	ldr	r3, [pc, #16]	; (8001418 <SysTick_Config+0x40>)
 8001408:	2207      	movs	r2, #7
 800140a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	e000e010 	.word	0xe000e010

0800141c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff ff2d 	bl	8001284 <__NVIC_SetPriorityGrouping>
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b086      	sub	sp, #24
 8001436:	af00      	add	r7, sp, #0
 8001438:	4603      	mov	r3, r0
 800143a:	60b9      	str	r1, [r7, #8]
 800143c:	607a      	str	r2, [r7, #4]
 800143e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001440:	f7ff ff44 	bl	80012cc <__NVIC_GetPriorityGrouping>
 8001444:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	68b9      	ldr	r1, [r7, #8]
 800144a:	6978      	ldr	r0, [r7, #20]
 800144c:	f7ff ff92 	bl	8001374 <NVIC_EncodePriority>
 8001450:	4602      	mov	r2, r0
 8001452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001456:	4611      	mov	r1, r2
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ff61 	bl	8001320 <__NVIC_SetPriority>
}
 800145e:	bf00      	nop
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	4603      	mov	r3, r0
 800146e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ff37 	bl	80012e8 <__NVIC_EnableIRQ>
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff ffa4 	bl	80013d8 <SysTick_Config>
 8001490:	4603      	mov	r3, r0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e08e      	b.n	80015cc <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	4b47      	ldr	r3, [pc, #284]	; (80015d4 <HAL_DMA_Init+0x138>)
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d80f      	bhi.n	80014da <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	461a      	mov	r2, r3
 80014c0:	4b45      	ldr	r3, [pc, #276]	; (80015d8 <HAL_DMA_Init+0x13c>)
 80014c2:	4413      	add	r3, r2
 80014c4:	4a45      	ldr	r2, [pc, #276]	; (80015dc <HAL_DMA_Init+0x140>)
 80014c6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ca:	091b      	lsrs	r3, r3, #4
 80014cc:	009a      	lsls	r2, r3, #2
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a42      	ldr	r2, [pc, #264]	; (80015e0 <HAL_DMA_Init+0x144>)
 80014d6:	641a      	str	r2, [r3, #64]	; 0x40
 80014d8:	e00e      	b.n	80014f8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	461a      	mov	r2, r3
 80014e0:	4b40      	ldr	r3, [pc, #256]	; (80015e4 <HAL_DMA_Init+0x148>)
 80014e2:	4413      	add	r3, r2
 80014e4:	4a3d      	ldr	r2, [pc, #244]	; (80015dc <HAL_DMA_Init+0x140>)
 80014e6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ea:	091b      	lsrs	r3, r3, #4
 80014ec:	009a      	lsls	r2, r3, #2
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a3c      	ldr	r2, [pc, #240]	; (80015e8 <HAL_DMA_Init+0x14c>)
 80014f6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2202      	movs	r2, #2
 80014fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	6812      	ldr	r2, [r2, #0]
 800150a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800150e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001512:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6819      	ldr	r1, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689a      	ldr	r2, [r3, #8]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	431a      	orrs	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	691b      	ldr	r3, [r3, #16]
 8001528:	431a      	orrs	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	431a      	orrs	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	431a      	orrs	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	431a      	orrs	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a1b      	ldr	r3, [r3, #32]
 8001540:	431a      	orrs	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	430a      	orrs	r2, r1
 8001548:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f000 fa02 	bl	8001954 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001558:	d102      	bne.n	8001560 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001568:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800156c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001576:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d010      	beq.n	80015a2 <HAL_DMA_Init+0x106>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	2b04      	cmp	r3, #4
 8001586:	d80c      	bhi.n	80015a2 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f000 fa2b 	bl	80019e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	e008      	b.n	80015b4 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2200      	movs	r2, #0
 80015ac:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2201      	movs	r2, #1
 80015be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80015ca:	2300      	movs	r3, #0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40020407 	.word	0x40020407
 80015d8:	bffdfff8 	.word	0xbffdfff8
 80015dc:	cccccccd 	.word	0xcccccccd
 80015e0:	40020000 	.word	0x40020000
 80015e4:	bffdfbf8 	.word	0xbffdfbf8
 80015e8:	40020400 	.word	0x40020400

080015ec <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e04f      	b.n	800169e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d008      	beq.n	800161c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2204      	movs	r2, #4
 800160e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e040      	b.n	800169e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f022 020e 	bic.w	r2, r2, #14
 800162a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001636:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800163a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f022 0201 	bic.w	r2, r2, #1
 800164a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001650:	f003 021c 	and.w	r2, r3, #28
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001658:	2101      	movs	r1, #1
 800165a:	fa01 f202 	lsl.w	r2, r1, r2
 800165e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001668:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800166e:	2b00      	cmp	r3, #0
 8001670:	d00c      	beq.n	800168c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800167c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001680:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800168a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2201      	movs	r2, #1
 8001690:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr

080016a8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016b0:	2300      	movs	r3, #0
 80016b2:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d005      	beq.n	80016cc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2204      	movs	r2, #4
 80016c4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	73fb      	strb	r3, [r7, #15]
 80016ca:	e047      	b.n	800175c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 020e 	bic.w	r2, r2, #14
 80016da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f022 0201 	bic.w	r2, r2, #1
 80016ea:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001700:	f003 021c 	and.w	r2, r3, #28
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001708:	2101      	movs	r1, #1
 800170a:	fa01 f202 	lsl.w	r2, r1, r2
 800170e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001718:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800171e:	2b00      	cmp	r3, #0
 8001720:	d00c      	beq.n	800173c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800172c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001730:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800173a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2201      	movs	r2, #1
 8001740:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	4798      	blx	r3
    }
  }
  return status;
 800175c:	7bfb      	ldrb	r3, [r7, #15]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001784:	f003 031c 	and.w	r3, r3, #28
 8001788:	2204      	movs	r2, #4
 800178a:	409a      	lsls	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	4013      	ands	r3, r2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d027      	beq.n	80017e4 <HAL_DMA_IRQHandler+0x7c>
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	f003 0304 	and.w	r3, r3, #4
 800179a:	2b00      	cmp	r3, #0
 800179c:	d022      	beq.n	80017e4 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0320 	and.w	r3, r3, #32
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d107      	bne.n	80017bc <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f022 0204 	bic.w	r2, r2, #4
 80017ba:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c0:	f003 021c 	and.w	r2, r3, #28
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	2104      	movs	r1, #4
 80017ca:	fa01 f202 	lsl.w	r2, r1, r2
 80017ce:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f000 8081 	beq.w	80018dc <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80017e2:	e07b      	b.n	80018dc <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e8:	f003 031c 	and.w	r3, r3, #28
 80017ec:	2202      	movs	r2, #2
 80017ee:	409a      	lsls	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	4013      	ands	r3, r2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d03d      	beq.n	8001874 <HAL_DMA_IRQHandler+0x10c>
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d038      	beq.n	8001874 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0320 	and.w	r3, r3, #32
 800180c:	2b00      	cmp	r3, #0
 800180e:	d10b      	bne.n	8001828 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f022 020a 	bic.w	r2, r2, #10
 800181e:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2201      	movs	r2, #1
 8001824:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	461a      	mov	r2, r3
 800182e:	4b2e      	ldr	r3, [pc, #184]	; (80018e8 <HAL_DMA_IRQHandler+0x180>)
 8001830:	429a      	cmp	r2, r3
 8001832:	d909      	bls.n	8001848 <HAL_DMA_IRQHandler+0xe0>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001838:	f003 031c 	and.w	r3, r3, #28
 800183c:	4a2b      	ldr	r2, [pc, #172]	; (80018ec <HAL_DMA_IRQHandler+0x184>)
 800183e:	2102      	movs	r1, #2
 8001840:	fa01 f303 	lsl.w	r3, r1, r3
 8001844:	6053      	str	r3, [r2, #4]
 8001846:	e008      	b.n	800185a <HAL_DMA_IRQHandler+0xf2>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184c:	f003 031c 	and.w	r3, r3, #28
 8001850:	4a27      	ldr	r2, [pc, #156]	; (80018f0 <HAL_DMA_IRQHandler+0x188>)
 8001852:	2102      	movs	r1, #2
 8001854:	fa01 f303 	lsl.w	r3, r1, r3
 8001858:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001866:	2b00      	cmp	r3, #0
 8001868:	d038      	beq.n	80018dc <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001872:	e033      	b.n	80018dc <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001878:	f003 031c 	and.w	r3, r3, #28
 800187c:	2208      	movs	r2, #8
 800187e:	409a      	lsls	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4013      	ands	r3, r2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d02a      	beq.n	80018de <HAL_DMA_IRQHandler+0x176>
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	2b00      	cmp	r3, #0
 8001890:	d025      	beq.n	80018de <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f022 020e 	bic.w	r2, r2, #14
 80018a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a6:	f003 021c 	and.w	r2, r3, #28
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	2101      	movs	r1, #1
 80018b0:	fa01 f202 	lsl.w	r2, r1, r2
 80018b4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2201      	movs	r2, #1
 80018ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d004      	beq.n	80018de <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80018dc:	bf00      	nop
 80018de:	bf00      	nop
}
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40020080 	.word	0x40020080
 80018ec:	40020400 	.word	0x40020400
 80018f0:	40020000 	.word	0x40020000

080018f4 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018fe:	2300      	movs	r3, #0
 8001900:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d103      	bne.n	8001910 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	72fb      	strb	r3, [r7, #11]
    return status;
 800190c:	7afb      	ldrb	r3, [r7, #11]
 800190e:	e01b      	b.n	8001948 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	f003 0310 	and.w	r3, r3, #16
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00d      	beq.n	800193e <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d004      	beq.n	8001936 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	e003      	b.n	800193e <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800193c:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	601a      	str	r2, [r3, #0]

  return status;
 8001946:	7afb      	ldrb	r3, [r7, #11]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr
	...

08001954 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	461a      	mov	r2, r3
 8001962:	4b1c      	ldr	r3, [pc, #112]	; (80019d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8001964:	429a      	cmp	r2, r3
 8001966:	d813      	bhi.n	8001990 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196c:	089b      	lsrs	r3, r3, #2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001974:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	b2db      	uxtb	r3, r3
 8001982:	3b08      	subs	r3, #8
 8001984:	4a14      	ldr	r2, [pc, #80]	; (80019d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8001986:	fba2 2303 	umull	r2, r3, r2, r3
 800198a:	091b      	lsrs	r3, r3, #4
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	e011      	b.n	80019b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001994:	089b      	lsrs	r3, r3, #2
 8001996:	009a      	lsls	r2, r3, #2
 8001998:	4b10      	ldr	r3, [pc, #64]	; (80019dc <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800199a:	4413      	add	r3, r2
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	3b08      	subs	r3, #8
 80019a8:	4a0b      	ldr	r2, [pc, #44]	; (80019d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80019aa:	fba2 2303 	umull	r2, r3, r2, r3
 80019ae:	091b      	lsrs	r3, r3, #4
 80019b0:	3307      	adds	r3, #7
 80019b2:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80019b8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f003 031f 	and.w	r3, r3, #31
 80019c0:	2201      	movs	r2, #1
 80019c2:	409a      	lsls	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80019c8:	bf00      	nop
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	40020407 	.word	0x40020407
 80019d8:	cccccccd 	.word	0xcccccccd
 80019dc:	4002081c 	.word	0x4002081c
 80019e0:	40020880 	.word	0x40020880

080019e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019f4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80019fa:	4413      	add	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	461a      	mov	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a08      	ldr	r2, [pc, #32]	; (8001a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001a08:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	2201      	movs	r2, #1
 8001a14:	409a      	lsls	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001a1a:	bf00      	nop
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr
 8001a24:	1000823f 	.word	0x1000823f
 8001a28:	40020940 	.word	0x40020940

08001a2c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b087      	sub	sp, #28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a3a:	e140      	b.n	8001cbe <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	2101      	movs	r1, #1
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	fa01 f303 	lsl.w	r3, r1, r3
 8001a48:	4013      	ands	r3, r2
 8001a4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f000 8132 	beq.w	8001cb8 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 0303 	and.w	r3, r3, #3
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d005      	beq.n	8001a6c <HAL_GPIO_Init+0x40>
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d130      	bne.n	8001ace <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	2203      	movs	r2, #3
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	4013      	ands	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	68da      	ldr	r2, [r3, #12]
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	091b      	lsrs	r3, r3, #4
 8001ab8:	f003 0201 	and.w	r2, r3, #1
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 0303 	and.w	r3, r3, #3
 8001ad6:	2b03      	cmp	r3, #3
 8001ad8:	d017      	beq.n	8001b0a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	2203      	movs	r2, #3
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	4013      	ands	r3, r2
 8001af0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	689a      	ldr	r2, [r3, #8]
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d123      	bne.n	8001b5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	08da      	lsrs	r2, r3, #3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3208      	adds	r2, #8
 8001b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	220f      	movs	r2, #15
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43db      	mvns	r3, r3
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	4013      	ands	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	691a      	ldr	r2, [r3, #16]
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	08da      	lsrs	r2, r3, #3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3208      	adds	r2, #8
 8001b58:	6939      	ldr	r1, [r7, #16]
 8001b5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	2203      	movs	r2, #3
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	4013      	ands	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f003 0203 	and.w	r2, r3, #3
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f000 808c 	beq.w	8001cb8 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001ba0:	4a4e      	ldr	r2, [pc, #312]	; (8001cdc <HAL_GPIO_Init+0x2b0>)
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	089b      	lsrs	r3, r3, #2
 8001ba6:	3302      	adds	r3, #2
 8001ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	f003 0303 	and.w	r3, r3, #3
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	2207      	movs	r2, #7
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bca:	d00d      	beq.n	8001be8 <HAL_GPIO_Init+0x1bc>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a44      	ldr	r2, [pc, #272]	; (8001ce0 <HAL_GPIO_Init+0x2b4>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d007      	beq.n	8001be4 <HAL_GPIO_Init+0x1b8>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a43      	ldr	r2, [pc, #268]	; (8001ce4 <HAL_GPIO_Init+0x2b8>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d101      	bne.n	8001be0 <HAL_GPIO_Init+0x1b4>
 8001bdc:	2302      	movs	r3, #2
 8001bde:	e004      	b.n	8001bea <HAL_GPIO_Init+0x1be>
 8001be0:	2307      	movs	r3, #7
 8001be2:	e002      	b.n	8001bea <HAL_GPIO_Init+0x1be>
 8001be4:	2301      	movs	r3, #1
 8001be6:	e000      	b.n	8001bea <HAL_GPIO_Init+0x1be>
 8001be8:	2300      	movs	r3, #0
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	f002 0203 	and.w	r2, r2, #3
 8001bf0:	0092      	lsls	r2, r2, #2
 8001bf2:	4093      	lsls	r3, r2
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bfa:	4938      	ldr	r1, [pc, #224]	; (8001cdc <HAL_GPIO_Init+0x2b0>)
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	089b      	lsrs	r3, r3, #2
 8001c00:	3302      	adds	r3, #2
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c08:	4b37      	ldr	r3, [pc, #220]	; (8001ce8 <HAL_GPIO_Init+0x2bc>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	43db      	mvns	r3, r3
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4013      	ands	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d003      	beq.n	8001c2c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c2c:	4a2e      	ldr	r2, [pc, #184]	; (8001ce8 <HAL_GPIO_Init+0x2bc>)
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001c32:	4b2d      	ldr	r3, [pc, #180]	; (8001ce8 <HAL_GPIO_Init+0x2bc>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c56:	4a24      	ldr	r2, [pc, #144]	; (8001ce8 <HAL_GPIO_Init+0x2bc>)
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001c5c:	4b22      	ldr	r3, [pc, #136]	; (8001ce8 <HAL_GPIO_Init+0x2bc>)
 8001c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c62:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	43db      	mvns	r3, r3
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001c82:	4a19      	ldr	r2, [pc, #100]	; (8001ce8 <HAL_GPIO_Init+0x2bc>)
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001c8a:	4b17      	ldr	r3, [pc, #92]	; (8001ce8 <HAL_GPIO_Init+0x2bc>)
 8001c8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c90:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	43db      	mvns	r3, r3
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d003      	beq.n	8001cb0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001cb0:	4a0d      	ldr	r2, [pc, #52]	; (8001ce8 <HAL_GPIO_Init+0x2bc>)
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f47f aeb7 	bne.w	8001a3c <HAL_GPIO_Init+0x10>
  }
}
 8001cce:	bf00      	nop
 8001cd0:	bf00      	nop
 8001cd2:	371c      	adds	r7, #28
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	40010000 	.word	0x40010000
 8001ce0:	48000400 	.word	0x48000400
 8001ce4:	48000800 	.word	0x48000800
 8001ce8:	58000800 	.word	0x58000800

08001cec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	807b      	strh	r3, [r7, #2]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cfc:	787b      	ldrb	r3, [r7, #1]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d02:	887a      	ldrh	r2, [r7, #2]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d08:	e002      	b.n	8001d10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d0a:	887a      	ldrh	r2, [r7, #2]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr
	...

08001d1c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d20:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a03      	ldr	r2, [pc, #12]	; (8001d34 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d2a:	6013      	str	r3, [r2, #0]
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr
 8001d34:	58000400 	.word	0x58000400

08001d38 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001d3c:	4b03      	ldr	r3, [pc, #12]	; (8001d4c <HAL_PWREx_GetVoltageRange+0x14>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr
 8001d4c:	58000400 	.word	0x58000400

08001d50 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001d54:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d60:	d101      	bne.n	8001d66 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr
 8001d70:	58000400 	.word	0x58000400

08001d74 <LL_RCC_HSE_EnableTcxo>:
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d86:	6013      	str	r3, [r2, #0]
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr

08001d90 <LL_RCC_HSE_DisableTcxo>:
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001da2:	6013      	str	r3, [r2, #0]
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr

08001dac <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001dbe:	d101      	bne.n	8001dc4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e000      	b.n	8001dc6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr

08001dce <LL_RCC_HSE_Enable>:
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de0:	6013      	str	r3, [r2, #0]
}
 8001de2:	bf00      	nop
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bc80      	pop	{r7}
 8001de8:	4770      	bx	lr

08001dea <LL_RCC_HSE_Disable>:
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001df8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dfc:	6013      	str	r3, [r2, #0]
}
 8001dfe:	bf00      	nop
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr

08001e06 <LL_RCC_HSE_IsReady>:
{
 8001e06:	b480      	push	{r7}
 8001e08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e18:	d101      	bne.n	8001e1e <LL_RCC_HSE_IsReady+0x18>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <LL_RCC_HSE_IsReady+0x1a>
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr

08001e28 <LL_RCC_HSI_Enable>:
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e3a:	6013      	str	r3, [r2, #0]
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr

08001e44 <LL_RCC_HSI_Disable>:
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e56:	6013      	str	r3, [r2, #0]
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr

08001e60 <LL_RCC_HSI_IsReady>:
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e72:	d101      	bne.n	8001e78 <LL_RCC_HSI_IsReady+0x18>
 8001e74:	2301      	movs	r3, #1
 8001e76:	e000      	b.n	8001e7a <LL_RCC_HSI_IsReady+0x1a>
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bc80      	pop	{r7}
 8001e80:	4770      	bx	lr

08001e82 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001e82:	b480      	push	{r7}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	061b      	lsls	r3, r3, #24
 8001e98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	604b      	str	r3, [r1, #4]
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bc80      	pop	{r7}
 8001ea8:	4770      	bx	lr

08001eaa <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d101      	bne.n	8001ec2 <LL_RCC_LSE_IsReady+0x18>
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e000      	b.n	8001ec4 <LL_RCC_LSE_IsReady+0x1a>
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr

08001ecc <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ed4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ed8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr

08001eec <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ef8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001efc:	f023 0301 	bic.w	r3, r3, #1
 8001f00:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr

08001f0c <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d101      	bne.n	8001f24 <LL_RCC_LSI_IsReady+0x18>
 8001f20:	2301      	movs	r3, #1
 8001f22:	e000      	b.n	8001f26 <LL_RCC_LSI_IsReady+0x1a>
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr

08001f2e <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	6013      	str	r3, [r2, #0]
}
 8001f42:	bf00      	nop
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bc80      	pop	{r7}
 8001f48:	4770      	bx	lr

08001f4a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001f4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f58:	f023 0301 	bic.w	r3, r3, #1
 8001f5c:	6013      	str	r3, [r2, #0]
}
 8001f5e:	bf00      	nop
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bc80      	pop	{r7}
 8001f64:	4770      	bx	lr

08001f66 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001f66:	b480      	push	{r7}
 8001f68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d101      	bne.n	8001f7c <LL_RCC_MSI_IsReady+0x16>
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e000      	b.n	8001f7e <LL_RCC_MSI_IsReady+0x18>
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bc80      	pop	{r7}
 8001f84:	4770      	bx	lr

08001f86 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0308 	and.w	r3, r3, #8
 8001f94:	2b08      	cmp	r3, #8
 8001f96:	d101      	bne.n	8001f9c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bc80      	pop	{r7}
 8001fa4:	4770      	bx	lr

08001fa6 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr

08001fbc <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fc8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr

08001fd4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001fdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	021b      	lsls	r3, r3, #8
 8001fea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	604b      	str	r3, [r1, #4]
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr

08001ffc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f023 0203 	bic.w	r2, r3, #3
 800200e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4313      	orrs	r3, r2
 8002016:	608b      	str	r3, [r1, #8]
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	bc80      	pop	{r7}
 8002020:	4770      	bx	lr

08002022 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002022:	b480      	push	{r7}
 8002024:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f003 030c 	and.w	r3, r3, #12
}
 8002030:	4618      	mov	r0, r3
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr

08002038 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800204a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4313      	orrs	r3, r2
 8002052:	608b      	str	r3, [r1, #8]
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr

0800205e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800205e:	b480      	push	{r7}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800206a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800206e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002072:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4313      	orrs	r3, r2
 800207a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr

08002088 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002094:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002098:	f023 020f 	bic.w	r2, r3, #15
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	091b      	lsrs	r3, r3, #4
 80020a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020a4:	4313      	orrs	r3, r2
 80020a6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr

080020b4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80020bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	608b      	str	r3, [r1, #8]
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr

080020da <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80020e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	608b      	str	r3, [r1, #8]
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr

08002100 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800210e:	4618      	mov	r0, r3
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr

08002116 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8002116:	b480      	push	{r7}
 8002118:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800211a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800211e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002122:	011b      	lsls	r3, r3, #4
 8002124:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002128:	4618      	mov	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr

08002130 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800213e:	4618      	mov	r0, r3
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr

08002146 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002146:	b480      	push	{r7}
 8002148:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800214a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002154:	4618      	mov	r0, r3
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr

0800215c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800216a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800216e:	6013      	str	r3, [r2, #0]
}
 8002170:	bf00      	nop
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr

08002178 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800217c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002186:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800218a:	6013      	str	r3, [r2, #0]
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr

08002194 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021a6:	d101      	bne.n	80021ac <LL_RCC_PLL_IsReady+0x18>
 80021a8:	2301      	movs	r3, #1
 80021aa:	e000      	b.n	80021ae <LL_RCC_PLL_IsReady+0x1a>
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr

080021b6 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80021b6:	b480      	push	{r7}
 80021b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80021ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	0a1b      	lsrs	r3, r3, #8
 80021c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bc80      	pop	{r7}
 80021cc:	4770      	bx	lr

080021ce <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80021ce:	b480      	push	{r7}
 80021d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80021d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80021dc:	4618      	mov	r0, r3
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr

080021e4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80021e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr

080021fa <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80021fa:	b480      	push	{r7}
 80021fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80021fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	f003 0303 	and.w	r3, r3, #3
}
 8002208:	4618      	mov	r0, r3
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	4770      	bx	lr

08002210 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800221e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002222:	d101      	bne.n	8002228 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002224:	2301      	movs	r3, #1
 8002226:	e000      	b.n	800222a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	46bd      	mov	sp, r7
 800222e:	bc80      	pop	{r7}
 8002230:	4770      	bx	lr

08002232 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800223a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800223e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002242:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002246:	d101      	bne.n	800224c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002248:	2301      	movs	r3, #1
 800224a:	e000      	b.n	800224e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	4770      	bx	lr

08002256 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002256:	b480      	push	{r7}
 8002258:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800225a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800225e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800226a:	d101      	bne.n	8002270 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800226c:	2301      	movs	r3, #1
 800226e:	e000      	b.n	8002272 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	46bd      	mov	sp, r7
 8002276:	bc80      	pop	{r7}
 8002278:	4770      	bx	lr

0800227a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800227a:	b480      	push	{r7}
 800227c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800227e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002288:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800228c:	d101      	bne.n	8002292 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800228e:	2301      	movs	r3, #1
 8002290:	e000      	b.n	8002294 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	bc80      	pop	{r7}
 800229a:	4770      	bx	lr

0800229c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80022a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80022ae:	d101      	bne.n	80022b4 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80022b0:	2301      	movs	r3, #1
 80022b2:	e000      	b.n	80022b6 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bc80      	pop	{r7}
 80022bc:	4770      	bx	lr
	...

080022c0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b088      	sub	sp, #32
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e38b      	b.n	80029ea <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022d2:	f7ff fea6 	bl	8002022 <LL_RCC_GetSysClkSource>
 80022d6:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022d8:	f7ff ff8f 	bl	80021fa <LL_RCC_PLL_GetMainSource>
 80022dc:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0320 	and.w	r3, r3, #32
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 80c9 	beq.w	800247e <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d005      	beq.n	80022fe <HAL_RCC_OscConfig+0x3e>
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	2b0c      	cmp	r3, #12
 80022f6:	d17b      	bne.n	80023f0 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d178      	bne.n	80023f0 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022fe:	f7ff fe32 	bl	8001f66 <LL_RCC_MSI_IsReady>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d005      	beq.n	8002314 <HAL_RCC_OscConfig+0x54>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e36a      	b.n	80029ea <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	d005      	beq.n	8002332 <HAL_RCC_OscConfig+0x72>
 8002326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002330:	e006      	b.n	8002340 <HAL_RCC_OscConfig+0x80>
 8002332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002336:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800233a:	091b      	lsrs	r3, r3, #4
 800233c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002340:	4293      	cmp	r3, r2
 8002342:	d222      	bcs.n	800238a <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002348:	4618      	mov	r0, r3
 800234a:	f000 fd6f 	bl	8002e2c <RCC_SetFlashLatencyFromMSIRange>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e348      	b.n	80029ea <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002362:	f043 0308 	orr.w	r3, r3, #8
 8002366:	6013      	str	r3, [r2, #0]
 8002368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002376:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800237a:	4313      	orrs	r3, r2
 800237c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff fe26 	bl	8001fd4 <LL_RCC_MSI_SetCalibTrimming>
 8002388:	e021      	b.n	80023ce <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800238a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002394:	f043 0308 	orr.w	r3, r3, #8
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023ac:	4313      	orrs	r3, r2
 80023ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff fe0d 	bl	8001fd4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 fd34 	bl	8002e2c <RCC_SetFlashLatencyFromMSIRange>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e30d      	b.n	80029ea <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80023ce:	f000 fcf5 	bl	8002dbc <HAL_RCC_GetHCLKFreq>
 80023d2:	4603      	mov	r3, r0
 80023d4:	4aa1      	ldr	r2, [pc, #644]	; (800265c <HAL_RCC_OscConfig+0x39c>)
 80023d6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80023d8:	4ba1      	ldr	r3, [pc, #644]	; (8002660 <HAL_RCC_OscConfig+0x3a0>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f7fe fefb 	bl	80011d8 <HAL_InitTick>
 80023e2:	4603      	mov	r3, r0
 80023e4:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80023e6:	7cfb      	ldrb	r3, [r7, #19]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d047      	beq.n	800247c <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 80023ec:	7cfb      	ldrb	r3, [r7, #19]
 80023ee:	e2fc      	b.n	80029ea <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d02c      	beq.n	8002452 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023f8:	f7ff fd99 	bl	8001f2e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023fc:	f7fe ff38 	bl	8001270 <HAL_GetTick>
 8002400:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002404:	f7fe ff34 	bl	8001270 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e2e9      	b.n	80029ea <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002416:	f7ff fda6 	bl	8001f66 <LL_RCC_MSI_IsReady>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0f1      	beq.n	8002404 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800242a:	f043 0308 	orr.w	r3, r3, #8
 800242e:	6013      	str	r3, [r2, #0]
 8002430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002442:	4313      	orrs	r3, r2
 8002444:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff fdc2 	bl	8001fd4 <LL_RCC_MSI_SetCalibTrimming>
 8002450:	e015      	b.n	800247e <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002452:	f7ff fd7a 	bl	8001f4a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002456:	f7fe ff0b 	bl	8001270 <HAL_GetTick>
 800245a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800245c:	e008      	b.n	8002470 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800245e:	f7fe ff07 	bl	8001270 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e2bc      	b.n	80029ea <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002470:	f7ff fd79 	bl	8001f66 <LL_RCC_MSI_IsReady>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f1      	bne.n	800245e <HAL_RCC_OscConfig+0x19e>
 800247a:	e000      	b.n	800247e <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800247c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b00      	cmp	r3, #0
 8002488:	d05f      	beq.n	800254a <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	2b08      	cmp	r3, #8
 800248e:	d005      	beq.n	800249c <HAL_RCC_OscConfig+0x1dc>
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	2b0c      	cmp	r3, #12
 8002494:	d10d      	bne.n	80024b2 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	2b03      	cmp	r3, #3
 800249a:	d10a      	bne.n	80024b2 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800249c:	f7ff fcb3 	bl	8001e06 <LL_RCC_HSE_IsReady>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d050      	beq.n	8002548 <HAL_RCC_OscConfig+0x288>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d14c      	bne.n	8002548 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e29b      	b.n	80029ea <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80024b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024c4:	4313      	orrs	r3, r2
 80024c6:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d0:	d102      	bne.n	80024d8 <HAL_RCC_OscConfig+0x218>
 80024d2:	f7ff fc7c 	bl	8001dce <LL_RCC_HSE_Enable>
 80024d6:	e00d      	b.n	80024f4 <HAL_RCC_OscConfig+0x234>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80024e0:	d104      	bne.n	80024ec <HAL_RCC_OscConfig+0x22c>
 80024e2:	f7ff fc47 	bl	8001d74 <LL_RCC_HSE_EnableTcxo>
 80024e6:	f7ff fc72 	bl	8001dce <LL_RCC_HSE_Enable>
 80024ea:	e003      	b.n	80024f4 <HAL_RCC_OscConfig+0x234>
 80024ec:	f7ff fc7d 	bl	8001dea <LL_RCC_HSE_Disable>
 80024f0:	f7ff fc4e 	bl	8001d90 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d012      	beq.n	8002522 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fc:	f7fe feb8 	bl	8001270 <HAL_GetTick>
 8002500:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002504:	f7fe feb4 	bl	8001270 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b64      	cmp	r3, #100	; 0x64
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e269      	b.n	80029ea <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002516:	f7ff fc76 	bl	8001e06 <LL_RCC_HSE_IsReady>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0f1      	beq.n	8002504 <HAL_RCC_OscConfig+0x244>
 8002520:	e013      	b.n	800254a <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002522:	f7fe fea5 	bl	8001270 <HAL_GetTick>
 8002526:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800252a:	f7fe fea1 	bl	8001270 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b64      	cmp	r3, #100	; 0x64
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e256      	b.n	80029ea <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 800253c:	f7ff fc63 	bl	8001e06 <LL_RCC_HSE_IsReady>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f1      	bne.n	800252a <HAL_RCC_OscConfig+0x26a>
 8002546:	e000      	b.n	800254a <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002548:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d04b      	beq.n	80025ee <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	2b04      	cmp	r3, #4
 800255a:	d005      	beq.n	8002568 <HAL_RCC_OscConfig+0x2a8>
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	2b0c      	cmp	r3, #12
 8002560:	d113      	bne.n	800258a <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	2b02      	cmp	r3, #2
 8002566:	d110      	bne.n	800258a <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002568:	f7ff fc7a 	bl	8001e60 <LL_RCC_HSI_IsReady>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d005      	beq.n	800257e <HAL_RCC_OscConfig+0x2be>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e235      	b.n	80029ea <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff fc7d 	bl	8001e82 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002588:	e031      	b.n	80025ee <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d019      	beq.n	80025c6 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002592:	f7ff fc49 	bl	8001e28 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002596:	f7fe fe6b 	bl	8001270 <HAL_GetTick>
 800259a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800259e:	f7fe fe67 	bl	8001270 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e21c      	b.n	80029ea <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 80025b0:	f7ff fc56 	bl	8001e60 <LL_RCC_HSI_IsReady>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0f1      	beq.n	800259e <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff fc5f 	bl	8001e82 <LL_RCC_HSI_SetCalibTrimming>
 80025c4:	e013      	b.n	80025ee <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025c6:	f7ff fc3d 	bl	8001e44 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ca:	f7fe fe51 	bl	8001270 <HAL_GetTick>
 80025ce:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d2:	f7fe fe4d 	bl	8001270 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e202      	b.n	80029ea <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 80025e4:	f7ff fc3c 	bl	8001e60 <LL_RCC_HSI_IsReady>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f1      	bne.n	80025d2 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0308 	and.w	r3, r3, #8
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d06f      	beq.n	80026da <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d057      	beq.n	80026b2 <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 8002602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002606:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800260a:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	69da      	ldr	r2, [r3, #28]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f003 0310 	and.w	r3, r3, #16
 8002616:	429a      	cmp	r2, r3
 8002618:	d036      	beq.n	8002688 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d006      	beq.n	8002632 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e1db      	b.n	80029ea <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b00      	cmp	r3, #0
 800263a:	d018      	beq.n	800266e <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 800263c:	f7ff fc56 	bl	8001eec <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002640:	f7fe fe16 	bl	8001270 <HAL_GetTick>
 8002644:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002646:	e00d      	b.n	8002664 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002648:	f7fe fe12 	bl	8001270 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b11      	cmp	r3, #17
 8002654:	d906      	bls.n	8002664 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e1c7      	b.n	80029ea <HAL_RCC_OscConfig+0x72a>
 800265a:	bf00      	nop
 800265c:	20000000 	.word	0x20000000
 8002660:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 8002664:	f7ff fc52 	bl	8001f0c <LL_RCC_LSI_IsReady>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1ec      	bne.n	8002648 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800266e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002672:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002676:	f023 0210 	bic.w	r2, r3, #16
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002682:	4313      	orrs	r3, r2
 8002684:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002688:	f7ff fc20 	bl	8001ecc <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800268c:	f7fe fdf0 	bl	8001270 <HAL_GetTick>
 8002690:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002694:	f7fe fdec 	bl	8001270 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b11      	cmp	r3, #17
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e1a1      	b.n	80029ea <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 80026a6:	f7ff fc31 	bl	8001f0c <LL_RCC_LSI_IsReady>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0f1      	beq.n	8002694 <HAL_RCC_OscConfig+0x3d4>
 80026b0:	e013      	b.n	80026da <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026b2:	f7ff fc1b 	bl	8001eec <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b6:	f7fe fddb 	bl	8001270 <HAL_GetTick>
 80026ba:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026be:	f7fe fdd7 	bl	8001270 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b11      	cmp	r3, #17
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e18c      	b.n	80029ea <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 80026d0:	f7ff fc1c 	bl	8001f0c <LL_RCC_LSI_IsReady>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f1      	bne.n	80026be <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0304 	and.w	r3, r3, #4
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 80d8 	beq.w	8002898 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80026e8:	f7ff fb32 	bl	8001d50 <LL_PWR_IsEnabledBkUpAccess>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d113      	bne.n	800271a <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80026f2:	f7ff fb13 	bl	8001d1c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026f6:	f7fe fdbb 	bl	8001270 <HAL_GetTick>
 80026fa:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026fe:	f7fe fdb7 	bl	8001270 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e16c      	b.n	80029ea <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002710:	f7ff fb1e 	bl	8001d50 <LL_PWR_IsEnabledBkUpAccess>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f1      	beq.n	80026fe <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d07b      	beq.n	800281a <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	2b85      	cmp	r3, #133	; 0x85
 8002728:	d003      	beq.n	8002732 <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	2b05      	cmp	r3, #5
 8002730:	d109      	bne.n	8002746 <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002732:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800273a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800273e:	f043 0304 	orr.w	r3, r3, #4
 8002742:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002746:	f7fe fd93 	bl	8001270 <HAL_GetTick>
 800274a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800274c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002754:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002758:	f043 0301 	orr.w	r3, r3, #1
 800275c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002760:	e00a      	b.n	8002778 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002762:	f7fe fd85 	bl	8001270 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002770:	4293      	cmp	r3, r2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e138      	b.n	80029ea <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002778:	f7ff fb97 	bl	8001eaa <LL_RCC_LSE_IsReady>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0ef      	beq.n	8002762 <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	2b81      	cmp	r3, #129	; 0x81
 8002788:	d003      	beq.n	8002792 <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	2b85      	cmp	r3, #133	; 0x85
 8002790:	d121      	bne.n	80027d6 <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002792:	f7fe fd6d 	bl	8001270 <HAL_GetTick>
 8002796:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800279c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80027ac:	e00a      	b.n	80027c4 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ae:	f7fe fd5f 	bl	8001270 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027bc:	4293      	cmp	r3, r2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e112      	b.n	80029ea <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80027c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0ec      	beq.n	80027ae <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80027d4:	e060      	b.n	8002898 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d6:	f7fe fd4b 	bl	8001270 <HAL_GetTick>
 80027da:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80027dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80027f0:	e00a      	b.n	8002808 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027f2:	f7fe fd3d 	bl	8001270 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002800:	4293      	cmp	r3, r2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e0f0      	b.n	80029ea <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800280c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002810:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1ec      	bne.n	80027f2 <HAL_RCC_OscConfig+0x532>
 8002818:	e03e      	b.n	8002898 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800281a:	f7fe fd29 	bl	8001270 <HAL_GetTick>
 800281e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002820:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002828:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800282c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002830:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002834:	e00a      	b.n	800284c <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002836:	f7fe fd1b 	bl	8001270 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	f241 3288 	movw	r2, #5000	; 0x1388
 8002844:	4293      	cmp	r3, r2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e0ce      	b.n	80029ea <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800284c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002854:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1ec      	bne.n	8002836 <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800285c:	f7fe fd08 	bl	8001270 <HAL_GetTick>
 8002860:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002862:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800286e:	f023 0301 	bic.w	r3, r3, #1
 8002872:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002876:	e00a      	b.n	800288e <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002878:	f7fe fcfa 	bl	8001270 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	f241 3288 	movw	r2, #5000	; 0x1388
 8002886:	4293      	cmp	r3, r2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e0ad      	b.n	80029ea <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 800288e:	f7ff fb0c 	bl	8001eaa <LL_RCC_LSE_IsReady>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1ef      	bne.n	8002878 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 80a3 	beq.w	80029e8 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	2b0c      	cmp	r3, #12
 80028a6:	d076      	beq.n	8002996 <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d14b      	bne.n	8002948 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b0:	f7ff fc62 	bl	8002178 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b4:	f7fe fcdc 	bl	8001270 <HAL_GetTick>
 80028b8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028bc:	f7fe fcd8 	bl	8001270 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b0a      	cmp	r3, #10
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e08d      	b.n	80029ea <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 80028ce:	f7ff fc61 	bl	8002194 <LL_RCC_PLL_IsReady>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1f1      	bne.n	80028bc <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	4b45      	ldr	r3, [pc, #276]	; (80029f4 <HAL_RCC_OscConfig+0x734>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028ea:	4311      	orrs	r1, r2
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028f0:	0212      	lsls	r2, r2, #8
 80028f2:	4311      	orrs	r1, r2
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028f8:	4311      	orrs	r1, r2
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028fe:	4311      	orrs	r1, r2
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002904:	430a      	orrs	r2, r1
 8002906:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800290a:	4313      	orrs	r3, r2
 800290c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800290e:	f7ff fc25 	bl	800215c <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002912:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800291c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002920:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002922:	f7fe fca5 	bl	8001270 <HAL_GetTick>
 8002926:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002928:	e008      	b.n	800293c <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800292a:	f7fe fca1 	bl	8001270 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b0a      	cmp	r3, #10
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e056      	b.n	80029ea <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 800293c:	f7ff fc2a 	bl	8002194 <LL_RCC_PLL_IsReady>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0f1      	beq.n	800292a <HAL_RCC_OscConfig+0x66a>
 8002946:	e04f      	b.n	80029e8 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002948:	f7ff fc16 	bl	8002178 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800294c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002956:	f023 0303 	bic.w	r3, r3, #3
 800295a:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 800295c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002966:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800296a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800296e:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002970:	f7fe fc7e 	bl	8001270 <HAL_GetTick>
 8002974:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002978:	f7fe fc7a 	bl	8001270 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b0a      	cmp	r3, #10
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e02f      	b.n	80029ea <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 800298a:	f7ff fc03 	bl	8002194 <LL_RCC_PLL_IsReady>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1f1      	bne.n	8002978 <HAL_RCC_OscConfig+0x6b8>
 8002994:	e028      	b.n	80029e8 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299a:	2b01      	cmp	r3, #1
 800299c:	d101      	bne.n	80029a2 <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e023      	b.n	80029ea <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	f003 0203 	and.w	r2, r3, #3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d115      	bne.n	80029e4 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d10e      	bne.n	80029e4 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d0:	021b      	lsls	r3, r3, #8
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d106      	bne.n	80029e4 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d001      	beq.n	80029e8 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e000      	b.n	80029ea <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3720      	adds	r7, #32
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	11c1808c 	.word	0x11c1808c

080029f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e12c      	b.n	8002c66 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a0c:	4b98      	ldr	r3, [pc, #608]	; (8002c70 <HAL_RCC_ClockConfig+0x278>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d91b      	bls.n	8002a52 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1a:	4b95      	ldr	r3, [pc, #596]	; (8002c70 <HAL_RCC_ClockConfig+0x278>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f023 0207 	bic.w	r2, r3, #7
 8002a22:	4993      	ldr	r1, [pc, #588]	; (8002c70 <HAL_RCC_ClockConfig+0x278>)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a2a:	f7fe fc21 	bl	8001270 <HAL_GetTick>
 8002a2e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002a32:	f7fe fc1d 	bl	8001270 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e110      	b.n	8002c66 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a44:	4b8a      	ldr	r3, [pc, #552]	; (8002c70 <HAL_RCC_ClockConfig+0x278>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d1ef      	bne.n	8002a32 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d016      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff fae8 	bl	8002038 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a68:	f7fe fc02 	bl	8001270 <HAL_GetTick>
 8002a6c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a70:	f7fe fbfe 	bl	8001270 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e0f1      	b.n	8002c66 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002a82:	f7ff fbc5 	bl	8002210 <LL_RCC_IsActiveFlag_HPRE>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0f1      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0320 	and.w	r3, r3, #32
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d016      	beq.n	8002ac6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff fade 	bl	800205e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002aa2:	f7fe fbe5 	bl	8001270 <HAL_GetTick>
 8002aa6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002aa8:	e008      	b.n	8002abc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002aaa:	f7fe fbe1 	bl	8001270 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e0d4      	b.n	8002c66 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002abc:	f7ff fbb9 	bl	8002232 <LL_RCC_IsActiveFlag_C2HPRE>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f1      	beq.n	8002aaa <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d016      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff fad6 	bl	8002088 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002adc:	f7fe fbc8 	bl	8001270 <HAL_GetTick>
 8002ae0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002ae4:	f7fe fbc4 	bl	8001270 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e0b7      	b.n	8002c66 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002af6:	f7ff fbae 	bl	8002256 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d0f1      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d016      	beq.n	8002b3a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff facf 	bl	80020b4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002b16:	f7fe fbab 	bl	8001270 <HAL_GetTick>
 8002b1a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002b1c:	e008      	b.n	8002b30 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002b1e:	f7fe fba7 	bl	8001270 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e09a      	b.n	8002c66 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002b30:	f7ff fba3 	bl	800227a <LL_RCC_IsActiveFlag_PPRE1>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0f1      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0308 	and.w	r3, r3, #8
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d017      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff fac4 	bl	80020da <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002b52:	f7fe fb8d 	bl	8001270 <HAL_GetTick>
 8002b56:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002b58:	e008      	b.n	8002b6c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002b5a:	f7fe fb89 	bl	8001270 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e07c      	b.n	8002c66 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002b6c:	f7ff fb96 	bl	800229c <LL_RCC_IsActiveFlag_PPRE2>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d0f1      	beq.n	8002b5a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d043      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d106      	bne.n	8002b98 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002b8a:	f7ff f93c 	bl	8001e06 <LL_RCC_HSE_IsReady>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d11e      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e066      	b.n	8002c66 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2b03      	cmp	r3, #3
 8002b9e:	d106      	bne.n	8002bae <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002ba0:	f7ff faf8 	bl	8002194 <LL_RCC_PLL_IsReady>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d113      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e05b      	b.n	8002c66 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d106      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002bb6:	f7ff f9d6 	bl	8001f66 <LL_RCC_MSI_IsReady>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d108      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e050      	b.n	8002c66 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002bc4:	f7ff f94c 	bl	8001e60 <LL_RCC_HSI_IsReady>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e049      	b.n	8002c66 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff fa10 	bl	8001ffc <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bdc:	f7fe fb48 	bl	8001270 <HAL_GetTick>
 8002be0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002be2:	e00a      	b.n	8002bfa <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002be4:	f7fe fb44 	bl	8001270 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e035      	b.n	8002c66 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bfa:	f7ff fa12 	bl	8002022 <LL_RCC_GetSysClkSource>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d1ec      	bne.n	8002be4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c0a:	4b19      	ldr	r3, [pc, #100]	; (8002c70 <HAL_RCC_ClockConfig+0x278>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d21b      	bcs.n	8002c50 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c18:	4b15      	ldr	r3, [pc, #84]	; (8002c70 <HAL_RCC_ClockConfig+0x278>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f023 0207 	bic.w	r2, r3, #7
 8002c20:	4913      	ldr	r1, [pc, #76]	; (8002c70 <HAL_RCC_ClockConfig+0x278>)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c28:	f7fe fb22 	bl	8001270 <HAL_GetTick>
 8002c2c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002c30:	f7fe fb1e 	bl	8001270 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e011      	b.n	8002c66 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c42:	4b0b      	ldr	r3, [pc, #44]	; (8002c70 <HAL_RCC_ClockConfig+0x278>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d1ef      	bne.n	8002c30 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002c50:	f000 f8b4 	bl	8002dbc <HAL_RCC_GetHCLKFreq>
 8002c54:	4603      	mov	r3, r0
 8002c56:	4a07      	ldr	r2, [pc, #28]	; (8002c74 <HAL_RCC_ClockConfig+0x27c>)
 8002c58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002c5a:	4b07      	ldr	r3, [pc, #28]	; (8002c78 <HAL_RCC_ClockConfig+0x280>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7fe faba 	bl	80011d8 <HAL_InitTick>
 8002c64:	4603      	mov	r3, r0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	58004000 	.word	0x58004000
 8002c74:	20000000 	.word	0x20000000
 8002c78:	20000004 	.word	0x20000004

08002c7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c7c:	b590      	push	{r4, r7, lr}
 8002c7e:	b087      	sub	sp, #28
 8002c80:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002c82:	2300      	movs	r3, #0
 8002c84:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002c86:	2300      	movs	r3, #0
 8002c88:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c8a:	f7ff f9ca 	bl	8002022 <LL_RCC_GetSysClkSource>
 8002c8e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c90:	f7ff fab3 	bl	80021fa <LL_RCC_PLL_GetMainSource>
 8002c94:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d005      	beq.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x2c>
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	2b0c      	cmp	r3, #12
 8002ca0:	d139      	bne.n	8002d16 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d136      	bne.n	8002d16 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002ca8:	f7ff f96d 	bl	8001f86 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d115      	bne.n	8002cde <HAL_RCC_GetSysClockFreq+0x62>
 8002cb2:	f7ff f968 	bl	8001f86 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d106      	bne.n	8002cca <HAL_RCC_GetSysClockFreq+0x4e>
 8002cbc:	f7ff f973 	bl	8001fa6 <LL_RCC_MSI_GetRange>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	0a1b      	lsrs	r3, r3, #8
 8002cc4:	f003 030f 	and.w	r3, r3, #15
 8002cc8:	e005      	b.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x5a>
 8002cca:	f7ff f977 	bl	8001fbc <LL_RCC_MSI_GetRangeAfterStandby>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	0a1b      	lsrs	r3, r3, #8
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	4a36      	ldr	r2, [pc, #216]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x134>)
 8002cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cdc:	e014      	b.n	8002d08 <HAL_RCC_GetSysClockFreq+0x8c>
 8002cde:	f7ff f952 	bl	8001f86 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d106      	bne.n	8002cf6 <HAL_RCC_GetSysClockFreq+0x7a>
 8002ce8:	f7ff f95d 	bl	8001fa6 <LL_RCC_MSI_GetRange>
 8002cec:	4603      	mov	r3, r0
 8002cee:	091b      	lsrs	r3, r3, #4
 8002cf0:	f003 030f 	and.w	r3, r3, #15
 8002cf4:	e005      	b.n	8002d02 <HAL_RCC_GetSysClockFreq+0x86>
 8002cf6:	f7ff f961 	bl	8001fbc <LL_RCC_MSI_GetRangeAfterStandby>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	091b      	lsrs	r3, r3, #4
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	4a2b      	ldr	r2, [pc, #172]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x134>)
 8002d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d08:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d115      	bne.n	8002d3c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002d14:	e012      	b.n	8002d3c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d102      	bne.n	8002d22 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d1c:	4b25      	ldr	r3, [pc, #148]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	e00c      	b.n	8002d3c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	d109      	bne.n	8002d3c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002d28:	f7ff f840 	bl	8001dac <LL_RCC_HSE_IsEnabledDiv2>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d102      	bne.n	8002d38 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002d32:	4b20      	ldr	r3, [pc, #128]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	e001      	b.n	8002d3c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002d38:	4b1f      	ldr	r3, [pc, #124]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002d3a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d3c:	f7ff f971 	bl	8002022 <LL_RCC_GetSysClkSource>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b0c      	cmp	r3, #12
 8002d44:	d12f      	bne.n	8002da6 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002d46:	f7ff fa58 	bl	80021fa <LL_RCC_PLL_GetMainSource>
 8002d4a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d003      	beq.n	8002d5a <HAL_RCC_GetSysClockFreq+0xde>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b03      	cmp	r3, #3
 8002d56:	d003      	beq.n	8002d60 <HAL_RCC_GetSysClockFreq+0xe4>
 8002d58:	e00d      	b.n	8002d76 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002d5a:	4b16      	ldr	r3, [pc, #88]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002d5c:	60fb      	str	r3, [r7, #12]
        break;
 8002d5e:	e00d      	b.n	8002d7c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002d60:	f7ff f824 	bl	8001dac <LL_RCC_HSE_IsEnabledDiv2>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d102      	bne.n	8002d70 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002d6a:	4b12      	ldr	r3, [pc, #72]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002d6c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002d6e:	e005      	b.n	8002d7c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002d70:	4b11      	ldr	r3, [pc, #68]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002d72:	60fb      	str	r3, [r7, #12]
        break;
 8002d74:	e002      	b.n	8002d7c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	60fb      	str	r3, [r7, #12]
        break;
 8002d7a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002d7c:	f7ff fa1b 	bl	80021b6 <LL_RCC_PLL_GetN>
 8002d80:	4602      	mov	r2, r0
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	fb03 f402 	mul.w	r4, r3, r2
 8002d88:	f7ff fa2c 	bl	80021e4 <LL_RCC_PLL_GetDivider>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	091b      	lsrs	r3, r3, #4
 8002d90:	3301      	adds	r3, #1
 8002d92:	fbb4 f4f3 	udiv	r4, r4, r3
 8002d96:	f7ff fa1a 	bl	80021ce <LL_RCC_PLL_GetR>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	0f5b      	lsrs	r3, r3, #29
 8002d9e:	3301      	adds	r3, #1
 8002da0:	fbb4 f3f3 	udiv	r3, r4, r3
 8002da4:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002da6:	697b      	ldr	r3, [r7, #20]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	371c      	adds	r7, #28
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd90      	pop	{r4, r7, pc}
 8002db0:	0800566c 	.word	0x0800566c
 8002db4:	00f42400 	.word	0x00f42400
 8002db8:	01e84800 	.word	0x01e84800

08002dbc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dbc:	b598      	push	{r3, r4, r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002dc0:	f7ff ff5c 	bl	8002c7c <HAL_RCC_GetSysClockFreq>
 8002dc4:	4604      	mov	r4, r0
 8002dc6:	f7ff f99b 	bl	8002100 <LL_RCC_GetAHBPrescaler>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	091b      	lsrs	r3, r3, #4
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	4a03      	ldr	r2, [pc, #12]	; (8002de0 <HAL_RCC_GetHCLKFreq+0x24>)
 8002dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dd8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	bd98      	pop	{r3, r4, r7, pc}
 8002de0:	0800560c 	.word	0x0800560c

08002de4 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002de4:	b598      	push	{r3, r4, r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002de8:	f7ff ffe8 	bl	8002dbc <HAL_RCC_GetHCLKFreq>
 8002dec:	4604      	mov	r4, r0
 8002dee:	f7ff f99f 	bl	8002130 <LL_RCC_GetAPB1Prescaler>
 8002df2:	4603      	mov	r3, r0
 8002df4:	0a1b      	lsrs	r3, r3, #8
 8002df6:	4a03      	ldr	r2, [pc, #12]	; (8002e04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dfc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	bd98      	pop	{r3, r4, r7, pc}
 8002e04:	0800564c 	.word	0x0800564c

08002e08 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e08:	b598      	push	{r3, r4, r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002e0c:	f7ff ffd6 	bl	8002dbc <HAL_RCC_GetHCLKFreq>
 8002e10:	4604      	mov	r4, r0
 8002e12:	f7ff f998 	bl	8002146 <LL_RCC_GetAPB2Prescaler>
 8002e16:	4603      	mov	r3, r0
 8002e18:	0adb      	lsrs	r3, r3, #11
 8002e1a:	4a03      	ldr	r2, [pc, #12]	; (8002e28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e20:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	bd98      	pop	{r3, r4, r7, pc}
 8002e28:	0800564c 	.word	0x0800564c

08002e2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002e2c:	b590      	push	{r4, r7, lr}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	091b      	lsrs	r3, r3, #4
 8002e38:	f003 030f 	and.w	r3, r3, #15
 8002e3c:	4a10      	ldr	r2, [pc, #64]	; (8002e80 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8002e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e42:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002e44:	f7ff f967 	bl	8002116 <LL_RCC_GetAHB3Prescaler>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	091b      	lsrs	r3, r3, #4
 8002e4c:	f003 030f 	and.w	r3, r3, #15
 8002e50:	4a0c      	ldr	r2, [pc, #48]	; (8002e84 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	4a09      	ldr	r2, [pc, #36]	; (8002e88 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002e62:	fba2 2303 	umull	r2, r3, r2, r3
 8002e66:	0c9c      	lsrs	r4, r3, #18
 8002e68:	f7fe ff66 	bl	8001d38 <HAL_PWREx_GetVoltageRange>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4620      	mov	r0, r4
 8002e72:	f000 f80b 	bl	8002e8c <RCC_SetFlashLatency>
 8002e76:	4603      	mov	r3, r0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3714      	adds	r7, #20
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd90      	pop	{r4, r7, pc}
 8002e80:	0800566c 	.word	0x0800566c
 8002e84:	0800560c 	.word	0x0800560c
 8002e88:	431bde83 	.word	0x431bde83

08002e8c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b08e      	sub	sp, #56	; 0x38
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002e96:	4a3a      	ldr	r2, [pc, #232]	; (8002f80 <RCC_SetFlashLatency+0xf4>)
 8002e98:	f107 0320 	add.w	r3, r7, #32
 8002e9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ea0:	6018      	str	r0, [r3, #0]
 8002ea2:	3304      	adds	r3, #4
 8002ea4:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002ea6:	4a37      	ldr	r2, [pc, #220]	; (8002f84 <RCC_SetFlashLatency+0xf8>)
 8002ea8:	f107 0318 	add.w	r3, r7, #24
 8002eac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002eb0:	6018      	str	r0, [r3, #0]
 8002eb2:	3304      	adds	r3, #4
 8002eb4:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002eb6:	4a34      	ldr	r2, [pc, #208]	; (8002f88 <RCC_SetFlashLatency+0xfc>)
 8002eb8:	f107 030c 	add.w	r3, r7, #12
 8002ebc:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ebe:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ecc:	d11b      	bne.n	8002f06 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002ece:	2300      	movs	r3, #0
 8002ed0:	633b      	str	r3, [r7, #48]	; 0x30
 8002ed2:	e014      	b.n	8002efe <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	3338      	adds	r3, #56	; 0x38
 8002eda:	443b      	add	r3, r7
 8002edc:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d807      	bhi.n	8002ef8 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	3338      	adds	r3, #56	; 0x38
 8002eee:	443b      	add	r3, r7
 8002ef0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002ef4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002ef6:	e021      	b.n	8002f3c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efa:	3301      	adds	r3, #1
 8002efc:	633b      	str	r3, [r7, #48]	; 0x30
 8002efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d9e7      	bls.n	8002ed4 <RCC_SetFlashLatency+0x48>
 8002f04:	e01a      	b.n	8002f3c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002f06:	2300      	movs	r3, #0
 8002f08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f0a:	e014      	b.n	8002f36 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	3338      	adds	r3, #56	; 0x38
 8002f12:	443b      	add	r3, r7
 8002f14:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002f18:	461a      	mov	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d807      	bhi.n	8002f30 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	3338      	adds	r3, #56	; 0x38
 8002f26:	443b      	add	r3, r7
 8002f28:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002f2c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f2e:	e005      	b.n	8002f3c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f32:	3301      	adds	r3, #1
 8002f34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d9e7      	bls.n	8002f0c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f3c:	4b13      	ldr	r3, [pc, #76]	; (8002f8c <RCC_SetFlashLatency+0x100>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f023 0207 	bic.w	r2, r3, #7
 8002f44:	4911      	ldr	r1, [pc, #68]	; (8002f8c <RCC_SetFlashLatency+0x100>)
 8002f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002f4c:	f7fe f990 	bl	8001270 <HAL_GetTick>
 8002f50:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002f52:	e008      	b.n	8002f66 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002f54:	f7fe f98c 	bl	8001270 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e007      	b.n	8002f76 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002f66:	4b09      	ldr	r3, [pc, #36]	; (8002f8c <RCC_SetFlashLatency+0x100>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d1ef      	bne.n	8002f54 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3738      	adds	r7, #56	; 0x38
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	080055f0 	.word	0x080055f0
 8002f84:	080055f8 	.word	0x080055f8
 8002f88:	08005600 	.word	0x08005600
 8002f8c:	58004000 	.word	0x58004000

08002f90 <LL_RCC_LSE_IsReady>:
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002f94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d101      	bne.n	8002fa8 <LL_RCC_LSE_IsReady+0x18>
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e000      	b.n	8002faa <LL_RCC_LSE_IsReady+0x1a>
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bc80      	pop	{r7}
 8002fb0:	4770      	bx	lr

08002fb2 <LL_RCC_SetUSARTClockSource>:
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fbe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	0c1b      	lsrs	r3, r3, #16
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	401a      	ands	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bc80      	pop	{r7}
 8002fe0:	4770      	bx	lr

08002fe2 <LL_RCC_SetI2SClockSource>:
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b083      	sub	sp, #12
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ff6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	bc80      	pop	{r7}
 800300a:	4770      	bx	lr

0800300c <LL_RCC_SetLPUARTClockSource>:
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003014:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003020:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4313      	orrs	r3, r2
 8003028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	bc80      	pop	{r7}
 8003034:	4770      	bx	lr

08003036 <LL_RCC_SetI2CClockSource>:
{
 8003036:	b480      	push	{r7}
 8003038:	b083      	sub	sp, #12
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800303e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003042:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	091b      	lsrs	r3, r3, #4
 800304a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800304e:	43db      	mvns	r3, r3
 8003050:	401a      	ands	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800305a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800305e:	4313      	orrs	r3, r2
 8003060:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	bc80      	pop	{r7}
 800306c:	4770      	bx	lr

0800306e <LL_RCC_SetLPTIMClockSource>:
{
 800306e:	b480      	push	{r7}
 8003070:	b083      	sub	sp, #12
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800307a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	0c1b      	lsrs	r3, r3, #16
 8003082:	041b      	lsls	r3, r3, #16
 8003084:	43db      	mvns	r3, r3
 8003086:	401a      	ands	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	041b      	lsls	r3, r3, #16
 800308c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003090:	4313      	orrs	r3, r2
 8003092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	bc80      	pop	{r7}
 800309e:	4770      	bx	lr

080030a0 <LL_RCC_SetRNGClockSource>:
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80030a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80030b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr

080030ca <LL_RCC_SetADCClockSource>:
{
 80030ca:	b480      	push	{r7}
 80030cc:	b083      	sub	sp, #12
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80030d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80030de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr

080030f4 <LL_RCC_SetRTCClockSource>:
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80030fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003104:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003108:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4313      	orrs	r3, r2
 8003110:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	bc80      	pop	{r7}
 800311c:	4770      	bx	lr

0800311e <LL_RCC_GetRTCClockSource>:
{
 800311e:	b480      	push	{r7}
 8003120:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800312a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800312e:	4618      	mov	r0, r3
 8003130:	46bd      	mov	sp, r7
 8003132:	bc80      	pop	{r7}
 8003134:	4770      	bx	lr

08003136 <LL_RCC_ForceBackupDomainReset>:
{
 8003136:	b480      	push	{r7}
 8003138:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800313a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800313e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003142:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800314a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800314e:	bf00      	nop
 8003150:	46bd      	mov	sp, r7
 8003152:	bc80      	pop	{r7}
 8003154:	4770      	bx	lr

08003156 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003156:	b480      	push	{r7}
 8003158:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800315a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800315e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003162:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800316a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800316e:	bf00      	nop
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr
	...

08003178 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003180:	2300      	movs	r3, #0
 8003182:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003184:	2300      	movs	r3, #0
 8003186:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003188:	2300      	movs	r3, #0
 800318a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d058      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003198:	f7fe fdc0 	bl	8001d1c <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800319c:	f7fe f868 	bl	8001270 <HAL_GetTick>
 80031a0:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80031a2:	e009      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031a4:	f7fe f864 	bl	8001270 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d902      	bls.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	74fb      	strb	r3, [r7, #19]
        break;
 80031b6:	e006      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80031b8:	4b7b      	ldr	r3, [pc, #492]	; (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031c4:	d1ee      	bne.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80031c6:	7cfb      	ldrb	r3, [r7, #19]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d13c      	bne.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80031cc:	f7ff ffa7 	bl	800311e <LL_RCC_GetRTCClockSource>
 80031d0:	4602      	mov	r2, r0
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d00f      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031e6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031e8:	f7ff ffa5 	bl	8003136 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031ec:	f7ff ffb3 	bl	8003156 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d014      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003204:	f7fe f834 	bl	8001270 <HAL_GetTick>
 8003208:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800320a:	e00b      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800320c:	f7fe f830 	bl	8001270 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	f241 3288 	movw	r2, #5000	; 0x1388
 800321a:	4293      	cmp	r3, r2
 800321c:	d902      	bls.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	74fb      	strb	r3, [r7, #19]
            break;
 8003222:	e004      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003224:	f7ff feb4 	bl	8002f90 <LL_RCC_LSE_IsReady>
 8003228:	4603      	mov	r3, r0
 800322a:	2b01      	cmp	r3, #1
 800322c:	d1ee      	bne.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800322e:	7cfb      	ldrb	r3, [r7, #19]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d105      	bne.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff ff5b 	bl	80030f4 <LL_RCC_SetRTCClockSource>
 800323e:	e004      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003240:	7cfb      	ldrb	r3, [r7, #19]
 8003242:	74bb      	strb	r3, [r7, #18]
 8003244:	e001      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003246:	7cfb      	ldrb	r3, [r7, #19]
 8003248:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b00      	cmp	r3, #0
 8003254:	d004      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	4618      	mov	r0, r3
 800325c:	f7ff fea9 	bl	8002fb2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d004      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff fe9e 	bl	8002fb2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0320 	and.w	r3, r3, #32
 800327e:	2b00      	cmp	r3, #0
 8003280:	d004      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff fec0 	bl	800300c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003294:	2b00      	cmp	r3, #0
 8003296:	d004      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff fee6 	bl	800306e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d004      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7ff fedb 	bl	800306e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d004      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff fed0 	bl	800306e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d004      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff fea9 	bl	8003036 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d004      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff fe9e 	bl	8003036 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003302:	2b00      	cmp	r3, #0
 8003304:	d004      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	4618      	mov	r0, r3
 800330c:	f7ff fe93 	bl	8003036 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0310 	and.w	r3, r3, #16
 8003318:	2b00      	cmp	r3, #0
 800331a:	d011      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff fe5e 	bl	8002fe2 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800332e:	d107      	bne.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800333a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800333e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d010      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff fea5 	bl	80030a0 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	2b00      	cmp	r3, #0
 800335c:	d107      	bne.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800335e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003368:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800336c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d011      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff fea3 	bl	80030ca <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003388:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800338c:	d107      	bne.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800338e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800339c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800339e:	7cbb      	ldrb	r3, [r7, #18]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	58000400 	.word	0x58000400

080033ac <LL_RCC_GetUSARTClockSource>:
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80033b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	401a      	ands	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	041b      	lsls	r3, r3, #16
 80033c4:	4313      	orrs	r3, r2
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bc80      	pop	{r7}
 80033ce:	4770      	bx	lr

080033d0 <LL_RCC_GetLPUARTClockSource>:
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80033d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4013      	ands	r3, r2
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bc80      	pop	{r7}
 80033ec:	4770      	bx	lr

080033ee <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b082      	sub	sp, #8
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e042      	b.n	8003486 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003406:	2b00      	cmp	r3, #0
 8003408:	d106      	bne.n	8003418 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7fd fd40 	bl	8000e98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2224      	movs	r2, #36	; 0x24
 800341c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0201 	bic.w	r2, r2, #1
 800342e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 fd29 	bl	8003e88 <UART_SetConfig>
 8003436:	4603      	mov	r3, r0
 8003438:	2b01      	cmp	r3, #1
 800343a:	d101      	bne.n	8003440 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e022      	b.n	8003486 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003444:	2b00      	cmp	r3, #0
 8003446:	d002      	beq.n	800344e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 ff91 	bl	8004370 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800345c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800346c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f042 0201 	orr.w	r2, r2, #1
 800347c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f001 f817 	bl	80044b2 <UART_CheckIdleState>
 8003484:	4603      	mov	r3, r0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b08a      	sub	sp, #40	; 0x28
 8003492:	af02      	add	r7, sp, #8
 8003494:	60f8      	str	r0, [r7, #12]
 8003496:	60b9      	str	r1, [r7, #8]
 8003498:	603b      	str	r3, [r7, #0]
 800349a:	4613      	mov	r3, r2
 800349c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034a4:	2b20      	cmp	r3, #32
 80034a6:	f040 8083 	bne.w	80035b0 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d002      	beq.n	80034b6 <HAL_UART_Transmit+0x28>
 80034b0:	88fb      	ldrh	r3, [r7, #6]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e07b      	b.n	80035b2 <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d101      	bne.n	80034c8 <HAL_UART_Transmit+0x3a>
 80034c4:	2302      	movs	r3, #2
 80034c6:	e074      	b.n	80035b2 <HAL_UART_Transmit+0x124>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2221      	movs	r2, #33	; 0x21
 80034dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034e0:	f7fd fec6 	bl	8001270 <HAL_GetTick>
 80034e4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	88fa      	ldrh	r2, [r7, #6]
 80034ea:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	88fa      	ldrh	r2, [r7, #6]
 80034f2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034fe:	d108      	bne.n	8003512 <HAL_UART_Transmit+0x84>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d104      	bne.n	8003512 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003508:	2300      	movs	r3, #0
 800350a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	61bb      	str	r3, [r7, #24]
 8003510:	e003      	b.n	800351a <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003516:	2300      	movs	r3, #0
 8003518:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003522:	e02c      	b.n	800357e <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	2200      	movs	r2, #0
 800352c:	2180      	movs	r1, #128	; 0x80
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f001 f80a 	bl	8004548 <UART_WaitOnFlagUntilTimeout>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e039      	b.n	80035b2 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10b      	bne.n	800355c <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	881b      	ldrh	r3, [r3, #0]
 8003548:	461a      	mov	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003552:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	3302      	adds	r3, #2
 8003558:	61bb      	str	r3, [r7, #24]
 800355a:	e007      	b.n	800356c <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	781a      	ldrb	r2, [r3, #0]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	3301      	adds	r3, #1
 800356a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003572:	b29b      	uxth	r3, r3
 8003574:	3b01      	subs	r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003584:	b29b      	uxth	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1cc      	bne.n	8003524 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	2200      	movs	r2, #0
 8003592:	2140      	movs	r1, #64	; 0x40
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 ffd7 	bl	8004548 <UART_WaitOnFlagUntilTimeout>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e006      	b.n	80035b2 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2220      	movs	r2, #32
 80035a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80035ac:	2300      	movs	r3, #0
 80035ae:	e000      	b.n	80035b2 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80035b0:	2302      	movs	r3, #2
  }
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3720      	adds	r7, #32
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b08a      	sub	sp, #40	; 0x28
 80035be:	af02      	add	r7, sp, #8
 80035c0:	60f8      	str	r0, [r7, #12]
 80035c2:	60b9      	str	r1, [r7, #8]
 80035c4:	603b      	str	r3, [r7, #0]
 80035c6:	4613      	mov	r3, r2
 80035c8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d0:	2b20      	cmp	r3, #32
 80035d2:	f040 80c0 	bne.w	8003756 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d002      	beq.n	80035e2 <HAL_UART_Receive+0x28>
 80035dc:	88fb      	ldrh	r3, [r7, #6]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e0b8      	b.n	8003758 <HAL_UART_Receive+0x19e>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d101      	bne.n	80035f4 <HAL_UART_Receive+0x3a>
 80035f0:	2302      	movs	r3, #2
 80035f2:	e0b1      	b.n	8003758 <HAL_UART_Receive+0x19e>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2222      	movs	r2, #34	; 0x22
 8003608:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003612:	f7fd fe2d 	bl	8001270 <HAL_GetTick>
 8003616:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	88fa      	ldrh	r2, [r7, #6]
 800361c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	88fa      	ldrh	r2, [r7, #6]
 8003624:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003630:	d10e      	bne.n	8003650 <HAL_UART_Receive+0x96>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d105      	bne.n	8003646 <HAL_UART_Receive+0x8c>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003640:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003644:	e02d      	b.n	80036a2 <HAL_UART_Receive+0xe8>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	22ff      	movs	r2, #255	; 0xff
 800364a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800364e:	e028      	b.n	80036a2 <HAL_UART_Receive+0xe8>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10d      	bne.n	8003674 <HAL_UART_Receive+0xba>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d104      	bne.n	800366a <HAL_UART_Receive+0xb0>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	22ff      	movs	r2, #255	; 0xff
 8003664:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003668:	e01b      	b.n	80036a2 <HAL_UART_Receive+0xe8>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	227f      	movs	r2, #127	; 0x7f
 800366e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003672:	e016      	b.n	80036a2 <HAL_UART_Receive+0xe8>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800367c:	d10d      	bne.n	800369a <HAL_UART_Receive+0xe0>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d104      	bne.n	8003690 <HAL_UART_Receive+0xd6>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	227f      	movs	r2, #127	; 0x7f
 800368a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800368e:	e008      	b.n	80036a2 <HAL_UART_Receive+0xe8>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	223f      	movs	r2, #63	; 0x3f
 8003694:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003698:	e003      	b.n	80036a2 <HAL_UART_Receive+0xe8>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80036a8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036b2:	d108      	bne.n	80036c6 <HAL_UART_Receive+0x10c>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d104      	bne.n	80036c6 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 80036bc:	2300      	movs	r3, #0
 80036be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	61bb      	str	r3, [r7, #24]
 80036c4:	e003      	b.n	80036ce <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036ca:	2300      	movs	r3, #0
 80036cc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80036d6:	e032      	b.n	800373e <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	2200      	movs	r2, #0
 80036e0:	2120      	movs	r1, #32
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f000 ff30 	bl	8004548 <UART_WaitOnFlagUntilTimeout>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e032      	b.n	8003758 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10c      	bne.n	8003712 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	b29a      	uxth	r2, r3
 8003700:	8a7b      	ldrh	r3, [r7, #18]
 8003702:	4013      	ands	r3, r2
 8003704:	b29a      	uxth	r2, r3
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	3302      	adds	r3, #2
 800370e:	61bb      	str	r3, [r7, #24]
 8003710:	e00c      	b.n	800372c <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	b2da      	uxtb	r2, r3
 800371a:	8a7b      	ldrh	r3, [r7, #18]
 800371c:	b2db      	uxtb	r3, r3
 800371e:	4013      	ands	r3, r2
 8003720:	b2da      	uxtb	r2, r3
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	3301      	adds	r3, #1
 800372a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003732:	b29b      	uxth	r3, r3
 8003734:	3b01      	subs	r3, #1
 8003736:	b29a      	uxth	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003744:	b29b      	uxth	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1c6      	bne.n	80036d8 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2220      	movs	r2, #32
 800374e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8003752:	2300      	movs	r3, #0
 8003754:	e000      	b.n	8003758 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8003756:	2302      	movs	r3, #2
  }
}
 8003758:	4618      	mov	r0, r3
 800375a:	3720      	adds	r7, #32
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b08a      	sub	sp, #40	; 0x28
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	4613      	mov	r3, r2
 800376c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003774:	2b20      	cmp	r3, #32
 8003776:	d142      	bne.n	80037fe <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d002      	beq.n	8003784 <HAL_UART_Receive_IT+0x24>
 800377e:	88fb      	ldrh	r3, [r7, #6]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e03b      	b.n	8003800 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800378e:	2b01      	cmp	r3, #1
 8003790:	d101      	bne.n	8003796 <HAL_UART_Receive_IT+0x36>
 8003792:	2302      	movs	r3, #2
 8003794:	e034      	b.n	8003800 <HAL_UART_Receive_IT+0xa0>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a17      	ldr	r2, [pc, #92]	; (8003808 <HAL_UART_Receive_IT+0xa8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d01f      	beq.n	80037ee <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d018      	beq.n	80037ee <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	e853 3f00 	ldrex	r3, [r3]
 80037c8:	613b      	str	r3, [r7, #16]
   return(result);
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	461a      	mov	r2, r3
 80037d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037da:	623b      	str	r3, [r7, #32]
 80037dc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037de:	69f9      	ldr	r1, [r7, #28]
 80037e0:	6a3a      	ldr	r2, [r7, #32]
 80037e2:	e841 2300 	strex	r3, r2, [r1]
 80037e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1e6      	bne.n	80037bc <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80037ee:	88fb      	ldrh	r3, [r7, #6]
 80037f0:	461a      	mov	r2, r3
 80037f2:	68b9      	ldr	r1, [r7, #8]
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f000 ff6f 	bl	80046d8 <UART_Start_Receive_IT>
 80037fa:	4603      	mov	r3, r0
 80037fc:	e000      	b.n	8003800 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80037fe:	2302      	movs	r3, #2
  }
}
 8003800:	4618      	mov	r0, r3
 8003802:	3728      	adds	r7, #40	; 0x28
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40008000 	.word	0x40008000

0800380c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b0ba      	sub	sp, #232	; 0xe8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003832:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003836:	f640 030f 	movw	r3, #2063	; 0x80f
 800383a:	4013      	ands	r3, r2
 800383c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003840:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003844:	2b00      	cmp	r3, #0
 8003846:	d11b      	bne.n	8003880 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800384c:	f003 0320 	and.w	r3, r3, #32
 8003850:	2b00      	cmp	r3, #0
 8003852:	d015      	beq.n	8003880 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003858:	f003 0320 	and.w	r3, r3, #32
 800385c:	2b00      	cmp	r3, #0
 800385e:	d105      	bne.n	800386c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003860:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d009      	beq.n	8003880 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003870:	2b00      	cmp	r3, #0
 8003872:	f000 82d6 	beq.w	8003e22 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	4798      	blx	r3
      }
      return;
 800387e:	e2d0      	b.n	8003e22 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003880:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 811f 	beq.w	8003ac8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800388a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800388e:	4b8b      	ldr	r3, [pc, #556]	; (8003abc <HAL_UART_IRQHandler+0x2b0>)
 8003890:	4013      	ands	r3, r2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d106      	bne.n	80038a4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003896:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800389a:	4b89      	ldr	r3, [pc, #548]	; (8003ac0 <HAL_UART_IRQHandler+0x2b4>)
 800389c:	4013      	ands	r3, r2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f000 8112 	beq.w	8003ac8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80038a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d011      	beq.n	80038d4 <HAL_UART_IRQHandler+0xc8>
 80038b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00b      	beq.n	80038d4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2201      	movs	r2, #1
 80038c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038ca:	f043 0201 	orr.w	r2, r3, #1
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d011      	beq.n	8003904 <HAL_UART_IRQHandler+0xf8>
 80038e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00b      	beq.n	8003904 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2202      	movs	r2, #2
 80038f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038fa:	f043 0204 	orr.w	r2, r3, #4
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	d011      	beq.n	8003934 <HAL_UART_IRQHandler+0x128>
 8003910:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00b      	beq.n	8003934 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2204      	movs	r2, #4
 8003922:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800392a:	f043 0202 	orr.w	r2, r3, #2
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003938:	f003 0308 	and.w	r3, r3, #8
 800393c:	2b00      	cmp	r3, #0
 800393e:	d017      	beq.n	8003970 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003944:	f003 0320 	and.w	r3, r3, #32
 8003948:	2b00      	cmp	r3, #0
 800394a:	d105      	bne.n	8003958 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800394c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003950:	4b5a      	ldr	r3, [pc, #360]	; (8003abc <HAL_UART_IRQHandler+0x2b0>)
 8003952:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00b      	beq.n	8003970 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2208      	movs	r2, #8
 800395e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003966:	f043 0208 	orr.w	r2, r3, #8
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003974:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003978:	2b00      	cmp	r3, #0
 800397a:	d012      	beq.n	80039a2 <HAL_UART_IRQHandler+0x196>
 800397c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003980:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00c      	beq.n	80039a2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003990:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003998:	f043 0220 	orr.w	r2, r3, #32
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 823c 	beq.w	8003e26 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80039ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039b2:	f003 0320 	and.w	r3, r3, #32
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d013      	beq.n	80039e2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80039ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039be:	f003 0320 	and.w	r3, r3, #32
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d105      	bne.n	80039d2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80039c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d007      	beq.n	80039e2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f6:	2b40      	cmp	r3, #64	; 0x40
 80039f8:	d005      	beq.n	8003a06 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80039fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d04f      	beq.n	8003aa6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 ff8e 	bl	8004928 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a16:	2b40      	cmp	r3, #64	; 0x40
 8003a18:	d141      	bne.n	8003a9e <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	3308      	adds	r3, #8
 8003a20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a28:	e853 3f00 	ldrex	r3, [r3]
 8003a2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003a30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	3308      	adds	r3, #8
 8003a42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003a46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003a4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003a52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003a56:	e841 2300 	strex	r3, r2, [r1]
 8003a5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003a5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1d9      	bne.n	8003a1a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d013      	beq.n	8003a96 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a72:	4a14      	ldr	r2, [pc, #80]	; (8003ac4 <HAL_UART_IRQHandler+0x2b8>)
 8003a74:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7fd fe14 	bl	80016a8 <HAL_DMA_Abort_IT>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d017      	beq.n	8003ab6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8003a90:	4610      	mov	r0, r2
 8003a92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a94:	e00f      	b.n	8003ab6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f9e2 	bl	8003e60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a9c:	e00b      	b.n	8003ab6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f9de 	bl	8003e60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa4:	e007      	b.n	8003ab6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f9da 	bl	8003e60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8003ab4:	e1b7      	b.n	8003e26 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab6:	bf00      	nop
    return;
 8003ab8:	e1b5      	b.n	8003e26 <HAL_UART_IRQHandler+0x61a>
 8003aba:	bf00      	nop
 8003abc:	10000001 	.word	0x10000001
 8003ac0:	04000120 	.word	0x04000120
 8003ac4:	080049f3 	.word	0x080049f3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	f040 814a 	bne.w	8003d66 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ad6:	f003 0310 	and.w	r3, r3, #16
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f000 8143 	beq.w	8003d66 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ae4:	f003 0310 	and.w	r3, r3, #16
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 813c 	beq.w	8003d66 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2210      	movs	r2, #16
 8003af4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b00:	2b40      	cmp	r3, #64	; 0x40
 8003b02:	f040 80b5 	bne.w	8003c70 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8003b12:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f000 8187 	beq.w	8003e2a <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003b22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b26:	429a      	cmp	r2, r3
 8003b28:	f080 817f 	bcs.w	8003e2a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b32:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0320 	and.w	r3, r3, #32
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f040 8086 	bne.w	8003c54 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b54:	e853 3f00 	ldrex	r3, [r3]
 8003b58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003b5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003b72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003b76:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003b7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003b82:	e841 2300 	strex	r3, r2, [r1]
 8003b86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003b8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1da      	bne.n	8003b48 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	3308      	adds	r3, #8
 8003b98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b9c:	e853 3f00 	ldrex	r3, [r3]
 8003ba0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003ba2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ba4:	f023 0301 	bic.w	r3, r3, #1
 8003ba8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	3308      	adds	r3, #8
 8003bb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003bb6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003bba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bbc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003bbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003bc2:	e841 2300 	strex	r3, r2, [r1]
 8003bc6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003bc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1e1      	bne.n	8003b92 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	3308      	adds	r3, #8
 8003bd4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bd8:	e853 3f00 	ldrex	r3, [r3]
 8003bdc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003bde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003be0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003be4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	3308      	adds	r3, #8
 8003bee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003bf2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003bf4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003bf8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003bfa:	e841 2300 	strex	r3, r2, [r1]
 8003bfe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003c00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1e3      	bne.n	8003bce <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c1c:	e853 3f00 	ldrex	r3, [r3]
 8003c20:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c24:	f023 0310 	bic.w	r3, r3, #16
 8003c28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	461a      	mov	r2, r3
 8003c32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c36:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c38:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c3e:	e841 2300 	strex	r3, r2, [r1]
 8003c42:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1e4      	bne.n	8003c14 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fd fccc 	bl	80015ec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	4619      	mov	r1, r3
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 f902 	bl	8003e72 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003c6e:	e0dc      	b.n	8003e2a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 80ce 	beq.w	8003e2e <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8003c92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 80c9 	beq.w	8003e2e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca4:	e853 3f00 	ldrex	r3, [r3]
 8003ca8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	461a      	mov	r2, r3
 8003cba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003cbe:	647b      	str	r3, [r7, #68]	; 0x44
 8003cc0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003cc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cc6:	e841 2300 	strex	r3, r2, [r1]
 8003cca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1e4      	bne.n	8003c9c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	3308      	adds	r3, #8
 8003cd8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	e853 3f00 	ldrex	r3, [r3]
 8003ce0:	623b      	str	r3, [r7, #32]
   return(result);
 8003ce2:	6a3b      	ldr	r3, [r7, #32]
 8003ce4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ce8:	f023 0301 	bic.w	r3, r3, #1
 8003cec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	3308      	adds	r3, #8
 8003cf6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003cfa:	633a      	str	r2, [r7, #48]	; 0x30
 8003cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d02:	e841 2300 	strex	r3, r2, [r1]
 8003d06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1e1      	bne.n	8003cd2 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2220      	movs	r2, #32
 8003d12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	e853 3f00 	ldrex	r3, [r3]
 8003d2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f023 0310 	bic.w	r3, r3, #16
 8003d36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d44:	61fb      	str	r3, [r7, #28]
 8003d46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d48:	69b9      	ldr	r1, [r7, #24]
 8003d4a:	69fa      	ldr	r2, [r7, #28]
 8003d4c:	e841 2300 	strex	r3, r2, [r1]
 8003d50:	617b      	str	r3, [r7, #20]
   return(result);
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1e4      	bne.n	8003d22 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f887 	bl	8003e72 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003d64:	e063      	b.n	8003e2e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00e      	beq.n	8003d90 <HAL_UART_IRQHandler+0x584>
 8003d72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d008      	beq.n	8003d90 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003d86:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f001 facf 	bl	800532c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d8e:	e051      	b.n	8003e34 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d014      	beq.n	8003dc6 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d105      	bne.n	8003db4 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003da8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d008      	beq.n	8003dc6 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d03a      	beq.n	8003e32 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	4798      	blx	r3
    }
    return;
 8003dc4:	e035      	b.n	8003e32 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d009      	beq.n	8003de6 <HAL_UART_IRQHandler+0x5da>
 8003dd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 fe1d 	bl	8004a1e <UART_EndTransmit_IT>
    return;
 8003de4:	e026      	b.n	8003e34 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d009      	beq.n	8003e06 <HAL_UART_IRQHandler+0x5fa>
 8003df2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003df6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f001 faa6 	bl	8005350 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e04:	e016      	b.n	8003e34 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d010      	beq.n	8003e34 <HAL_UART_IRQHandler+0x628>
 8003e12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	da0c      	bge.n	8003e34 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f001 fa8f 	bl	800533e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e20:	e008      	b.n	8003e34 <HAL_UART_IRQHandler+0x628>
      return;
 8003e22:	bf00      	nop
 8003e24:	e006      	b.n	8003e34 <HAL_UART_IRQHandler+0x628>
    return;
 8003e26:	bf00      	nop
 8003e28:	e004      	b.n	8003e34 <HAL_UART_IRQHandler+0x628>
      return;
 8003e2a:	bf00      	nop
 8003e2c:	e002      	b.n	8003e34 <HAL_UART_IRQHandler+0x628>
      return;
 8003e2e:	bf00      	nop
 8003e30:	e000      	b.n	8003e34 <HAL_UART_IRQHandler+0x628>
    return;
 8003e32:	bf00      	nop
  }
}
 8003e34:	37e8      	adds	r7, #232	; 0xe8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop

08003e3c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bc80      	pop	{r7}
 8003e4c:	4770      	bx	lr

08003e4e <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003e56:	bf00      	nop
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bc80      	pop	{r7}
 8003e5e:	4770      	bx	lr

08003e60 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bc80      	pop	{r7}
 8003e70:	4770      	bx	lr

08003e72 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e72:	b480      	push	{r7}
 8003e74:	b083      	sub	sp, #12
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e7e:	bf00      	nop
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bc80      	pop	{r7}
 8003e86:	4770      	bx	lr

08003e88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e8c:	b08c      	sub	sp, #48	; 0x30
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e92:	2300      	movs	r3, #0
 8003e94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	689a      	ldr	r2, [r3, #8]
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	69db      	ldr	r3, [r3, #28]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	4b94      	ldr	r3, [pc, #592]	; (8004108 <UART_SetConfig+0x280>)
 8003eb8:	4013      	ands	r3, r2
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	6812      	ldr	r2, [r2, #0]
 8003ebe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ec0:	430b      	orrs	r3, r1
 8003ec2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	68da      	ldr	r2, [r3, #12]
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a89      	ldr	r2, [pc, #548]	; (800410c <UART_SetConfig+0x284>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d004      	beq.n	8003ef4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003efe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	6812      	ldr	r2, [r2, #0]
 8003f06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f08:	430b      	orrs	r3, r1
 8003f0a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f12:	f023 010f 	bic.w	r1, r3, #15
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a7a      	ldr	r2, [pc, #488]	; (8004110 <UART_SetConfig+0x288>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d127      	bne.n	8003f7c <UART_SetConfig+0xf4>
 8003f2c:	2003      	movs	r0, #3
 8003f2e:	f7ff fa3d 	bl	80033ac <LL_RCC_GetUSARTClockSource>
 8003f32:	4603      	mov	r3, r0
 8003f34:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8003f38:	2b03      	cmp	r3, #3
 8003f3a:	d81b      	bhi.n	8003f74 <UART_SetConfig+0xec>
 8003f3c:	a201      	add	r2, pc, #4	; (adr r2, 8003f44 <UART_SetConfig+0xbc>)
 8003f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f42:	bf00      	nop
 8003f44:	08003f55 	.word	0x08003f55
 8003f48:	08003f65 	.word	0x08003f65
 8003f4c:	08003f5d 	.word	0x08003f5d
 8003f50:	08003f6d 	.word	0x08003f6d
 8003f54:	2301      	movs	r3, #1
 8003f56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f5a:	e080      	b.n	800405e <UART_SetConfig+0x1d6>
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f62:	e07c      	b.n	800405e <UART_SetConfig+0x1d6>
 8003f64:	2304      	movs	r3, #4
 8003f66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f6a:	e078      	b.n	800405e <UART_SetConfig+0x1d6>
 8003f6c:	2308      	movs	r3, #8
 8003f6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f72:	e074      	b.n	800405e <UART_SetConfig+0x1d6>
 8003f74:	2310      	movs	r3, #16
 8003f76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f7a:	e070      	b.n	800405e <UART_SetConfig+0x1d6>
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a64      	ldr	r2, [pc, #400]	; (8004114 <UART_SetConfig+0x28c>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d138      	bne.n	8003ff8 <UART_SetConfig+0x170>
 8003f86:	200c      	movs	r0, #12
 8003f88:	f7ff fa10 	bl	80033ac <LL_RCC_GetUSARTClockSource>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8003f92:	2b0c      	cmp	r3, #12
 8003f94:	d82c      	bhi.n	8003ff0 <UART_SetConfig+0x168>
 8003f96:	a201      	add	r2, pc, #4	; (adr r2, 8003f9c <UART_SetConfig+0x114>)
 8003f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f9c:	08003fd1 	.word	0x08003fd1
 8003fa0:	08003ff1 	.word	0x08003ff1
 8003fa4:	08003ff1 	.word	0x08003ff1
 8003fa8:	08003ff1 	.word	0x08003ff1
 8003fac:	08003fe1 	.word	0x08003fe1
 8003fb0:	08003ff1 	.word	0x08003ff1
 8003fb4:	08003ff1 	.word	0x08003ff1
 8003fb8:	08003ff1 	.word	0x08003ff1
 8003fbc:	08003fd9 	.word	0x08003fd9
 8003fc0:	08003ff1 	.word	0x08003ff1
 8003fc4:	08003ff1 	.word	0x08003ff1
 8003fc8:	08003ff1 	.word	0x08003ff1
 8003fcc:	08003fe9 	.word	0x08003fe9
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fd6:	e042      	b.n	800405e <UART_SetConfig+0x1d6>
 8003fd8:	2302      	movs	r3, #2
 8003fda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fde:	e03e      	b.n	800405e <UART_SetConfig+0x1d6>
 8003fe0:	2304      	movs	r3, #4
 8003fe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fe6:	e03a      	b.n	800405e <UART_SetConfig+0x1d6>
 8003fe8:	2308      	movs	r3, #8
 8003fea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fee:	e036      	b.n	800405e <UART_SetConfig+0x1d6>
 8003ff0:	2310      	movs	r3, #16
 8003ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ff6:	e032      	b.n	800405e <UART_SetConfig+0x1d6>
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a43      	ldr	r2, [pc, #268]	; (800410c <UART_SetConfig+0x284>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d12a      	bne.n	8004058 <UART_SetConfig+0x1d0>
 8004002:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004006:	f7ff f9e3 	bl	80033d0 <LL_RCC_GetLPUARTClockSource>
 800400a:	4603      	mov	r3, r0
 800400c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004010:	d01a      	beq.n	8004048 <UART_SetConfig+0x1c0>
 8004012:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004016:	d81b      	bhi.n	8004050 <UART_SetConfig+0x1c8>
 8004018:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800401c:	d00c      	beq.n	8004038 <UART_SetConfig+0x1b0>
 800401e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004022:	d815      	bhi.n	8004050 <UART_SetConfig+0x1c8>
 8004024:	2b00      	cmp	r3, #0
 8004026:	d003      	beq.n	8004030 <UART_SetConfig+0x1a8>
 8004028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800402c:	d008      	beq.n	8004040 <UART_SetConfig+0x1b8>
 800402e:	e00f      	b.n	8004050 <UART_SetConfig+0x1c8>
 8004030:	2300      	movs	r3, #0
 8004032:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004036:	e012      	b.n	800405e <UART_SetConfig+0x1d6>
 8004038:	2302      	movs	r3, #2
 800403a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800403e:	e00e      	b.n	800405e <UART_SetConfig+0x1d6>
 8004040:	2304      	movs	r3, #4
 8004042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004046:	e00a      	b.n	800405e <UART_SetConfig+0x1d6>
 8004048:	2308      	movs	r3, #8
 800404a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800404e:	e006      	b.n	800405e <UART_SetConfig+0x1d6>
 8004050:	2310      	movs	r3, #16
 8004052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004056:	e002      	b.n	800405e <UART_SetConfig+0x1d6>
 8004058:	2310      	movs	r3, #16
 800405a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a2a      	ldr	r2, [pc, #168]	; (800410c <UART_SetConfig+0x284>)
 8004064:	4293      	cmp	r3, r2
 8004066:	f040 80a4 	bne.w	80041b2 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800406a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800406e:	2b08      	cmp	r3, #8
 8004070:	d823      	bhi.n	80040ba <UART_SetConfig+0x232>
 8004072:	a201      	add	r2, pc, #4	; (adr r2, 8004078 <UART_SetConfig+0x1f0>)
 8004074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004078:	0800409d 	.word	0x0800409d
 800407c:	080040bb 	.word	0x080040bb
 8004080:	080040a5 	.word	0x080040a5
 8004084:	080040bb 	.word	0x080040bb
 8004088:	080040ab 	.word	0x080040ab
 800408c:	080040bb 	.word	0x080040bb
 8004090:	080040bb 	.word	0x080040bb
 8004094:	080040bb 	.word	0x080040bb
 8004098:	080040b3 	.word	0x080040b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800409c:	f7fe fea2 	bl	8002de4 <HAL_RCC_GetPCLK1Freq>
 80040a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80040a2:	e010      	b.n	80040c6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040a4:	4b1c      	ldr	r3, [pc, #112]	; (8004118 <UART_SetConfig+0x290>)
 80040a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80040a8:	e00d      	b.n	80040c6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040aa:	f7fe fde7 	bl	8002c7c <HAL_RCC_GetSysClockFreq>
 80040ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80040b0:	e009      	b.n	80040c6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80040b8:	e005      	b.n	80040c6 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80040ba:	2300      	movs	r3, #0
 80040bc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80040c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80040c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f000 8137 	beq.w	800433c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	4a12      	ldr	r2, [pc, #72]	; (800411c <UART_SetConfig+0x294>)
 80040d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040d8:	461a      	mov	r2, r3
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80040e0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	4613      	mov	r3, r2
 80040e8:	005b      	lsls	r3, r3, #1
 80040ea:	4413      	add	r3, r2
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d305      	bcc.n	80040fe <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d910      	bls.n	8004120 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004104:	e11a      	b.n	800433c <UART_SetConfig+0x4b4>
 8004106:	bf00      	nop
 8004108:	cfff69f3 	.word	0xcfff69f3
 800410c:	40008000 	.word	0x40008000
 8004110:	40013800 	.word	0x40013800
 8004114:	40004400 	.word	0x40004400
 8004118:	00f42400 	.word	0x00f42400
 800411c:	080056ac 	.word	0x080056ac
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	2200      	movs	r2, #0
 8004124:	60bb      	str	r3, [r7, #8]
 8004126:	60fa      	str	r2, [r7, #12]
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	4a8e      	ldr	r2, [pc, #568]	; (8004368 <UART_SetConfig+0x4e0>)
 800412e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004132:	b29b      	uxth	r3, r3
 8004134:	2200      	movs	r2, #0
 8004136:	603b      	str	r3, [r7, #0]
 8004138:	607a      	str	r2, [r7, #4]
 800413a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800413e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004142:	f7fc f819 	bl	8000178 <__aeabi_uldivmod>
 8004146:	4602      	mov	r2, r0
 8004148:	460b      	mov	r3, r1
 800414a:	4610      	mov	r0, r2
 800414c:	4619      	mov	r1, r3
 800414e:	f04f 0200 	mov.w	r2, #0
 8004152:	f04f 0300 	mov.w	r3, #0
 8004156:	020b      	lsls	r3, r1, #8
 8004158:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800415c:	0202      	lsls	r2, r0, #8
 800415e:	6979      	ldr	r1, [r7, #20]
 8004160:	6849      	ldr	r1, [r1, #4]
 8004162:	0849      	lsrs	r1, r1, #1
 8004164:	2000      	movs	r0, #0
 8004166:	460c      	mov	r4, r1
 8004168:	4605      	mov	r5, r0
 800416a:	eb12 0804 	adds.w	r8, r2, r4
 800416e:	eb43 0905 	adc.w	r9, r3, r5
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	469a      	mov	sl, r3
 800417a:	4693      	mov	fp, r2
 800417c:	4652      	mov	r2, sl
 800417e:	465b      	mov	r3, fp
 8004180:	4640      	mov	r0, r8
 8004182:	4649      	mov	r1, r9
 8004184:	f7fb fff8 	bl	8000178 <__aeabi_uldivmod>
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	4613      	mov	r3, r2
 800418e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004190:	6a3b      	ldr	r3, [r7, #32]
 8004192:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004196:	d308      	bcc.n	80041aa <UART_SetConfig+0x322>
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800419e:	d204      	bcs.n	80041aa <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6a3a      	ldr	r2, [r7, #32]
 80041a6:	60da      	str	r2, [r3, #12]
 80041a8:	e0c8      	b.n	800433c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80041b0:	e0c4      	b.n	800433c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ba:	d168      	bne.n	800428e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80041bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80041c0:	2b08      	cmp	r3, #8
 80041c2:	d828      	bhi.n	8004216 <UART_SetConfig+0x38e>
 80041c4:	a201      	add	r2, pc, #4	; (adr r2, 80041cc <UART_SetConfig+0x344>)
 80041c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ca:	bf00      	nop
 80041cc:	080041f1 	.word	0x080041f1
 80041d0:	080041f9 	.word	0x080041f9
 80041d4:	08004201 	.word	0x08004201
 80041d8:	08004217 	.word	0x08004217
 80041dc:	08004207 	.word	0x08004207
 80041e0:	08004217 	.word	0x08004217
 80041e4:	08004217 	.word	0x08004217
 80041e8:	08004217 	.word	0x08004217
 80041ec:	0800420f 	.word	0x0800420f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041f0:	f7fe fdf8 	bl	8002de4 <HAL_RCC_GetPCLK1Freq>
 80041f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80041f6:	e014      	b.n	8004222 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041f8:	f7fe fe06 	bl	8002e08 <HAL_RCC_GetPCLK2Freq>
 80041fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80041fe:	e010      	b.n	8004222 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004200:	4b5a      	ldr	r3, [pc, #360]	; (800436c <UART_SetConfig+0x4e4>)
 8004202:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004204:	e00d      	b.n	8004222 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004206:	f7fe fd39 	bl	8002c7c <HAL_RCC_GetSysClockFreq>
 800420a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800420c:	e009      	b.n	8004222 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800420e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004212:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004214:	e005      	b.n	8004222 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8004216:	2300      	movs	r3, #0
 8004218:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004220:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004224:	2b00      	cmp	r3, #0
 8004226:	f000 8089 	beq.w	800433c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	4a4e      	ldr	r2, [pc, #312]	; (8004368 <UART_SetConfig+0x4e0>)
 8004230:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004234:	461a      	mov	r2, r3
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	fbb3 f3f2 	udiv	r3, r3, r2
 800423c:	005a      	lsls	r2, r3, #1
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	085b      	lsrs	r3, r3, #1
 8004244:	441a      	add	r2, r3
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	fbb2 f3f3 	udiv	r3, r2, r3
 800424e:	b29b      	uxth	r3, r3
 8004250:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004252:	6a3b      	ldr	r3, [r7, #32]
 8004254:	2b0f      	cmp	r3, #15
 8004256:	d916      	bls.n	8004286 <UART_SetConfig+0x3fe>
 8004258:	6a3b      	ldr	r3, [r7, #32]
 800425a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800425e:	d212      	bcs.n	8004286 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004260:	6a3b      	ldr	r3, [r7, #32]
 8004262:	b29b      	uxth	r3, r3
 8004264:	f023 030f 	bic.w	r3, r3, #15
 8004268:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	085b      	lsrs	r3, r3, #1
 800426e:	b29b      	uxth	r3, r3
 8004270:	f003 0307 	and.w	r3, r3, #7
 8004274:	b29a      	uxth	r2, r3
 8004276:	8bfb      	ldrh	r3, [r7, #30]
 8004278:	4313      	orrs	r3, r2
 800427a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	8bfa      	ldrh	r2, [r7, #30]
 8004282:	60da      	str	r2, [r3, #12]
 8004284:	e05a      	b.n	800433c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800428c:	e056      	b.n	800433c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800428e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004292:	2b08      	cmp	r3, #8
 8004294:	d827      	bhi.n	80042e6 <UART_SetConfig+0x45e>
 8004296:	a201      	add	r2, pc, #4	; (adr r2, 800429c <UART_SetConfig+0x414>)
 8004298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800429c:	080042c1 	.word	0x080042c1
 80042a0:	080042c9 	.word	0x080042c9
 80042a4:	080042d1 	.word	0x080042d1
 80042a8:	080042e7 	.word	0x080042e7
 80042ac:	080042d7 	.word	0x080042d7
 80042b0:	080042e7 	.word	0x080042e7
 80042b4:	080042e7 	.word	0x080042e7
 80042b8:	080042e7 	.word	0x080042e7
 80042bc:	080042df 	.word	0x080042df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042c0:	f7fe fd90 	bl	8002de4 <HAL_RCC_GetPCLK1Freq>
 80042c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80042c6:	e014      	b.n	80042f2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042c8:	f7fe fd9e 	bl	8002e08 <HAL_RCC_GetPCLK2Freq>
 80042cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80042ce:	e010      	b.n	80042f2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042d0:	4b26      	ldr	r3, [pc, #152]	; (800436c <UART_SetConfig+0x4e4>)
 80042d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80042d4:	e00d      	b.n	80042f2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042d6:	f7fe fcd1 	bl	8002c7c <HAL_RCC_GetSysClockFreq>
 80042da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80042dc:	e009      	b.n	80042f2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80042e4:	e005      	b.n	80042f2 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80042e6:	2300      	movs	r3, #0
 80042e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80042f0:	bf00      	nop
    }

    if (pclk != 0U)
 80042f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d021      	beq.n	800433c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fc:	4a1a      	ldr	r2, [pc, #104]	; (8004368 <UART_SetConfig+0x4e0>)
 80042fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004302:	461a      	mov	r2, r3
 8004304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004306:	fbb3 f2f2 	udiv	r2, r3, r2
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	085b      	lsrs	r3, r3, #1
 8004310:	441a      	add	r2, r3
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	fbb2 f3f3 	udiv	r3, r2, r3
 800431a:	b29b      	uxth	r3, r3
 800431c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800431e:	6a3b      	ldr	r3, [r7, #32]
 8004320:	2b0f      	cmp	r3, #15
 8004322:	d908      	bls.n	8004336 <UART_SetConfig+0x4ae>
 8004324:	6a3b      	ldr	r3, [r7, #32]
 8004326:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800432a:	d204      	bcs.n	8004336 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6a3a      	ldr	r2, [r7, #32]
 8004332:	60da      	str	r2, [r3, #12]
 8004334:	e002      	b.n	800433c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	2201      	movs	r2, #1
 8004340:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	2201      	movs	r2, #1
 8004348:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	2200      	movs	r2, #0
 8004350:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	2200      	movs	r2, #0
 8004356:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004358:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800435c:	4618      	mov	r0, r3
 800435e:	3730      	adds	r7, #48	; 0x30
 8004360:	46bd      	mov	sp, r7
 8004362:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004366:	bf00      	nop
 8004368:	080056ac 	.word	0x080056ac
 800436c:	00f42400 	.word	0x00f42400

08004370 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00a      	beq.n	800439a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00a      	beq.n	80043bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	430a      	orrs	r2, r1
 80043ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00a      	beq.n	80043de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	430a      	orrs	r2, r1
 80043dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e2:	f003 0308 	and.w	r3, r3, #8
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00a      	beq.n	8004400 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	430a      	orrs	r2, r1
 80043fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004404:	f003 0310 	and.w	r3, r3, #16
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00a      	beq.n	8004422 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004426:	f003 0320 	and.w	r3, r3, #32
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00a      	beq.n	8004444 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	430a      	orrs	r2, r1
 8004442:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444c:	2b00      	cmp	r3, #0
 800444e:	d01a      	beq.n	8004486 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	430a      	orrs	r2, r1
 8004464:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800446e:	d10a      	bne.n	8004486 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00a      	beq.n	80044a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	605a      	str	r2, [r3, #4]
  }
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bc80      	pop	{r7}
 80044b0:	4770      	bx	lr

080044b2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b086      	sub	sp, #24
 80044b6:	af02      	add	r7, sp, #8
 80044b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044c2:	f7fc fed5 	bl	8001270 <HAL_GetTick>
 80044c6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0308 	and.w	r3, r3, #8
 80044d2:	2b08      	cmp	r3, #8
 80044d4:	d10e      	bne.n	80044f4 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044da:	9300      	str	r3, [sp, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 f82f 	bl	8004548 <UART_WaitOnFlagUntilTimeout>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e025      	b.n	8004540 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0304 	and.w	r3, r3, #4
 80044fe:	2b04      	cmp	r3, #4
 8004500:	d10e      	bne.n	8004520 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004502:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004506:	9300      	str	r3, [sp, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 f819 	bl	8004548 <UART_WaitOnFlagUntilTimeout>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e00f      	b.n	8004540 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2220      	movs	r2, #32
 8004524:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2220      	movs	r2, #32
 800452c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b09c      	sub	sp, #112	; 0x70
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	603b      	str	r3, [r7, #0]
 8004554:	4613      	mov	r3, r2
 8004556:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004558:	e0a9      	b.n	80046ae <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800455a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800455c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004560:	f000 80a5 	beq.w	80046ae <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004564:	f7fc fe84 	bl	8001270 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004570:	429a      	cmp	r2, r3
 8004572:	d302      	bcc.n	800457a <UART_WaitOnFlagUntilTimeout+0x32>
 8004574:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004576:	2b00      	cmp	r3, #0
 8004578:	d140      	bne.n	80045fc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004580:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004582:	e853 3f00 	ldrex	r3, [r3]
 8004586:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800458a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800458e:	667b      	str	r3, [r7, #100]	; 0x64
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	461a      	mov	r2, r3
 8004596:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004598:	65fb      	str	r3, [r7, #92]	; 0x5c
 800459a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800459e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80045a0:	e841 2300 	strex	r3, r2, [r1]
 80045a4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80045a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1e6      	bne.n	800457a <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3308      	adds	r3, #8
 80045b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045b6:	e853 3f00 	ldrex	r3, [r3]
 80045ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045be:	f023 0301 	bic.w	r3, r3, #1
 80045c2:	663b      	str	r3, [r7, #96]	; 0x60
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	3308      	adds	r3, #8
 80045ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80045cc:	64ba      	str	r2, [r7, #72]	; 0x48
 80045ce:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80045d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045d4:	e841 2300 	strex	r3, r2, [r1]
 80045d8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80045da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1e5      	bne.n	80045ac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2220      	movs	r2, #32
 80045e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2220      	movs	r2, #32
 80045ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e069      	b.n	80046d0 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0304 	and.w	r3, r3, #4
 8004606:	2b00      	cmp	r3, #0
 8004608:	d051      	beq.n	80046ae <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004614:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004618:	d149      	bne.n	80046ae <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004622:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462c:	e853 3f00 	ldrex	r3, [r3]
 8004630:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004634:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004638:	66fb      	str	r3, [r7, #108]	; 0x6c
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	461a      	mov	r2, r3
 8004640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004642:	637b      	str	r3, [r7, #52]	; 0x34
 8004644:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004646:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004648:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800464a:	e841 2300 	strex	r3, r2, [r1]
 800464e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1e6      	bne.n	8004624 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	3308      	adds	r3, #8
 800465c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	e853 3f00 	ldrex	r3, [r3]
 8004664:	613b      	str	r3, [r7, #16]
   return(result);
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	f023 0301 	bic.w	r3, r3, #1
 800466c:	66bb      	str	r3, [r7, #104]	; 0x68
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	3308      	adds	r3, #8
 8004674:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004676:	623a      	str	r2, [r7, #32]
 8004678:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467a:	69f9      	ldr	r1, [r7, #28]
 800467c:	6a3a      	ldr	r2, [r7, #32]
 800467e:	e841 2300 	strex	r3, r2, [r1]
 8004682:	61bb      	str	r3, [r7, #24]
   return(result);
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1e5      	bne.n	8004656 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2220      	movs	r2, #32
 800468e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2220      	movs	r2, #32
 8004696:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2220      	movs	r2, #32
 800469e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e010      	b.n	80046d0 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	69da      	ldr	r2, [r3, #28]
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	4013      	ands	r3, r2
 80046b8:	68ba      	ldr	r2, [r7, #8]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	bf0c      	ite	eq
 80046be:	2301      	moveq	r3, #1
 80046c0:	2300      	movne	r3, #0
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	461a      	mov	r2, r3
 80046c6:	79fb      	ldrb	r3, [r7, #7]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	f43f af46 	beq.w	800455a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3770      	adds	r7, #112	; 0x70
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046d8:	b480      	push	{r7}
 80046da:	b0a3      	sub	sp, #140	; 0x8c
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	4613      	mov	r3, r2
 80046e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	68ba      	ldr	r2, [r7, #8]
 80046ea:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	88fa      	ldrh	r2, [r7, #6]
 80046f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	88fa      	ldrh	r2, [r7, #6]
 80046f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800470a:	d10e      	bne.n	800472a <UART_Start_Receive_IT+0x52>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d105      	bne.n	8004720 <UART_Start_Receive_IT+0x48>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f240 12ff 	movw	r2, #511	; 0x1ff
 800471a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800471e:	e02d      	b.n	800477c <UART_Start_Receive_IT+0xa4>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	22ff      	movs	r2, #255	; 0xff
 8004724:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004728:	e028      	b.n	800477c <UART_Start_Receive_IT+0xa4>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10d      	bne.n	800474e <UART_Start_Receive_IT+0x76>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d104      	bne.n	8004744 <UART_Start_Receive_IT+0x6c>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	22ff      	movs	r2, #255	; 0xff
 800473e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004742:	e01b      	b.n	800477c <UART_Start_Receive_IT+0xa4>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	227f      	movs	r2, #127	; 0x7f
 8004748:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800474c:	e016      	b.n	800477c <UART_Start_Receive_IT+0xa4>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004756:	d10d      	bne.n	8004774 <UART_Start_Receive_IT+0x9c>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d104      	bne.n	800476a <UART_Start_Receive_IT+0x92>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	227f      	movs	r2, #127	; 0x7f
 8004764:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004768:	e008      	b.n	800477c <UART_Start_Receive_IT+0xa4>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	223f      	movs	r2, #63	; 0x3f
 800476e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004772:	e003      	b.n	800477c <UART_Start_Receive_IT+0xa4>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2222      	movs	r2, #34	; 0x22
 8004788:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	3308      	adds	r3, #8
 8004792:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004794:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004796:	e853 3f00 	ldrex	r3, [r3]
 800479a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800479c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800479e:	f043 0301 	orr.w	r3, r3, #1
 80047a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	3308      	adds	r3, #8
 80047ac:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80047b0:	673a      	str	r2, [r7, #112]	; 0x70
 80047b2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80047b6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80047b8:	e841 2300 	strex	r3, r2, [r1]
 80047bc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80047be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1e3      	bne.n	800478c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047cc:	d153      	bne.n	8004876 <UART_Start_Receive_IT+0x19e>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80047d4:	88fa      	ldrh	r2, [r7, #6]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d34d      	bcc.n	8004876 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e2:	d107      	bne.n	80047f4 <UART_Start_Receive_IT+0x11c>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d103      	bne.n	80047f4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4a4a      	ldr	r2, [pc, #296]	; (8004918 <UART_Start_Receive_IT+0x240>)
 80047f0:	671a      	str	r2, [r3, #112]	; 0x70
 80047f2:	e002      	b.n	80047fa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	4a49      	ldr	r2, [pc, #292]	; (800491c <UART_Start_Receive_IT+0x244>)
 80047f8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d01a      	beq.n	8004840 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004812:	e853 3f00 	ldrex	r3, [r3]
 8004816:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800481a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800481e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	461a      	mov	r2, r3
 8004828:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800482c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800482e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004830:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004832:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004834:	e841 2300 	strex	r3, r2, [r1]
 8004838:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800483a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1e4      	bne.n	800480a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3308      	adds	r3, #8
 8004846:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800484a:	e853 3f00 	ldrex	r3, [r3]
 800484e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004852:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004856:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	3308      	adds	r3, #8
 800485e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004860:	64ba      	str	r2, [r7, #72]	; 0x48
 8004862:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004864:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004866:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004868:	e841 2300 	strex	r3, r2, [r1]
 800486c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800486e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1e5      	bne.n	8004840 <UART_Start_Receive_IT+0x168>
 8004874:	e04a      	b.n	800490c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800487e:	d107      	bne.n	8004890 <UART_Start_Receive_IT+0x1b8>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d103      	bne.n	8004890 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	4a25      	ldr	r2, [pc, #148]	; (8004920 <UART_Start_Receive_IT+0x248>)
 800488c:	671a      	str	r2, [r3, #112]	; 0x70
 800488e:	e002      	b.n	8004896 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4a24      	ldr	r2, [pc, #144]	; (8004924 <UART_Start_Receive_IT+0x24c>)
 8004894:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d019      	beq.n	80048da <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ae:	e853 3f00 	ldrex	r3, [r3]
 80048b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80048ba:	677b      	str	r3, [r7, #116]	; 0x74
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	461a      	mov	r2, r3
 80048c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048c4:	637b      	str	r3, [r7, #52]	; 0x34
 80048c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048cc:	e841 2300 	strex	r3, r2, [r1]
 80048d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1e6      	bne.n	80048a6 <UART_Start_Receive_IT+0x1ce>
 80048d8:	e018      	b.n	800490c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	e853 3f00 	ldrex	r3, [r3]
 80048e6:	613b      	str	r3, [r7, #16]
   return(result);
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	f043 0320 	orr.w	r3, r3, #32
 80048ee:	67bb      	str	r3, [r7, #120]	; 0x78
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	461a      	mov	r2, r3
 80048f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048f8:	623b      	str	r3, [r7, #32]
 80048fa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fc:	69f9      	ldr	r1, [r7, #28]
 80048fe:	6a3a      	ldr	r2, [r7, #32]
 8004900:	e841 2300 	strex	r3, r2, [r1]
 8004904:	61bb      	str	r3, [r7, #24]
   return(result);
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1e6      	bne.n	80048da <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	378c      	adds	r7, #140	; 0x8c
 8004912:	46bd      	mov	sp, r7
 8004914:	bc80      	pop	{r7}
 8004916:	4770      	bx	lr
 8004918:	0800502d 	.word	0x0800502d
 800491c:	08004d35 	.word	0x08004d35
 8004920:	08004bd5 	.word	0x08004bd5
 8004924:	08004a75 	.word	0x08004a75

08004928 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004928:	b480      	push	{r7}
 800492a:	b095      	sub	sp, #84	; 0x54
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004938:	e853 3f00 	ldrex	r3, [r3]
 800493c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800493e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004940:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004944:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	461a      	mov	r2, r3
 800494c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800494e:	643b      	str	r3, [r7, #64]	; 0x40
 8004950:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004952:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004954:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004956:	e841 2300 	strex	r3, r2, [r1]
 800495a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800495c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1e6      	bne.n	8004930 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	3308      	adds	r3, #8
 8004968:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496a:	6a3b      	ldr	r3, [r7, #32]
 800496c:	e853 3f00 	ldrex	r3, [r3]
 8004970:	61fb      	str	r3, [r7, #28]
   return(result);
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004978:	f023 0301 	bic.w	r3, r3, #1
 800497c:	64bb      	str	r3, [r7, #72]	; 0x48
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	3308      	adds	r3, #8
 8004984:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004986:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004988:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800498c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800498e:	e841 2300 	strex	r3, r2, [r1]
 8004992:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1e3      	bne.n	8004962 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d118      	bne.n	80049d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	e853 3f00 	ldrex	r3, [r3]
 80049ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	f023 0310 	bic.w	r3, r3, #16
 80049b6:	647b      	str	r3, [r7, #68]	; 0x44
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	461a      	mov	r2, r3
 80049be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049c0:	61bb      	str	r3, [r7, #24]
 80049c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c4:	6979      	ldr	r1, [r7, #20]
 80049c6:	69ba      	ldr	r2, [r7, #24]
 80049c8:	e841 2300 	strex	r3, r2, [r1]
 80049cc:	613b      	str	r3, [r7, #16]
   return(result);
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1e6      	bne.n	80049a2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2220      	movs	r2, #32
 80049d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	671a      	str	r2, [r3, #112]	; 0x70
}
 80049e8:	bf00      	nop
 80049ea:	3754      	adds	r7, #84	; 0x54
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bc80      	pop	{r7}
 80049f0:	4770      	bx	lr

080049f2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b084      	sub	sp, #16
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f7ff fa25 	bl	8003e60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a16:	bf00      	nop
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b088      	sub	sp, #32
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	e853 3f00 	ldrex	r3, [r3]
 8004a32:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a3a:	61fb      	str	r3, [r7, #28]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	461a      	mov	r2, r3
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	61bb      	str	r3, [r7, #24]
 8004a46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a48:	6979      	ldr	r1, [r7, #20]
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	e841 2300 	strex	r3, r2, [r1]
 8004a50:	613b      	str	r3, [r7, #16]
   return(result);
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1e6      	bne.n	8004a26 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f7ff f9e8 	bl	8003e3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a6c:	bf00      	nop
 8004a6e:	3720      	adds	r7, #32
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b096      	sub	sp, #88	; 0x58
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004a82:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8c:	2b22      	cmp	r3, #34	; 0x22
 8004a8e:	f040 8095 	bne.w	8004bbc <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a98:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004a9c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004aa0:	b2d9      	uxtb	r1, r3
 8004aa2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004aa6:	b2da      	uxtb	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aac:	400a      	ands	r2, r1
 8004aae:	b2d2      	uxtb	r2, r2
 8004ab0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab6:	1c5a      	adds	r2, r3, #1
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	b29a      	uxth	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d178      	bne.n	8004bcc <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae2:	e853 3f00 	ldrex	r3, [r3]
 8004ae6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004aee:	653b      	str	r3, [r7, #80]	; 0x50
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	461a      	mov	r2, r3
 8004af6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004af8:	647b      	str	r3, [r7, #68]	; 0x44
 8004afa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004afe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b00:	e841 2300 	strex	r3, r2, [r1]
 8004b04:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1e6      	bne.n	8004ada <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	3308      	adds	r3, #8
 8004b12:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	e853 3f00 	ldrex	r3, [r3]
 8004b1a:	623b      	str	r3, [r7, #32]
   return(result);
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
 8004b1e:	f023 0301 	bic.w	r3, r3, #1
 8004b22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	3308      	adds	r3, #8
 8004b2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b2c:	633a      	str	r2, [r7, #48]	; 0x30
 8004b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b34:	e841 2300 	strex	r3, r2, [r1]
 8004b38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1e5      	bne.n	8004b0c <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2220      	movs	r2, #32
 8004b44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d12e      	bne.n	8004bb4 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	e853 3f00 	ldrex	r3, [r3]
 8004b68:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f023 0310 	bic.w	r3, r3, #16
 8004b70:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	461a      	mov	r2, r3
 8004b78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b7a:	61fb      	str	r3, [r7, #28]
 8004b7c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7e:	69b9      	ldr	r1, [r7, #24]
 8004b80:	69fa      	ldr	r2, [r7, #28]
 8004b82:	e841 2300 	strex	r3, r2, [r1]
 8004b86:	617b      	str	r3, [r7, #20]
   return(result);
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1e6      	bne.n	8004b5c <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	69db      	ldr	r3, [r3, #28]
 8004b94:	f003 0310 	and.w	r3, r3, #16
 8004b98:	2b10      	cmp	r3, #16
 8004b9a:	d103      	bne.n	8004ba4 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2210      	movs	r2, #16
 8004ba2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004baa:	4619      	mov	r1, r3
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f7ff f960 	bl	8003e72 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004bb2:	e00b      	b.n	8004bcc <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f7ff f94a 	bl	8003e4e <HAL_UART_RxCpltCallback>
}
 8004bba:	e007      	b.n	8004bcc <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	699a      	ldr	r2, [r3, #24]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 0208 	orr.w	r2, r2, #8
 8004bca:	619a      	str	r2, [r3, #24]
}
 8004bcc:	bf00      	nop
 8004bce:	3758      	adds	r7, #88	; 0x58
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b096      	sub	sp, #88	; 0x58
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004be2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bec:	2b22      	cmp	r3, #34	; 0x22
 8004bee:	f040 8095 	bne.w	8004d1c <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c00:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004c02:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004c06:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c10:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c16:	1c9a      	adds	r2, r3, #2
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	3b01      	subs	r3, #1
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d178      	bne.n	8004d2c <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c42:	e853 3f00 	ldrex	r3, [r3]
 8004c46:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	461a      	mov	r2, r3
 8004c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c58:	643b      	str	r3, [r7, #64]	; 0x40
 8004c5a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c60:	e841 2300 	strex	r3, r2, [r1]
 8004c64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1e6      	bne.n	8004c3a <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3308      	adds	r3, #8
 8004c72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c74:	6a3b      	ldr	r3, [r7, #32]
 8004c76:	e853 3f00 	ldrex	r3, [r3]
 8004c7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	f023 0301 	bic.w	r3, r3, #1
 8004c82:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	3308      	adds	r3, #8
 8004c8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c94:	e841 2300 	strex	r3, r2, [r1]
 8004c98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1e5      	bne.n	8004c6c <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d12e      	bne.n	8004d14 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	e853 3f00 	ldrex	r3, [r3]
 8004cc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	f023 0310 	bic.w	r3, r3, #16
 8004cd0:	647b      	str	r3, [r7, #68]	; 0x44
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cda:	61bb      	str	r3, [r7, #24]
 8004cdc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cde:	6979      	ldr	r1, [r7, #20]
 8004ce0:	69ba      	ldr	r2, [r7, #24]
 8004ce2:	e841 2300 	strex	r3, r2, [r1]
 8004ce6:	613b      	str	r3, [r7, #16]
   return(result);
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1e6      	bne.n	8004cbc <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	69db      	ldr	r3, [r3, #28]
 8004cf4:	f003 0310 	and.w	r3, r3, #16
 8004cf8:	2b10      	cmp	r3, #16
 8004cfa:	d103      	bne.n	8004d04 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2210      	movs	r2, #16
 8004d02:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f7ff f8b0 	bl	8003e72 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d12:	e00b      	b.n	8004d2c <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f7ff f89a 	bl	8003e4e <HAL_UART_RxCpltCallback>
}
 8004d1a:	e007      	b.n	8004d2c <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	699a      	ldr	r2, [r3, #24]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f042 0208 	orr.w	r2, r2, #8
 8004d2a:	619a      	str	r2, [r3, #24]
}
 8004d2c:	bf00      	nop
 8004d2e:	3758      	adds	r7, #88	; 0x58
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b0a6      	sub	sp, #152	; 0x98
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004d42:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	69db      	ldr	r3, [r3, #28]
 8004d4c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6a:	2b22      	cmp	r3, #34	; 0x22
 8004d6c:	f040 814f 	bne.w	800500e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004d76:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004d7a:	e0f6      	b.n	8004f6a <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d82:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004d86:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8004d8a:	b2d9      	uxtb	r1, r3
 8004d8c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d96:	400a      	ands	r2, r1
 8004d98:	b2d2      	uxtb	r2, r2
 8004d9a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da0:	1c5a      	adds	r2, r3, #1
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	3b01      	subs	r3, #1
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	69db      	ldr	r3, [r3, #28]
 8004dbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004dc2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004dc6:	f003 0307 	and.w	r3, r3, #7
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d053      	beq.n	8004e76 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004dce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d011      	beq.n	8004dfe <UART_RxISR_8BIT_FIFOEN+0xca>
 8004dda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00b      	beq.n	8004dfe <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2201      	movs	r2, #1
 8004dec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004df4:	f043 0201 	orr.w	r2, r3, #1
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004dfe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d011      	beq.n	8004e2e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8004e0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00b      	beq.n	8004e2e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e24:	f043 0204 	orr.w	r2, r3, #4
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004e32:	f003 0304 	and.w	r3, r3, #4
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d011      	beq.n	8004e5e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8004e3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00b      	beq.n	8004e5e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2204      	movs	r2, #4
 8004e4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e54:	f043 0202 	orr.w	r2, r3, #2
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d006      	beq.n	8004e76 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f7fe fff9 	bl	8003e60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d173      	bne.n	8004f6a <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e8a:	e853 3f00 	ldrex	r3, [r3]
 8004e8e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8004e90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ea4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ea6:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004eaa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004eac:	e841 2300 	strex	r3, r2, [r1]
 8004eb0:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004eb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1e4      	bne.n	8004e82 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	3308      	adds	r3, #8
 8004ebe:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ec2:	e853 3f00 	ldrex	r3, [r3]
 8004ec6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ece:	f023 0301 	bic.w	r3, r3, #1
 8004ed2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	3308      	adds	r3, #8
 8004eda:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004edc:	657a      	str	r2, [r7, #84]	; 0x54
 8004ede:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004ee2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004ee4:	e841 2300 	strex	r3, r2, [r1]
 8004ee8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004eea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1e3      	bne.n	8004eb8 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d12e      	bne.n	8004f64 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f14:	e853 3f00 	ldrex	r3, [r3]
 8004f18:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1c:	f023 0310 	bic.w	r3, r3, #16
 8004f20:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	461a      	mov	r2, r3
 8004f28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f2a:	643b      	str	r3, [r7, #64]	; 0x40
 8004f2c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f32:	e841 2300 	strex	r3, r2, [r1]
 8004f36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1e6      	bne.n	8004f0c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	69db      	ldr	r3, [r3, #28]
 8004f44:	f003 0310 	and.w	r3, r3, #16
 8004f48:	2b10      	cmp	r3, #16
 8004f4a:	d103      	bne.n	8004f54 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2210      	movs	r2, #16
 8004f52:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f7fe ff88 	bl	8003e72 <HAL_UARTEx_RxEventCallback>
 8004f62:	e002      	b.n	8004f6a <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f7fe ff72 	bl	8003e4e <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004f6a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d006      	beq.n	8004f80 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8004f72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004f76:	f003 0320 	and.w	r3, r3, #32
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f47f aefe 	bne.w	8004d7c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004f86:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004f8a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d045      	beq.n	800501e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004f98:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d23e      	bcs.n	800501e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	3308      	adds	r3, #8
 8004fa6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	e853 3f00 	ldrex	r3, [r3]
 8004fae:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fb6:	673b      	str	r3, [r7, #112]	; 0x70
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	3308      	adds	r3, #8
 8004fbe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004fc0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fc8:	e841 2300 	strex	r3, r2, [r1]
 8004fcc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1e5      	bne.n	8004fa0 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a14      	ldr	r2, [pc, #80]	; (8005028 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8004fd8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	e853 3f00 	ldrex	r3, [r3]
 8004fe6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	f043 0320 	orr.w	r3, r3, #32
 8004fee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ff8:	61bb      	str	r3, [r7, #24]
 8004ffa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffc:	6979      	ldr	r1, [r7, #20]
 8004ffe:	69ba      	ldr	r2, [r7, #24]
 8005000:	e841 2300 	strex	r3, r2, [r1]
 8005004:	613b      	str	r3, [r7, #16]
   return(result);
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1e6      	bne.n	8004fda <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800500c:	e007      	b.n	800501e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	699a      	ldr	r2, [r3, #24]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f042 0208 	orr.w	r2, r2, #8
 800501c:	619a      	str	r2, [r3, #24]
}
 800501e:	bf00      	nop
 8005020:	3798      	adds	r7, #152	; 0x98
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	08004a75 	.word	0x08004a75

0800502c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b0a8      	sub	sp, #160	; 0xa0
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800503a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	69db      	ldr	r3, [r3, #28]
 8005044:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005062:	2b22      	cmp	r3, #34	; 0x22
 8005064:	f040 8153 	bne.w	800530e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800506e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005072:	e0fa      	b.n	800526a <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005082:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8005086:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800508a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800508e:	4013      	ands	r3, r2
 8005090:	b29a      	uxth	r2, r3
 8005092:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005096:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800509c:	1c9a      	adds	r2, r3, #2
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	3b01      	subs	r3, #1
 80050ac:	b29a      	uxth	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	69db      	ldr	r3, [r3, #28]
 80050ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80050be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050c2:	f003 0307 	and.w	r3, r3, #7
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d053      	beq.n	8005172 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80050ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d011      	beq.n	80050fa <UART_RxISR_16BIT_FIFOEN+0xce>
 80050d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80050da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00b      	beq.n	80050fa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2201      	movs	r2, #1
 80050e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050f0:	f043 0201 	orr.w	r2, r3, #1
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	2b00      	cmp	r3, #0
 8005104:	d011      	beq.n	800512a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005106:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00b      	beq.n	800512a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2202      	movs	r2, #2
 8005118:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005120:	f043 0204 	orr.w	r2, r3, #4
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800512a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800512e:	f003 0304 	and.w	r3, r3, #4
 8005132:	2b00      	cmp	r3, #0
 8005134:	d011      	beq.n	800515a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005136:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00b      	beq.n	800515a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2204      	movs	r2, #4
 8005148:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005150:	f043 0202 	orr.w	r2, r3, #2
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005160:	2b00      	cmp	r3, #0
 8005162:	d006      	beq.n	8005172 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f7fe fe7b 	bl	8003e60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005178:	b29b      	uxth	r3, r3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d175      	bne.n	800526a <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005184:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005186:	e853 3f00 	ldrex	r3, [r3]
 800518a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800518c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800518e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005192:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	461a      	mov	r2, r3
 800519c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051a2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80051a6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80051a8:	e841 2300 	strex	r3, r2, [r1]
 80051ac:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80051ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1e4      	bne.n	800517e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	3308      	adds	r3, #8
 80051ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051be:	e853 3f00 	ldrex	r3, [r3]
 80051c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80051c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051ca:	f023 0301 	bic.w	r3, r3, #1
 80051ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	3308      	adds	r3, #8
 80051d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80051dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80051de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80051e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051e4:	e841 2300 	strex	r3, r2, [r1]
 80051e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80051ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1e1      	bne.n	80051b4 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2220      	movs	r2, #32
 80051f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005202:	2b01      	cmp	r3, #1
 8005204:	d12e      	bne.n	8005264 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005214:	e853 3f00 	ldrex	r3, [r3]
 8005218:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800521a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800521c:	f023 0310 	bic.w	r3, r3, #16
 8005220:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	461a      	mov	r2, r3
 8005228:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800522a:	647b      	str	r3, [r7, #68]	; 0x44
 800522c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005230:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005232:	e841 2300 	strex	r3, r2, [r1]
 8005236:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1e6      	bne.n	800520c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	69db      	ldr	r3, [r3, #28]
 8005244:	f003 0310 	and.w	r3, r3, #16
 8005248:	2b10      	cmp	r3, #16
 800524a:	d103      	bne.n	8005254 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2210      	movs	r2, #16
 8005252:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800525a:	4619      	mov	r1, r3
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f7fe fe08 	bl	8003e72 <HAL_UARTEx_RxEventCallback>
 8005262:	e002      	b.n	800526a <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f7fe fdf2 	bl	8003e4e <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800526a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800526e:	2b00      	cmp	r3, #0
 8005270:	d006      	beq.n	8005280 <UART_RxISR_16BIT_FIFOEN+0x254>
 8005272:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005276:	f003 0320 	and.w	r3, r3, #32
 800527a:	2b00      	cmp	r3, #0
 800527c:	f47f aefa 	bne.w	8005074 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005286:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800528a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800528e:	2b00      	cmp	r3, #0
 8005290:	d045      	beq.n	800531e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005298:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800529c:	429a      	cmp	r2, r3
 800529e:	d23e      	bcs.n	800531e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	3308      	adds	r3, #8
 80052a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052aa:	e853 3f00 	ldrex	r3, [r3]
 80052ae:	623b      	str	r3, [r7, #32]
   return(result);
 80052b0:	6a3b      	ldr	r3, [r7, #32]
 80052b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052b6:	677b      	str	r3, [r7, #116]	; 0x74
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	3308      	adds	r3, #8
 80052be:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80052c0:	633a      	str	r2, [r7, #48]	; 0x30
 80052c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052c8:	e841 2300 	strex	r3, r2, [r1]
 80052cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1e5      	bne.n	80052a0 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a14      	ldr	r2, [pc, #80]	; (8005328 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80052d8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	e853 3f00 	ldrex	r3, [r3]
 80052e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f043 0320 	orr.w	r3, r3, #32
 80052ee:	673b      	str	r3, [r7, #112]	; 0x70
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	461a      	mov	r2, r3
 80052f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052f8:	61fb      	str	r3, [r7, #28]
 80052fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fc:	69b9      	ldr	r1, [r7, #24]
 80052fe:	69fa      	ldr	r2, [r7, #28]
 8005300:	e841 2300 	strex	r3, r2, [r1]
 8005304:	617b      	str	r3, [r7, #20]
   return(result);
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1e6      	bne.n	80052da <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800530c:	e007      	b.n	800531e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	699a      	ldr	r2, [r3, #24]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f042 0208 	orr.w	r2, r2, #8
 800531c:	619a      	str	r2, [r3, #24]
}
 800531e:	bf00      	nop
 8005320:	37a0      	adds	r7, #160	; 0xa0
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	08004bd5 	.word	0x08004bd5

0800532c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	bc80      	pop	{r7}
 800533c:	4770      	bx	lr

0800533e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800533e:	b480      	push	{r7}
 8005340:	b083      	sub	sp, #12
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005346:	bf00      	nop
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	bc80      	pop	{r7}
 800534e:	4770      	bx	lr

08005350 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	bc80      	pop	{r7}
 8005360:	4770      	bx	lr

08005362 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b084      	sub	sp, #16
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005370:	2b01      	cmp	r3, #1
 8005372:	d101      	bne.n	8005378 <HAL_UARTEx_EnableFifoMode+0x16>
 8005374:	2302      	movs	r3, #2
 8005376:	e02b      	b.n	80053d0 <HAL_UARTEx_EnableFifoMode+0x6e>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2224      	movs	r2, #36	; 0x24
 8005384:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 0201 	bic.w	r2, r2, #1
 800539e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80053a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80053ae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 f889 	bl	80054d0 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2220      	movs	r2, #32
 80053c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3710      	adds	r7, #16
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d101      	bne.n	80053f0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80053ec:	2302      	movs	r3, #2
 80053ee:	e02d      	b.n	800544c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2224      	movs	r2, #36	; 0x24
 80053fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f022 0201 	bic.w	r2, r2, #1
 8005416:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	683a      	ldr	r2, [r7, #0]
 8005428:	430a      	orrs	r2, r1
 800542a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f84f 	bl	80054d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2220      	movs	r2, #32
 800543e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3710      	adds	r7, #16
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005464:	2b01      	cmp	r3, #1
 8005466:	d101      	bne.n	800546c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005468:	2302      	movs	r3, #2
 800546a:	e02d      	b.n	80054c8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2224      	movs	r2, #36	; 0x24
 8005478:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f022 0201 	bic.w	r2, r2, #1
 8005492:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	430a      	orrs	r2, r1
 80054a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 f811 	bl	80054d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2220      	movs	r2, #32
 80054ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d108      	bne.n	80054f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80054f0:	e031      	b.n	8005556 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80054f2:	2308      	movs	r3, #8
 80054f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80054f6:	2308      	movs	r3, #8
 80054f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	0e5b      	lsrs	r3, r3, #25
 8005502:	b2db      	uxtb	r3, r3
 8005504:	f003 0307 	and.w	r3, r3, #7
 8005508:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	0f5b      	lsrs	r3, r3, #29
 8005512:	b2db      	uxtb	r3, r3
 8005514:	f003 0307 	and.w	r3, r3, #7
 8005518:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800551a:	7bbb      	ldrb	r3, [r7, #14]
 800551c:	7b3a      	ldrb	r2, [r7, #12]
 800551e:	4910      	ldr	r1, [pc, #64]	; (8005560 <UARTEx_SetNbDataToProcess+0x90>)
 8005520:	5c8a      	ldrb	r2, [r1, r2]
 8005522:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005526:	7b3a      	ldrb	r2, [r7, #12]
 8005528:	490e      	ldr	r1, [pc, #56]	; (8005564 <UARTEx_SetNbDataToProcess+0x94>)
 800552a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800552c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005530:	b29a      	uxth	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005538:	7bfb      	ldrb	r3, [r7, #15]
 800553a:	7b7a      	ldrb	r2, [r7, #13]
 800553c:	4908      	ldr	r1, [pc, #32]	; (8005560 <UARTEx_SetNbDataToProcess+0x90>)
 800553e:	5c8a      	ldrb	r2, [r1, r2]
 8005540:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005544:	7b7a      	ldrb	r2, [r7, #13]
 8005546:	4907      	ldr	r1, [pc, #28]	; (8005564 <UARTEx_SetNbDataToProcess+0x94>)
 8005548:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800554a:	fb93 f3f2 	sdiv	r3, r3, r2
 800554e:	b29a      	uxth	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005556:	bf00      	nop
 8005558:	3714      	adds	r7, #20
 800555a:	46bd      	mov	sp, r7
 800555c:	bc80      	pop	{r7}
 800555e:	4770      	bx	lr
 8005560:	080056c4 	.word	0x080056c4
 8005564:	080056cc 	.word	0x080056cc

08005568 <__libc_init_array>:
 8005568:	b570      	push	{r4, r5, r6, lr}
 800556a:	4d0d      	ldr	r5, [pc, #52]	; (80055a0 <__libc_init_array+0x38>)
 800556c:	4c0d      	ldr	r4, [pc, #52]	; (80055a4 <__libc_init_array+0x3c>)
 800556e:	1b64      	subs	r4, r4, r5
 8005570:	10a4      	asrs	r4, r4, #2
 8005572:	2600      	movs	r6, #0
 8005574:	42a6      	cmp	r6, r4
 8005576:	d109      	bne.n	800558c <__libc_init_array+0x24>
 8005578:	4d0b      	ldr	r5, [pc, #44]	; (80055a8 <__libc_init_array+0x40>)
 800557a:	4c0c      	ldr	r4, [pc, #48]	; (80055ac <__libc_init_array+0x44>)
 800557c:	f000 f820 	bl	80055c0 <_init>
 8005580:	1b64      	subs	r4, r4, r5
 8005582:	10a4      	asrs	r4, r4, #2
 8005584:	2600      	movs	r6, #0
 8005586:	42a6      	cmp	r6, r4
 8005588:	d105      	bne.n	8005596 <__libc_init_array+0x2e>
 800558a:	bd70      	pop	{r4, r5, r6, pc}
 800558c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005590:	4798      	blx	r3
 8005592:	3601      	adds	r6, #1
 8005594:	e7ee      	b.n	8005574 <__libc_init_array+0xc>
 8005596:	f855 3b04 	ldr.w	r3, [r5], #4
 800559a:	4798      	blx	r3
 800559c:	3601      	adds	r6, #1
 800559e:	e7f2      	b.n	8005586 <__libc_init_array+0x1e>
 80055a0:	080056dc 	.word	0x080056dc
 80055a4:	080056dc 	.word	0x080056dc
 80055a8:	080056dc 	.word	0x080056dc
 80055ac:	080056e0 	.word	0x080056e0

080055b0 <memset>:
 80055b0:	4402      	add	r2, r0
 80055b2:	4603      	mov	r3, r0
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d100      	bne.n	80055ba <memset+0xa>
 80055b8:	4770      	bx	lr
 80055ba:	f803 1b01 	strb.w	r1, [r3], #1
 80055be:	e7f9      	b.n	80055b4 <memset+0x4>

080055c0 <_init>:
 80055c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055c2:	bf00      	nop
 80055c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055c6:	bc08      	pop	{r3}
 80055c8:	469e      	mov	lr, r3
 80055ca:	4770      	bx	lr

080055cc <_fini>:
 80055cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ce:	bf00      	nop
 80055d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055d2:	bc08      	pop	{r3}
 80055d4:	469e      	mov	lr, r3
 80055d6:	4770      	bx	lr
