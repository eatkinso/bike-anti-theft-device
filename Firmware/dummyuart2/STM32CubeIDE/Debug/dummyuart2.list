
dummyuart2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a64  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08003b9c  08003b9c  00013b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c80  08003c80  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08003c80  08003c80  00013c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c88  08003c88  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c88  08003c88  00013c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c8c  08003c8c  00013c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003c90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000018  08003ca8  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08003ca8  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb8e  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000227b  00000000  00000000  0002fbd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  00031e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef0  00000000  00000000  00032df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b2f2  00000000  00000000  00033ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e86d  00000000  00000000  0004efda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac083  00000000  00000000  0005d847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001098ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040b0  00000000  00000000  0010991c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000018 	.word	0x20000018
 8000154:	00000000 	.word	0x00000000
 8000158:	08003b84 	.word	0x08003b84

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000001c 	.word	0x2000001c
 8000174:	08003b84 	.word	0x08003b84

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000188:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800018c:	f000 b974 	b.w	8000478 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9e08      	ldr	r6, [sp, #32]
 80001ae:	460d      	mov	r5, r1
 80001b0:	4604      	mov	r4, r0
 80001b2:	4688      	mov	r8, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14d      	bne.n	8000254 <__udivmoddi4+0xac>
 80001b8:	428a      	cmp	r2, r1
 80001ba:	4694      	mov	ip, r2
 80001bc:	d968      	bls.n	8000290 <__udivmoddi4+0xe8>
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	b152      	cbz	r2, 80001da <__udivmoddi4+0x32>
 80001c4:	fa01 f302 	lsl.w	r3, r1, r2
 80001c8:	f1c2 0120 	rsb	r1, r2, #32
 80001cc:	fa20 f101 	lsr.w	r1, r0, r1
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	ea41 0803 	orr.w	r8, r1, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80001de:	0c21      	lsrs	r1, r4, #16
 80001e0:	fbb8 fef5 	udiv	lr, r8, r5
 80001e4:	fa1f f78c 	uxth.w	r7, ip
 80001e8:	fb05 831e 	mls	r3, r5, lr, r8
 80001ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f0:	fb0e f107 	mul.w	r1, lr, r7
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d90b      	bls.n	8000210 <__udivmoddi4+0x68>
 80001f8:	eb1c 0303 	adds.w	r3, ip, r3
 80001fc:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 8000200:	f080 811e 	bcs.w	8000440 <__udivmoddi4+0x298>
 8000204:	4299      	cmp	r1, r3
 8000206:	f240 811b 	bls.w	8000440 <__udivmoddi4+0x298>
 800020a:	f1ae 0e02 	sub.w	lr, lr, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a5b      	subs	r3, r3, r1
 8000212:	b2a4      	uxth	r4, r4
 8000214:	fbb3 f0f5 	udiv	r0, r3, r5
 8000218:	fb05 3310 	mls	r3, r5, r0, r3
 800021c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000220:	fb00 f707 	mul.w	r7, r0, r7
 8000224:	42a7      	cmp	r7, r4
 8000226:	d90a      	bls.n	800023e <__udivmoddi4+0x96>
 8000228:	eb1c 0404 	adds.w	r4, ip, r4
 800022c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000230:	f080 8108 	bcs.w	8000444 <__udivmoddi4+0x29c>
 8000234:	42a7      	cmp	r7, r4
 8000236:	f240 8105 	bls.w	8000444 <__udivmoddi4+0x29c>
 800023a:	4464      	add	r4, ip
 800023c:	3802      	subs	r0, #2
 800023e:	1be4      	subs	r4, r4, r7
 8000240:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa8>
 8000248:	40d4      	lsrs	r4, r2
 800024a:	2300      	movs	r3, #0
 800024c:	e9c6 4300 	strd	r4, r3, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	428b      	cmp	r3, r1
 8000256:	d908      	bls.n	800026a <__udivmoddi4+0xc2>
 8000258:	2e00      	cmp	r6, #0
 800025a:	f000 80ee 	beq.w	800043a <__udivmoddi4+0x292>
 800025e:	2100      	movs	r1, #0
 8000260:	e9c6 0500 	strd	r0, r5, [r6]
 8000264:	4608      	mov	r0, r1
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f183 	clz	r1, r3
 800026e:	2900      	cmp	r1, #0
 8000270:	d14a      	bne.n	8000308 <__udivmoddi4+0x160>
 8000272:	42ab      	cmp	r3, r5
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd4>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80f9 	bhi.w	800046e <__udivmoddi4+0x2c6>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb65 0303 	sbc.w	r3, r5, r3
 8000282:	2001      	movs	r0, #1
 8000284:	4698      	mov	r8, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e2      	beq.n	8000250 <__udivmoddi4+0xa8>
 800028a:	e9c6 4800 	strd	r4, r8, [r6]
 800028e:	e7df      	b.n	8000250 <__udivmoddi4+0xa8>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xec>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 8091 	bne.w	80003c0 <__udivmoddi4+0x218>
 800029e:	eba1 050c 	sub.w	r5, r1, ip
 80002a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a6:	fa1f fe8c 	uxth.w	lr, ip
 80002aa:	2101      	movs	r1, #1
 80002ac:	fbb5 f3f7 	udiv	r3, r5, r7
 80002b0:	fb07 5013 	mls	r0, r7, r3, r5
 80002b4:	0c25      	lsrs	r5, r4, #16
 80002b6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ba:	fb0e f003 	mul.w	r0, lr, r3
 80002be:	42a8      	cmp	r0, r5
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x12c>
 80002c2:	eb1c 0505 	adds.w	r5, ip, r5
 80002c6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x12a>
 80002cc:	42a8      	cmp	r0, r5
 80002ce:	f200 80cb 	bhi.w	8000468 <__udivmoddi4+0x2c0>
 80002d2:	4643      	mov	r3, r8
 80002d4:	1a2d      	subs	r5, r5, r0
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0f7 	udiv	r0, r5, r7
 80002dc:	fb07 5510 	mls	r5, r7, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb0e fe00 	mul.w	lr, lr, r0
 80002e8:	45a6      	cmp	lr, r4
 80002ea:	d908      	bls.n	80002fe <__udivmoddi4+0x156>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80002f4:	d202      	bcs.n	80002fc <__udivmoddi4+0x154>
 80002f6:	45a6      	cmp	lr, r4
 80002f8:	f200 80bb 	bhi.w	8000472 <__udivmoddi4+0x2ca>
 80002fc:	4628      	mov	r0, r5
 80002fe:	eba4 040e 	sub.w	r4, r4, lr
 8000302:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000306:	e79e      	b.n	8000246 <__udivmoddi4+0x9e>
 8000308:	f1c1 0720 	rsb	r7, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000312:	ea4c 0c03 	orr.w	ip, ip, r3
 8000316:	fa20 f407 	lsr.w	r4, r0, r7
 800031a:	fa05 f301 	lsl.w	r3, r5, r1
 800031e:	431c      	orrs	r4, r3
 8000320:	40fd      	lsrs	r5, r7
 8000322:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000326:	fa00 f301 	lsl.w	r3, r0, r1
 800032a:	fbb5 f8f9 	udiv	r8, r5, r9
 800032e:	0c20      	lsrs	r0, r4, #16
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	fb09 5518 	mls	r5, r9, r8, r5
 8000338:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800033c:	fb08 f00e 	mul.w	r0, r8, lr
 8000340:	42a8      	cmp	r0, r5
 8000342:	fa02 f201 	lsl.w	r2, r2, r1
 8000346:	d90b      	bls.n	8000360 <__udivmoddi4+0x1b8>
 8000348:	eb1c 0505 	adds.w	r5, ip, r5
 800034c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000350:	f080 8088 	bcs.w	8000464 <__udivmoddi4+0x2bc>
 8000354:	42a8      	cmp	r0, r5
 8000356:	f240 8085 	bls.w	8000464 <__udivmoddi4+0x2bc>
 800035a:	f1a8 0802 	sub.w	r8, r8, #2
 800035e:	4465      	add	r5, ip
 8000360:	1a2d      	subs	r5, r5, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb5 f0f9 	udiv	r0, r5, r9
 8000368:	fb09 5510 	mls	r5, r9, r0, r5
 800036c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000370:	fb00 fe0e 	mul.w	lr, r0, lr
 8000374:	45ae      	cmp	lr, r5
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1e2>
 8000378:	eb1c 0505 	adds.w	r5, ip, r5
 800037c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000380:	d26c      	bcs.n	800045c <__udivmoddi4+0x2b4>
 8000382:	45ae      	cmp	lr, r5
 8000384:	d96a      	bls.n	800045c <__udivmoddi4+0x2b4>
 8000386:	3802      	subs	r0, #2
 8000388:	4465      	add	r5, ip
 800038a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800038e:	fba0 9402 	umull	r9, r4, r0, r2
 8000392:	eba5 050e 	sub.w	r5, r5, lr
 8000396:	42a5      	cmp	r5, r4
 8000398:	46c8      	mov	r8, r9
 800039a:	46a6      	mov	lr, r4
 800039c:	d356      	bcc.n	800044c <__udivmoddi4+0x2a4>
 800039e:	d053      	beq.n	8000448 <__udivmoddi4+0x2a0>
 80003a0:	b15e      	cbz	r6, 80003ba <__udivmoddi4+0x212>
 80003a2:	ebb3 0208 	subs.w	r2, r3, r8
 80003a6:	eb65 050e 	sbc.w	r5, r5, lr
 80003aa:	fa05 f707 	lsl.w	r7, r5, r7
 80003ae:	fa22 f301 	lsr.w	r3, r2, r1
 80003b2:	40cd      	lsrs	r5, r1
 80003b4:	431f      	orrs	r7, r3
 80003b6:	e9c6 7500 	strd	r7, r5, [r6]
 80003ba:	2100      	movs	r1, #0
 80003bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c0:	f1c2 0320 	rsb	r3, r2, #32
 80003c4:	fa20 f103 	lsr.w	r1, r0, r3
 80003c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003cc:	fa25 f303 	lsr.w	r3, r5, r3
 80003d0:	4095      	lsls	r5, r2
 80003d2:	430d      	orrs	r5, r1
 80003d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3011 	mls	r0, r7, r1, r3
 80003e4:	0c2b      	lsrs	r3, r5, #16
 80003e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80003ea:	fb01 f00e 	mul.w	r0, r1, lr
 80003ee:	4298      	cmp	r0, r3
 80003f0:	fa04 f402 	lsl.w	r4, r4, r2
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x260>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80003fe:	d22f      	bcs.n	8000460 <__udivmoddi4+0x2b8>
 8000400:	4298      	cmp	r0, r3
 8000402:	d92d      	bls.n	8000460 <__udivmoddi4+0x2b8>
 8000404:	3902      	subs	r1, #2
 8000406:	4463      	add	r3, ip
 8000408:	1a1b      	subs	r3, r3, r0
 800040a:	b2ad      	uxth	r5, r5
 800040c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000410:	fb07 3310 	mls	r3, r7, r0, r3
 8000414:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000418:	fb00 f30e 	mul.w	r3, r0, lr
 800041c:	42ab      	cmp	r3, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x28a>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000428:	d216      	bcs.n	8000458 <__udivmoddi4+0x2b0>
 800042a:	42ab      	cmp	r3, r5
 800042c:	d914      	bls.n	8000458 <__udivmoddi4+0x2b0>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	1aed      	subs	r5, r5, r3
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	e738      	b.n	80002ac <__udivmoddi4+0x104>
 800043a:	4631      	mov	r1, r6
 800043c:	4630      	mov	r0, r6
 800043e:	e707      	b.n	8000250 <__udivmoddi4+0xa8>
 8000440:	4686      	mov	lr, r0
 8000442:	e6e5      	b.n	8000210 <__udivmoddi4+0x68>
 8000444:	4618      	mov	r0, r3
 8000446:	e6fa      	b.n	800023e <__udivmoddi4+0x96>
 8000448:	454b      	cmp	r3, r9
 800044a:	d2a9      	bcs.n	80003a0 <__udivmoddi4+0x1f8>
 800044c:	ebb9 0802 	subs.w	r8, r9, r2
 8000450:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000454:	3801      	subs	r0, #1
 8000456:	e7a3      	b.n	80003a0 <__udivmoddi4+0x1f8>
 8000458:	4640      	mov	r0, r8
 800045a:	e7ea      	b.n	8000432 <__udivmoddi4+0x28a>
 800045c:	4620      	mov	r0, r4
 800045e:	e794      	b.n	800038a <__udivmoddi4+0x1e2>
 8000460:	4641      	mov	r1, r8
 8000462:	e7d1      	b.n	8000408 <__udivmoddi4+0x260>
 8000464:	46d0      	mov	r8, sl
 8000466:	e77b      	b.n	8000360 <__udivmoddi4+0x1b8>
 8000468:	3b02      	subs	r3, #2
 800046a:	4465      	add	r5, ip
 800046c:	e732      	b.n	80002d4 <__udivmoddi4+0x12c>
 800046e:	4608      	mov	r0, r1
 8000470:	e709      	b.n	8000286 <__udivmoddi4+0xde>
 8000472:	4464      	add	r4, ip
 8000474:	3802      	subs	r0, #2
 8000476:	e742      	b.n	80002fe <__udivmoddi4+0x156>

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000488:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800048a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4313      	orrs	r3, r2
 8000492:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000498:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4013      	ands	r3, r2
 800049e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004a0:	68fb      	ldr	r3, [r7, #12]
}
 80004a2:	bf00      	nop
 80004a4:	3714      	adds	r7, #20
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr

080004ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b0:	f000 fa16 	bl	80008e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b4:	f000 f81e 	bl	80004f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b8:	f000 f8bc 	bl	8000634 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004bc:	f000 f86c 	bl	8000598 <MX_USART1_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 // HAL_UART_Receive_IT(&huart1, rxdata, 10);
	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80004c0:	2201      	movs	r2, #1
 80004c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004c6:	4808      	ldr	r0, [pc, #32]	; (80004e8 <main+0x3c>)
 80004c8:	f000 fda8 	bl	800101c <HAL_GPIO_WritePin>
	  HAL_UART_Transmit(&huart1, (uint8_t *)dummymsg, 10, 100);
 80004cc:	2364      	movs	r3, #100	; 0x64
 80004ce:	220a      	movs	r2, #10
 80004d0:	4906      	ldr	r1, [pc, #24]	; (80004ec <main+0x40>)
 80004d2:	4807      	ldr	r0, [pc, #28]	; (80004f0 <main+0x44>)
 80004d4:	f002 f973 	bl	80027be <HAL_UART_Transmit>
	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80004d8:	2200      	movs	r2, #0
 80004da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004de:	4802      	ldr	r0, [pc, #8]	; (80004e8 <main+0x3c>)
 80004e0:	f000 fd9c 	bl	800101c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80004e4:	e7ec      	b.n	80004c0 <main+0x14>
 80004e6:	bf00      	nop
 80004e8:	48000400 	.word	0x48000400
 80004ec:	20000000 	.word	0x20000000
 80004f0:	20000034 	.word	0x20000034

080004f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b09a      	sub	sp, #104	; 0x68
 80004f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fa:	f107 0320 	add.w	r3, r7, #32
 80004fe:	2248      	movs	r2, #72	; 0x48
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f003 fb36 	bl	8003b74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
 8000514:	611a      	str	r2, [r3, #16]
 8000516:	615a      	str	r2, [r3, #20]
 8000518:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800051a:	4b1e      	ldr	r3, [pc, #120]	; (8000594 <SystemClock_Config+0xa0>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000522:	4a1c      	ldr	r2, [pc, #112]	; (8000594 <SystemClock_Config+0xa0>)
 8000524:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000528:	6013      	str	r3, [r2, #0]
 800052a:	4b1a      	ldr	r3, [pc, #104]	; (8000594 <SystemClock_Config+0xa0>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000532:	603b      	str	r3, [r7, #0]
 8000534:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000536:	2320      	movs	r3, #32
 8000538:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800053a:	2301      	movs	r3, #1
 800053c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800053e:	2300      	movs	r3, #0
 8000540:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000542:	23a0      	movs	r3, #160	; 0xa0
 8000544:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000546:	2300      	movs	r3, #0
 8000548:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054a:	f107 0320 	add.w	r3, r7, #32
 800054e:	4618      	mov	r0, r3
 8000550:	f001 f84e 	bl	80015f0 <HAL_RCC_OscConfig>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800055a:	f000 f8d5 	bl	8000708 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800055e:	234f      	movs	r3, #79	; 0x4f
 8000560:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000562:	2300      	movs	r3, #0
 8000564:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000566:	2300      	movs	r3, #0
 8000568:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800056a:	2300      	movs	r3, #0
 800056c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800056e:	2300      	movs	r3, #0
 8000570:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000572:	2300      	movs	r3, #0
 8000574:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	2101      	movs	r1, #1
 800057a:	4618      	mov	r0, r3
 800057c:	f001 fbd4 	bl	8001d28 <HAL_RCC_ClockConfig>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000586:	f000 f8bf 	bl	8000708 <Error_Handler>
  }
}
 800058a:	bf00      	nop
 800058c:	3768      	adds	r7, #104	; 0x68
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	58000400 	.word	0x58000400

08000598 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800059c:	4b23      	ldr	r3, [pc, #140]	; (800062c <MX_USART1_UART_Init+0x94>)
 800059e:	4a24      	ldr	r2, [pc, #144]	; (8000630 <MX_USART1_UART_Init+0x98>)
 80005a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80005a2:	4b22      	ldr	r3, [pc, #136]	; (800062c <MX_USART1_UART_Init+0x94>)
 80005a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80005a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005aa:	4b20      	ldr	r3, [pc, #128]	; (800062c <MX_USART1_UART_Init+0x94>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005b0:	4b1e      	ldr	r3, [pc, #120]	; (800062c <MX_USART1_UART_Init+0x94>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005b6:	4b1d      	ldr	r3, [pc, #116]	; (800062c <MX_USART1_UART_Init+0x94>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005bc:	4b1b      	ldr	r3, [pc, #108]	; (800062c <MX_USART1_UART_Init+0x94>)
 80005be:	220c      	movs	r2, #12
 80005c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005c2:	4b1a      	ldr	r3, [pc, #104]	; (800062c <MX_USART1_UART_Init+0x94>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005c8:	4b18      	ldr	r3, [pc, #96]	; (800062c <MX_USART1_UART_Init+0x94>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 80005ce:	4b17      	ldr	r3, [pc, #92]	; (800062c <MX_USART1_UART_Init+0x94>)
 80005d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005d4:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80005d6:	4b15      	ldr	r3, [pc, #84]	; (800062c <MX_USART1_UART_Init+0x94>)
 80005d8:	2200      	movs	r2, #0
 80005da:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005dc:	4b13      	ldr	r3, [pc, #76]	; (800062c <MX_USART1_UART_Init+0x94>)
 80005de:	2200      	movs	r2, #0
 80005e0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005e2:	4812      	ldr	r0, [pc, #72]	; (800062c <MX_USART1_UART_Init+0x94>)
 80005e4:	f002 f89b 	bl	800271e <HAL_UART_Init>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80005ee:	f000 f88b 	bl	8000708 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80005f2:	2100      	movs	r1, #0
 80005f4:	480d      	ldr	r0, [pc, #52]	; (800062c <MX_USART1_UART_Init+0x94>)
 80005f6:	f003 f9d0 	bl	800399a <HAL_UARTEx_SetTxFifoThreshold>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000600:	f000 f882 	bl	8000708 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000604:	2100      	movs	r1, #0
 8000606:	4809      	ldr	r0, [pc, #36]	; (800062c <MX_USART1_UART_Init+0x94>)
 8000608:	f003 fa05 	bl	8003a16 <HAL_UARTEx_SetRxFifoThreshold>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8000612:	f000 f879 	bl	8000708 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000616:	4805      	ldr	r0, [pc, #20]	; (800062c <MX_USART1_UART_Init+0x94>)
 8000618:	f003 f987 	bl	800392a <HAL_UARTEx_DisableFifoMode>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8000622:	f000 f871 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000034 	.word	0x20000034
 8000630:	40013800 	.word	0x40013800

08000634 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000648:	2002      	movs	r0, #2
 800064a:	f7ff ff17 	bl	800047c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064e:	2004      	movs	r0, #4
 8000650:	f7ff ff14 	bl	800047c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000654:	2001      	movs	r0, #1
 8000656:	f7ff ff11 	bl	800047c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 8000660:	4827      	ldr	r0, [pc, #156]	; (8000700 <MX_GPIO_Init+0xcc>)
 8000662:	f000 fcdb 	bl	800101c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	2138      	movs	r1, #56	; 0x38
 800066a:	4826      	ldr	r0, [pc, #152]	; (8000704 <MX_GPIO_Init+0xd0>)
 800066c:	f000 fcd6 	bl	800101c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000670:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 8000674:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000676:	2301      	movs	r3, #1
 8000678:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800067e:	2302      	movs	r3, #2
 8000680:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	4619      	mov	r1, r3
 8000686:	481e      	ldr	r0, [pc, #120]	; (8000700 <MX_GPIO_Init+0xcc>)
 8000688:	f000 fb68 	bl	8000d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 800068c:	2338      	movs	r3, #56	; 0x38
 800068e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000690:	2301      	movs	r3, #1
 8000692:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000698:	2303      	movs	r3, #3
 800069a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	4619      	mov	r1, r3
 80006a0:	4818      	ldr	r0, [pc, #96]	; (8000704 <MX_GPIO_Init+0xd0>)
 80006a2:	f000 fb5b 	bl	8000d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin B2_Pin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 80006a6:	2303      	movs	r3, #3
 80006a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006aa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80006ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006b0:	2301      	movs	r3, #1
 80006b2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	4619      	mov	r1, r3
 80006b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006bc:	f000 fb4e 	bl	8000d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : B3_Pin */
  GPIO_InitStruct.Pin = B3_Pin;
 80006c0:	2340      	movs	r3, #64	; 0x40
 80006c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006c4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80006c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006ca:	2301      	movs	r3, #1
 80006cc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	4619      	mov	r1, r3
 80006d2:	480c      	ldr	r0, [pc, #48]	; (8000704 <MX_GPIO_Init+0xd0>)
 80006d4:	f000 fb42 	bl	8000d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : T_VCP_RX_Pin T_VCP_RXA2_Pin */
  GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 80006d8:	230c      	movs	r3, #12
 80006da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006dc:	2302      	movs	r3, #2
 80006de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e4:	2300      	movs	r3, #0
 80006e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006e8:	2307      	movs	r3, #7
 80006ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	4619      	mov	r1, r3
 80006f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f4:	f000 fb32 	bl	8000d5c <HAL_GPIO_Init>

}
 80006f8:	bf00      	nop
 80006fa:	3718      	adds	r7, #24
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	48000400 	.word	0x48000400
 8000704:	48000800 	.word	0x48000800

08000708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800070c:	b672      	cpsid	i
}
 800070e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000710:	e7fe      	b.n	8000710 <Error_Handler+0x8>

08000712 <LL_AHB2_GRP1_EnableClock>:
{
 8000712:	b480      	push	{r7}
 8000714:	b085      	sub	sp, #20
 8000716:	af00      	add	r7, sp, #0
 8000718:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800071a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800071e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000720:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4313      	orrs	r3, r2
 8000728:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800072a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800072e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4013      	ands	r3, r2
 8000734:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000736:	68fb      	ldr	r3, [r7, #12]
}
 8000738:	bf00      	nop
 800073a:	3714      	adds	r7, #20
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr

08000742 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000742:	b480      	push	{r7}
 8000744:	b085      	sub	sp, #20
 8000746:	af00      	add	r7, sp, #0
 8000748:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800074a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800074e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000750:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4313      	orrs	r3, r2
 8000758:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800075a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800075e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4013      	ands	r3, r2
 8000764:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000766:	68fb      	ldr	r3, [r7, #12]
}
 8000768:	bf00      	nop
 800076a:	3714      	adds	r7, #20
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr

08000772 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr
	...

08000780 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b096      	sub	sp, #88	; 0x58
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000788:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	2238      	movs	r2, #56	; 0x38
 800079e:	2100      	movs	r1, #0
 80007a0:	4618      	mov	r0, r3
 80007a2:	f003 f9e7 	bl	8003b74 <memset>
  if(huart->Instance==USART1)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a1a      	ldr	r2, [pc, #104]	; (8000814 <HAL_UART_MspInit+0x94>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d12d      	bne.n	800080c <HAL_UART_MspInit+0x8c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80007b0:	2301      	movs	r3, #1
 80007b2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80007b4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80007b8:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007ba:	f107 030c 	add.w	r3, r7, #12
 80007be:	4618      	mov	r0, r3
 80007c0:	f001 fe72 	bl	80024a8 <HAL_RCCEx_PeriphCLKConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80007ca:	f7ff ff9d 	bl	8000708 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007ce:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80007d2:	f7ff ffb6 	bl	8000742 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	2002      	movs	r0, #2
 80007d8:	f7ff ff9b 	bl	8000712 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80007dc:	23c0      	movs	r3, #192	; 0xc0
 80007de:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e0:	2302      	movs	r3, #2
 80007e2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	2300      	movs	r3, #0
 80007ea:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007ec:	2307      	movs	r3, #7
 80007ee:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007f4:	4619      	mov	r1, r3
 80007f6:	4808      	ldr	r0, [pc, #32]	; (8000818 <HAL_UART_MspInit+0x98>)
 80007f8:	f000 fab0 	bl	8000d5c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2100      	movs	r1, #0
 8000800:	2024      	movs	r0, #36	; 0x24
 8000802:	f000 f9ba 	bl	8000b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000806:	2024      	movs	r0, #36	; 0x24
 8000808:	f000 f9d1 	bl	8000bae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800080c:	bf00      	nop
 800080e:	3758      	adds	r7, #88	; 0x58
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40013800 	.word	0x40013800
 8000818:	48000400 	.word	0x48000400

0800081c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000820:	e7fe      	b.n	8000820 <NMI_Handler+0x4>

08000822 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000826:	e7fe      	b.n	8000826 <HardFault_Handler+0x4>

08000828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800082c:	e7fe      	b.n	800082c <MemManage_Handler+0x4>

0800082e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000832:	e7fe      	b.n	8000832 <BusFault_Handler+0x4>

08000834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <UsageFault_Handler+0x4>

0800083a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr

08000846 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr

08000852 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr

0800085e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000862:	f000 f897 	bl	8000994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
	...

0800086c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000870:	4802      	ldr	r0, [pc, #8]	; (800087c <USART1_IRQHandler+0x10>)
 8000872:	f002 f83b 	bl	80028ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000034 	.word	0x20000034

08000880 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000880:	480d      	ldr	r0, [pc, #52]	; (80008b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000882:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000884:	f000 f825 	bl	80008d2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000888:	480c      	ldr	r0, [pc, #48]	; (80008bc <LoopForever+0x6>)
  ldr r1, =_edata
 800088a:	490d      	ldr	r1, [pc, #52]	; (80008c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800088c:	4a0d      	ldr	r2, [pc, #52]	; (80008c4 <LoopForever+0xe>)
  movs r3, #0
 800088e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000890:	e002      	b.n	8000898 <LoopCopyDataInit>

08000892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000896:	3304      	adds	r3, #4

08000898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800089a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800089c:	d3f9      	bcc.n	8000892 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800089e:	4a0a      	ldr	r2, [pc, #40]	; (80008c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008a0:	4c0a      	ldr	r4, [pc, #40]	; (80008cc <LoopForever+0x16>)
  movs r3, #0
 80008a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a4:	e001      	b.n	80008aa <LoopFillZerobss>

080008a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a8:	3204      	adds	r2, #4

080008aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008ac:	d3fb      	bcc.n	80008a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008ae:	f003 f93d 	bl	8003b2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008b2:	f7ff fdfb 	bl	80004ac <main>

080008b6 <LoopForever>:

LoopForever:
    b LoopForever
 80008b6:	e7fe      	b.n	80008b6 <LoopForever>
  ldr   r0, =_estack
 80008b8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80008bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c0:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80008c4:	08003c90 	.word	0x08003c90
  ldr r2, =_sbss
 80008c8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80008cc:	200000c8 	.word	0x200000c8

080008d0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008d0:	e7fe      	b.n	80008d0 <ADC_IRQHandler>

080008d2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr
	...

080008e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008e6:	2300      	movs	r3, #0
 80008e8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008ea:	2003      	movs	r0, #3
 80008ec:	f000 f93a 	bl	8000b64 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80008f0:	f001 fbfc 	bl	80020ec <HAL_RCC_GetHCLKFreq>
 80008f4:	4603      	mov	r3, r0
 80008f6:	4a09      	ldr	r2, [pc, #36]	; (800091c <HAL_Init+0x3c>)
 80008f8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008fa:	2000      	movs	r0, #0
 80008fc:	f000 f810 	bl	8000920 <HAL_InitTick>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d002      	beq.n	800090c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000906:	2301      	movs	r3, #1
 8000908:	71fb      	strb	r3, [r7, #7]
 800090a:	e001      	b.n	8000910 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800090c:	f7ff ff31 	bl	8000772 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000910:	79fb      	ldrb	r3, [r7, #7]
}
 8000912:	4618      	mov	r0, r3
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	2000000c 	.word	0x2000000c

08000920 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000928:	2300      	movs	r3, #0
 800092a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800092c:	4b17      	ldr	r3, [pc, #92]	; (800098c <HAL_InitTick+0x6c>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d024      	beq.n	800097e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000934:	f001 fbda 	bl	80020ec <HAL_RCC_GetHCLKFreq>
 8000938:	4602      	mov	r2, r0
 800093a:	4b14      	ldr	r3, [pc, #80]	; (800098c <HAL_InitTick+0x6c>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	4619      	mov	r1, r3
 8000940:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000944:	fbb3 f3f1 	udiv	r3, r3, r1
 8000948:	fbb2 f3f3 	udiv	r3, r2, r3
 800094c:	4618      	mov	r0, r3
 800094e:	f000 f93c 	bl	8000bca <HAL_SYSTICK_Config>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d10f      	bne.n	8000978 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2b0f      	cmp	r3, #15
 800095c:	d809      	bhi.n	8000972 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800095e:	2200      	movs	r2, #0
 8000960:	6879      	ldr	r1, [r7, #4]
 8000962:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000966:	f000 f908 	bl	8000b7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800096a:	4a09      	ldr	r2, [pc, #36]	; (8000990 <HAL_InitTick+0x70>)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6013      	str	r3, [r2, #0]
 8000970:	e007      	b.n	8000982 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000972:	2301      	movs	r3, #1
 8000974:	73fb      	strb	r3, [r7, #15]
 8000976:	e004      	b.n	8000982 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000978:	2301      	movs	r3, #1
 800097a:	73fb      	strb	r3, [r7, #15]
 800097c:	e001      	b.n	8000982 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800097e:	2301      	movs	r3, #1
 8000980:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000982:	7bfb      	ldrb	r3, [r7, #15]
}
 8000984:	4618      	mov	r0, r3
 8000986:	3710      	adds	r7, #16
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20000014 	.word	0x20000014
 8000990:	20000010 	.word	0x20000010

08000994 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000998:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <HAL_IncTick+0x1c>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	461a      	mov	r2, r3
 800099e:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <HAL_IncTick+0x20>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4413      	add	r3, r2
 80009a4:	4a03      	ldr	r2, [pc, #12]	; (80009b4 <HAL_IncTick+0x20>)
 80009a6:	6013      	str	r3, [r2, #0]
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr
 80009b0:	20000014 	.word	0x20000014
 80009b4:	200000c4 	.word	0x200000c4

080009b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  return uwTick;
 80009bc:	4b02      	ldr	r3, [pc, #8]	; (80009c8 <HAL_GetTick+0x10>)
 80009be:	681b      	ldr	r3, [r3, #0]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr
 80009c8:	200000c4 	.word	0x200000c4

080009cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	f003 0307 	and.w	r3, r3, #7
 80009da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <__NVIC_SetPriorityGrouping+0x44>)
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009e2:	68ba      	ldr	r2, [r7, #8]
 80009e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009e8:	4013      	ands	r3, r2
 80009ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009fe:	4a04      	ldr	r2, [pc, #16]	; (8000a10 <__NVIC_SetPriorityGrouping+0x44>)
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	60d3      	str	r3, [r2, #12]
}
 8000a04:	bf00      	nop
 8000a06:	3714      	adds	r7, #20
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bc80      	pop	{r7}
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a18:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <__NVIC_GetPriorityGrouping+0x18>)
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	0a1b      	lsrs	r3, r3, #8
 8000a1e:	f003 0307 	and.w	r3, r3, #7
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bc80      	pop	{r7}
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	db0b      	blt.n	8000a5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	f003 021f 	and.w	r2, r3, #31
 8000a48:	4906      	ldr	r1, [pc, #24]	; (8000a64 <__NVIC_EnableIRQ+0x34>)
 8000a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4e:	095b      	lsrs	r3, r3, #5
 8000a50:	2001      	movs	r0, #1
 8000a52:	fa00 f202 	lsl.w	r2, r0, r2
 8000a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr
 8000a64:	e000e100 	.word	0xe000e100

08000a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	6039      	str	r1, [r7, #0]
 8000a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	db0a      	blt.n	8000a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	490c      	ldr	r1, [pc, #48]	; (8000ab4 <__NVIC_SetPriority+0x4c>)
 8000a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a86:	0112      	lsls	r2, r2, #4
 8000a88:	b2d2      	uxtb	r2, r2
 8000a8a:	440b      	add	r3, r1
 8000a8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a90:	e00a      	b.n	8000aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	b2da      	uxtb	r2, r3
 8000a96:	4908      	ldr	r1, [pc, #32]	; (8000ab8 <__NVIC_SetPriority+0x50>)
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	f003 030f 	and.w	r3, r3, #15
 8000a9e:	3b04      	subs	r3, #4
 8000aa0:	0112      	lsls	r2, r2, #4
 8000aa2:	b2d2      	uxtb	r2, r2
 8000aa4:	440b      	add	r3, r1
 8000aa6:	761a      	strb	r2, [r3, #24]
}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bc80      	pop	{r7}
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	e000e100 	.word	0xe000e100
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b089      	sub	sp, #36	; 0x24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	f003 0307 	and.w	r3, r3, #7
 8000ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ad0:	69fb      	ldr	r3, [r7, #28]
 8000ad2:	f1c3 0307 	rsb	r3, r3, #7
 8000ad6:	2b04      	cmp	r3, #4
 8000ad8:	bf28      	it	cs
 8000ada:	2304      	movcs	r3, #4
 8000adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	3304      	adds	r3, #4
 8000ae2:	2b06      	cmp	r3, #6
 8000ae4:	d902      	bls.n	8000aec <NVIC_EncodePriority+0x30>
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	3b03      	subs	r3, #3
 8000aea:	e000      	b.n	8000aee <NVIC_EncodePriority+0x32>
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	43da      	mvns	r2, r3
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	401a      	ands	r2, r3
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0e:	43d9      	mvns	r1, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b14:	4313      	orrs	r3, r2
         );
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3724      	adds	r7, #36	; 0x24
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr

08000b20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b30:	d301      	bcc.n	8000b36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b32:	2301      	movs	r3, #1
 8000b34:	e00f      	b.n	8000b56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b36:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <SysTick_Config+0x40>)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b3e:	210f      	movs	r1, #15
 8000b40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b44:	f7ff ff90 	bl	8000a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <SysTick_Config+0x40>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b4e:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <SysTick_Config+0x40>)
 8000b50:	2207      	movs	r2, #7
 8000b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	e000e010 	.word	0xe000e010

08000b64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff ff2d 	bl	80009cc <__NVIC_SetPriorityGrouping>
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b086      	sub	sp, #24
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	4603      	mov	r3, r0
 8000b82:	60b9      	str	r1, [r7, #8]
 8000b84:	607a      	str	r2, [r7, #4]
 8000b86:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b88:	f7ff ff44 	bl	8000a14 <__NVIC_GetPriorityGrouping>
 8000b8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	68b9      	ldr	r1, [r7, #8]
 8000b92:	6978      	ldr	r0, [r7, #20]
 8000b94:	f7ff ff92 	bl	8000abc <NVIC_EncodePriority>
 8000b98:	4602      	mov	r2, r0
 8000b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ff61 	bl	8000a68 <__NVIC_SetPriority>
}
 8000ba6:	bf00      	nop
 8000ba8:	3718      	adds	r7, #24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff ff37 	bl	8000a30 <__NVIC_EnableIRQ>
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f7ff ffa4 	bl	8000b20 <SysTick_Config>
 8000bd8:	4603      	mov	r3, r0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000be2:	b480      	push	{r7}
 8000be4:	b083      	sub	sp, #12
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d101      	bne.n	8000bf4 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e04f      	b.n	8000c94 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d008      	beq.n	8000c12 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2204      	movs	r2, #4
 8000c04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e040      	b.n	8000c94 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f022 020e 	bic.w	r2, r2, #14
 8000c20:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c30:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f022 0201 	bic.w	r2, r2, #1
 8000c40:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c46:	f003 021c 	and.w	r2, r3, #28
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	2101      	movs	r1, #1
 8000c50:	fa01 f202 	lsl.w	r2, r1, r2
 8000c54:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000c5e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d00c      	beq.n	8000c82 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c76:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000c80:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2201      	movs	r2, #1
 8000c86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8000c92:	2300      	movs	r3, #0
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr

08000c9e <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b084      	sub	sp, #16
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	d005      	beq.n	8000cc2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2204      	movs	r2, #4
 8000cba:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	73fb      	strb	r3, [r7, #15]
 8000cc0:	e047      	b.n	8000d52 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f022 020e 	bic.w	r2, r2, #14
 8000cd0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f022 0201 	bic.w	r2, r2, #1
 8000ce0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000cf0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf6:	f003 021c 	and.w	r2, r3, #28
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	2101      	movs	r1, #1
 8000d00:	fa01 f202 	lsl.w	r2, r1, r2
 8000d04:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000d0e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d00c      	beq.n	8000d32 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d26:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000d30:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2201      	movs	r2, #1
 8000d36:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d003      	beq.n	8000d52 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	4798      	blx	r3
    }
  }
  return status;
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b087      	sub	sp, #28
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d6a:	e140      	b.n	8000fee <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	2101      	movs	r1, #1
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	fa01 f303 	lsl.w	r3, r1, r3
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f000 8132 	beq.w	8000fe8 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 0303 	and.w	r3, r3, #3
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d005      	beq.n	8000d9c <HAL_GPIO_Init+0x40>
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f003 0303 	and.w	r3, r3, #3
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d130      	bne.n	8000dfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	2203      	movs	r2, #3
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4013      	ands	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	68da      	ldr	r2, [r3, #12]
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	4013      	ands	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	091b      	lsrs	r3, r3, #4
 8000de8:	f003 0201 	and.w	r2, r3, #1
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f003 0303 	and.w	r3, r3, #3
 8000e06:	2b03      	cmp	r3, #3
 8000e08:	d017      	beq.n	8000e3a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	68db      	ldr	r3, [r3, #12]
 8000e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	2203      	movs	r2, #3
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	689a      	ldr	r2, [r3, #8]
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f003 0303 	and.w	r3, r3, #3
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d123      	bne.n	8000e8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	08da      	lsrs	r2, r3, #3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	3208      	adds	r2, #8
 8000e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	220f      	movs	r2, #15
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43db      	mvns	r3, r3
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	691a      	ldr	r2, [r3, #16]
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	f003 0307 	and.w	r3, r3, #7
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	08da      	lsrs	r2, r3, #3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3208      	adds	r2, #8
 8000e88:	6939      	ldr	r1, [r7, #16]
 8000e8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	2203      	movs	r2, #3
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f003 0203 	and.w	r2, r3, #3
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	f000 808c 	beq.w	8000fe8 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000ed0:	4a4e      	ldr	r2, [pc, #312]	; (800100c <HAL_GPIO_Init+0x2b0>)
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	089b      	lsrs	r3, r3, #2
 8000ed6:	3302      	adds	r3, #2
 8000ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000edc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	f003 0303 	and.w	r3, r3, #3
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	2207      	movs	r2, #7
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000efa:	d00d      	beq.n	8000f18 <HAL_GPIO_Init+0x1bc>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a44      	ldr	r2, [pc, #272]	; (8001010 <HAL_GPIO_Init+0x2b4>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d007      	beq.n	8000f14 <HAL_GPIO_Init+0x1b8>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a43      	ldr	r2, [pc, #268]	; (8001014 <HAL_GPIO_Init+0x2b8>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d101      	bne.n	8000f10 <HAL_GPIO_Init+0x1b4>
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	e004      	b.n	8000f1a <HAL_GPIO_Init+0x1be>
 8000f10:	2307      	movs	r3, #7
 8000f12:	e002      	b.n	8000f1a <HAL_GPIO_Init+0x1be>
 8000f14:	2301      	movs	r3, #1
 8000f16:	e000      	b.n	8000f1a <HAL_GPIO_Init+0x1be>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	697a      	ldr	r2, [r7, #20]
 8000f1c:	f002 0203 	and.w	r2, r2, #3
 8000f20:	0092      	lsls	r2, r2, #2
 8000f22:	4093      	lsls	r3, r2
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f2a:	4938      	ldr	r1, [pc, #224]	; (800100c <HAL_GPIO_Init+0x2b0>)
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	089b      	lsrs	r3, r3, #2
 8000f30:	3302      	adds	r3, #2
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f38:	4b37      	ldr	r3, [pc, #220]	; (8001018 <HAL_GPIO_Init+0x2bc>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	43db      	mvns	r3, r3
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4013      	ands	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d003      	beq.n	8000f5c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f5c:	4a2e      	ldr	r2, [pc, #184]	; (8001018 <HAL_GPIO_Init+0x2bc>)
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000f62:	4b2d      	ldr	r3, [pc, #180]	; (8001018 <HAL_GPIO_Init+0x2bc>)
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f86:	4a24      	ldr	r2, [pc, #144]	; (8001018 <HAL_GPIO_Init+0x2bc>)
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8000f8c:	4b22      	ldr	r3, [pc, #136]	; (8001018 <HAL_GPIO_Init+0x2bc>)
 8000f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f92:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	43db      	mvns	r3, r3
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8000fb2:	4a19      	ldr	r2, [pc, #100]	; (8001018 <HAL_GPIO_Init+0x2bc>)
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8000fba:	4b17      	ldr	r3, [pc, #92]	; (8001018 <HAL_GPIO_Init+0x2bc>)
 8000fbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000fc0:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d003      	beq.n	8000fe0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8000fe0:	4a0d      	ldr	r2, [pc, #52]	; (8001018 <HAL_GPIO_Init+0x2bc>)
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	3301      	adds	r3, #1
 8000fec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	f47f aeb7 	bne.w	8000d6c <HAL_GPIO_Init+0x10>
  }
}
 8000ffe:	bf00      	nop
 8001000:	bf00      	nop
 8001002:	371c      	adds	r7, #28
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40010000 	.word	0x40010000
 8001010:	48000400 	.word	0x48000400
 8001014:	48000800 	.word	0x48000800
 8001018:	58000800 	.word	0x58000800

0800101c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	460b      	mov	r3, r1
 8001026:	807b      	strh	r3, [r7, #2]
 8001028:	4613      	mov	r3, r2
 800102a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800102c:	787b      	ldrb	r3, [r7, #1]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001032:	887a      	ldrh	r2, [r7, #2]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001038:	e002      	b.n	8001040 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800103a:	887a      	ldrh	r2, [r7, #2]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr
	...

0800104c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001050:	4b04      	ldr	r3, [pc, #16]	; (8001064 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a03      	ldr	r2, [pc, #12]	; (8001064 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800105a:	6013      	str	r3, [r2, #0]
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr
 8001064:	58000400 	.word	0x58000400

08001068 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800106c:	4b03      	ldr	r3, [pc, #12]	; (800107c <HAL_PWREx_GetVoltageRange+0x14>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001074:	4618      	mov	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr
 800107c:	58000400 	.word	0x58000400

08001080 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800108c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001090:	d101      	bne.n	8001096 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001092:	2301      	movs	r3, #1
 8001094:	e000      	b.n	8001098 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001096:	2300      	movs	r3, #0
}
 8001098:	4618      	mov	r0, r3
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr
 80010a0:	58000400 	.word	0x58000400

080010a4 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80010a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010b6:	6013      	str	r3, [r2, #0]
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr

080010c0 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80010c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80010d2:	6013      	str	r3, [r2, #0]
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr

080010dc <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80010e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80010ee:	d101      	bne.n	80010f4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80010f0:	2301      	movs	r3, #1
 80010f2:	e000      	b.n	80010f6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr

080010fe <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800110c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001110:	6013      	str	r3, [r2, #0]
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr

0800111a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800111e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001128:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800112c:	6013      	str	r3, [r2, #0]
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	bc80      	pop	{r7}
 8001134:	4770      	bx	lr

08001136 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800113a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001144:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001148:	d101      	bne.n	800114e <LL_RCC_HSE_IsReady+0x18>
 800114a:	2301      	movs	r3, #1
 800114c:	e000      	b.n	8001150 <LL_RCC_HSE_IsReady+0x1a>
 800114e:	2300      	movs	r3, #0
}
 8001150:	4618      	mov	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr

08001158 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800115c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800116a:	6013      	str	r3, [r2, #0]
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr

08001174 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001182:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001186:	6013      	str	r3, [r2, #0]
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr

08001190 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800119e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011a2:	d101      	bne.n	80011a8 <LL_RCC_HSI_IsReady+0x18>
 80011a4:	2301      	movs	r3, #1
 80011a6:	e000      	b.n	80011aa <LL_RCC_HSI_IsReady+0x1a>
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr

080011b2 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b083      	sub	sp, #12
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80011ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	061b      	lsls	r3, r3, #24
 80011c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011cc:	4313      	orrs	r3, r2
 80011ce:	604b      	str	r3, [r1, #4]
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc80      	pop	{r7}
 80011d8:	4770      	bx	lr

080011da <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80011de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d101      	bne.n	80011f2 <LL_RCC_LSE_IsReady+0x18>
 80011ee:	2301      	movs	r3, #1
 80011f0:	e000      	b.n	80011f4 <LL_RCC_LSE_IsReady+0x1a>
 80011f2:	2300      	movs	r3, #0
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr

080011fc <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001204:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001208:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr

0800121c <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001224:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001228:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800122c:	f023 0301 	bic.w	r3, r3, #1
 8001230:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr

0800123c <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001244:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001248:	f003 0302 	and.w	r3, r3, #2
 800124c:	2b02      	cmp	r3, #2
 800124e:	d101      	bne.n	8001254 <LL_RCC_LSI_IsReady+0x18>
 8001250:	2301      	movs	r3, #1
 8001252:	e000      	b.n	8001256 <LL_RCC_LSI_IsReady+0x1a>
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr

0800125e <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6013      	str	r3, [r2, #0]
}
 8001272:	bf00      	nop
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr

0800127a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800127e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001288:	f023 0301 	bic.w	r3, r3, #1
 800128c:	6013      	str	r3, [r2, #0]
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr

08001296 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800129a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d101      	bne.n	80012ac <LL_RCC_MSI_IsReady+0x16>
 80012a8:	2301      	movs	r3, #1
 80012aa:	e000      	b.n	80012ae <LL_RCC_MSI_IsReady+0x18>
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr

080012b6 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80012ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0308 	and.w	r3, r3, #8
 80012c4:	2b08      	cmp	r3, #8
 80012c6:	d101      	bne.n	80012cc <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80012c8:	2301      	movs	r3, #1
 80012ca:	e000      	b.n	80012ce <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr

080012d6 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80012da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr

080012ec <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80012f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012f8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr

08001304 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800130c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	021b      	lsls	r3, r3, #8
 800131a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800131e:	4313      	orrs	r3, r2
 8001320:	604b      	str	r3, [r1, #4]
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr

0800132c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f023 0203 	bic.w	r2, r3, #3
 800133e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4313      	orrs	r3, r2
 8001346:	608b      	str	r3, [r1, #8]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	bc80      	pop	{r7}
 8001350:	4770      	bx	lr

08001352 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f003 030c 	and.w	r3, r3, #12
}
 8001360:	4618      	mov	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr

08001368 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800137a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4313      	orrs	r3, r2
 8001382:	608b      	str	r3, [r1, #8]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr

0800138e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800138e:	b480      	push	{r7}
 8001390:	b083      	sub	sp, #12
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800139a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800139e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr

080013b8 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80013c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013c4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80013c8:	f023 020f 	bic.w	r2, r3, #15
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	091b      	lsrs	r3, r3, #4
 80013d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013d4:	4313      	orrs	r3, r2
 80013d6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr

080013e4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80013ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	608b      	str	r3, [r1, #8]
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr

0800140a <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800140a:	b480      	push	{r7}
 800140c:	b083      	sub	sp, #12
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800141c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4313      	orrs	r3, r2
 8001424:	608b      	str	r3, [r1, #8]
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr

08001430 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800143e:	4618      	mov	r0, r3
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr

08001446 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800144a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800144e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001452:	011b      	lsls	r3, r3, #4
 8001454:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr

08001460 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800146e:	4618      	mov	r0, r3
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr

08001476 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800147a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001484:	4618      	mov	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr

0800148c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800149a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800149e:	6013      	str	r3, [r2, #0]
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr

080014a8 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80014ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014ba:	6013      	str	r3, [r2, #0]
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr

080014c4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80014c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80014d6:	d101      	bne.n	80014dc <LL_RCC_PLL_IsReady+0x18>
 80014d8:	2301      	movs	r3, #1
 80014da:	e000      	b.n	80014de <LL_RCC_PLL_IsReady+0x1a>
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr

080014e6 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80014ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	0a1b      	lsrs	r3, r3, #8
 80014f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr

080014fe <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800150c:	4618      	mov	r0, r3
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr

08001514 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001522:	4618      	mov	r0, r3
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr

0800152a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800152e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	f003 0303 	and.w	r3, r3, #3
}
 8001538:	4618      	mov	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr

08001540 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800154e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001552:	d101      	bne.n	8001558 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001554:	2301      	movs	r3, #1
 8001556:	e000      	b.n	800155a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr

08001562 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800156a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800156e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001572:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001576:	d101      	bne.n	800157c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001578:	2301      	movs	r3, #1
 800157a:	e000      	b.n	800157e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr

08001586 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800158a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800158e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800159a:	d101      	bne.n	80015a0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800159c:	2301      	movs	r3, #1
 800159e:	e000      	b.n	80015a2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr

080015aa <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80015ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80015bc:	d101      	bne.n	80015c2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80015be:	2301      	movs	r3, #1
 80015c0:	e000      	b.n	80015c4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr

080015cc <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80015d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80015de:	d101      	bne.n	80015e4 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80015e0:	2301      	movs	r3, #1
 80015e2:	e000      	b.n	80015e6 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr
	...

080015f0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b088      	sub	sp, #32
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e38b      	b.n	8001d1a <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001602:	f7ff fea6 	bl	8001352 <LL_RCC_GetSysClkSource>
 8001606:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001608:	f7ff ff8f 	bl	800152a <LL_RCC_PLL_GetMainSource>
 800160c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0320 	and.w	r3, r3, #32
 8001616:	2b00      	cmp	r3, #0
 8001618:	f000 80c9 	beq.w	80017ae <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d005      	beq.n	800162e <HAL_RCC_OscConfig+0x3e>
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	2b0c      	cmp	r3, #12
 8001626:	d17b      	bne.n	8001720 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d178      	bne.n	8001720 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800162e:	f7ff fe32 	bl	8001296 <LL_RCC_MSI_IsReady>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d005      	beq.n	8001644 <HAL_RCC_OscConfig+0x54>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a1b      	ldr	r3, [r3, #32]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e36a      	b.n	8001d1a <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001648:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0308 	and.w	r3, r3, #8
 8001652:	2b00      	cmp	r3, #0
 8001654:	d005      	beq.n	8001662 <HAL_RCC_OscConfig+0x72>
 8001656:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001660:	e006      	b.n	8001670 <HAL_RCC_OscConfig+0x80>
 8001662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800166a:	091b      	lsrs	r3, r3, #4
 800166c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001670:	4293      	cmp	r3, r2
 8001672:	d222      	bcs.n	80016ba <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001678:	4618      	mov	r0, r3
 800167a:	f000 fd6f 	bl	800215c <RCC_SetFlashLatencyFromMSIRange>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e348      	b.n	8001d1a <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001692:	f043 0308 	orr.w	r3, r3, #8
 8001696:	6013      	str	r3, [r2, #0]
 8001698:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016aa:	4313      	orrs	r3, r2
 80016ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fe26 	bl	8001304 <LL_RCC_MSI_SetCalibTrimming>
 80016b8:	e021      	b.n	80016fe <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016c4:	f043 0308 	orr.w	r3, r3, #8
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016dc:	4313      	orrs	r3, r2
 80016de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fe0d 	bl	8001304 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ee:	4618      	mov	r0, r3
 80016f0:	f000 fd34 	bl	800215c <RCC_SetFlashLatencyFromMSIRange>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e30d      	b.n	8001d1a <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80016fe:	f000 fcf5 	bl	80020ec <HAL_RCC_GetHCLKFreq>
 8001702:	4603      	mov	r3, r0
 8001704:	4aa1      	ldr	r2, [pc, #644]	; (800198c <HAL_RCC_OscConfig+0x39c>)
 8001706:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001708:	4ba1      	ldr	r3, [pc, #644]	; (8001990 <HAL_RCC_OscConfig+0x3a0>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff f907 	bl	8000920 <HAL_InitTick>
 8001712:	4603      	mov	r3, r0
 8001714:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001716:	7cfb      	ldrb	r3, [r7, #19]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d047      	beq.n	80017ac <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 800171c:	7cfb      	ldrb	r3, [r7, #19]
 800171e:	e2fc      	b.n	8001d1a <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d02c      	beq.n	8001782 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001728:	f7ff fd99 	bl	800125e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800172c:	f7ff f944 	bl	80009b8 <HAL_GetTick>
 8001730:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001734:	f7ff f940 	bl	80009b8 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e2e9      	b.n	8001d1a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001746:	f7ff fda6 	bl	8001296 <LL_RCC_MSI_IsReady>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0f1      	beq.n	8001734 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800175a:	f043 0308 	orr.w	r3, r3, #8
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001772:	4313      	orrs	r3, r2
 8001774:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fdc2 	bl	8001304 <LL_RCC_MSI_SetCalibTrimming>
 8001780:	e015      	b.n	80017ae <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001782:	f7ff fd7a 	bl	800127a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001786:	f7ff f917 	bl	80009b8 <HAL_GetTick>
 800178a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800178e:	f7ff f913 	bl	80009b8 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e2bc      	b.n	8001d1a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 80017a0:	f7ff fd79 	bl	8001296 <LL_RCC_MSI_IsReady>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f1      	bne.n	800178e <HAL_RCC_OscConfig+0x19e>
 80017aa:	e000      	b.n	80017ae <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017ac:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d05f      	beq.n	800187a <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	2b08      	cmp	r3, #8
 80017be:	d005      	beq.n	80017cc <HAL_RCC_OscConfig+0x1dc>
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	2b0c      	cmp	r3, #12
 80017c4:	d10d      	bne.n	80017e2 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	2b03      	cmp	r3, #3
 80017ca:	d10a      	bne.n	80017e2 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017cc:	f7ff fcb3 	bl	8001136 <LL_RCC_HSE_IsReady>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d050      	beq.n	8001878 <HAL_RCC_OscConfig+0x288>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d14c      	bne.n	8001878 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e29b      	b.n	8001d1a <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80017e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017f4:	4313      	orrs	r3, r2
 80017f6:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001800:	d102      	bne.n	8001808 <HAL_RCC_OscConfig+0x218>
 8001802:	f7ff fc7c 	bl	80010fe <LL_RCC_HSE_Enable>
 8001806:	e00d      	b.n	8001824 <HAL_RCC_OscConfig+0x234>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001810:	d104      	bne.n	800181c <HAL_RCC_OscConfig+0x22c>
 8001812:	f7ff fc47 	bl	80010a4 <LL_RCC_HSE_EnableTcxo>
 8001816:	f7ff fc72 	bl	80010fe <LL_RCC_HSE_Enable>
 800181a:	e003      	b.n	8001824 <HAL_RCC_OscConfig+0x234>
 800181c:	f7ff fc7d 	bl	800111a <LL_RCC_HSE_Disable>
 8001820:	f7ff fc4e 	bl	80010c0 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d012      	beq.n	8001852 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800182c:	f7ff f8c4 	bl	80009b8 <HAL_GetTick>
 8001830:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001834:	f7ff f8c0 	bl	80009b8 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b64      	cmp	r3, #100	; 0x64
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e269      	b.n	8001d1a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001846:	f7ff fc76 	bl	8001136 <LL_RCC_HSE_IsReady>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0f1      	beq.n	8001834 <HAL_RCC_OscConfig+0x244>
 8001850:	e013      	b.n	800187a <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001852:	f7ff f8b1 	bl	80009b8 <HAL_GetTick>
 8001856:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800185a:	f7ff f8ad 	bl	80009b8 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b64      	cmp	r3, #100	; 0x64
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e256      	b.n	8001d1a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 800186c:	f7ff fc63 	bl	8001136 <LL_RCC_HSE_IsReady>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f1      	bne.n	800185a <HAL_RCC_OscConfig+0x26a>
 8001876:	e000      	b.n	800187a <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001878:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d04b      	beq.n	800191e <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	2b04      	cmp	r3, #4
 800188a:	d005      	beq.n	8001898 <HAL_RCC_OscConfig+0x2a8>
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	2b0c      	cmp	r3, #12
 8001890:	d113      	bne.n	80018ba <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	2b02      	cmp	r3, #2
 8001896:	d110      	bne.n	80018ba <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001898:	f7ff fc7a 	bl	8001190 <LL_RCC_HSI_IsReady>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d005      	beq.n	80018ae <HAL_RCC_OscConfig+0x2be>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e235      	b.n	8001d1a <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff fc7d 	bl	80011b2 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018b8:	e031      	b.n	800191e <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d019      	beq.n	80018f6 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018c2:	f7ff fc49 	bl	8001158 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c6:	f7ff f877 	bl	80009b8 <HAL_GetTick>
 80018ca:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ce:	f7ff f873 	bl	80009b8 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e21c      	b.n	8001d1a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 80018e0:	f7ff fc56 	bl	8001190 <LL_RCC_HSI_IsReady>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0f1      	beq.n	80018ce <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff fc5f 	bl	80011b2 <LL_RCC_HSI_SetCalibTrimming>
 80018f4:	e013      	b.n	800191e <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018f6:	f7ff fc3d 	bl	8001174 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fa:	f7ff f85d 	bl	80009b8 <HAL_GetTick>
 80018fe:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001902:	f7ff f859 	bl	80009b8 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e202      	b.n	8001d1a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001914:	f7ff fc3c 	bl	8001190 <LL_RCC_HSI_IsReady>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f1      	bne.n	8001902 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	2b00      	cmp	r3, #0
 8001928:	d06f      	beq.n	8001a0a <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d057      	beq.n	80019e2 <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 8001932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001936:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800193a:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	69da      	ldr	r2, [r3, #28]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f003 0310 	and.w	r3, r3, #16
 8001946:	429a      	cmp	r2, r3
 8001948:	d036      	beq.n	80019b8 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d006      	beq.n	8001962 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e1db      	b.n	8001d1a <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	2b00      	cmp	r3, #0
 800196a:	d018      	beq.n	800199e <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 800196c:	f7ff fc56 	bl	800121c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001970:	f7ff f822 	bl	80009b8 <HAL_GetTick>
 8001974:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001976:	e00d      	b.n	8001994 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001978:	f7ff f81e 	bl	80009b8 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b11      	cmp	r3, #17
 8001984:	d906      	bls.n	8001994 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e1c7      	b.n	8001d1a <HAL_RCC_OscConfig+0x72a>
 800198a:	bf00      	nop
 800198c:	2000000c 	.word	0x2000000c
 8001990:	20000010 	.word	0x20000010
          while (LL_RCC_LSI_IsReady() != 0U)
 8001994:	f7ff fc52 	bl	800123c <LL_RCC_LSI_IsReady>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1ec      	bne.n	8001978 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800199e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019a6:	f023 0210 	bic.w	r2, r3, #16
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019b2:	4313      	orrs	r3, r2
 80019b4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019b8:	f7ff fc20 	bl	80011fc <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019bc:	f7fe fffc 	bl	80009b8 <HAL_GetTick>
 80019c0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019c4:	f7fe fff8 	bl	80009b8 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b11      	cmp	r3, #17
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e1a1      	b.n	8001d1a <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 80019d6:	f7ff fc31 	bl	800123c <LL_RCC_LSI_IsReady>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0f1      	beq.n	80019c4 <HAL_RCC_OscConfig+0x3d4>
 80019e0:	e013      	b.n	8001a0a <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019e2:	f7ff fc1b 	bl	800121c <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e6:	f7fe ffe7 	bl	80009b8 <HAL_GetTick>
 80019ea:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ee:	f7fe ffe3 	bl	80009b8 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b11      	cmp	r3, #17
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e18c      	b.n	8001d1a <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001a00:	f7ff fc1c 	bl	800123c <LL_RCC_LSI_IsReady>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f1      	bne.n	80019ee <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f000 80d8 	beq.w	8001bc8 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001a18:	f7ff fb32 	bl	8001080 <LL_PWR_IsEnabledBkUpAccess>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d113      	bne.n	8001a4a <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001a22:	f7ff fb13 	bl	800104c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a26:	f7fe ffc7 	bl	80009b8 <HAL_GetTick>
 8001a2a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a2e:	f7fe ffc3 	bl	80009b8 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e16c      	b.n	8001d1a <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001a40:	f7ff fb1e 	bl	8001080 <LL_PWR_IsEnabledBkUpAccess>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0f1      	beq.n	8001a2e <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d07b      	beq.n	8001b4a <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	2b85      	cmp	r3, #133	; 0x85
 8001a58:	d003      	beq.n	8001a62 <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	2b05      	cmp	r3, #5
 8001a60:	d109      	bne.n	8001a76 <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a6e:	f043 0304 	orr.w	r3, r3, #4
 8001a72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a76:	f7fe ff9f 	bl	80009b8 <HAL_GetTick>
 8001a7a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001a90:	e00a      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a92:	f7fe ff91 	bl	80009b8 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e138      	b.n	8001d1a <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001aa8:	f7ff fb97 	bl	80011da <LL_RCC_LSE_IsReady>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0ef      	beq.n	8001a92 <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	2b81      	cmp	r3, #129	; 0x81
 8001ab8:	d003      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	2b85      	cmp	r3, #133	; 0x85
 8001ac0:	d121      	bne.n	8001b06 <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac2:	f7fe ff79 	bl	80009b8 <HAL_GetTick>
 8001ac6:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ad0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ad8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001adc:	e00a      	b.n	8001af4 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ade:	f7fe ff6b 	bl	80009b8 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e112      	b.n	8001d1a <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001afc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0ec      	beq.n	8001ade <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001b04:	e060      	b.n	8001bc8 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b06:	f7fe ff57 	bl	80009b8 <HAL_GetTick>
 8001b0a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b20:	e00a      	b.n	8001b38 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b22:	f7fe ff49 	bl	80009b8 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e0f0      	b.n	8001d1a <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1ec      	bne.n	8001b22 <HAL_RCC_OscConfig+0x532>
 8001b48:	e03e      	b.n	8001bc8 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b4a:	f7fe ff35 	bl	80009b8 <HAL_GetTick>
 8001b4e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b64:	e00a      	b.n	8001b7c <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b66:	f7fe ff27 	bl	80009b8 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e0ce      	b.n	8001d1a <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1ec      	bne.n	8001b66 <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8c:	f7fe ff14 	bl	80009b8 <HAL_GetTick>
 8001b90:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b9e:	f023 0301 	bic.w	r3, r3, #1
 8001ba2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001ba6:	e00a      	b.n	8001bbe <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba8:	f7fe ff06 	bl	80009b8 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e0ad      	b.n	8001d1a <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001bbe:	f7ff fb0c 	bl	80011da <LL_RCC_LSE_IsReady>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1ef      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 80a3 	beq.w	8001d18 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	2b0c      	cmp	r3, #12
 8001bd6:	d076      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d14b      	bne.n	8001c78 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be0:	f7ff fc62 	bl	80014a8 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be4:	f7fe fee8 	bl	80009b8 <HAL_GetTick>
 8001be8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bec:	f7fe fee4 	bl	80009b8 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b0a      	cmp	r3, #10
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e08d      	b.n	8001d1a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001bfe:	f7ff fc61 	bl	80014c4 <LL_RCC_PLL_IsReady>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1f1      	bne.n	8001bec <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	4b45      	ldr	r3, [pc, #276]	; (8001d24 <HAL_RCC_OscConfig+0x734>)
 8001c10:	4013      	ands	r3, r2
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c1a:	4311      	orrs	r1, r2
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c20:	0212      	lsls	r2, r2, #8
 8001c22:	4311      	orrs	r1, r2
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c28:	4311      	orrs	r1, r2
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c2e:	4311      	orrs	r1, r2
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c34:	430a      	orrs	r2, r1
 8001c36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c3e:	f7ff fc25 	bl	800148c <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c50:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c52:	f7fe feb1 	bl	80009b8 <HAL_GetTick>
 8001c56:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5a:	f7fe fead 	bl	80009b8 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b0a      	cmp	r3, #10
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e056      	b.n	8001d1a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8001c6c:	f7ff fc2a 	bl	80014c4 <LL_RCC_PLL_IsReady>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0f1      	beq.n	8001c5a <HAL_RCC_OscConfig+0x66a>
 8001c76:	e04f      	b.n	8001d18 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c78:	f7ff fc16 	bl	80014a8 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c86:	f023 0303 	bic.w	r3, r3, #3
 8001c8a:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8001c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c96:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8001c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c9e:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca0:	f7fe fe8a 	bl	80009b8 <HAL_GetTick>
 8001ca4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca8:	f7fe fe86 	bl	80009b8 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b0a      	cmp	r3, #10
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e02f      	b.n	8001d1a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001cba:	f7ff fc03 	bl	80014c4 <LL_RCC_PLL_IsReady>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1f1      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x6b8>
 8001cc4:	e028      	b.n	8001d18 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d101      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e023      	b.n	8001d1a <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	f003 0203 	and.w	r2, r3, #3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d115      	bne.n	8001d14 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d10e      	bne.n	8001d14 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d00:	021b      	lsls	r3, r3, #8
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d106      	bne.n	8001d14 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d001      	beq.n	8001d18 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e000      	b.n	8001d1a <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3720      	adds	r7, #32
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	11c1808c 	.word	0x11c1808c

08001d28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e12c      	b.n	8001f96 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d3c:	4b98      	ldr	r3, [pc, #608]	; (8001fa0 <HAL_RCC_ClockConfig+0x278>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d91b      	bls.n	8001d82 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4a:	4b95      	ldr	r3, [pc, #596]	; (8001fa0 <HAL_RCC_ClockConfig+0x278>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f023 0207 	bic.w	r2, r3, #7
 8001d52:	4993      	ldr	r1, [pc, #588]	; (8001fa0 <HAL_RCC_ClockConfig+0x278>)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d5a:	f7fe fe2d 	bl	80009b8 <HAL_GetTick>
 8001d5e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d60:	e008      	b.n	8001d74 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001d62:	f7fe fe29 	bl	80009b8 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e110      	b.n	8001f96 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d74:	4b8a      	ldr	r3, [pc, #552]	; (8001fa0 <HAL_RCC_ClockConfig+0x278>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d1ef      	bne.n	8001d62 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d016      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff fae8 	bl	8001368 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001d98:	f7fe fe0e 	bl	80009b8 <HAL_GetTick>
 8001d9c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001da0:	f7fe fe0a 	bl	80009b8 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e0f1      	b.n	8001f96 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001db2:	f7ff fbc5 	bl	8001540 <LL_RCC_IsActiveFlag_HPRE>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d0f1      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0320 	and.w	r3, r3, #32
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d016      	beq.n	8001df6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff fade 	bl	800138e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001dd2:	f7fe fdf1 	bl	80009b8 <HAL_GetTick>
 8001dd6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001dda:	f7fe fded 	bl	80009b8 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e0d4      	b.n	8001f96 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001dec:	f7ff fbb9 	bl	8001562 <LL_RCC_IsActiveFlag_C2HPRE>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0f1      	beq.n	8001dda <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d016      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff fad6 	bl	80013b8 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001e0c:	f7fe fdd4 	bl	80009b8 <HAL_GetTick>
 8001e10:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001e14:	f7fe fdd0 	bl	80009b8 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e0b7      	b.n	8001f96 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001e26:	f7ff fbae 	bl	8001586 <LL_RCC_IsActiveFlag_SHDHPRE>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0f1      	beq.n	8001e14 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d016      	beq.n	8001e6a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff facf 	bl	80013e4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001e46:	f7fe fdb7 	bl	80009b8 <HAL_GetTick>
 8001e4a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001e4e:	f7fe fdb3 	bl	80009b8 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e09a      	b.n	8001f96 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001e60:	f7ff fba3 	bl	80015aa <LL_RCC_IsActiveFlag_PPRE1>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0f1      	beq.n	8001e4e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0308 	and.w	r3, r3, #8
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d017      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff fac4 	bl	800140a <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001e82:	f7fe fd99 	bl	80009b8 <HAL_GetTick>
 8001e86:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001e8a:	f7fe fd95 	bl	80009b8 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e07c      	b.n	8001f96 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001e9c:	f7ff fb96 	bl	80015cc <LL_RCC_IsActiveFlag_PPRE2>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0f1      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d043      	beq.n	8001f3a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d106      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001eba:	f7ff f93c 	bl	8001136 <LL_RCC_HSE_IsReady>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d11e      	bne.n	8001f02 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e066      	b.n	8001f96 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b03      	cmp	r3, #3
 8001ece:	d106      	bne.n	8001ede <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001ed0:	f7ff faf8 	bl	80014c4 <LL_RCC_PLL_IsReady>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d113      	bne.n	8001f02 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e05b      	b.n	8001f96 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d106      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001ee6:	f7ff f9d6 	bl	8001296 <LL_RCC_MSI_IsReady>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d108      	bne.n	8001f02 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e050      	b.n	8001f96 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001ef4:	f7ff f94c 	bl	8001190 <LL_RCC_HSI_IsReady>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e049      	b.n	8001f96 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff fa10 	bl	800132c <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f0c:	f7fe fd54 	bl	80009b8 <HAL_GetTick>
 8001f10:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f12:	e00a      	b.n	8001f2a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f14:	f7fe fd50 	bl	80009b8 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e035      	b.n	8001f96 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f2a:	f7ff fa12 	bl	8001352 <LL_RCC_GetSysClkSource>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d1ec      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f3a:	4b19      	ldr	r3, [pc, #100]	; (8001fa0 <HAL_RCC_ClockConfig+0x278>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d21b      	bcs.n	8001f80 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f48:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <HAL_RCC_ClockConfig+0x278>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f023 0207 	bic.w	r2, r3, #7
 8001f50:	4913      	ldr	r1, [pc, #76]	; (8001fa0 <HAL_RCC_ClockConfig+0x278>)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f58:	f7fe fd2e 	bl	80009b8 <HAL_GetTick>
 8001f5c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001f60:	f7fe fd2a 	bl	80009b8 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e011      	b.n	8001f96 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f72:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <HAL_RCC_ClockConfig+0x278>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d1ef      	bne.n	8001f60 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001f80:	f000 f8b4 	bl	80020ec <HAL_RCC_GetHCLKFreq>
 8001f84:	4603      	mov	r3, r0
 8001f86:	4a07      	ldr	r2, [pc, #28]	; (8001fa4 <HAL_RCC_ClockConfig+0x27c>)
 8001f88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f8a:	4b07      	ldr	r3, [pc, #28]	; (8001fa8 <HAL_RCC_ClockConfig+0x280>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe fcc6 	bl	8000920 <HAL_InitTick>
 8001f94:	4603      	mov	r3, r0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	58004000 	.word	0x58004000
 8001fa4:	2000000c 	.word	0x2000000c
 8001fa8:	20000010 	.word	0x20000010

08001fac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fac:	b590      	push	{r4, r7, lr}
 8001fae:	b087      	sub	sp, #28
 8001fb0:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fba:	f7ff f9ca 	bl	8001352 <LL_RCC_GetSysClkSource>
 8001fbe:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fc0:	f7ff fab3 	bl	800152a <LL_RCC_PLL_GetMainSource>
 8001fc4:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d005      	beq.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x2c>
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2b0c      	cmp	r3, #12
 8001fd0:	d139      	bne.n	8002046 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d136      	bne.n	8002046 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001fd8:	f7ff f96d 	bl	80012b6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d115      	bne.n	800200e <HAL_RCC_GetSysClockFreq+0x62>
 8001fe2:	f7ff f968 	bl	80012b6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d106      	bne.n	8001ffa <HAL_RCC_GetSysClockFreq+0x4e>
 8001fec:	f7ff f973 	bl	80012d6 <LL_RCC_MSI_GetRange>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	0a1b      	lsrs	r3, r3, #8
 8001ff4:	f003 030f 	and.w	r3, r3, #15
 8001ff8:	e005      	b.n	8002006 <HAL_RCC_GetSysClockFreq+0x5a>
 8001ffa:	f7ff f977 	bl	80012ec <LL_RCC_MSI_GetRangeAfterStandby>
 8001ffe:	4603      	mov	r3, r0
 8002000:	0a1b      	lsrs	r3, r3, #8
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	4a36      	ldr	r2, [pc, #216]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x134>)
 8002008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800200c:	e014      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0x8c>
 800200e:	f7ff f952 	bl	80012b6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002012:	4603      	mov	r3, r0
 8002014:	2b01      	cmp	r3, #1
 8002016:	d106      	bne.n	8002026 <HAL_RCC_GetSysClockFreq+0x7a>
 8002018:	f7ff f95d 	bl	80012d6 <LL_RCC_MSI_GetRange>
 800201c:	4603      	mov	r3, r0
 800201e:	091b      	lsrs	r3, r3, #4
 8002020:	f003 030f 	and.w	r3, r3, #15
 8002024:	e005      	b.n	8002032 <HAL_RCC_GetSysClockFreq+0x86>
 8002026:	f7ff f961 	bl	80012ec <LL_RCC_MSI_GetRangeAfterStandby>
 800202a:	4603      	mov	r3, r0
 800202c:	091b      	lsrs	r3, r3, #4
 800202e:	f003 030f 	and.w	r3, r3, #15
 8002032:	4a2b      	ldr	r2, [pc, #172]	; (80020e0 <HAL_RCC_GetSysClockFreq+0x134>)
 8002034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002038:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d115      	bne.n	800206c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002044:	e012      	b.n	800206c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	2b04      	cmp	r3, #4
 800204a:	d102      	bne.n	8002052 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800204c:	4b25      	ldr	r3, [pc, #148]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x138>)
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	e00c      	b.n	800206c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	2b08      	cmp	r3, #8
 8002056:	d109      	bne.n	800206c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002058:	f7ff f840 	bl	80010dc <LL_RCC_HSE_IsEnabledDiv2>
 800205c:	4603      	mov	r3, r0
 800205e:	2b01      	cmp	r3, #1
 8002060:	d102      	bne.n	8002068 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002062:	4b20      	ldr	r3, [pc, #128]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002064:	617b      	str	r3, [r7, #20]
 8002066:	e001      	b.n	800206c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002068:	4b1f      	ldr	r3, [pc, #124]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800206a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800206c:	f7ff f971 	bl	8001352 <LL_RCC_GetSysClkSource>
 8002070:	4603      	mov	r3, r0
 8002072:	2b0c      	cmp	r3, #12
 8002074:	d12f      	bne.n	80020d6 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002076:	f7ff fa58 	bl	800152a <LL_RCC_PLL_GetMainSource>
 800207a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b02      	cmp	r3, #2
 8002080:	d003      	beq.n	800208a <HAL_RCC_GetSysClockFreq+0xde>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b03      	cmp	r3, #3
 8002086:	d003      	beq.n	8002090 <HAL_RCC_GetSysClockFreq+0xe4>
 8002088:	e00d      	b.n	80020a6 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800208a:	4b16      	ldr	r3, [pc, #88]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x138>)
 800208c:	60fb      	str	r3, [r7, #12]
        break;
 800208e:	e00d      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002090:	f7ff f824 	bl	80010dc <LL_RCC_HSE_IsEnabledDiv2>
 8002094:	4603      	mov	r3, r0
 8002096:	2b01      	cmp	r3, #1
 8002098:	d102      	bne.n	80020a0 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800209a:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x138>)
 800209c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800209e:	e005      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80020a0:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80020a2:	60fb      	str	r3, [r7, #12]
        break;
 80020a4:	e002      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	60fb      	str	r3, [r7, #12]
        break;
 80020aa:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80020ac:	f7ff fa1b 	bl	80014e6 <LL_RCC_PLL_GetN>
 80020b0:	4602      	mov	r2, r0
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	fb03 f402 	mul.w	r4, r3, r2
 80020b8:	f7ff fa2c 	bl	8001514 <LL_RCC_PLL_GetDivider>
 80020bc:	4603      	mov	r3, r0
 80020be:	091b      	lsrs	r3, r3, #4
 80020c0:	3301      	adds	r3, #1
 80020c2:	fbb4 f4f3 	udiv	r4, r4, r3
 80020c6:	f7ff fa1a 	bl	80014fe <LL_RCC_PLL_GetR>
 80020ca:	4603      	mov	r3, r0
 80020cc:	0f5b      	lsrs	r3, r3, #29
 80020ce:	3301      	adds	r3, #1
 80020d0:	fbb4 f3f3 	udiv	r3, r4, r3
 80020d4:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80020d6:	697b      	ldr	r3, [r7, #20]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	371c      	adds	r7, #28
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd90      	pop	{r4, r7, pc}
 80020e0:	08003c18 	.word	0x08003c18
 80020e4:	00f42400 	.word	0x00f42400
 80020e8:	01e84800 	.word	0x01e84800

080020ec <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020ec:	b598      	push	{r3, r4, r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80020f0:	f7ff ff5c 	bl	8001fac <HAL_RCC_GetSysClockFreq>
 80020f4:	4604      	mov	r4, r0
 80020f6:	f7ff f99b 	bl	8001430 <LL_RCC_GetAHBPrescaler>
 80020fa:	4603      	mov	r3, r0
 80020fc:	091b      	lsrs	r3, r3, #4
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	4a03      	ldr	r2, [pc, #12]	; (8002110 <HAL_RCC_GetHCLKFreq+0x24>)
 8002104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002108:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800210c:	4618      	mov	r0, r3
 800210e:	bd98      	pop	{r3, r4, r7, pc}
 8002110:	08003bb8 	.word	0x08003bb8

08002114 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002114:	b598      	push	{r3, r4, r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002118:	f7ff ffe8 	bl	80020ec <HAL_RCC_GetHCLKFreq>
 800211c:	4604      	mov	r4, r0
 800211e:	f7ff f99f 	bl	8001460 <LL_RCC_GetAPB1Prescaler>
 8002122:	4603      	mov	r3, r0
 8002124:	0a1b      	lsrs	r3, r3, #8
 8002126:	4a03      	ldr	r2, [pc, #12]	; (8002134 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800212c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002130:	4618      	mov	r0, r3
 8002132:	bd98      	pop	{r3, r4, r7, pc}
 8002134:	08003bf8 	.word	0x08003bf8

08002138 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002138:	b598      	push	{r3, r4, r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800213c:	f7ff ffd6 	bl	80020ec <HAL_RCC_GetHCLKFreq>
 8002140:	4604      	mov	r4, r0
 8002142:	f7ff f998 	bl	8001476 <LL_RCC_GetAPB2Prescaler>
 8002146:	4603      	mov	r3, r0
 8002148:	0adb      	lsrs	r3, r3, #11
 800214a:	4a03      	ldr	r2, [pc, #12]	; (8002158 <HAL_RCC_GetPCLK2Freq+0x20>)
 800214c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002150:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002154:	4618      	mov	r0, r3
 8002156:	bd98      	pop	{r3, r4, r7, pc}
 8002158:	08003bf8 	.word	0x08003bf8

0800215c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800215c:	b590      	push	{r4, r7, lr}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	091b      	lsrs	r3, r3, #4
 8002168:	f003 030f 	and.w	r3, r3, #15
 800216c:	4a10      	ldr	r2, [pc, #64]	; (80021b0 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800216e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002172:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002174:	f7ff f967 	bl	8001446 <LL_RCC_GetAHB3Prescaler>
 8002178:	4603      	mov	r3, r0
 800217a:	091b      	lsrs	r3, r3, #4
 800217c:	f003 030f 	and.w	r3, r3, #15
 8002180:	4a0c      	ldr	r2, [pc, #48]	; (80021b4 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	fbb2 f3f3 	udiv	r3, r2, r3
 800218c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	4a09      	ldr	r2, [pc, #36]	; (80021b8 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002192:	fba2 2303 	umull	r2, r3, r2, r3
 8002196:	0c9c      	lsrs	r4, r3, #18
 8002198:	f7fe ff66 	bl	8001068 <HAL_PWREx_GetVoltageRange>
 800219c:	4603      	mov	r3, r0
 800219e:	4619      	mov	r1, r3
 80021a0:	4620      	mov	r0, r4
 80021a2:	f000 f80b 	bl	80021bc <RCC_SetFlashLatency>
 80021a6:	4603      	mov	r3, r0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd90      	pop	{r4, r7, pc}
 80021b0:	08003c18 	.word	0x08003c18
 80021b4:	08003bb8 	.word	0x08003bb8
 80021b8:	431bde83 	.word	0x431bde83

080021bc <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08e      	sub	sp, #56	; 0x38
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80021c6:	4a3a      	ldr	r2, [pc, #232]	; (80022b0 <RCC_SetFlashLatency+0xf4>)
 80021c8:	f107 0320 	add.w	r3, r7, #32
 80021cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021d0:	6018      	str	r0, [r3, #0]
 80021d2:	3304      	adds	r3, #4
 80021d4:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80021d6:	4a37      	ldr	r2, [pc, #220]	; (80022b4 <RCC_SetFlashLatency+0xf8>)
 80021d8:	f107 0318 	add.w	r3, r7, #24
 80021dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021e0:	6018      	str	r0, [r3, #0]
 80021e2:	3304      	adds	r3, #4
 80021e4:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80021e6:	4a34      	ldr	r2, [pc, #208]	; (80022b8 <RCC_SetFlashLatency+0xfc>)
 80021e8:	f107 030c 	add.w	r3, r7, #12
 80021ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80021ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80021f2:	2300      	movs	r3, #0
 80021f4:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021fc:	d11b      	bne.n	8002236 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80021fe:	2300      	movs	r3, #0
 8002200:	633b      	str	r3, [r7, #48]	; 0x30
 8002202:	e014      	b.n	800222e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	3338      	adds	r3, #56	; 0x38
 800220a:	443b      	add	r3, r7
 800220c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002210:	461a      	mov	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4293      	cmp	r3, r2
 8002216:	d807      	bhi.n	8002228 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	3338      	adds	r3, #56	; 0x38
 800221e:	443b      	add	r3, r7
 8002220:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002224:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002226:	e021      	b.n	800226c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800222a:	3301      	adds	r3, #1
 800222c:	633b      	str	r3, [r7, #48]	; 0x30
 800222e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002230:	2b02      	cmp	r3, #2
 8002232:	d9e7      	bls.n	8002204 <RCC_SetFlashLatency+0x48>
 8002234:	e01a      	b.n	800226c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002236:	2300      	movs	r3, #0
 8002238:	62fb      	str	r3, [r7, #44]	; 0x2c
 800223a:	e014      	b.n	8002266 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800223c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	3338      	adds	r3, #56	; 0x38
 8002242:	443b      	add	r3, r7
 8002244:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002248:	461a      	mov	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4293      	cmp	r3, r2
 800224e:	d807      	bhi.n	8002260 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	3338      	adds	r3, #56	; 0x38
 8002256:	443b      	add	r3, r7
 8002258:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800225c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800225e:	e005      	b.n	800226c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002262:	3301      	adds	r3, #1
 8002264:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002268:	2b02      	cmp	r3, #2
 800226a:	d9e7      	bls.n	800223c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800226c:	4b13      	ldr	r3, [pc, #76]	; (80022bc <RCC_SetFlashLatency+0x100>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f023 0207 	bic.w	r2, r3, #7
 8002274:	4911      	ldr	r1, [pc, #68]	; (80022bc <RCC_SetFlashLatency+0x100>)
 8002276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002278:	4313      	orrs	r3, r2
 800227a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800227c:	f7fe fb9c 	bl	80009b8 <HAL_GetTick>
 8002280:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002282:	e008      	b.n	8002296 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002284:	f7fe fb98 	bl	80009b8 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e007      	b.n	80022a6 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002296:	4b09      	ldr	r3, [pc, #36]	; (80022bc <RCC_SetFlashLatency+0x100>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d1ef      	bne.n	8002284 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3738      	adds	r7, #56	; 0x38
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	08003b9c 	.word	0x08003b9c
 80022b4:	08003ba4 	.word	0x08003ba4
 80022b8:	08003bac 	.word	0x08003bac
 80022bc:	58004000 	.word	0x58004000

080022c0 <LL_RCC_LSE_IsReady>:
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80022c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d101      	bne.n	80022d8 <LL_RCC_LSE_IsReady+0x18>
 80022d4:	2301      	movs	r3, #1
 80022d6:	e000      	b.n	80022da <LL_RCC_LSE_IsReady+0x1a>
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr

080022e2 <LL_RCC_SetUSARTClockSource>:
{
 80022e2:	b480      	push	{r7}
 80022e4:	b083      	sub	sp, #12
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80022ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	0c1b      	lsrs	r3, r3, #16
 80022f6:	43db      	mvns	r3, r3
 80022f8:	401a      	ands	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002302:	4313      	orrs	r3, r2
 8002304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr

08002312 <LL_RCC_SetI2SClockSource>:
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800231a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800231e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002322:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002326:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4313      	orrs	r3, r2
 800232e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr

0800233c <LL_RCC_SetLPUARTClockSource>:
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002350:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4313      	orrs	r3, r2
 8002358:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr

08002366 <LL_RCC_SetI2CClockSource>:
{
 8002366:	b480      	push	{r7}
 8002368:	b083      	sub	sp, #12
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800236e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002372:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	091b      	lsrs	r3, r3, #4
 800237a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800237e:	43db      	mvns	r3, r3
 8002380:	401a      	ands	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	011b      	lsls	r3, r3, #4
 8002386:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800238a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800238e:	4313      	orrs	r3, r2
 8002390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr

0800239e <LL_RCC_SetLPTIMClockSource>:
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80023a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	0c1b      	lsrs	r3, r3, #16
 80023b2:	041b      	lsls	r3, r3, #16
 80023b4:	43db      	mvns	r3, r3
 80023b6:	401a      	ands	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	041b      	lsls	r3, r3, #16
 80023bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023c0:	4313      	orrs	r3, r2
 80023c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr

080023d0 <LL_RCC_SetRNGClockSource>:
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80023d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80023e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bc80      	pop	{r7}
 80023f8:	4770      	bx	lr

080023fa <LL_RCC_SetADCClockSource>:
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800240e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4313      	orrs	r3, r2
 8002416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr

08002424 <LL_RCC_SetRTCClockSource>:
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800242c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002434:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002438:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4313      	orrs	r3, r2
 8002440:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	bc80      	pop	{r7}
 800244c:	4770      	bx	lr

0800244e <LL_RCC_GetRTCClockSource>:
{
 800244e:	b480      	push	{r7}
 8002450:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800245e:	4618      	mov	r0, r3
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr

08002466 <LL_RCC_ForceBackupDomainReset>:
{
 8002466:	b480      	push	{r7}
 8002468:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800246a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800246e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002472:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800247a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800247e:	bf00      	nop
 8002480:	46bd      	mov	sp, r7
 8002482:	bc80      	pop	{r7}
 8002484:	4770      	bx	lr

08002486 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002486:	b480      	push	{r7}
 8002488:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800248a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800248e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002492:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800249a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800249e:	bf00      	nop
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bc80      	pop	{r7}
 80024a4:	4770      	bx	lr
	...

080024a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80024b4:	2300      	movs	r3, #0
 80024b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80024b8:	2300      	movs	r3, #0
 80024ba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d058      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80024c8:	f7fe fdc0 	bl	800104c <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024cc:	f7fe fa74 	bl	80009b8 <HAL_GetTick>
 80024d0:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80024d2:	e009      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d4:	f7fe fa70 	bl	80009b8 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d902      	bls.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	74fb      	strb	r3, [r7, #19]
        break;
 80024e6:	e006      	b.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80024e8:	4b7b      	ldr	r3, [pc, #492]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024f4:	d1ee      	bne.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80024f6:	7cfb      	ldrb	r3, [r7, #19]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d13c      	bne.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80024fc:	f7ff ffa7 	bl	800244e <LL_RCC_GetRTCClockSource>
 8002500:	4602      	mov	r2, r0
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002506:	429a      	cmp	r2, r3
 8002508:	d00f      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800250a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800250e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002516:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002518:	f7ff ffa5 	bl	8002466 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 800251c:	f7ff ffb3 	bl	8002486 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002520:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d014      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002534:	f7fe fa40 	bl	80009b8 <HAL_GetTick>
 8002538:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800253a:	e00b      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800253c:	f7fe fa3c 	bl	80009b8 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	f241 3288 	movw	r2, #5000	; 0x1388
 800254a:	4293      	cmp	r3, r2
 800254c:	d902      	bls.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	74fb      	strb	r3, [r7, #19]
            break;
 8002552:	e004      	b.n	800255e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002554:	f7ff feb4 	bl	80022c0 <LL_RCC_LSE_IsReady>
 8002558:	4603      	mov	r3, r0
 800255a:	2b01      	cmp	r3, #1
 800255c:	d1ee      	bne.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800255e:	7cfb      	ldrb	r3, [r7, #19]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d105      	bne.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff ff5b 	bl	8002424 <LL_RCC_SetRTCClockSource>
 800256e:	e004      	b.n	800257a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002570:	7cfb      	ldrb	r3, [r7, #19]
 8002572:	74bb      	strb	r3, [r7, #18]
 8002574:	e001      	b.n	800257a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002576:	7cfb      	ldrb	r3, [r7, #19]
 8002578:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d004      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff fea9 	bl	80022e2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d004      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff fe9e 	bl	80022e2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0320 	and.w	r3, r3, #32
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d004      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff fec0 	bl	800233c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d004      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff fee6 	bl	800239e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d004      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff fedb 	bl	800239e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d004      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff fed0 	bl	800239e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002606:	2b00      	cmp	r3, #0
 8002608:	d004      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff fea9 	bl	8002366 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800261c:	2b00      	cmp	r3, #0
 800261e:	d004      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff fe9e 	bl	8002366 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002632:	2b00      	cmp	r3, #0
 8002634:	d004      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff fe93 	bl	8002366 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0310 	and.w	r3, r3, #16
 8002648:	2b00      	cmp	r3, #0
 800264a:	d011      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff fe5e 	bl	8002312 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800265e:	d107      	bne.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002660:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800266a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800266e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d010      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff fea5 	bl	80023d0 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	2b00      	cmp	r3, #0
 800268c:	d107      	bne.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800268e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002698:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800269c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d011      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff fea3 	bl	80023fa <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026bc:	d107      	bne.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80026be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026cc:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80026ce:	7cbb      	ldrb	r3, [r7, #18]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	58000400 	.word	0x58000400

080026dc <LL_RCC_GetUSARTClockSource>:
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80026e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026e8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	401a      	ands	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	041b      	lsls	r3, r3, #16
 80026f4:	4313      	orrs	r3, r2
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr

08002700 <LL_RCC_GetLPUARTClockSource>:
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800270c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4013      	ands	r3, r2
}
 8002714:	4618      	mov	r0, r3
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	bc80      	pop	{r7}
 800271c:	4770      	bx	lr

0800271e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b082      	sub	sp, #8
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e042      	b.n	80027b6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002736:	2b00      	cmp	r3, #0
 8002738:	d106      	bne.n	8002748 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7fe f81c 	bl	8000780 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2224      	movs	r2, #36	; 0x24
 800274c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0201 	bic.w	r2, r2, #1
 800275e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 fbf9 	bl	8002f58 <UART_SetConfig>
 8002766:	4603      	mov	r3, r0
 8002768:	2b01      	cmp	r3, #1
 800276a:	d101      	bne.n	8002770 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e022      	b.n	80027b6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002774:	2b00      	cmp	r3, #0
 8002776:	d002      	beq.n	800277e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 fe61 	bl	8003440 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800278c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800279c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f042 0201 	orr.w	r2, r2, #1
 80027ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 fee7 	bl	8003582 <UART_CheckIdleState>
 80027b4:	4603      	mov	r3, r0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b08a      	sub	sp, #40	; 0x28
 80027c2:	af02      	add	r7, sp, #8
 80027c4:	60f8      	str	r0, [r7, #12]
 80027c6:	60b9      	str	r1, [r7, #8]
 80027c8:	603b      	str	r3, [r7, #0]
 80027ca:	4613      	mov	r3, r2
 80027cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027d4:	2b20      	cmp	r3, #32
 80027d6:	f040 8083 	bne.w	80028e0 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d002      	beq.n	80027e6 <HAL_UART_Transmit+0x28>
 80027e0:	88fb      	ldrh	r3, [r7, #6]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e07b      	b.n	80028e2 <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <HAL_UART_Transmit+0x3a>
 80027f4:	2302      	movs	r3, #2
 80027f6:	e074      	b.n	80028e2 <HAL_UART_Transmit+0x124>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2221      	movs	r2, #33	; 0x21
 800280c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002810:	f7fe f8d2 	bl	80009b8 <HAL_GetTick>
 8002814:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	88fa      	ldrh	r2, [r7, #6]
 800281a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	88fa      	ldrh	r2, [r7, #6]
 8002822:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800282e:	d108      	bne.n	8002842 <HAL_UART_Transmit+0x84>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d104      	bne.n	8002842 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8002838:	2300      	movs	r3, #0
 800283a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	61bb      	str	r3, [r7, #24]
 8002840:	e003      	b.n	800284a <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002846:	2300      	movs	r3, #0
 8002848:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8002852:	e02c      	b.n	80028ae <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	2200      	movs	r2, #0
 800285c:	2180      	movs	r1, #128	; 0x80
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f000 feda 	bl	8003618 <UART_WaitOnFlagUntilTimeout>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e039      	b.n	80028e2 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10b      	bne.n	800288c <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	881b      	ldrh	r3, [r3, #0]
 8002878:	461a      	mov	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002882:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	3302      	adds	r3, #2
 8002888:	61bb      	str	r3, [r7, #24]
 800288a:	e007      	b.n	800289c <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	781a      	ldrb	r2, [r3, #0]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	3301      	adds	r3, #1
 800289a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	3b01      	subs	r3, #1
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1cc      	bne.n	8002854 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	2200      	movs	r2, #0
 80028c2:	2140      	movs	r1, #64	; 0x40
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 fea7 	bl	8003618 <UART_WaitOnFlagUntilTimeout>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e006      	b.n	80028e2 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2220      	movs	r2, #32
 80028d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80028dc:	2300      	movs	r3, #0
 80028de:	e000      	b.n	80028e2 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80028e0:	2302      	movs	r3, #2
  }
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3720      	adds	r7, #32
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
	...

080028ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b0ba      	sub	sp, #232	; 0xe8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002912:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002916:	f640 030f 	movw	r3, #2063	; 0x80f
 800291a:	4013      	ands	r3, r2
 800291c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002920:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002924:	2b00      	cmp	r3, #0
 8002926:	d11b      	bne.n	8002960 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002928:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800292c:	f003 0320 	and.w	r3, r3, #32
 8002930:	2b00      	cmp	r3, #0
 8002932:	d015      	beq.n	8002960 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002938:	f003 0320 	and.w	r3, r3, #32
 800293c:	2b00      	cmp	r3, #0
 800293e:	d105      	bne.n	800294c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002940:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d009      	beq.n	8002960 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 82d6 	beq.w	8002f02 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	4798      	blx	r3
      }
      return;
 800295e:	e2d0      	b.n	8002f02 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002960:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 811f 	beq.w	8002ba8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800296a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800296e:	4b8b      	ldr	r3, [pc, #556]	; (8002b9c <HAL_UART_IRQHandler+0x2b0>)
 8002970:	4013      	ands	r3, r2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d106      	bne.n	8002984 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002976:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800297a:	4b89      	ldr	r3, [pc, #548]	; (8002ba0 <HAL_UART_IRQHandler+0x2b4>)
 800297c:	4013      	ands	r3, r2
 800297e:	2b00      	cmp	r3, #0
 8002980:	f000 8112 	beq.w	8002ba8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b00      	cmp	r3, #0
 800298e:	d011      	beq.n	80029b4 <HAL_UART_IRQHandler+0xc8>
 8002990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00b      	beq.n	80029b4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2201      	movs	r2, #1
 80029a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029aa:	f043 0201 	orr.w	r2, r3, #1
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d011      	beq.n	80029e4 <HAL_UART_IRQHandler+0xf8>
 80029c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00b      	beq.n	80029e4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2202      	movs	r2, #2
 80029d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029da:	f043 0204 	orr.w	r2, r3, #4
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d011      	beq.n	8002a14 <HAL_UART_IRQHandler+0x128>
 80029f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00b      	beq.n	8002a14 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2204      	movs	r2, #4
 8002a02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a0a:	f043 0202 	orr.w	r2, r3, #2
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a18:	f003 0308 	and.w	r3, r3, #8
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d017      	beq.n	8002a50 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a24:	f003 0320 	and.w	r3, r3, #32
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d105      	bne.n	8002a38 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002a2c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002a30:	4b5a      	ldr	r3, [pc, #360]	; (8002b9c <HAL_UART_IRQHandler+0x2b0>)
 8002a32:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00b      	beq.n	8002a50 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2208      	movs	r2, #8
 8002a3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a46:	f043 0208 	orr.w	r2, r3, #8
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d012      	beq.n	8002a82 <HAL_UART_IRQHandler+0x196>
 8002a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00c      	beq.n	8002a82 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a78:	f043 0220 	orr.w	r2, r3, #32
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 823c 	beq.w	8002f06 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a92:	f003 0320 	and.w	r3, r3, #32
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d013      	beq.n	8002ac2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a9e:	f003 0320 	and.w	r3, r3, #32
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d105      	bne.n	8002ab2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002aa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d007      	beq.n	8002ac2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ac8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad6:	2b40      	cmp	r3, #64	; 0x40
 8002ad8:	d005      	beq.n	8002ae6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002ada:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ade:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d04f      	beq.n	8002b86 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 fe5e 	bl	80037a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af6:	2b40      	cmp	r3, #64	; 0x40
 8002af8:	d141      	bne.n	8002b7e <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	3308      	adds	r3, #8
 8002b00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b08:	e853 3f00 	ldrex	r3, [r3]
 8002b0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	3308      	adds	r3, #8
 8002b22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b36:	e841 2300 	strex	r3, r2, [r1]
 8002b3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1d9      	bne.n	8002afa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d013      	beq.n	8002b76 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b52:	4a14      	ldr	r2, [pc, #80]	; (8002ba4 <HAL_UART_IRQHandler+0x2b8>)
 8002b54:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fe f89f 	bl	8000c9e <HAL_DMA_Abort_IT>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d017      	beq.n	8002b96 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002b70:	4610      	mov	r0, r2
 8002b72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b74:	e00f      	b.n	8002b96 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f9d9 	bl	8002f2e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b7c:	e00b      	b.n	8002b96 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f9d5 	bl	8002f2e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b84:	e007      	b.n	8002b96 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f9d1 	bl	8002f2e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8002b94:	e1b7      	b.n	8002f06 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b96:	bf00      	nop
    return;
 8002b98:	e1b5      	b.n	8002f06 <HAL_UART_IRQHandler+0x61a>
 8002b9a:	bf00      	nop
 8002b9c:	10000001 	.word	0x10000001
 8002ba0:	04000120 	.word	0x04000120
 8002ba4:	08003873 	.word	0x08003873

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	f040 814a 	bne.w	8002e46 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8002bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bb6:	f003 0310 	and.w	r3, r3, #16
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 8143 	beq.w	8002e46 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8002bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bc4:	f003 0310 	and.w	r3, r3, #16
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f000 813c 	beq.w	8002e46 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2210      	movs	r2, #16
 8002bd4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be0:	2b40      	cmp	r3, #64	; 0x40
 8002be2:	f040 80b5 	bne.w	8002d50 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8002bf2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 8187 	beq.w	8002f0a <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002c02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c06:	429a      	cmp	r2, r3
 8002c08:	f080 817f 	bcs.w	8002f0a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c12:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0320 	and.w	r3, r3, #32
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f040 8086 	bne.w	8002d34 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c34:	e853 3f00 	ldrex	r3, [r3]
 8002c38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002c52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002c56:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002c5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c62:	e841 2300 	strex	r3, r2, [r1]
 8002c66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002c6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1da      	bne.n	8002c28 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	3308      	adds	r3, #8
 8002c78:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c7c:	e853 3f00 	ldrex	r3, [r3]
 8002c80:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002c82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c84:	f023 0301 	bic.w	r3, r3, #1
 8002c88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	3308      	adds	r3, #8
 8002c92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c96:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002c9a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002c9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ca2:	e841 2300 	strex	r3, r2, [r1]
 8002ca6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002ca8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1e1      	bne.n	8002c72 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	3308      	adds	r3, #8
 8002cb4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cb8:	e853 3f00 	ldrex	r3, [r3]
 8002cbc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002cbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	3308      	adds	r3, #8
 8002cce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002cd2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002cd4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002cd8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002cda:	e841 2300 	strex	r3, r2, [r1]
 8002cde:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002ce0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1e3      	bne.n	8002cae <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2220      	movs	r2, #32
 8002cea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cfc:	e853 3f00 	ldrex	r3, [r3]
 8002d00:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002d02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d04:	f023 0310 	bic.w	r3, r3, #16
 8002d08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	461a      	mov	r2, r3
 8002d12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d16:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d18:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d1e:	e841 2300 	strex	r3, r2, [r1]
 8002d22:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1e4      	bne.n	8002cf4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fd ff57 	bl	8000be2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	4619      	mov	r1, r3
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 f8f9 	bl	8002f40 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002d4e:	e0dc      	b.n	8002f0a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 80ce 	beq.w	8002f0e <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8002d72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 80c9 	beq.w	8002f0e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d84:	e853 3f00 	ldrex	r3, [r3]
 8002d88:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	461a      	mov	r2, r3
 8002d9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d9e:	647b      	str	r3, [r7, #68]	; 0x44
 8002da0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002da4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002da6:	e841 2300 	strex	r3, r2, [r1]
 8002daa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1e4      	bne.n	8002d7c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	3308      	adds	r3, #8
 8002db8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	e853 3f00 	ldrex	r3, [r3]
 8002dc0:	623b      	str	r3, [r7, #32]
   return(result);
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
 8002dc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dc8:	f023 0301 	bic.w	r3, r3, #1
 8002dcc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	3308      	adds	r3, #8
 8002dd6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002dda:	633a      	str	r2, [r7, #48]	; 0x30
 8002ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002de0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002de2:	e841 2300 	strex	r3, r2, [r1]
 8002de6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1e1      	bne.n	8002db2 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2220      	movs	r2, #32
 8002df2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	e853 3f00 	ldrex	r3, [r3]
 8002e0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f023 0310 	bic.w	r3, r3, #16
 8002e16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	461a      	mov	r2, r3
 8002e20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e24:	61fb      	str	r3, [r7, #28]
 8002e26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e28:	69b9      	ldr	r1, [r7, #24]
 8002e2a:	69fa      	ldr	r2, [r7, #28]
 8002e2c:	e841 2300 	strex	r3, r2, [r1]
 8002e30:	617b      	str	r3, [r7, #20]
   return(result);
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1e4      	bne.n	8002e02 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f87e 	bl	8002f40 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002e44:	e063      	b.n	8002f0e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00e      	beq.n	8002e70 <HAL_UART_IRQHandler+0x584>
 8002e52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d008      	beq.n	8002e70 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e66:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 fd43 	bl	80038f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002e6e:	e051      	b.n	8002f14 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d014      	beq.n	8002ea6 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d105      	bne.n	8002e94 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002e88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d008      	beq.n	8002ea6 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d03a      	beq.n	8002f12 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	4798      	blx	r3
    }
    return;
 8002ea4:	e035      	b.n	8002f12 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d009      	beq.n	8002ec6 <HAL_UART_IRQHandler+0x5da>
 8002eb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 fced 	bl	800389e <UART_EndTransmit_IT>
    return;
 8002ec4:	e026      	b.n	8002f14 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d009      	beq.n	8002ee6 <HAL_UART_IRQHandler+0x5fa>
 8002ed2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ed6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 fd1a 	bl	8003918 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002ee4:	e016      	b.n	8002f14 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d010      	beq.n	8002f14 <HAL_UART_IRQHandler+0x628>
 8002ef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	da0c      	bge.n	8002f14 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 fd03 	bl	8003906 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f00:	e008      	b.n	8002f14 <HAL_UART_IRQHandler+0x628>
      return;
 8002f02:	bf00      	nop
 8002f04:	e006      	b.n	8002f14 <HAL_UART_IRQHandler+0x628>
    return;
 8002f06:	bf00      	nop
 8002f08:	e004      	b.n	8002f14 <HAL_UART_IRQHandler+0x628>
      return;
 8002f0a:	bf00      	nop
 8002f0c:	e002      	b.n	8002f14 <HAL_UART_IRQHandler+0x628>
      return;
 8002f0e:	bf00      	nop
 8002f10:	e000      	b.n	8002f14 <HAL_UART_IRQHandler+0x628>
    return;
 8002f12:	bf00      	nop
  }
}
 8002f14:	37e8      	adds	r7, #232	; 0xe8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop

08002f1c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bc80      	pop	{r7}
 8002f2c:	4770      	bx	lr

08002f2e <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr

08002f40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bc80      	pop	{r7}
 8002f54:	4770      	bx	lr
	...

08002f58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f5c:	b08c      	sub	sp, #48	; 0x30
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f62:	2300      	movs	r3, #0
 8002f64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	431a      	orrs	r2, r3
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	431a      	orrs	r2, r3
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	4b94      	ldr	r3, [pc, #592]	; (80031d8 <UART_SetConfig+0x280>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	6812      	ldr	r2, [r2, #0]
 8002f8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f90:	430b      	orrs	r3, r1
 8002f92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	68da      	ldr	r2, [r3, #12]
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a89      	ldr	r2, [pc, #548]	; (80031dc <UART_SetConfig+0x284>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d004      	beq.n	8002fc4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002fce:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	6812      	ldr	r2, [r2, #0]
 8002fd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe2:	f023 010f 	bic.w	r1, r3, #15
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a7a      	ldr	r2, [pc, #488]	; (80031e0 <UART_SetConfig+0x288>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d127      	bne.n	800304c <UART_SetConfig+0xf4>
 8002ffc:	2003      	movs	r0, #3
 8002ffe:	f7ff fb6d 	bl	80026dc <LL_RCC_GetUSARTClockSource>
 8003002:	4603      	mov	r3, r0
 8003004:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8003008:	2b03      	cmp	r3, #3
 800300a:	d81b      	bhi.n	8003044 <UART_SetConfig+0xec>
 800300c:	a201      	add	r2, pc, #4	; (adr r2, 8003014 <UART_SetConfig+0xbc>)
 800300e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003012:	bf00      	nop
 8003014:	08003025 	.word	0x08003025
 8003018:	08003035 	.word	0x08003035
 800301c:	0800302d 	.word	0x0800302d
 8003020:	0800303d 	.word	0x0800303d
 8003024:	2301      	movs	r3, #1
 8003026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800302a:	e080      	b.n	800312e <UART_SetConfig+0x1d6>
 800302c:	2302      	movs	r3, #2
 800302e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003032:	e07c      	b.n	800312e <UART_SetConfig+0x1d6>
 8003034:	2304      	movs	r3, #4
 8003036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800303a:	e078      	b.n	800312e <UART_SetConfig+0x1d6>
 800303c:	2308      	movs	r3, #8
 800303e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003042:	e074      	b.n	800312e <UART_SetConfig+0x1d6>
 8003044:	2310      	movs	r3, #16
 8003046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800304a:	e070      	b.n	800312e <UART_SetConfig+0x1d6>
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a64      	ldr	r2, [pc, #400]	; (80031e4 <UART_SetConfig+0x28c>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d138      	bne.n	80030c8 <UART_SetConfig+0x170>
 8003056:	200c      	movs	r0, #12
 8003058:	f7ff fb40 	bl	80026dc <LL_RCC_GetUSARTClockSource>
 800305c:	4603      	mov	r3, r0
 800305e:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8003062:	2b0c      	cmp	r3, #12
 8003064:	d82c      	bhi.n	80030c0 <UART_SetConfig+0x168>
 8003066:	a201      	add	r2, pc, #4	; (adr r2, 800306c <UART_SetConfig+0x114>)
 8003068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306c:	080030a1 	.word	0x080030a1
 8003070:	080030c1 	.word	0x080030c1
 8003074:	080030c1 	.word	0x080030c1
 8003078:	080030c1 	.word	0x080030c1
 800307c:	080030b1 	.word	0x080030b1
 8003080:	080030c1 	.word	0x080030c1
 8003084:	080030c1 	.word	0x080030c1
 8003088:	080030c1 	.word	0x080030c1
 800308c:	080030a9 	.word	0x080030a9
 8003090:	080030c1 	.word	0x080030c1
 8003094:	080030c1 	.word	0x080030c1
 8003098:	080030c1 	.word	0x080030c1
 800309c:	080030b9 	.word	0x080030b9
 80030a0:	2300      	movs	r3, #0
 80030a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030a6:	e042      	b.n	800312e <UART_SetConfig+0x1d6>
 80030a8:	2302      	movs	r3, #2
 80030aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030ae:	e03e      	b.n	800312e <UART_SetConfig+0x1d6>
 80030b0:	2304      	movs	r3, #4
 80030b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030b6:	e03a      	b.n	800312e <UART_SetConfig+0x1d6>
 80030b8:	2308      	movs	r3, #8
 80030ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030be:	e036      	b.n	800312e <UART_SetConfig+0x1d6>
 80030c0:	2310      	movs	r3, #16
 80030c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030c6:	e032      	b.n	800312e <UART_SetConfig+0x1d6>
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a43      	ldr	r2, [pc, #268]	; (80031dc <UART_SetConfig+0x284>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d12a      	bne.n	8003128 <UART_SetConfig+0x1d0>
 80030d2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80030d6:	f7ff fb13 	bl	8002700 <LL_RCC_GetLPUARTClockSource>
 80030da:	4603      	mov	r3, r0
 80030dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030e0:	d01a      	beq.n	8003118 <UART_SetConfig+0x1c0>
 80030e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030e6:	d81b      	bhi.n	8003120 <UART_SetConfig+0x1c8>
 80030e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030ec:	d00c      	beq.n	8003108 <UART_SetConfig+0x1b0>
 80030ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030f2:	d815      	bhi.n	8003120 <UART_SetConfig+0x1c8>
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d003      	beq.n	8003100 <UART_SetConfig+0x1a8>
 80030f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030fc:	d008      	beq.n	8003110 <UART_SetConfig+0x1b8>
 80030fe:	e00f      	b.n	8003120 <UART_SetConfig+0x1c8>
 8003100:	2300      	movs	r3, #0
 8003102:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003106:	e012      	b.n	800312e <UART_SetConfig+0x1d6>
 8003108:	2302      	movs	r3, #2
 800310a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800310e:	e00e      	b.n	800312e <UART_SetConfig+0x1d6>
 8003110:	2304      	movs	r3, #4
 8003112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003116:	e00a      	b.n	800312e <UART_SetConfig+0x1d6>
 8003118:	2308      	movs	r3, #8
 800311a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800311e:	e006      	b.n	800312e <UART_SetConfig+0x1d6>
 8003120:	2310      	movs	r3, #16
 8003122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003126:	e002      	b.n	800312e <UART_SetConfig+0x1d6>
 8003128:	2310      	movs	r3, #16
 800312a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a2a      	ldr	r2, [pc, #168]	; (80031dc <UART_SetConfig+0x284>)
 8003134:	4293      	cmp	r3, r2
 8003136:	f040 80a4 	bne.w	8003282 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800313a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800313e:	2b08      	cmp	r3, #8
 8003140:	d823      	bhi.n	800318a <UART_SetConfig+0x232>
 8003142:	a201      	add	r2, pc, #4	; (adr r2, 8003148 <UART_SetConfig+0x1f0>)
 8003144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003148:	0800316d 	.word	0x0800316d
 800314c:	0800318b 	.word	0x0800318b
 8003150:	08003175 	.word	0x08003175
 8003154:	0800318b 	.word	0x0800318b
 8003158:	0800317b 	.word	0x0800317b
 800315c:	0800318b 	.word	0x0800318b
 8003160:	0800318b 	.word	0x0800318b
 8003164:	0800318b 	.word	0x0800318b
 8003168:	08003183 	.word	0x08003183
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800316c:	f7fe ffd2 	bl	8002114 <HAL_RCC_GetPCLK1Freq>
 8003170:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003172:	e010      	b.n	8003196 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003174:	4b1c      	ldr	r3, [pc, #112]	; (80031e8 <UART_SetConfig+0x290>)
 8003176:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003178:	e00d      	b.n	8003196 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800317a:	f7fe ff17 	bl	8001fac <HAL_RCC_GetSysClockFreq>
 800317e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003180:	e009      	b.n	8003196 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003186:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003188:	e005      	b.n	8003196 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800318a:	2300      	movs	r3, #0
 800318c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003194:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 8137 	beq.w	800340c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	4a12      	ldr	r2, [pc, #72]	; (80031ec <UART_SetConfig+0x294>)
 80031a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031a8:	461a      	mov	r2, r3
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	4613      	mov	r3, r2
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	4413      	add	r3, r2
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d305      	bcc.n	80031ce <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d910      	bls.n	80031f0 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80031d4:	e11a      	b.n	800340c <UART_SetConfig+0x4b4>
 80031d6:	bf00      	nop
 80031d8:	cfff69f3 	.word	0xcfff69f3
 80031dc:	40008000 	.word	0x40008000
 80031e0:	40013800 	.word	0x40013800
 80031e4:	40004400 	.word	0x40004400
 80031e8:	00f42400 	.word	0x00f42400
 80031ec:	08003c58 	.word	0x08003c58
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	2200      	movs	r2, #0
 80031f4:	60bb      	str	r3, [r7, #8]
 80031f6:	60fa      	str	r2, [r7, #12]
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fc:	4a8e      	ldr	r2, [pc, #568]	; (8003438 <UART_SetConfig+0x4e0>)
 80031fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003202:	b29b      	uxth	r3, r3
 8003204:	2200      	movs	r2, #0
 8003206:	603b      	str	r3, [r7, #0]
 8003208:	607a      	str	r2, [r7, #4]
 800320a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800320e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003212:	f7fc ffb1 	bl	8000178 <__aeabi_uldivmod>
 8003216:	4602      	mov	r2, r0
 8003218:	460b      	mov	r3, r1
 800321a:	4610      	mov	r0, r2
 800321c:	4619      	mov	r1, r3
 800321e:	f04f 0200 	mov.w	r2, #0
 8003222:	f04f 0300 	mov.w	r3, #0
 8003226:	020b      	lsls	r3, r1, #8
 8003228:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800322c:	0202      	lsls	r2, r0, #8
 800322e:	6979      	ldr	r1, [r7, #20]
 8003230:	6849      	ldr	r1, [r1, #4]
 8003232:	0849      	lsrs	r1, r1, #1
 8003234:	2000      	movs	r0, #0
 8003236:	460c      	mov	r4, r1
 8003238:	4605      	mov	r5, r0
 800323a:	eb12 0804 	adds.w	r8, r2, r4
 800323e:	eb43 0905 	adc.w	r9, r3, r5
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	469a      	mov	sl, r3
 800324a:	4693      	mov	fp, r2
 800324c:	4652      	mov	r2, sl
 800324e:	465b      	mov	r3, fp
 8003250:	4640      	mov	r0, r8
 8003252:	4649      	mov	r1, r9
 8003254:	f7fc ff90 	bl	8000178 <__aeabi_uldivmod>
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	4613      	mov	r3, r2
 800325e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003260:	6a3b      	ldr	r3, [r7, #32]
 8003262:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003266:	d308      	bcc.n	800327a <UART_SetConfig+0x322>
 8003268:	6a3b      	ldr	r3, [r7, #32]
 800326a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800326e:	d204      	bcs.n	800327a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6a3a      	ldr	r2, [r7, #32]
 8003276:	60da      	str	r2, [r3, #12]
 8003278:	e0c8      	b.n	800340c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003280:	e0c4      	b.n	800340c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800328a:	d168      	bne.n	800335e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800328c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003290:	2b08      	cmp	r3, #8
 8003292:	d828      	bhi.n	80032e6 <UART_SetConfig+0x38e>
 8003294:	a201      	add	r2, pc, #4	; (adr r2, 800329c <UART_SetConfig+0x344>)
 8003296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329a:	bf00      	nop
 800329c:	080032c1 	.word	0x080032c1
 80032a0:	080032c9 	.word	0x080032c9
 80032a4:	080032d1 	.word	0x080032d1
 80032a8:	080032e7 	.word	0x080032e7
 80032ac:	080032d7 	.word	0x080032d7
 80032b0:	080032e7 	.word	0x080032e7
 80032b4:	080032e7 	.word	0x080032e7
 80032b8:	080032e7 	.word	0x080032e7
 80032bc:	080032df 	.word	0x080032df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032c0:	f7fe ff28 	bl	8002114 <HAL_RCC_GetPCLK1Freq>
 80032c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80032c6:	e014      	b.n	80032f2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032c8:	f7fe ff36 	bl	8002138 <HAL_RCC_GetPCLK2Freq>
 80032cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80032ce:	e010      	b.n	80032f2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032d0:	4b5a      	ldr	r3, [pc, #360]	; (800343c <UART_SetConfig+0x4e4>)
 80032d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80032d4:	e00d      	b.n	80032f2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032d6:	f7fe fe69 	bl	8001fac <HAL_RCC_GetSysClockFreq>
 80032da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80032dc:	e009      	b.n	80032f2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80032e4:	e005      	b.n	80032f2 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80032f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 8089 	beq.w	800340c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fe:	4a4e      	ldr	r2, [pc, #312]	; (8003438 <UART_SetConfig+0x4e0>)
 8003300:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003304:	461a      	mov	r2, r3
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	fbb3 f3f2 	udiv	r3, r3, r2
 800330c:	005a      	lsls	r2, r3, #1
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	085b      	lsrs	r3, r3, #1
 8003314:	441a      	add	r2, r3
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	fbb2 f3f3 	udiv	r3, r2, r3
 800331e:	b29b      	uxth	r3, r3
 8003320:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003322:	6a3b      	ldr	r3, [r7, #32]
 8003324:	2b0f      	cmp	r3, #15
 8003326:	d916      	bls.n	8003356 <UART_SetConfig+0x3fe>
 8003328:	6a3b      	ldr	r3, [r7, #32]
 800332a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800332e:	d212      	bcs.n	8003356 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003330:	6a3b      	ldr	r3, [r7, #32]
 8003332:	b29b      	uxth	r3, r3
 8003334:	f023 030f 	bic.w	r3, r3, #15
 8003338:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800333a:	6a3b      	ldr	r3, [r7, #32]
 800333c:	085b      	lsrs	r3, r3, #1
 800333e:	b29b      	uxth	r3, r3
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	b29a      	uxth	r2, r3
 8003346:	8bfb      	ldrh	r3, [r7, #30]
 8003348:	4313      	orrs	r3, r2
 800334a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	8bfa      	ldrh	r2, [r7, #30]
 8003352:	60da      	str	r2, [r3, #12]
 8003354:	e05a      	b.n	800340c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800335c:	e056      	b.n	800340c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800335e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003362:	2b08      	cmp	r3, #8
 8003364:	d827      	bhi.n	80033b6 <UART_SetConfig+0x45e>
 8003366:	a201      	add	r2, pc, #4	; (adr r2, 800336c <UART_SetConfig+0x414>)
 8003368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336c:	08003391 	.word	0x08003391
 8003370:	08003399 	.word	0x08003399
 8003374:	080033a1 	.word	0x080033a1
 8003378:	080033b7 	.word	0x080033b7
 800337c:	080033a7 	.word	0x080033a7
 8003380:	080033b7 	.word	0x080033b7
 8003384:	080033b7 	.word	0x080033b7
 8003388:	080033b7 	.word	0x080033b7
 800338c:	080033af 	.word	0x080033af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003390:	f7fe fec0 	bl	8002114 <HAL_RCC_GetPCLK1Freq>
 8003394:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003396:	e014      	b.n	80033c2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003398:	f7fe fece 	bl	8002138 <HAL_RCC_GetPCLK2Freq>
 800339c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800339e:	e010      	b.n	80033c2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033a0:	4b26      	ldr	r3, [pc, #152]	; (800343c <UART_SetConfig+0x4e4>)
 80033a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80033a4:	e00d      	b.n	80033c2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033a6:	f7fe fe01 	bl	8001fac <HAL_RCC_GetSysClockFreq>
 80033aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80033ac:	e009      	b.n	80033c2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80033b4:	e005      	b.n	80033c2 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80033b6:	2300      	movs	r3, #0
 80033b8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80033c0:	bf00      	nop
    }

    if (pclk != 0U)
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d021      	beq.n	800340c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	4a1a      	ldr	r2, [pc, #104]	; (8003438 <UART_SetConfig+0x4e0>)
 80033ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033d2:	461a      	mov	r2, r3
 80033d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	085b      	lsrs	r3, r3, #1
 80033e0:	441a      	add	r2, r3
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	2b0f      	cmp	r3, #15
 80033f2:	d908      	bls.n	8003406 <UART_SetConfig+0x4ae>
 80033f4:	6a3b      	ldr	r3, [r7, #32]
 80033f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033fa:	d204      	bcs.n	8003406 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6a3a      	ldr	r2, [r7, #32]
 8003402:	60da      	str	r2, [r3, #12]
 8003404:	e002      	b.n	800340c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	2201      	movs	r2, #1
 8003410:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	2201      	movs	r2, #1
 8003418:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	2200      	movs	r2, #0
 8003420:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	2200      	movs	r2, #0
 8003426:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003428:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800342c:	4618      	mov	r0, r3
 800342e:	3730      	adds	r7, #48	; 0x30
 8003430:	46bd      	mov	sp, r7
 8003432:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003436:	bf00      	nop
 8003438:	08003c58 	.word	0x08003c58
 800343c:	00f42400 	.word	0x00f42400

08003440 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00a      	beq.n	800346a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00a      	beq.n	800348c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003490:	f003 0304 	and.w	r3, r3, #4
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00a      	beq.n	80034ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00a      	beq.n	80034d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d4:	f003 0310 	and.w	r3, r3, #16
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00a      	beq.n	80034f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f6:	f003 0320 	and.w	r3, r3, #32
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00a      	beq.n	8003514 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	430a      	orrs	r2, r1
 8003512:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351c:	2b00      	cmp	r3, #0
 800351e:	d01a      	beq.n	8003556 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800353e:	d10a      	bne.n	8003556 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00a      	beq.n	8003578 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	605a      	str	r2, [r3, #4]
  }
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	bc80      	pop	{r7}
 8003580:	4770      	bx	lr

08003582 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b086      	sub	sp, #24
 8003586:	af02      	add	r7, sp, #8
 8003588:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003592:	f7fd fa11 	bl	80009b8 <HAL_GetTick>
 8003596:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0308 	and.w	r3, r3, #8
 80035a2:	2b08      	cmp	r3, #8
 80035a4:	d10e      	bne.n	80035c4 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035a6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 f82f 	bl	8003618 <UART_WaitOnFlagUntilTimeout>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e025      	b.n	8003610 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d10e      	bne.n	80035f0 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 f819 	bl	8003618 <UART_WaitOnFlagUntilTimeout>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e00f      	b.n	8003610 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2220      	movs	r2, #32
 80035f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2220      	movs	r2, #32
 80035fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3710      	adds	r7, #16
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b09c      	sub	sp, #112	; 0x70
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	603b      	str	r3, [r7, #0]
 8003624:	4613      	mov	r3, r2
 8003626:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003628:	e0a9      	b.n	800377e <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800362a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800362c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003630:	f000 80a5 	beq.w	800377e <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003634:	f7fd f9c0 	bl	80009b8 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003640:	429a      	cmp	r2, r3
 8003642:	d302      	bcc.n	800364a <UART_WaitOnFlagUntilTimeout+0x32>
 8003644:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003646:	2b00      	cmp	r3, #0
 8003648:	d140      	bne.n	80036cc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003650:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003652:	e853 3f00 	ldrex	r3, [r3]
 8003656:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800365a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800365e:	667b      	str	r3, [r7, #100]	; 0x64
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	461a      	mov	r2, r3
 8003666:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003668:	65fb      	str	r3, [r7, #92]	; 0x5c
 800366a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800366c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800366e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003670:	e841 2300 	strex	r3, r2, [r1]
 8003674:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003676:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1e6      	bne.n	800364a <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	3308      	adds	r3, #8
 8003682:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003686:	e853 3f00 	ldrex	r3, [r3]
 800368a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800368c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800368e:	f023 0301 	bic.w	r3, r3, #1
 8003692:	663b      	str	r3, [r7, #96]	; 0x60
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	3308      	adds	r3, #8
 800369a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800369c:	64ba      	str	r2, [r7, #72]	; 0x48
 800369e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80036a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036a4:	e841 2300 	strex	r3, r2, [r1]
 80036a8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80036aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1e5      	bne.n	800367c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2220      	movs	r2, #32
 80036b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2220      	movs	r2, #32
 80036bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e069      	b.n	80037a0 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0304 	and.w	r3, r3, #4
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d051      	beq.n	800377e <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036e8:	d149      	bne.n	800377e <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036f2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036fc:	e853 3f00 	ldrex	r3, [r3]
 8003700:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003704:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003708:	66fb      	str	r3, [r7, #108]	; 0x6c
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	461a      	mov	r2, r3
 8003710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003712:	637b      	str	r3, [r7, #52]	; 0x34
 8003714:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003716:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003718:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800371a:	e841 2300 	strex	r3, r2, [r1]
 800371e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1e6      	bne.n	80036f4 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	3308      	adds	r3, #8
 800372c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	e853 3f00 	ldrex	r3, [r3]
 8003734:	613b      	str	r3, [r7, #16]
   return(result);
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f023 0301 	bic.w	r3, r3, #1
 800373c:	66bb      	str	r3, [r7, #104]	; 0x68
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	3308      	adds	r3, #8
 8003744:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003746:	623a      	str	r2, [r7, #32]
 8003748:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374a:	69f9      	ldr	r1, [r7, #28]
 800374c:	6a3a      	ldr	r2, [r7, #32]
 800374e:	e841 2300 	strex	r3, r2, [r1]
 8003752:	61bb      	str	r3, [r7, #24]
   return(result);
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1e5      	bne.n	8003726 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2220      	movs	r2, #32
 800375e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2220      	movs	r2, #32
 8003766:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2220      	movs	r2, #32
 800376e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e010      	b.n	80037a0 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	69da      	ldr	r2, [r3, #28]
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	4013      	ands	r3, r2
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	429a      	cmp	r2, r3
 800378c:	bf0c      	ite	eq
 800378e:	2301      	moveq	r3, #1
 8003790:	2300      	movne	r3, #0
 8003792:	b2db      	uxtb	r3, r3
 8003794:	461a      	mov	r2, r3
 8003796:	79fb      	ldrb	r3, [r7, #7]
 8003798:	429a      	cmp	r2, r3
 800379a:	f43f af46 	beq.w	800362a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3770      	adds	r7, #112	; 0x70
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b095      	sub	sp, #84	; 0x54
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b8:	e853 3f00 	ldrex	r3, [r3]
 80037bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80037be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	461a      	mov	r2, r3
 80037cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037ce:	643b      	str	r3, [r7, #64]	; 0x40
 80037d0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80037d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037d6:	e841 2300 	strex	r3, r2, [r1]
 80037da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1e6      	bne.n	80037b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	3308      	adds	r3, #8
 80037e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	e853 3f00 	ldrex	r3, [r3]
 80037f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037f8:	f023 0301 	bic.w	r3, r3, #1
 80037fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	3308      	adds	r3, #8
 8003804:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003806:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003808:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800380c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800380e:	e841 2300 	strex	r3, r2, [r1]
 8003812:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1e3      	bne.n	80037e2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800381e:	2b01      	cmp	r3, #1
 8003820:	d118      	bne.n	8003854 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	e853 3f00 	ldrex	r3, [r3]
 800382e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	f023 0310 	bic.w	r3, r3, #16
 8003836:	647b      	str	r3, [r7, #68]	; 0x44
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	461a      	mov	r2, r3
 800383e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003840:	61bb      	str	r3, [r7, #24]
 8003842:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003844:	6979      	ldr	r1, [r7, #20]
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	e841 2300 	strex	r3, r2, [r1]
 800384c:	613b      	str	r3, [r7, #16]
   return(result);
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1e6      	bne.n	8003822 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2220      	movs	r2, #32
 8003858:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	671a      	str	r2, [r3, #112]	; 0x70
}
 8003868:	bf00      	nop
 800386a:	3754      	adds	r7, #84	; 0x54
 800386c:	46bd      	mov	sp, r7
 800386e:	bc80      	pop	{r7}
 8003870:	4770      	bx	lr

08003872 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b084      	sub	sp, #16
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f7ff fb4c 	bl	8002f2e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003896:	bf00      	nop
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b088      	sub	sp, #32
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	e853 3f00 	ldrex	r3, [r3]
 80038b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038ba:	61fb      	str	r3, [r7, #28]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	461a      	mov	r2, r3
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	61bb      	str	r3, [r7, #24]
 80038c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c8:	6979      	ldr	r1, [r7, #20]
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	e841 2300 	strex	r3, r2, [r1]
 80038d0:	613b      	str	r3, [r7, #16]
   return(result);
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1e6      	bne.n	80038a6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2220      	movs	r2, #32
 80038dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7ff fb18 	bl	8002f1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038ec:	bf00      	nop
 80038ee:	3720      	adds	r7, #32
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	bc80      	pop	{r7}
 8003904:	4770      	bx	lr

08003906 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003906:	b480      	push	{r7}
 8003908:	b083      	sub	sp, #12
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800390e:	bf00      	nop
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	bc80      	pop	{r7}
 8003916:	4770      	bx	lr

08003918 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr

0800392a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800392a:	b480      	push	{r7}
 800392c:	b085      	sub	sp, #20
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003938:	2b01      	cmp	r3, #1
 800393a:	d101      	bne.n	8003940 <HAL_UARTEx_DisableFifoMode+0x16>
 800393c:	2302      	movs	r3, #2
 800393e:	e027      	b.n	8003990 <HAL_UARTEx_DisableFifoMode+0x66>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2224      	movs	r2, #36	; 0x24
 800394c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 0201 	bic.w	r2, r2, #1
 8003966:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800396e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2220      	movs	r2, #32
 8003982:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	bc80      	pop	{r7}
 8003998:	4770      	bx	lr

0800399a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b084      	sub	sp, #16
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
 80039a2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d101      	bne.n	80039b2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80039ae:	2302      	movs	r3, #2
 80039b0:	e02d      	b.n	8003a0e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2224      	movs	r2, #36	; 0x24
 80039be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 0201 	bic.w	r2, r2, #1
 80039d8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f850 	bl	8003a94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2220      	movs	r2, #32
 8003a00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b084      	sub	sp, #16
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
 8003a1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d101      	bne.n	8003a2e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	e02d      	b.n	8003a8a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2224      	movs	r2, #36	; 0x24
 8003a3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0201 	bic.w	r2, r2, #1
 8003a54:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f812 	bl	8003a94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
	...

08003a94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d108      	bne.n	8003ab6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003ab4:	e031      	b.n	8003b1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003ab6:	2308      	movs	r3, #8
 8003ab8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003aba:	2308      	movs	r3, #8
 8003abc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	0e5b      	lsrs	r3, r3, #25
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	0f5b      	lsrs	r3, r3, #29
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	f003 0307 	and.w	r3, r3, #7
 8003adc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003ade:	7bbb      	ldrb	r3, [r7, #14]
 8003ae0:	7b3a      	ldrb	r2, [r7, #12]
 8003ae2:	4910      	ldr	r1, [pc, #64]	; (8003b24 <UARTEx_SetNbDataToProcess+0x90>)
 8003ae4:	5c8a      	ldrb	r2, [r1, r2]
 8003ae6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003aea:	7b3a      	ldrb	r2, [r7, #12]
 8003aec:	490e      	ldr	r1, [pc, #56]	; (8003b28 <UARTEx_SetNbDataToProcess+0x94>)
 8003aee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003af0:	fb93 f3f2 	sdiv	r3, r3, r2
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003afc:	7bfb      	ldrb	r3, [r7, #15]
 8003afe:	7b7a      	ldrb	r2, [r7, #13]
 8003b00:	4908      	ldr	r1, [pc, #32]	; (8003b24 <UARTEx_SetNbDataToProcess+0x90>)
 8003b02:	5c8a      	ldrb	r2, [r1, r2]
 8003b04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003b08:	7b7a      	ldrb	r2, [r7, #13]
 8003b0a:	4907      	ldr	r1, [pc, #28]	; (8003b28 <UARTEx_SetNbDataToProcess+0x94>)
 8003b0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003b1a:	bf00      	nop
 8003b1c:	3714      	adds	r7, #20
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bc80      	pop	{r7}
 8003b22:	4770      	bx	lr
 8003b24:	08003c70 	.word	0x08003c70
 8003b28:	08003c78 	.word	0x08003c78

08003b2c <__libc_init_array>:
 8003b2c:	b570      	push	{r4, r5, r6, lr}
 8003b2e:	4d0d      	ldr	r5, [pc, #52]	; (8003b64 <__libc_init_array+0x38>)
 8003b30:	4c0d      	ldr	r4, [pc, #52]	; (8003b68 <__libc_init_array+0x3c>)
 8003b32:	1b64      	subs	r4, r4, r5
 8003b34:	10a4      	asrs	r4, r4, #2
 8003b36:	2600      	movs	r6, #0
 8003b38:	42a6      	cmp	r6, r4
 8003b3a:	d109      	bne.n	8003b50 <__libc_init_array+0x24>
 8003b3c:	4d0b      	ldr	r5, [pc, #44]	; (8003b6c <__libc_init_array+0x40>)
 8003b3e:	4c0c      	ldr	r4, [pc, #48]	; (8003b70 <__libc_init_array+0x44>)
 8003b40:	f000 f820 	bl	8003b84 <_init>
 8003b44:	1b64      	subs	r4, r4, r5
 8003b46:	10a4      	asrs	r4, r4, #2
 8003b48:	2600      	movs	r6, #0
 8003b4a:	42a6      	cmp	r6, r4
 8003b4c:	d105      	bne.n	8003b5a <__libc_init_array+0x2e>
 8003b4e:	bd70      	pop	{r4, r5, r6, pc}
 8003b50:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b54:	4798      	blx	r3
 8003b56:	3601      	adds	r6, #1
 8003b58:	e7ee      	b.n	8003b38 <__libc_init_array+0xc>
 8003b5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b5e:	4798      	blx	r3
 8003b60:	3601      	adds	r6, #1
 8003b62:	e7f2      	b.n	8003b4a <__libc_init_array+0x1e>
 8003b64:	08003c88 	.word	0x08003c88
 8003b68:	08003c88 	.word	0x08003c88
 8003b6c:	08003c88 	.word	0x08003c88
 8003b70:	08003c8c 	.word	0x08003c8c

08003b74 <memset>:
 8003b74:	4402      	add	r2, r0
 8003b76:	4603      	mov	r3, r0
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d100      	bne.n	8003b7e <memset+0xa>
 8003b7c:	4770      	bx	lr
 8003b7e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b82:	e7f9      	b.n	8003b78 <memset+0x4>

08003b84 <_init>:
 8003b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b86:	bf00      	nop
 8003b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b8a:	bc08      	pop	{r3}
 8003b8c:	469e      	mov	lr, r3
 8003b8e:	4770      	bx	lr

08003b90 <_fini>:
 8003b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b92:	bf00      	nop
 8003b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b96:	bc08      	pop	{r3}
 8003b98:	469e      	mov	lr, r3
 8003b9a:	4770      	bx	lr
