
nucleo_subghz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074fc  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  08007634  08007634  00017634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078a0  080078a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080078a0  080078a0  000178a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078a8  080078a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078a8  080078a8  000178a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078ac  080078ac  000178ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080078b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  2000000c  080078bc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  080078bc  00020290  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000192c9  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039c9  00000000  00000000  000392ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001748  00000000  00000000  0003ccc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015d8  00000000  00000000  0003e410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e9ab  00000000  00000000  0003f9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019250  00000000  00000000  0005e393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b758d  00000000  00000000  000775e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012eb70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e84  00000000  00000000  0012ebc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000000c 	.word	0x2000000c
 8000154:	00000000 	.word	0x00000000
 8000158:	0800761c 	.word	0x0800761c

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000010 	.word	0x20000010
 8000174:	0800761c 	.word	0x0800761c

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000188:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800018c:	f000 b974 	b.w	8000478 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9e08      	ldr	r6, [sp, #32]
 80001ae:	460d      	mov	r5, r1
 80001b0:	4604      	mov	r4, r0
 80001b2:	4688      	mov	r8, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14d      	bne.n	8000254 <__udivmoddi4+0xac>
 80001b8:	428a      	cmp	r2, r1
 80001ba:	4694      	mov	ip, r2
 80001bc:	d968      	bls.n	8000290 <__udivmoddi4+0xe8>
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	b152      	cbz	r2, 80001da <__udivmoddi4+0x32>
 80001c4:	fa01 f302 	lsl.w	r3, r1, r2
 80001c8:	f1c2 0120 	rsb	r1, r2, #32
 80001cc:	fa20 f101 	lsr.w	r1, r0, r1
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	ea41 0803 	orr.w	r8, r1, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80001de:	0c21      	lsrs	r1, r4, #16
 80001e0:	fbb8 fef5 	udiv	lr, r8, r5
 80001e4:	fa1f f78c 	uxth.w	r7, ip
 80001e8:	fb05 831e 	mls	r3, r5, lr, r8
 80001ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f0:	fb0e f107 	mul.w	r1, lr, r7
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d90b      	bls.n	8000210 <__udivmoddi4+0x68>
 80001f8:	eb1c 0303 	adds.w	r3, ip, r3
 80001fc:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 8000200:	f080 811e 	bcs.w	8000440 <__udivmoddi4+0x298>
 8000204:	4299      	cmp	r1, r3
 8000206:	f240 811b 	bls.w	8000440 <__udivmoddi4+0x298>
 800020a:	f1ae 0e02 	sub.w	lr, lr, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a5b      	subs	r3, r3, r1
 8000212:	b2a4      	uxth	r4, r4
 8000214:	fbb3 f0f5 	udiv	r0, r3, r5
 8000218:	fb05 3310 	mls	r3, r5, r0, r3
 800021c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000220:	fb00 f707 	mul.w	r7, r0, r7
 8000224:	42a7      	cmp	r7, r4
 8000226:	d90a      	bls.n	800023e <__udivmoddi4+0x96>
 8000228:	eb1c 0404 	adds.w	r4, ip, r4
 800022c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000230:	f080 8108 	bcs.w	8000444 <__udivmoddi4+0x29c>
 8000234:	42a7      	cmp	r7, r4
 8000236:	f240 8105 	bls.w	8000444 <__udivmoddi4+0x29c>
 800023a:	4464      	add	r4, ip
 800023c:	3802      	subs	r0, #2
 800023e:	1be4      	subs	r4, r4, r7
 8000240:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa8>
 8000248:	40d4      	lsrs	r4, r2
 800024a:	2300      	movs	r3, #0
 800024c:	e9c6 4300 	strd	r4, r3, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	428b      	cmp	r3, r1
 8000256:	d908      	bls.n	800026a <__udivmoddi4+0xc2>
 8000258:	2e00      	cmp	r6, #0
 800025a:	f000 80ee 	beq.w	800043a <__udivmoddi4+0x292>
 800025e:	2100      	movs	r1, #0
 8000260:	e9c6 0500 	strd	r0, r5, [r6]
 8000264:	4608      	mov	r0, r1
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f183 	clz	r1, r3
 800026e:	2900      	cmp	r1, #0
 8000270:	d14a      	bne.n	8000308 <__udivmoddi4+0x160>
 8000272:	42ab      	cmp	r3, r5
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd4>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80f9 	bhi.w	800046e <__udivmoddi4+0x2c6>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb65 0303 	sbc.w	r3, r5, r3
 8000282:	2001      	movs	r0, #1
 8000284:	4698      	mov	r8, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e2      	beq.n	8000250 <__udivmoddi4+0xa8>
 800028a:	e9c6 4800 	strd	r4, r8, [r6]
 800028e:	e7df      	b.n	8000250 <__udivmoddi4+0xa8>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xec>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 8091 	bne.w	80003c0 <__udivmoddi4+0x218>
 800029e:	eba1 050c 	sub.w	r5, r1, ip
 80002a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a6:	fa1f fe8c 	uxth.w	lr, ip
 80002aa:	2101      	movs	r1, #1
 80002ac:	fbb5 f3f7 	udiv	r3, r5, r7
 80002b0:	fb07 5013 	mls	r0, r7, r3, r5
 80002b4:	0c25      	lsrs	r5, r4, #16
 80002b6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ba:	fb0e f003 	mul.w	r0, lr, r3
 80002be:	42a8      	cmp	r0, r5
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x12c>
 80002c2:	eb1c 0505 	adds.w	r5, ip, r5
 80002c6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x12a>
 80002cc:	42a8      	cmp	r0, r5
 80002ce:	f200 80cb 	bhi.w	8000468 <__udivmoddi4+0x2c0>
 80002d2:	4643      	mov	r3, r8
 80002d4:	1a2d      	subs	r5, r5, r0
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0f7 	udiv	r0, r5, r7
 80002dc:	fb07 5510 	mls	r5, r7, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb0e fe00 	mul.w	lr, lr, r0
 80002e8:	45a6      	cmp	lr, r4
 80002ea:	d908      	bls.n	80002fe <__udivmoddi4+0x156>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80002f4:	d202      	bcs.n	80002fc <__udivmoddi4+0x154>
 80002f6:	45a6      	cmp	lr, r4
 80002f8:	f200 80bb 	bhi.w	8000472 <__udivmoddi4+0x2ca>
 80002fc:	4628      	mov	r0, r5
 80002fe:	eba4 040e 	sub.w	r4, r4, lr
 8000302:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000306:	e79e      	b.n	8000246 <__udivmoddi4+0x9e>
 8000308:	f1c1 0720 	rsb	r7, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000312:	ea4c 0c03 	orr.w	ip, ip, r3
 8000316:	fa20 f407 	lsr.w	r4, r0, r7
 800031a:	fa05 f301 	lsl.w	r3, r5, r1
 800031e:	431c      	orrs	r4, r3
 8000320:	40fd      	lsrs	r5, r7
 8000322:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000326:	fa00 f301 	lsl.w	r3, r0, r1
 800032a:	fbb5 f8f9 	udiv	r8, r5, r9
 800032e:	0c20      	lsrs	r0, r4, #16
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	fb09 5518 	mls	r5, r9, r8, r5
 8000338:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800033c:	fb08 f00e 	mul.w	r0, r8, lr
 8000340:	42a8      	cmp	r0, r5
 8000342:	fa02 f201 	lsl.w	r2, r2, r1
 8000346:	d90b      	bls.n	8000360 <__udivmoddi4+0x1b8>
 8000348:	eb1c 0505 	adds.w	r5, ip, r5
 800034c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000350:	f080 8088 	bcs.w	8000464 <__udivmoddi4+0x2bc>
 8000354:	42a8      	cmp	r0, r5
 8000356:	f240 8085 	bls.w	8000464 <__udivmoddi4+0x2bc>
 800035a:	f1a8 0802 	sub.w	r8, r8, #2
 800035e:	4465      	add	r5, ip
 8000360:	1a2d      	subs	r5, r5, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb5 f0f9 	udiv	r0, r5, r9
 8000368:	fb09 5510 	mls	r5, r9, r0, r5
 800036c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000370:	fb00 fe0e 	mul.w	lr, r0, lr
 8000374:	45ae      	cmp	lr, r5
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1e2>
 8000378:	eb1c 0505 	adds.w	r5, ip, r5
 800037c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000380:	d26c      	bcs.n	800045c <__udivmoddi4+0x2b4>
 8000382:	45ae      	cmp	lr, r5
 8000384:	d96a      	bls.n	800045c <__udivmoddi4+0x2b4>
 8000386:	3802      	subs	r0, #2
 8000388:	4465      	add	r5, ip
 800038a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800038e:	fba0 9402 	umull	r9, r4, r0, r2
 8000392:	eba5 050e 	sub.w	r5, r5, lr
 8000396:	42a5      	cmp	r5, r4
 8000398:	46c8      	mov	r8, r9
 800039a:	46a6      	mov	lr, r4
 800039c:	d356      	bcc.n	800044c <__udivmoddi4+0x2a4>
 800039e:	d053      	beq.n	8000448 <__udivmoddi4+0x2a0>
 80003a0:	b15e      	cbz	r6, 80003ba <__udivmoddi4+0x212>
 80003a2:	ebb3 0208 	subs.w	r2, r3, r8
 80003a6:	eb65 050e 	sbc.w	r5, r5, lr
 80003aa:	fa05 f707 	lsl.w	r7, r5, r7
 80003ae:	fa22 f301 	lsr.w	r3, r2, r1
 80003b2:	40cd      	lsrs	r5, r1
 80003b4:	431f      	orrs	r7, r3
 80003b6:	e9c6 7500 	strd	r7, r5, [r6]
 80003ba:	2100      	movs	r1, #0
 80003bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c0:	f1c2 0320 	rsb	r3, r2, #32
 80003c4:	fa20 f103 	lsr.w	r1, r0, r3
 80003c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003cc:	fa25 f303 	lsr.w	r3, r5, r3
 80003d0:	4095      	lsls	r5, r2
 80003d2:	430d      	orrs	r5, r1
 80003d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3011 	mls	r0, r7, r1, r3
 80003e4:	0c2b      	lsrs	r3, r5, #16
 80003e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80003ea:	fb01 f00e 	mul.w	r0, r1, lr
 80003ee:	4298      	cmp	r0, r3
 80003f0:	fa04 f402 	lsl.w	r4, r4, r2
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x260>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80003fe:	d22f      	bcs.n	8000460 <__udivmoddi4+0x2b8>
 8000400:	4298      	cmp	r0, r3
 8000402:	d92d      	bls.n	8000460 <__udivmoddi4+0x2b8>
 8000404:	3902      	subs	r1, #2
 8000406:	4463      	add	r3, ip
 8000408:	1a1b      	subs	r3, r3, r0
 800040a:	b2ad      	uxth	r5, r5
 800040c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000410:	fb07 3310 	mls	r3, r7, r0, r3
 8000414:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000418:	fb00 f30e 	mul.w	r3, r0, lr
 800041c:	42ab      	cmp	r3, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x28a>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000428:	d216      	bcs.n	8000458 <__udivmoddi4+0x2b0>
 800042a:	42ab      	cmp	r3, r5
 800042c:	d914      	bls.n	8000458 <__udivmoddi4+0x2b0>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	1aed      	subs	r5, r5, r3
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	e738      	b.n	80002ac <__udivmoddi4+0x104>
 800043a:	4631      	mov	r1, r6
 800043c:	4630      	mov	r0, r6
 800043e:	e707      	b.n	8000250 <__udivmoddi4+0xa8>
 8000440:	4686      	mov	lr, r0
 8000442:	e6e5      	b.n	8000210 <__udivmoddi4+0x68>
 8000444:	4618      	mov	r0, r3
 8000446:	e6fa      	b.n	800023e <__udivmoddi4+0x96>
 8000448:	454b      	cmp	r3, r9
 800044a:	d2a9      	bcs.n	80003a0 <__udivmoddi4+0x1f8>
 800044c:	ebb9 0802 	subs.w	r8, r9, r2
 8000450:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000454:	3801      	subs	r0, #1
 8000456:	e7a3      	b.n	80003a0 <__udivmoddi4+0x1f8>
 8000458:	4640      	mov	r0, r8
 800045a:	e7ea      	b.n	8000432 <__udivmoddi4+0x28a>
 800045c:	4620      	mov	r0, r4
 800045e:	e794      	b.n	800038a <__udivmoddi4+0x1e2>
 8000460:	4641      	mov	r1, r8
 8000462:	e7d1      	b.n	8000408 <__udivmoddi4+0x260>
 8000464:	46d0      	mov	r8, sl
 8000466:	e77b      	b.n	8000360 <__udivmoddi4+0x1b8>
 8000468:	3b02      	subs	r3, #2
 800046a:	4465      	add	r5, ip
 800046c:	e732      	b.n	80002d4 <__udivmoddi4+0x12c>
 800046e:	4608      	mov	r0, r1
 8000470:	e709      	b.n	8000286 <__udivmoddi4+0xde>
 8000472:	4464      	add	r4, ip
 8000474:	3802      	subs	r0, #2
 8000476:	e742      	b.n	80002fe <__udivmoddi4+0x156>

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000488:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800048a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4313      	orrs	r3, r2
 8000492:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000498:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4013      	ands	r3, r2
 800049e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004a0:	68fb      	ldr	r3, [r7, #12]
}
 80004a2:	bf00      	nop
 80004a4:	3714      	adds	r7, #20
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr

080004ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b086      	sub	sp, #24
 80004b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	605a      	str	r2, [r3, #4]
 80004ba:	609a      	str	r2, [r3, #8]
 80004bc:	60da      	str	r2, [r3, #12]
 80004be:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c0:	2001      	movs	r0, #1
 80004c2:	f7ff ffdb 	bl	800047c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c6:	2002      	movs	r0, #2
 80004c8:	f7ff ffd8 	bl	800047c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004cc:	2004      	movs	r0, #4
 80004ce:	f7ff ffd5 	bl	800047c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80004d2:	2200      	movs	r2, #0
 80004d4:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 80004d8:	481f      	ldr	r0, [pc, #124]	; (8000558 <MX_GPIO_Init+0xac>)
 80004da:	f000 fdcd 	bl	8001078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 80004de:	2200      	movs	r2, #0
 80004e0:	2138      	movs	r1, #56	; 0x38
 80004e2:	481e      	ldr	r0, [pc, #120]	; (800055c <MX_GPIO_Init+0xb0>)
 80004e4:	f000 fdc8 	bl	8001078 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80004e8:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 80004ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ee:	2301      	movs	r3, #1
 80004f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f2:	2300      	movs	r3, #0
 80004f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004f6:	2302      	movs	r3, #2
 80004f8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	4619      	mov	r1, r3
 80004fe:	4816      	ldr	r0, [pc, #88]	; (8000558 <MX_GPIO_Init+0xac>)
 8000500:	f000 fc5a 	bl	8000db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 8000504:	2338      	movs	r3, #56	; 0x38
 8000506:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000508:	2301      	movs	r3, #1
 800050a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050c:	2300      	movs	r3, #0
 800050e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000510:	2303      	movs	r3, #3
 8000512:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000514:	1d3b      	adds	r3, r7, #4
 8000516:	4619      	mov	r1, r3
 8000518:	4810      	ldr	r0, [pc, #64]	; (800055c <MX_GPIO_Init+0xb0>)
 800051a:	f000 fc4d 	bl	8000db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 800051e:	2303      	movs	r3, #3
 8000520:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000522:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000526:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000528:	2301      	movs	r3, #1
 800052a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	4619      	mov	r1, r3
 8000530:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000534:	f000 fc40 	bl	8000db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B3_Pin;
 8000538:	2340      	movs	r3, #64	; 0x40
 800053a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800053c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000540:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000542:	2301      	movs	r3, #1
 8000544:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	4619      	mov	r1, r3
 800054a:	4804      	ldr	r0, [pc, #16]	; (800055c <MX_GPIO_Init+0xb0>)
 800054c:	f000 fc34 	bl	8000db8 <HAL_GPIO_Init>

}
 8000550:	bf00      	nop
 8000552:	3718      	adds	r7, #24
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	48000400 	.word	0x48000400
 800055c:	48000800 	.word	0x48000800

08000560 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800056c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000570:	f023 0218 	bic.w	r2, r3, #24
 8000574:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4313      	orrs	r3, r2
 800057c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000580:	bf00      	nop
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr
	...

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000592:	f000 fa99 	bl	8000ac8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000596:	f000 f835 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059a:	f7ff ff87 	bl	80004ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800059e:	f000 f9d7 	bl	8000950 <MX_USART2_UART_Init>
  MX_SUBGHZ_Init();
 80005a2:	f000 f8db 	bl	800075c <MX_SUBGHZ_Init>
  MX_SubGHz_Phy_Init();
 80005a6:	f006 fd26 	bl	8006ff6 <MX_SubGHz_Phy_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_SubGHz_Phy_Process();
 80005aa:	f006 fd2c 	bl	8007006 <MX_SubGHz_Phy_Process>
    radio_state =SUBGRF_GetStatus();
 80005ae:	f006 f8f0 	bl	8006792 <SUBGRF_GetStatus>
 80005b2:	4603      	mov	r3, r0
 80005b4:	713b      	strb	r3, [r7, #4]
  //  Radio.SetTxContinuousWave(430000000, 17, 1);
    SUBGRF_SetRfFrequency(430000000);
 80005b6:	4811      	ldr	r0, [pc, #68]	; (80005fc <main+0x70>)
 80005b8:	f005 fe2a 	bl	8006210 <SUBGRF_SetRfFrequency>
    uint8_t antswitchpow = SUBGRF_SetRfTxPower(17);
 80005bc:	2011      	movs	r0, #17
 80005be:	f006 fb13 	bl	8006be8 <SUBGRF_SetRfTxPower>
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX);
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	2101      	movs	r1, #1
 80005ca:	4618      	mov	r0, r3
 80005cc:	f006 fae4 	bl	8006b98 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave();
 80005d0:	f005 fcac 	bl	8005f2c <SUBGRF_SetTxContinuousWave>
    radio_state = SUBGRF_GetStatus();
 80005d4:	f006 f8dd 	bl	8006792 <SUBGRF_GetStatus>
 80005d8:	4603      	mov	r3, r0
 80005da:	713b      	strb	r3, [r7, #4]
    radio_errors = SUBGRF_GetDeviceErrors();
 80005dc:	f006 f990 	bl	8006900 <SUBGRF_GetDeviceErrors>
 80005e0:	4603      	mov	r3, r0
 80005e2:	803b      	strh	r3, [r7, #0]
    // leave TX:
    Radio.Standby();
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <main+0x74>)
 80005e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e8:	4798      	blx	r3
    radio_state = SUBGRF_GetStatus();
 80005ea:	f006 f8d2 	bl	8006792 <SUBGRF_GetStatus>
 80005ee:	4603      	mov	r3, r0
 80005f0:	713b      	strb	r3, [r7, #4]
    radio_errors = SUBGRF_GetDeviceErrors();
 80005f2:	f006 f985 	bl	8006900 <SUBGRF_GetDeviceErrors>
 80005f6:	4603      	mov	r3, r0
 80005f8:	803b      	strh	r3, [r7, #0]
  {
 80005fa:	e7d6      	b.n	80005aa <main+0x1e>
 80005fc:	19a14780 	.word	0x19a14780
 8000600:	08007768 	.word	0x08007768

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b09a      	sub	sp, #104	; 0x68
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0320 	add.w	r3, r7, #32
 800060e:	2248      	movs	r2, #72	; 0x48
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f006 fffa 	bl	800760c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
 8000624:	611a      	str	r2, [r3, #16]
 8000626:	615a      	str	r2, [r3, #20]
 8000628:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800062a:	f000 fd3d 	bl	80010a8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800062e:	2000      	movs	r0, #0
 8000630:	f7ff ff96 	bl	8000560 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000634:	4b1e      	ldr	r3, [pc, #120]	; (80006b0 <SystemClock_Config+0xac>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800063c:	4a1c      	ldr	r2, [pc, #112]	; (80006b0 <SystemClock_Config+0xac>)
 800063e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <SystemClock_Config+0xac>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800064c:	603b      	str	r3, [r7, #0]
 800064e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000650:	2324      	movs	r3, #36	; 0x24
 8000652:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000654:	2381      	movs	r3, #129	; 0x81
 8000656:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000658:	2301      	movs	r3, #1
 800065a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800065c:	2300      	movs	r3, #0
 800065e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000660:	23a0      	movs	r3, #160	; 0xa0
 8000662:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000664:	2300      	movs	r3, #0
 8000666:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 0320 	add.w	r3, r7, #32
 800066c:	4618      	mov	r0, r3
 800066e:	f000 ffed 	bl	800164c <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000678:	f000 f81c 	bl	80006b4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800067c:	234f      	movs	r3, #79	; 0x4f
 800067e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	2101      	movs	r1, #1
 8000698:	4618      	mov	r0, r3
 800069a:	f001 fb73 	bl	8001d84 <HAL_RCC_ClockConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80006a4:	f000 f806 	bl	80006b4 <Error_Handler>
  }
}
 80006a8:	bf00      	nop
 80006aa:	3768      	adds	r7, #104	; 0x68
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	58000400 	.word	0x58000400

080006b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b8:	b672      	cpsid	i
}
 80006ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006bc:	e7fe      	b.n	80006bc <Error_Handler+0x8>

080006be <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr

080006ca <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006ce:	e7fe      	b.n	80006ce <NMI_Handler+0x4>

080006d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <HardFault_Handler+0x4>

080006d6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006da:	e7fe      	b.n	80006da <MemManage_Handler+0x4>

080006dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <BusFault_Handler+0x4>

080006e2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <UsageFault_Handler+0x4>

080006e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ec:	bf00      	nop
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr

080006f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr

08000700 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr

0800070c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000710:	f000 fa34 	bl	8000b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}

08000718 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 800071c:	4802      	ldr	r0, [pc, #8]	; (8000728 <SUBGHZ_Radio_IRQHandler+0x10>)
 800071e:	f002 fb21 	bl	8002d64 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000028 	.word	0x20000028

0800072c <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000734:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000738:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800073a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4313      	orrs	r3, r2
 8000742:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000748:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4013      	ands	r3, r2
 800074e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000750:	68fb      	ldr	r3, [r7, #12]
}
 8000752:	bf00      	nop
 8000754:	3714      	adds	r7, #20
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr

0800075c <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_SUBGHZ_Init+0x20>)
 8000762:	2208      	movs	r2, #8
 8000764:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_SUBGHZ_Init+0x20>)
 8000768:	f002 f880 	bl	800286c <HAL_SUBGHZ_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8000772:	f7ff ff9f 	bl	80006b4 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000028 	.word	0x20000028

08000780 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000788:	2001      	movs	r0, #1
 800078a:	f7ff ffcf 	bl	800072c <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	2100      	movs	r1, #0
 8000792:	2032      	movs	r0, #50	; 0x32
 8000794:	f000 fadb 	bl	8000d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000798:	2032      	movs	r0, #50	; 0x32
 800079a:	f000 faf2 	bl	8000d82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr
	...

080007b4 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <HAL_GetTick+0x24>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d002      	beq.n	80007cc <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 80007c6:	f000 f85c 	bl	8000882 <TIMER_IF_GetTimerValue>
 80007ca:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 80007cc:	687b      	ldr	r3, [r7, #4]
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000034 	.word	0x20000034

080007dc <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 f879 	bl	80008de <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr

08000800 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000806:	2300      	movs	r3, #0
 8000808:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 800080a:	79fb      	ldrb	r3, [r7, #7]
}
 800080c:	4618      	mov	r0, r3
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr

08000816 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8000816:	b480      	push	{r7}
 8000818:	b085      	sub	sp, #20
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800081e:	2300      	movs	r3, #0
 8000820:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 8000822:	7bfb      	ldrb	r3, [r7, #15]
}
 8000824:	4618      	mov	r0, r3
 8000826:	3714      	adds	r7, #20
 8000828:	46bd      	mov	sp, r7
 800082a:	bc80      	pop	{r7}
 800082c:	4770      	bx	lr

0800082e <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 800082e:	b480      	push	{r7}
 8000830:	b083      	sub	sp, #12
 8000832:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000834:	2300      	movs	r3, #0
 8000836:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 8000838:	79fb      	ldrb	r3, [r7, #7]
}
 800083a:	4618      	mov	r0, r3
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr

08000844 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8000848:	4b02      	ldr	r3, [pc, #8]	; (8000854 <TIMER_IF_SetTimerContext+0x10>)
 800084a:	681b      	ldr	r3, [r3, #0]
}
 800084c:	4618      	mov	r0, r3
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr
 8000854:	20000038 	.word	0x20000038

08000858 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 800085c:	4b02      	ldr	r3, [pc, #8]	; (8000868 <TIMER_IF_GetTimerContext+0x10>)
 800085e:	681b      	ldr	r3, [r3, #0]
}
 8000860:	4618      	mov	r0, r3
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr
 8000868:	20000038 	.word	0x20000038

0800086c <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 8000876:	687b      	ldr	r3, [r7, #4]
}
 8000878:	4618      	mov	r0, r3
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr

08000882 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8000882:	b480      	push	{r7}
 8000884:	b083      	sub	sp, #12
 8000886:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 800088c:	687b      	ldr	r3, [r7, #4]
}
 800088e:	4618      	mov	r0, r3
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr

08000898 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 80008a2:	687b      	ldr	r3, [r7, #4]
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bc80      	pop	{r7}
 80008ac:	4770      	bx	lr

080008ae <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 80008ae:	b480      	push	{r7}
 80008b0:	b085      	sub	sp, #20
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 80008ba:	68fb      	ldr	r3, [r7, #12]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3714      	adds	r7, #20
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bc80      	pop	{r7}
 80008c4:	4770      	bx	lr

080008c6 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 80008c6:	b480      	push	{r7}
 80008c8:	b085      	sub	sp, #20
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 80008d2:	68fb      	ldr	r3, [r7, #12]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3714      	adds	r7, #20
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr

080008de <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 80008de:	b480      	push	{r7}
 80008e0:	b083      	sub	sp, #12
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr

080008f0 <LL_AHB2_GRP1_EnableClock>:
{
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80008f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4313      	orrs	r3, r2
 8000906:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800090c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4013      	ands	r3, r2
 8000912:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000914:	68fb      	ldr	r3, [r7, #12]
}
 8000916:	bf00      	nop
 8000918:	3714      	adds	r7, #20
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr

08000920 <LL_APB1_GRP1_EnableClock>:
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800092c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800092e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4313      	orrs	r3, r2
 8000936:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800093c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4013      	ands	r3, r2
 8000942:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000944:	68fb      	ldr	r3, [r7, #12]
}
 8000946:	bf00      	nop
 8000948:	3714      	adds	r7, #20
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr

08000950 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000954:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <MX_USART2_UART_Init+0x90>)
 8000956:	4a23      	ldr	r2, [pc, #140]	; (80009e4 <MX_USART2_UART_Init+0x94>)
 8000958:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800095a:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <MX_USART2_UART_Init+0x90>)
 800095c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000960:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000962:	4b1f      	ldr	r3, [pc, #124]	; (80009e0 <MX_USART2_UART_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000968:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <MX_USART2_UART_Init+0x90>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800096e:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <MX_USART2_UART_Init+0x90>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000974:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <MX_USART2_UART_Init+0x90>)
 8000976:	220c      	movs	r2, #12
 8000978:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097a:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <MX_USART2_UART_Init+0x90>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000980:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_USART2_UART_Init+0x90>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000986:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <MX_USART2_UART_Init+0x90>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_USART2_UART_Init+0x90>)
 800098e:	2200      	movs	r2, #0
 8000990:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000992:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <MX_USART2_UART_Init+0x90>)
 8000994:	2200      	movs	r2, #0
 8000996:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000998:	4811      	ldr	r0, [pc, #68]	; (80009e0 <MX_USART2_UART_Init+0x90>)
 800099a:	f002 fba2 	bl	80030e2 <HAL_UART_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009a4:	f7ff fe86 	bl	80006b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a8:	2100      	movs	r1, #0
 80009aa:	480d      	ldr	r0, [pc, #52]	; (80009e0 <MX_USART2_UART_Init+0x90>)
 80009ac:	f003 f84a 	bl	8003a44 <HAL_UARTEx_SetTxFifoThreshold>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009b6:	f7ff fe7d 	bl	80006b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ba:	2100      	movs	r1, #0
 80009bc:	4808      	ldr	r0, [pc, #32]	; (80009e0 <MX_USART2_UART_Init+0x90>)
 80009be:	f003 f87f 	bl	8003ac0 <HAL_UARTEx_SetRxFifoThreshold>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009c8:	f7ff fe74 	bl	80006b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009cc:	4804      	ldr	r0, [pc, #16]	; (80009e0 <MX_USART2_UART_Init+0x90>)
 80009ce:	f003 f801 	bl	80039d4 <HAL_UARTEx_DisableFifoMode>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80009d8:	f7ff fe6c 	bl	80006b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	2000003c 	.word	0x2000003c
 80009e4:	40004400 	.word	0x40004400

080009e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b096      	sub	sp, #88	; 0x58
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	2238      	movs	r2, #56	; 0x38
 8000a06:	2100      	movs	r1, #0
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f006 fdff 	bl	800760c <memset>
  if(uartHandle->Instance==USART2)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a17      	ldr	r2, [pc, #92]	; (8000a70 <HAL_UART_MspInit+0x88>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d126      	bne.n	8000a66 <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a1c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000a20:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a22:	f107 030c 	add.w	r3, r7, #12
 8000a26:	4618      	mov	r0, r3
 8000a28:	f001 fd6c 	bl	8002504 <HAL_RCCEx_PeriphCLKConfig>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a32:	f7ff fe3f 	bl	80006b4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a36:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000a3a:	f7ff ff71 	bl	8000920 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	2001      	movs	r0, #1
 8000a40:	f7ff ff56 	bl	80008f0 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000a44:	230c      	movs	r3, #12
 8000a46:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a50:	2300      	movs	r3, #0
 8000a52:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a54:	2307      	movs	r3, #7
 8000a56:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a58:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a62:	f000 f9a9 	bl	8000db8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a66:	bf00      	nop
 8000a68:	3758      	adds	r7, #88	; 0x58
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40004400 	.word	0x40004400

08000a74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a74:	480d      	ldr	r0, [pc, #52]	; (8000aac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a76:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a78:	f7ff febc 	bl	80007f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a7c:	480c      	ldr	r0, [pc, #48]	; (8000ab0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a7e:	490d      	ldr	r1, [pc, #52]	; (8000ab4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a80:	4a0d      	ldr	r2, [pc, #52]	; (8000ab8 <LoopForever+0xe>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a84:	e002      	b.n	8000a8c <LoopCopyDataInit>

08000a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8a:	3304      	adds	r3, #4

08000a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a90:	d3f9      	bcc.n	8000a86 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a92:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a94:	4c0a      	ldr	r4, [pc, #40]	; (8000ac0 <LoopForever+0x16>)
  movs r3, #0
 8000a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a98:	e001      	b.n	8000a9e <LoopFillZerobss>

08000a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a9c:	3204      	adds	r2, #4

08000a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa0:	d3fb      	bcc.n	8000a9a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000aa2:	f006 fd8f 	bl	80075c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aa6:	f7ff fd71 	bl	800058c <main>

08000aaa <LoopForever>:

LoopForever:
    b LoopForever
 8000aaa:	e7fe      	b.n	8000aaa <LoopForever>
  ldr   r0, =_estack
 8000aac:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ab8:	080078b0 	.word	0x080078b0
  ldr r2, =_sbss
 8000abc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ac0:	20000290 	.word	0x20000290

08000ac4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ac4:	e7fe      	b.n	8000ac4 <ADC_IRQHandler>
	...

08000ac8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad2:	2003      	movs	r0, #3
 8000ad4:	f000 f930 	bl	8000d38 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000ad8:	f001 fb36 	bl	8002148 <HAL_RCC_GetHCLKFreq>
 8000adc:	4603      	mov	r3, r0
 8000ade:	4a09      	ldr	r2, [pc, #36]	; (8000b04 <HAL_Init+0x3c>)
 8000ae0:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f000 f810 	bl	8000b08 <HAL_InitTick>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d002      	beq.n	8000af4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	71fb      	strb	r3, [r7, #7]
 8000af2:	e001      	b.n	8000af8 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000af4:	f7ff fde3 	bl	80006be <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000af8:	79fb      	ldrb	r3, [r7, #7]
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000000 	.word	0x20000000

08000b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b10:	2300      	movs	r3, #0
 8000b12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b14:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <HAL_InitTick+0x6c>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d024      	beq.n	8000b66 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b1c:	f001 fb14 	bl	8002148 <HAL_RCC_GetHCLKFreq>
 8000b20:	4602      	mov	r2, r0
 8000b22:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <HAL_InitTick+0x6c>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	4619      	mov	r1, r3
 8000b28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b2c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b34:	4618      	mov	r0, r3
 8000b36:	f000 f932 	bl	8000d9e <HAL_SYSTICK_Config>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d10f      	bne.n	8000b60 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2b0f      	cmp	r3, #15
 8000b44:	d809      	bhi.n	8000b5a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b46:	2200      	movs	r2, #0
 8000b48:	6879      	ldr	r1, [r7, #4]
 8000b4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b4e:	f000 f8fe 	bl	8000d4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b52:	4a09      	ldr	r2, [pc, #36]	; (8000b78 <HAL_InitTick+0x70>)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6013      	str	r3, [r2, #0]
 8000b58:	e007      	b.n	8000b6a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	73fb      	strb	r3, [r7, #15]
 8000b5e:	e004      	b.n	8000b6a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b60:	2301      	movs	r3, #1
 8000b62:	73fb      	strb	r3, [r7, #15]
 8000b64:	e001      	b.n	8000b6a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3710      	adds	r7, #16
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000008 	.word	0x20000008
 8000b78:	20000004 	.word	0x20000004

08000b7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <HAL_IncTick+0x1c>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	461a      	mov	r2, r3
 8000b86:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <HAL_IncTick+0x20>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	4a03      	ldr	r2, [pc, #12]	; (8000b9c <HAL_IncTick+0x20>)
 8000b8e:	6013      	str	r3, [r2, #0]
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr
 8000b98:	20000008 	.word	0x20000008
 8000b9c:	200000cc 	.word	0x200000cc

08000ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd2:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	60d3      	str	r3, [r2, #12]
}
 8000bd8:	bf00      	nop
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bec:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <__NVIC_GetPriorityGrouping+0x18>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	0a1b      	lsrs	r3, r3, #8
 8000bf2:	f003 0307 	and.w	r3, r3, #7
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bc80      	pop	{r7}
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	db0b      	blt.n	8000c2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	f003 021f 	and.w	r2, r3, #31
 8000c1c:	4906      	ldr	r1, [pc, #24]	; (8000c38 <__NVIC_EnableIRQ+0x34>)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	095b      	lsrs	r3, r3, #5
 8000c24:	2001      	movs	r0, #1
 8000c26:	fa00 f202 	lsl.w	r2, r0, r2
 8000c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr
 8000c38:	e000e100 	.word	0xe000e100

08000c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	6039      	str	r1, [r7, #0]
 8000c46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	db0a      	blt.n	8000c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	490c      	ldr	r1, [pc, #48]	; (8000c88 <__NVIC_SetPriority+0x4c>)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	0112      	lsls	r2, r2, #4
 8000c5c:	b2d2      	uxtb	r2, r2
 8000c5e:	440b      	add	r3, r1
 8000c60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c64:	e00a      	b.n	8000c7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	4908      	ldr	r1, [pc, #32]	; (8000c8c <__NVIC_SetPriority+0x50>)
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	f003 030f 	and.w	r3, r3, #15
 8000c72:	3b04      	subs	r3, #4
 8000c74:	0112      	lsls	r2, r2, #4
 8000c76:	b2d2      	uxtb	r2, r2
 8000c78:	440b      	add	r3, r1
 8000c7a:	761a      	strb	r2, [r3, #24]
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000e100 	.word	0xe000e100
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b089      	sub	sp, #36	; 0x24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	f1c3 0307 	rsb	r3, r3, #7
 8000caa:	2b04      	cmp	r3, #4
 8000cac:	bf28      	it	cs
 8000cae:	2304      	movcs	r3, #4
 8000cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	3304      	adds	r3, #4
 8000cb6:	2b06      	cmp	r3, #6
 8000cb8:	d902      	bls.n	8000cc0 <NVIC_EncodePriority+0x30>
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	3b03      	subs	r3, #3
 8000cbe:	e000      	b.n	8000cc2 <NVIC_EncodePriority+0x32>
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	43da      	mvns	r2, r3
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	401a      	ands	r2, r3
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce2:	43d9      	mvns	r1, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce8:	4313      	orrs	r3, r2
         );
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3724      	adds	r7, #36	; 0x24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr

08000cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d04:	d301      	bcc.n	8000d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d06:	2301      	movs	r3, #1
 8000d08:	e00f      	b.n	8000d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <SysTick_Config+0x40>)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d12:	210f      	movs	r1, #15
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d18:	f7ff ff90 	bl	8000c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d1c:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <SysTick_Config+0x40>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d22:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <SysTick_Config+0x40>)
 8000d24:	2207      	movs	r2, #7
 8000d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	e000e010 	.word	0xe000e010

08000d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f7ff ff2d 	bl	8000ba0 <__NVIC_SetPriorityGrouping>
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b086      	sub	sp, #24
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	4603      	mov	r3, r0
 8000d56:	60b9      	str	r1, [r7, #8]
 8000d58:	607a      	str	r2, [r7, #4]
 8000d5a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d5c:	f7ff ff44 	bl	8000be8 <__NVIC_GetPriorityGrouping>
 8000d60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	68b9      	ldr	r1, [r7, #8]
 8000d66:	6978      	ldr	r0, [r7, #20]
 8000d68:	f7ff ff92 	bl	8000c90 <NVIC_EncodePriority>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d72:	4611      	mov	r1, r2
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff61 	bl	8000c3c <__NVIC_SetPriority>
}
 8000d7a:	bf00      	nop
 8000d7c:	3718      	adds	r7, #24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff ff37 	bl	8000c04 <__NVIC_EnableIRQ>
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff ffa4 	bl	8000cf4 <SysTick_Config>
 8000dac:	4603      	mov	r3, r0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b087      	sub	sp, #28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dc6:	e140      	b.n	800104a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	2101      	movs	r1, #1
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	f000 8132 	beq.w	8001044 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f003 0303 	and.w	r3, r3, #3
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d005      	beq.n	8000df8 <HAL_GPIO_Init+0x40>
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f003 0303 	and.w	r3, r3, #3
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d130      	bne.n	8000e5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	2203      	movs	r2, #3
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	68da      	ldr	r2, [r3, #12]
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e2e:	2201      	movs	r2, #1
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43db      	mvns	r3, r3
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	091b      	lsrs	r3, r3, #4
 8000e44:	f003 0201 	and.w	r2, r3, #1
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f003 0303 	and.w	r3, r3, #3
 8000e62:	2b03      	cmp	r3, #3
 8000e64:	d017      	beq.n	8000e96 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	2203      	movs	r2, #3
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	689a      	ldr	r2, [r3, #8]
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f003 0303 	and.w	r3, r3, #3
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d123      	bne.n	8000eea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	08da      	lsrs	r2, r3, #3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	3208      	adds	r2, #8
 8000eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	220f      	movs	r2, #15
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	691a      	ldr	r2, [r3, #16]
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	f003 0307 	and.w	r3, r3, #7
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	08da      	lsrs	r2, r3, #3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3208      	adds	r2, #8
 8000ee4:	6939      	ldr	r1, [r7, #16]
 8000ee6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	4013      	ands	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f003 0203 	and.w	r2, r3, #3
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	f000 808c 	beq.w	8001044 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000f2c:	4a4e      	ldr	r2, [pc, #312]	; (8001068 <HAL_GPIO_Init+0x2b0>)
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	089b      	lsrs	r3, r3, #2
 8000f32:	3302      	adds	r3, #2
 8000f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	f003 0303 	and.w	r3, r3, #3
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	2207      	movs	r2, #7
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f56:	d00d      	beq.n	8000f74 <HAL_GPIO_Init+0x1bc>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a44      	ldr	r2, [pc, #272]	; (800106c <HAL_GPIO_Init+0x2b4>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d007      	beq.n	8000f70 <HAL_GPIO_Init+0x1b8>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4a43      	ldr	r2, [pc, #268]	; (8001070 <HAL_GPIO_Init+0x2b8>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d101      	bne.n	8000f6c <HAL_GPIO_Init+0x1b4>
 8000f68:	2302      	movs	r3, #2
 8000f6a:	e004      	b.n	8000f76 <HAL_GPIO_Init+0x1be>
 8000f6c:	2307      	movs	r3, #7
 8000f6e:	e002      	b.n	8000f76 <HAL_GPIO_Init+0x1be>
 8000f70:	2301      	movs	r3, #1
 8000f72:	e000      	b.n	8000f76 <HAL_GPIO_Init+0x1be>
 8000f74:	2300      	movs	r3, #0
 8000f76:	697a      	ldr	r2, [r7, #20]
 8000f78:	f002 0203 	and.w	r2, r2, #3
 8000f7c:	0092      	lsls	r2, r2, #2
 8000f7e:	4093      	lsls	r3, r2
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f86:	4938      	ldr	r1, [pc, #224]	; (8001068 <HAL_GPIO_Init+0x2b0>)
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	089b      	lsrs	r3, r3, #2
 8000f8c:	3302      	adds	r3, #2
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f94:	4b37      	ldr	r3, [pc, #220]	; (8001074 <HAL_GPIO_Init+0x2bc>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d003      	beq.n	8000fb8 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fb8:	4a2e      	ldr	r2, [pc, #184]	; (8001074 <HAL_GPIO_Init+0x2bc>)
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000fbe:	4b2d      	ldr	r3, [pc, #180]	; (8001074 <HAL_GPIO_Init+0x2bc>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fe2:	4a24      	ldr	r2, [pc, #144]	; (8001074 <HAL_GPIO_Init+0x2bc>)
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8000fe8:	4b22      	ldr	r3, [pc, #136]	; (8001074 <HAL_GPIO_Init+0x2bc>)
 8000fea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fee:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d003      	beq.n	800100e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4313      	orrs	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800100e:	4a19      	ldr	r2, [pc, #100]	; (8001074 <HAL_GPIO_Init+0x2bc>)
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001016:	4b17      	ldr	r3, [pc, #92]	; (8001074 <HAL_GPIO_Init+0x2bc>)
 8001018:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800101c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	43db      	mvns	r3, r3
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	4013      	ands	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d003      	beq.n	800103c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 800103c:	4a0d      	ldr	r2, [pc, #52]	; (8001074 <HAL_GPIO_Init+0x2bc>)
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	3301      	adds	r3, #1
 8001048:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	fa22 f303 	lsr.w	r3, r2, r3
 8001054:	2b00      	cmp	r3, #0
 8001056:	f47f aeb7 	bne.w	8000dc8 <HAL_GPIO_Init+0x10>
  }
}
 800105a:	bf00      	nop
 800105c:	bf00      	nop
 800105e:	371c      	adds	r7, #28
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	40010000 	.word	0x40010000
 800106c:	48000400 	.word	0x48000400
 8001070:	48000800 	.word	0x48000800
 8001074:	58000800 	.word	0x58000800

08001078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	807b      	strh	r3, [r7, #2]
 8001084:	4613      	mov	r3, r2
 8001086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001088:	787b      	ldrb	r3, [r7, #1]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800108e:	887a      	ldrh	r2, [r7, #2]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001094:	e002      	b.n	800109c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001096:	887a      	ldrh	r2, [r7, #2]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr
	...

080010a8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010ac:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a03      	ldr	r2, [pc, #12]	; (80010c0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80010b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b6:	6013      	str	r3, [r2, #0]
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr
 80010c0:	58000400 	.word	0x58000400

080010c4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80010c8:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <HAL_PWREx_GetVoltageRange+0x14>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr
 80010d8:	58000400 	.word	0x58000400

080010dc <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010ec:	d101      	bne.n	80010f2 <LL_PWR_IsEnabledBkUpAccess+0x16>
 80010ee:	2301      	movs	r3, #1
 80010f0:	e000      	b.n	80010f4 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80010f2:	2300      	movs	r3, #0
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr
 80010fc:	58000400 	.word	0x58000400

08001100 <LL_RCC_HSE_EnableTcxo>:
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800110e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001112:	6013      	str	r3, [r2, #0]
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr

0800111c <LL_RCC_HSE_DisableTcxo>:
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800112a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800112e:	6013      	str	r3, [r2, #0]
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr

08001138 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800113c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001146:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800114a:	d101      	bne.n	8001150 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800114c:	2301      	movs	r3, #1
 800114e:	e000      	b.n	8001152 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr

0800115a <LL_RCC_HSE_Enable>:
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800115e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800116c:	6013      	str	r3, [r2, #0]
}
 800116e:	bf00      	nop
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr

08001176 <LL_RCC_HSE_Disable>:
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800117a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001184:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001188:	6013      	str	r3, [r2, #0]
}
 800118a:	bf00      	nop
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr

08001192 <LL_RCC_HSE_IsReady>:
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80011a4:	d101      	bne.n	80011aa <LL_RCC_HSE_IsReady+0x18>
 80011a6:	2301      	movs	r3, #1
 80011a8:	e000      	b.n	80011ac <LL_RCC_HSE_IsReady+0x1a>
 80011aa:	2300      	movs	r3, #0
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr

080011b4 <LL_RCC_HSI_Enable>:
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80011b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c6:	6013      	str	r3, [r2, #0]
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr

080011d0 <LL_RCC_HSI_Disable>:
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80011d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011e2:	6013      	str	r3, [r2, #0]
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr

080011ec <LL_RCC_HSI_IsReady>:
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80011f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011fe:	d101      	bne.n	8001204 <LL_RCC_HSI_IsReady+0x18>
 8001200:	2301      	movs	r3, #1
 8001202:	e000      	b.n	8001206 <LL_RCC_HSI_IsReady+0x1a>
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	46bd      	mov	sp, r7
 800120a:	bc80      	pop	{r7}
 800120c:	4770      	bx	lr

0800120e <LL_RCC_HSI_SetCalibTrimming>:
{
 800120e:	b480      	push	{r7}
 8001210:	b083      	sub	sp, #12
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	061b      	lsls	r3, r3, #24
 8001224:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001228:	4313      	orrs	r3, r2
 800122a:	604b      	str	r3, [r1, #4]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr

08001236 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800123a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800123e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b02      	cmp	r3, #2
 8001248:	d101      	bne.n	800124e <LL_RCC_LSE_IsReady+0x18>
 800124a:	2301      	movs	r3, #1
 800124c:	e000      	b.n	8001250 <LL_RCC_LSE_IsReady+0x1a>
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr

08001258 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800125c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001260:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001264:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr

08001278 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800127c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001280:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001284:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001288:	f023 0301 	bic.w	r3, r3, #1
 800128c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr

08001298 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800129c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d101      	bne.n	80012b0 <LL_RCC_LSI_IsReady+0x18>
 80012ac:	2301      	movs	r3, #1
 80012ae:	e000      	b.n	80012b2 <LL_RCC_LSI_IsReady+0x1a>
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr

080012ba <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80012be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6013      	str	r3, [r2, #0]
}
 80012ce:	bf00      	nop
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr

080012d6 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80012da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012e4:	f023 0301 	bic.w	r3, r3, #1
 80012e8:	6013      	str	r3, [r2, #0]
}
 80012ea:	bf00      	nop
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr

080012f2 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80012f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	2b02      	cmp	r3, #2
 8001302:	d101      	bne.n	8001308 <LL_RCC_MSI_IsReady+0x16>
 8001304:	2301      	movs	r3, #1
 8001306:	e000      	b.n	800130a <LL_RCC_MSI_IsReady+0x18>
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr

08001312 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0308 	and.w	r3, r3, #8
 8001320:	2b08      	cmp	r3, #8
 8001322:	d101      	bne.n	8001328 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001324:	2301      	movs	r3, #1
 8001326:	e000      	b.n	800132a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr

08001332 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001340:	4618      	mov	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr

08001348 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800134c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001350:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001354:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001358:	4618      	mov	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr

08001360 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	021b      	lsls	r3, r3, #8
 8001376:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800137a:	4313      	orrs	r3, r2
 800137c:	604b      	str	r3, [r1, #4]
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr

08001388 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f023 0203 	bic.w	r2, r3, #3
 800139a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	608b      	str	r3, [r1, #8]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr

080013ae <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80013b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f003 030c 	and.w	r3, r3, #12
}
 80013bc:	4618      	mov	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr

080013c4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80013cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4313      	orrs	r3, r2
 80013de:	608b      	str	r3, [r1, #8]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc80      	pop	{r7}
 80013e8:	4770      	bx	lr

080013ea <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b083      	sub	sp, #12
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80013f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80013fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4313      	orrs	r3, r2
 8001406:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr

08001414 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800141c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001420:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001424:	f023 020f 	bic.w	r2, r3, #15
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	091b      	lsrs	r3, r3, #4
 800142c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001430:	4313      	orrs	r3, r2
 8001432:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr

08001440 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001452:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4313      	orrs	r3, r2
 800145a:	608b      	str	r3, [r1, #8]
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr

08001466 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001466:	b480      	push	{r7}
 8001468:	b083      	sub	sp, #12
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800146e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001478:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4313      	orrs	r3, r2
 8001480:	608b      	str	r3, [r1, #8]
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr

0800148c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800149a:	4618      	mov	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr

080014a2 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80014a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014aa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80014ae:	011b      	lsls	r3, r3, #4
 80014b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr

080014bc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80014c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr

080014d2 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80014d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr

080014e8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80014ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014fa:	6013      	str	r3, [r2, #0]
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr

08001504 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001512:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001516:	6013      	str	r3, [r2, #0]
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr

08001520 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800152e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001532:	d101      	bne.n	8001538 <LL_RCC_PLL_IsReady+0x18>
 8001534:	2301      	movs	r3, #1
 8001536:	e000      	b.n	800153a <LL_RCC_PLL_IsReady+0x1a>
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr

08001542 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	0a1b      	lsrs	r3, r3, #8
 800154e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001552:	4618      	mov	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr

0800155a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800155e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001568:	4618      	mov	r0, r3
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr

08001570 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800157e:	4618      	mov	r0, r3
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr

08001586 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800158a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	f003 0303 	and.w	r3, r3, #3
}
 8001594:	4618      	mov	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr

0800159c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80015a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ae:	d101      	bne.n	80015b4 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80015b0:	2301      	movs	r3, #1
 80015b2:	e000      	b.n	80015b6 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr

080015be <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80015c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80015ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80015d2:	d101      	bne.n	80015d8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80015d4:	2301      	movs	r3, #1
 80015d6:	e000      	b.n	80015da <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr

080015e2 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80015e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80015ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f6:	d101      	bne.n	80015fc <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80015f8:	2301      	movs	r3, #1
 80015fa:	e000      	b.n	80015fe <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr

08001606 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800160a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001614:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001618:	d101      	bne.n	800161e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800161a:	2301      	movs	r3, #1
 800161c:	e000      	b.n	8001620 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr

08001628 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800162c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001636:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800163a:	d101      	bne.n	8001640 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800163c:	2301      	movs	r3, #1
 800163e:	e000      	b.n	8001642 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr
	...

0800164c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e38b      	b.n	8001d76 <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800165e:	f7ff fea6 	bl	80013ae <LL_RCC_GetSysClkSource>
 8001662:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001664:	f7ff ff8f 	bl	8001586 <LL_RCC_PLL_GetMainSource>
 8001668:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0320 	and.w	r3, r3, #32
 8001672:	2b00      	cmp	r3, #0
 8001674:	f000 80c9 	beq.w	800180a <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d005      	beq.n	800168a <HAL_RCC_OscConfig+0x3e>
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	2b0c      	cmp	r3, #12
 8001682:	d17b      	bne.n	800177c <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d178      	bne.n	800177c <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800168a:	f7ff fe32 	bl	80012f2 <LL_RCC_MSI_IsReady>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d005      	beq.n	80016a0 <HAL_RCC_OscConfig+0x54>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d101      	bne.n	80016a0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e36a      	b.n	8001d76 <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d005      	beq.n	80016be <HAL_RCC_OscConfig+0x72>
 80016b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016bc:	e006      	b.n	80016cc <HAL_RCC_OscConfig+0x80>
 80016be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016c6:	091b      	lsrs	r3, r3, #4
 80016c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d222      	bcs.n	8001716 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d4:	4618      	mov	r0, r3
 80016d6:	f000 fd6f 	bl	80021b8 <RCC_SetFlashLatencyFromMSIRange>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e348      	b.n	8001d76 <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016ee:	f043 0308 	orr.w	r3, r3, #8
 80016f2:	6013      	str	r3, [r2, #0]
 80016f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001702:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001706:	4313      	orrs	r3, r2
 8001708:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fe26 	bl	8001360 <LL_RCC_MSI_SetCalibTrimming>
 8001714:	e021      	b.n	800175a <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001716:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001720:	f043 0308 	orr.w	r3, r3, #8
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001734:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001738:	4313      	orrs	r3, r2
 800173a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff fe0d 	bl	8001360 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174a:	4618      	mov	r0, r3
 800174c:	f000 fd34 	bl	80021b8 <RCC_SetFlashLatencyFromMSIRange>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e30d      	b.n	8001d76 <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800175a:	f000 fcf5 	bl	8002148 <HAL_RCC_GetHCLKFreq>
 800175e:	4603      	mov	r3, r0
 8001760:	4aa1      	ldr	r2, [pc, #644]	; (80019e8 <HAL_RCC_OscConfig+0x39c>)
 8001762:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001764:	4ba1      	ldr	r3, [pc, #644]	; (80019ec <HAL_RCC_OscConfig+0x3a0>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff f9cd 	bl	8000b08 <HAL_InitTick>
 800176e:	4603      	mov	r3, r0
 8001770:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001772:	7cfb      	ldrb	r3, [r7, #19]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d047      	beq.n	8001808 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8001778:	7cfb      	ldrb	r3, [r7, #19]
 800177a:	e2fc      	b.n	8001d76 <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a1b      	ldr	r3, [r3, #32]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d02c      	beq.n	80017de <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001784:	f7ff fd99 	bl	80012ba <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001788:	f7ff f814 	bl	80007b4 <HAL_GetTick>
 800178c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001790:	f7ff f810 	bl	80007b4 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e2e9      	b.n	8001d76 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 80017a2:	f7ff fda6 	bl	80012f2 <LL_RCC_MSI_IsReady>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d0f1      	beq.n	8001790 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017b6:	f043 0308 	orr.w	r3, r3, #8
 80017ba:	6013      	str	r3, [r2, #0]
 80017bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017ce:	4313      	orrs	r3, r2
 80017d0:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fdc2 	bl	8001360 <LL_RCC_MSI_SetCalibTrimming>
 80017dc:	e015      	b.n	800180a <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017de:	f7ff fd7a 	bl	80012d6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017e2:	f7fe ffe7 	bl	80007b4 <HAL_GetTick>
 80017e6:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017ea:	f7fe ffe3 	bl	80007b4 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e2bc      	b.n	8001d76 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 80017fc:	f7ff fd79 	bl	80012f2 <LL_RCC_MSI_IsReady>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f1      	bne.n	80017ea <HAL_RCC_OscConfig+0x19e>
 8001806:	e000      	b.n	800180a <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001808:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b00      	cmp	r3, #0
 8001814:	d05f      	beq.n	80018d6 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	2b08      	cmp	r3, #8
 800181a:	d005      	beq.n	8001828 <HAL_RCC_OscConfig+0x1dc>
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	2b0c      	cmp	r3, #12
 8001820:	d10d      	bne.n	800183e <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	2b03      	cmp	r3, #3
 8001826:	d10a      	bne.n	800183e <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001828:	f7ff fcb3 	bl	8001192 <LL_RCC_HSE_IsReady>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d050      	beq.n	80018d4 <HAL_RCC_OscConfig+0x288>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d14c      	bne.n	80018d4 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e29b      	b.n	8001d76 <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800183e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001850:	4313      	orrs	r3, r2
 8001852:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800185c:	d102      	bne.n	8001864 <HAL_RCC_OscConfig+0x218>
 800185e:	f7ff fc7c 	bl	800115a <LL_RCC_HSE_Enable>
 8001862:	e00d      	b.n	8001880 <HAL_RCC_OscConfig+0x234>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800186c:	d104      	bne.n	8001878 <HAL_RCC_OscConfig+0x22c>
 800186e:	f7ff fc47 	bl	8001100 <LL_RCC_HSE_EnableTcxo>
 8001872:	f7ff fc72 	bl	800115a <LL_RCC_HSE_Enable>
 8001876:	e003      	b.n	8001880 <HAL_RCC_OscConfig+0x234>
 8001878:	f7ff fc7d 	bl	8001176 <LL_RCC_HSE_Disable>
 800187c:	f7ff fc4e 	bl	800111c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d012      	beq.n	80018ae <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001888:	f7fe ff94 	bl	80007b4 <HAL_GetTick>
 800188c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001890:	f7fe ff90 	bl	80007b4 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b64      	cmp	r3, #100	; 0x64
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e269      	b.n	8001d76 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 80018a2:	f7ff fc76 	bl	8001192 <LL_RCC_HSE_IsReady>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0f1      	beq.n	8001890 <HAL_RCC_OscConfig+0x244>
 80018ac:	e013      	b.n	80018d6 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ae:	f7fe ff81 	bl	80007b4 <HAL_GetTick>
 80018b2:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018b6:	f7fe ff7d 	bl	80007b4 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b64      	cmp	r3, #100	; 0x64
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e256      	b.n	8001d76 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 80018c8:	f7ff fc63 	bl	8001192 <LL_RCC_HSE_IsReady>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f1      	bne.n	80018b6 <HAL_RCC_OscConfig+0x26a>
 80018d2:	e000      	b.n	80018d6 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d4:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d04b      	beq.n	800197a <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	2b04      	cmp	r3, #4
 80018e6:	d005      	beq.n	80018f4 <HAL_RCC_OscConfig+0x2a8>
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	2b0c      	cmp	r3, #12
 80018ec:	d113      	bne.n	8001916 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d110      	bne.n	8001916 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018f4:	f7ff fc7a 	bl	80011ec <LL_RCC_HSI_IsReady>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d005      	beq.n	800190a <HAL_RCC_OscConfig+0x2be>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e235      	b.n	8001d76 <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff fc7d 	bl	800120e <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001914:	e031      	b.n	800197a <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d019      	beq.n	8001952 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800191e:	f7ff fc49 	bl	80011b4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001922:	f7fe ff47 	bl	80007b4 <HAL_GetTick>
 8001926:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800192a:	f7fe ff43 	bl	80007b4 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e21c      	b.n	8001d76 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 800193c:	f7ff fc56 	bl	80011ec <LL_RCC_HSI_IsReady>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0f1      	beq.n	800192a <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fc5f 	bl	800120e <LL_RCC_HSI_SetCalibTrimming>
 8001950:	e013      	b.n	800197a <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001952:	f7ff fc3d 	bl	80011d0 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001956:	f7fe ff2d 	bl	80007b4 <HAL_GetTick>
 800195a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800195e:	f7fe ff29 	bl	80007b4 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e202      	b.n	8001d76 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001970:	f7ff fc3c 	bl	80011ec <LL_RCC_HSI_IsReady>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f1      	bne.n	800195e <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0308 	and.w	r3, r3, #8
 8001982:	2b00      	cmp	r3, #0
 8001984:	d06f      	beq.n	8001a66 <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d057      	beq.n	8001a3e <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 800198e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001992:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001996:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	69da      	ldr	r2, [r3, #28]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f003 0310 	and.w	r3, r3, #16
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d036      	beq.n	8001a14 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d006      	beq.n	80019be <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e1db      	b.n	8001d76 <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f003 0301 	and.w	r3, r3, #1
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d018      	beq.n	80019fa <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 80019c8:	f7ff fc56 	bl	8001278 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019cc:	f7fe fef2 	bl	80007b4 <HAL_GetTick>
 80019d0:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80019d2:	e00d      	b.n	80019f0 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019d4:	f7fe feee 	bl	80007b4 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b11      	cmp	r3, #17
 80019e0:	d906      	bls.n	80019f0 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e1c7      	b.n	8001d76 <HAL_RCC_OscConfig+0x72a>
 80019e6:	bf00      	nop
 80019e8:	20000000 	.word	0x20000000
 80019ec:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 80019f0:	f7ff fc52 	bl	8001298 <LL_RCC_LSI_IsReady>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1ec      	bne.n	80019d4 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80019fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a02:	f023 0210 	bic.w	r2, r3, #16
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a14:	f7ff fc20 	bl	8001258 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a18:	f7fe fecc 	bl	80007b4 <HAL_GetTick>
 8001a1c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a20:	f7fe fec8 	bl	80007b4 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b11      	cmp	r3, #17
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e1a1      	b.n	8001d76 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001a32:	f7ff fc31 	bl	8001298 <LL_RCC_LSI_IsReady>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0f1      	beq.n	8001a20 <HAL_RCC_OscConfig+0x3d4>
 8001a3c:	e013      	b.n	8001a66 <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a3e:	f7ff fc1b 	bl	8001278 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a42:	f7fe feb7 	bl	80007b4 <HAL_GetTick>
 8001a46:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a4a:	f7fe feb3 	bl	80007b4 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b11      	cmp	r3, #17
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e18c      	b.n	8001d76 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001a5c:	f7ff fc1c 	bl	8001298 <LL_RCC_LSI_IsReady>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1f1      	bne.n	8001a4a <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0304 	and.w	r3, r3, #4
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f000 80d8 	beq.w	8001c24 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001a74:	f7ff fb32 	bl	80010dc <LL_PWR_IsEnabledBkUpAccess>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d113      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001a7e:	f7ff fb13 	bl	80010a8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a82:	f7fe fe97 	bl	80007b4 <HAL_GetTick>
 8001a86:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a8a:	f7fe fe93 	bl	80007b4 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e16c      	b.n	8001d76 <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001a9c:	f7ff fb1e 	bl	80010dc <LL_PWR_IsEnabledBkUpAccess>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d0f1      	beq.n	8001a8a <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d07b      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	2b85      	cmp	r3, #133	; 0x85
 8001ab4:	d003      	beq.n	8001abe <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	2b05      	cmp	r3, #5
 8001abc:	d109      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ac6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001aca:	f043 0304 	orr.w	r3, r3, #4
 8001ace:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad2:	f7fe fe6f 	bl	80007b4 <HAL_GetTick>
 8001ad6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001aec:	e00a      	b.n	8001b04 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aee:	f7fe fe61 	bl	80007b4 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e138      	b.n	8001d76 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001b04:	f7ff fb97 	bl	8001236 <LL_RCC_LSE_IsReady>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0ef      	beq.n	8001aee <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	2b81      	cmp	r3, #129	; 0x81
 8001b14:	d003      	beq.n	8001b1e <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	2b85      	cmp	r3, #133	; 0x85
 8001b1c:	d121      	bne.n	8001b62 <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1e:	f7fe fe49 	bl	80007b4 <HAL_GetTick>
 8001b22:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001b38:	e00a      	b.n	8001b50 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b3a:	f7fe fe3b 	bl	80007b4 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e112      	b.n	8001d76 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0ec      	beq.n	8001b3a <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001b60:	e060      	b.n	8001c24 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b62:	f7fe fe27 	bl	80007b4 <HAL_GetTick>
 8001b66:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b7c:	e00a      	b.n	8001b94 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b7e:	f7fe fe19 	bl	80007b4 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e0f0      	b.n	8001d76 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d1ec      	bne.n	8001b7e <HAL_RCC_OscConfig+0x532>
 8001ba4:	e03e      	b.n	8001c24 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba6:	f7fe fe05 	bl	80007b4 <HAL_GetTick>
 8001baa:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001bc0:	e00a      	b.n	8001bd8 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc2:	f7fe fdf7 	bl	80007b4 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e0ce      	b.n	8001d76 <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1ec      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be8:	f7fe fde4 	bl	80007b4 <HAL_GetTick>
 8001bec:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bfa:	f023 0301 	bic.w	r3, r3, #1
 8001bfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001c02:	e00a      	b.n	8001c1a <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c04:	f7fe fdd6 	bl	80007b4 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e0ad      	b.n	8001d76 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001c1a:	f7ff fb0c 	bl	8001236 <LL_RCC_LSE_IsReady>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1ef      	bne.n	8001c04 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f000 80a3 	beq.w	8001d74 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	2b0c      	cmp	r3, #12
 8001c32:	d076      	beq.n	8001d22 <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d14b      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c3c:	f7ff fc62 	bl	8001504 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c40:	f7fe fdb8 	bl	80007b4 <HAL_GetTick>
 8001c44:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c48:	f7fe fdb4 	bl	80007b4 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b0a      	cmp	r3, #10
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e08d      	b.n	8001d76 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001c5a:	f7ff fc61 	bl	8001520 <LL_RCC_PLL_IsReady>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1f1      	bne.n	8001c48 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c68:	68da      	ldr	r2, [r3, #12]
 8001c6a:	4b45      	ldr	r3, [pc, #276]	; (8001d80 <HAL_RCC_OscConfig+0x734>)
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c76:	4311      	orrs	r1, r2
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c7c:	0212      	lsls	r2, r2, #8
 8001c7e:	4311      	orrs	r1, r2
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c84:	4311      	orrs	r1, r2
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c8a:	4311      	orrs	r1, r2
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c90:	430a      	orrs	r2, r1
 8001c92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c96:	4313      	orrs	r3, r2
 8001c98:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c9a:	f7ff fc25 	bl	80014e8 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cac:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cae:	f7fe fd81 	bl	80007b4 <HAL_GetTick>
 8001cb2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb6:	f7fe fd7d 	bl	80007b4 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b0a      	cmp	r3, #10
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e056      	b.n	8001d76 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8001cc8:	f7ff fc2a 	bl	8001520 <LL_RCC_PLL_IsReady>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0f1      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x66a>
 8001cd2:	e04f      	b.n	8001d74 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd4:	f7ff fc16 	bl	8001504 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ce2:	f023 0303 	bic.w	r3, r3, #3
 8001ce6:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8001ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cf2:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8001cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cfa:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfc:	f7fe fd5a 	bl	80007b4 <HAL_GetTick>
 8001d00:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d04:	f7fe fd56 	bl	80007b4 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b0a      	cmp	r3, #10
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e02f      	b.n	8001d76 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001d16:	f7ff fc03 	bl	8001520 <LL_RCC_PLL_IsReady>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1f1      	bne.n	8001d04 <HAL_RCC_OscConfig+0x6b8>
 8001d20:	e028      	b.n	8001d74 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d101      	bne.n	8001d2e <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e023      	b.n	8001d76 <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	f003 0203 	and.w	r2, r3, #3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d115      	bne.n	8001d70 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d10e      	bne.n	8001d70 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d5c:	021b      	lsls	r3, r3, #8
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d106      	bne.n	8001d70 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d001      	beq.n	8001d74 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e000      	b.n	8001d76 <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3720      	adds	r7, #32
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	11c1808c 	.word	0x11c1808c

08001d84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e12c      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d98:	4b98      	ldr	r3, [pc, #608]	; (8001ffc <HAL_RCC_ClockConfig+0x278>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d91b      	bls.n	8001dde <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da6:	4b95      	ldr	r3, [pc, #596]	; (8001ffc <HAL_RCC_ClockConfig+0x278>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f023 0207 	bic.w	r2, r3, #7
 8001dae:	4993      	ldr	r1, [pc, #588]	; (8001ffc <HAL_RCC_ClockConfig+0x278>)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001db6:	f7fe fcfd 	bl	80007b4 <HAL_GetTick>
 8001dba:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001dbe:	f7fe fcf9 	bl	80007b4 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e110      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd0:	4b8a      	ldr	r3, [pc, #552]	; (8001ffc <HAL_RCC_ClockConfig+0x278>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0307 	and.w	r3, r3, #7
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d1ef      	bne.n	8001dbe <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d016      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff fae8 	bl	80013c4 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001df4:	f7fe fcde 	bl	80007b4 <HAL_GetTick>
 8001df8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001dfc:	f7fe fcda 	bl	80007b4 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e0f1      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001e0e:	f7ff fbc5 	bl	800159c <LL_RCC_IsActiveFlag_HPRE>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0f1      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0320 	and.w	r3, r3, #32
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d016      	beq.n	8001e52 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	695b      	ldr	r3, [r3, #20]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff fade 	bl	80013ea <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001e2e:	f7fe fcc1 	bl	80007b4 <HAL_GetTick>
 8001e32:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001e36:	f7fe fcbd 	bl	80007b4 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e0d4      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001e48:	f7ff fbb9 	bl	80015be <LL_RCC_IsActiveFlag_C2HPRE>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0f1      	beq.n	8001e36 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d016      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff fad6 	bl	8001414 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001e68:	f7fe fca4 	bl	80007b4 <HAL_GetTick>
 8001e6c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001e70:	f7fe fca0 	bl	80007b4 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e0b7      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001e82:	f7ff fbae 	bl	80015e2 <LL_RCC_IsActiveFlag_SHDHPRE>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0f1      	beq.n	8001e70 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d016      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff facf 	bl	8001440 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001ea2:	f7fe fc87 	bl	80007b4 <HAL_GetTick>
 8001ea6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001eaa:	f7fe fc83 	bl	80007b4 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e09a      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001ebc:	f7ff fba3 	bl	8001606 <LL_RCC_IsActiveFlag_PPRE1>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0f1      	beq.n	8001eaa <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d017      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff fac4 	bl	8001466 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001ede:	f7fe fc69 	bl	80007b4 <HAL_GetTick>
 8001ee2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001ee6:	f7fe fc65 	bl	80007b4 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e07c      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001ef8:	f7ff fb96 	bl	8001628 <LL_RCC_IsActiveFlag_PPRE2>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f1      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d043      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d106      	bne.n	8001f24 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001f16:	f7ff f93c 	bl	8001192 <LL_RCC_HSE_IsReady>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d11e      	bne.n	8001f5e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e066      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b03      	cmp	r3, #3
 8001f2a:	d106      	bne.n	8001f3a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001f2c:	f7ff faf8 	bl	8001520 <LL_RCC_PLL_IsReady>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d113      	bne.n	8001f5e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e05b      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d106      	bne.n	8001f50 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001f42:	f7ff f9d6 	bl	80012f2 <LL_RCC_MSI_IsReady>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d108      	bne.n	8001f5e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e050      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001f50:	f7ff f94c 	bl	80011ec <LL_RCC_HSI_IsReady>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e049      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff fa10 	bl	8001388 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f68:	f7fe fc24 	bl	80007b4 <HAL_GetTick>
 8001f6c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6e:	e00a      	b.n	8001f86 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f70:	f7fe fc20 	bl	80007b4 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e035      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f86:	f7ff fa12 	bl	80013ae <LL_RCC_GetSysClkSource>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d1ec      	bne.n	8001f70 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f96:	4b19      	ldr	r3, [pc, #100]	; (8001ffc <HAL_RCC_ClockConfig+0x278>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d21b      	bcs.n	8001fdc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa4:	4b15      	ldr	r3, [pc, #84]	; (8001ffc <HAL_RCC_ClockConfig+0x278>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f023 0207 	bic.w	r2, r3, #7
 8001fac:	4913      	ldr	r1, [pc, #76]	; (8001ffc <HAL_RCC_ClockConfig+0x278>)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fb4:	f7fe fbfe 	bl	80007b4 <HAL_GetTick>
 8001fb8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001fbc:	f7fe fbfa 	bl	80007b4 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e011      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fce:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <HAL_RCC_ClockConfig+0x278>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d1ef      	bne.n	8001fbc <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001fdc:	f000 f8b4 	bl	8002148 <HAL_RCC_GetHCLKFreq>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	4a07      	ldr	r2, [pc, #28]	; (8002000 <HAL_RCC_ClockConfig+0x27c>)
 8001fe4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001fe6:	4b07      	ldr	r3, [pc, #28]	; (8002004 <HAL_RCC_ClockConfig+0x280>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7fe fd8c 	bl	8000b08 <HAL_InitTick>
 8001ff0:	4603      	mov	r3, r0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	58004000 	.word	0x58004000
 8002000:	20000000 	.word	0x20000000
 8002004:	20000004 	.word	0x20000004

08002008 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002008:	b590      	push	{r4, r7, lr}
 800200a:	b087      	sub	sp, #28
 800200c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800200e:	2300      	movs	r3, #0
 8002010:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002012:	2300      	movs	r3, #0
 8002014:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002016:	f7ff f9ca 	bl	80013ae <LL_RCC_GetSysClkSource>
 800201a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800201c:	f7ff fab3 	bl	8001586 <LL_RCC_PLL_GetMainSource>
 8002020:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d005      	beq.n	8002034 <HAL_RCC_GetSysClockFreq+0x2c>
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	2b0c      	cmp	r3, #12
 800202c:	d139      	bne.n	80020a2 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d136      	bne.n	80020a2 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002034:	f7ff f96d 	bl	8001312 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d115      	bne.n	800206a <HAL_RCC_GetSysClockFreq+0x62>
 800203e:	f7ff f968 	bl	8001312 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002042:	4603      	mov	r3, r0
 8002044:	2b01      	cmp	r3, #1
 8002046:	d106      	bne.n	8002056 <HAL_RCC_GetSysClockFreq+0x4e>
 8002048:	f7ff f973 	bl	8001332 <LL_RCC_MSI_GetRange>
 800204c:	4603      	mov	r3, r0
 800204e:	0a1b      	lsrs	r3, r3, #8
 8002050:	f003 030f 	and.w	r3, r3, #15
 8002054:	e005      	b.n	8002062 <HAL_RCC_GetSysClockFreq+0x5a>
 8002056:	f7ff f977 	bl	8001348 <LL_RCC_MSI_GetRangeAfterStandby>
 800205a:	4603      	mov	r3, r0
 800205c:	0a1b      	lsrs	r3, r3, #8
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	4a36      	ldr	r2, [pc, #216]	; (800213c <HAL_RCC_GetSysClockFreq+0x134>)
 8002064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002068:	e014      	b.n	8002094 <HAL_RCC_GetSysClockFreq+0x8c>
 800206a:	f7ff f952 	bl	8001312 <LL_RCC_MSI_IsEnabledRangeSelect>
 800206e:	4603      	mov	r3, r0
 8002070:	2b01      	cmp	r3, #1
 8002072:	d106      	bne.n	8002082 <HAL_RCC_GetSysClockFreq+0x7a>
 8002074:	f7ff f95d 	bl	8001332 <LL_RCC_MSI_GetRange>
 8002078:	4603      	mov	r3, r0
 800207a:	091b      	lsrs	r3, r3, #4
 800207c:	f003 030f 	and.w	r3, r3, #15
 8002080:	e005      	b.n	800208e <HAL_RCC_GetSysClockFreq+0x86>
 8002082:	f7ff f961 	bl	8001348 <LL_RCC_MSI_GetRangeAfterStandby>
 8002086:	4603      	mov	r3, r0
 8002088:	091b      	lsrs	r3, r3, #4
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	4a2b      	ldr	r2, [pc, #172]	; (800213c <HAL_RCC_GetSysClockFreq+0x134>)
 8002090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002094:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d115      	bne.n	80020c8 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80020a0:	e012      	b.n	80020c8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	2b04      	cmp	r3, #4
 80020a6:	d102      	bne.n	80020ae <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020a8:	4b25      	ldr	r3, [pc, #148]	; (8002140 <HAL_RCC_GetSysClockFreq+0x138>)
 80020aa:	617b      	str	r3, [r7, #20]
 80020ac:	e00c      	b.n	80020c8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	2b08      	cmp	r3, #8
 80020b2:	d109      	bne.n	80020c8 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80020b4:	f7ff f840 	bl	8001138 <LL_RCC_HSE_IsEnabledDiv2>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d102      	bne.n	80020c4 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80020be:	4b20      	ldr	r3, [pc, #128]	; (8002140 <HAL_RCC_GetSysClockFreq+0x138>)
 80020c0:	617b      	str	r3, [r7, #20]
 80020c2:	e001      	b.n	80020c8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80020c4:	4b1f      	ldr	r3, [pc, #124]	; (8002144 <HAL_RCC_GetSysClockFreq+0x13c>)
 80020c6:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020c8:	f7ff f971 	bl	80013ae <LL_RCC_GetSysClkSource>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b0c      	cmp	r3, #12
 80020d0:	d12f      	bne.n	8002132 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80020d2:	f7ff fa58 	bl	8001586 <LL_RCC_PLL_GetMainSource>
 80020d6:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d003      	beq.n	80020e6 <HAL_RCC_GetSysClockFreq+0xde>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b03      	cmp	r3, #3
 80020e2:	d003      	beq.n	80020ec <HAL_RCC_GetSysClockFreq+0xe4>
 80020e4:	e00d      	b.n	8002102 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80020e6:	4b16      	ldr	r3, [pc, #88]	; (8002140 <HAL_RCC_GetSysClockFreq+0x138>)
 80020e8:	60fb      	str	r3, [r7, #12]
        break;
 80020ea:	e00d      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80020ec:	f7ff f824 	bl	8001138 <LL_RCC_HSE_IsEnabledDiv2>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d102      	bne.n	80020fc <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80020f6:	4b12      	ldr	r3, [pc, #72]	; (8002140 <HAL_RCC_GetSysClockFreq+0x138>)
 80020f8:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80020fa:	e005      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80020fc:	4b11      	ldr	r3, [pc, #68]	; (8002144 <HAL_RCC_GetSysClockFreq+0x13c>)
 80020fe:	60fb      	str	r3, [r7, #12]
        break;
 8002100:	e002      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	60fb      	str	r3, [r7, #12]
        break;
 8002106:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002108:	f7ff fa1b 	bl	8001542 <LL_RCC_PLL_GetN>
 800210c:	4602      	mov	r2, r0
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	fb03 f402 	mul.w	r4, r3, r2
 8002114:	f7ff fa2c 	bl	8001570 <LL_RCC_PLL_GetDivider>
 8002118:	4603      	mov	r3, r0
 800211a:	091b      	lsrs	r3, r3, #4
 800211c:	3301      	adds	r3, #1
 800211e:	fbb4 f4f3 	udiv	r4, r4, r3
 8002122:	f7ff fa1a 	bl	800155a <LL_RCC_PLL_GetR>
 8002126:	4603      	mov	r3, r0
 8002128:	0f5b      	lsrs	r3, r3, #29
 800212a:	3301      	adds	r3, #1
 800212c:	fbb4 f3f3 	udiv	r3, r4, r3
 8002130:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002132:	697b      	ldr	r3, [r7, #20]
}
 8002134:	4618      	mov	r0, r3
 8002136:	371c      	adds	r7, #28
 8002138:	46bd      	mov	sp, r7
 800213a:	bd90      	pop	{r4, r7, pc}
 800213c:	080076d4 	.word	0x080076d4
 8002140:	00f42400 	.word	0x00f42400
 8002144:	01e84800 	.word	0x01e84800

08002148 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002148:	b598      	push	{r3, r4, r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800214c:	f7ff ff5c 	bl	8002008 <HAL_RCC_GetSysClockFreq>
 8002150:	4604      	mov	r4, r0
 8002152:	f7ff f99b 	bl	800148c <LL_RCC_GetAHBPrescaler>
 8002156:	4603      	mov	r3, r0
 8002158:	091b      	lsrs	r3, r3, #4
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	4a03      	ldr	r2, [pc, #12]	; (800216c <HAL_RCC_GetHCLKFreq+0x24>)
 8002160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002164:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002168:	4618      	mov	r0, r3
 800216a:	bd98      	pop	{r3, r4, r7, pc}
 800216c:	08007674 	.word	0x08007674

08002170 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002170:	b598      	push	{r3, r4, r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002174:	f7ff ffe8 	bl	8002148 <HAL_RCC_GetHCLKFreq>
 8002178:	4604      	mov	r4, r0
 800217a:	f7ff f99f 	bl	80014bc <LL_RCC_GetAPB1Prescaler>
 800217e:	4603      	mov	r3, r0
 8002180:	0a1b      	lsrs	r3, r3, #8
 8002182:	4a03      	ldr	r2, [pc, #12]	; (8002190 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002188:	fa24 f303 	lsr.w	r3, r4, r3
}
 800218c:	4618      	mov	r0, r3
 800218e:	bd98      	pop	{r3, r4, r7, pc}
 8002190:	080076b4 	.word	0x080076b4

08002194 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002194:	b598      	push	{r3, r4, r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002198:	f7ff ffd6 	bl	8002148 <HAL_RCC_GetHCLKFreq>
 800219c:	4604      	mov	r4, r0
 800219e:	f7ff f998 	bl	80014d2 <LL_RCC_GetAPB2Prescaler>
 80021a2:	4603      	mov	r3, r0
 80021a4:	0adb      	lsrs	r3, r3, #11
 80021a6:	4a03      	ldr	r2, [pc, #12]	; (80021b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ac:	fa24 f303 	lsr.w	r3, r4, r3
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	bd98      	pop	{r3, r4, r7, pc}
 80021b4:	080076b4 	.word	0x080076b4

080021b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80021b8:	b590      	push	{r4, r7, lr}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	091b      	lsrs	r3, r3, #4
 80021c4:	f003 030f 	and.w	r3, r3, #15
 80021c8:	4a10      	ldr	r2, [pc, #64]	; (800220c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80021ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ce:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80021d0:	f7ff f967 	bl	80014a2 <LL_RCC_GetAHB3Prescaler>
 80021d4:	4603      	mov	r3, r0
 80021d6:	091b      	lsrs	r3, r3, #4
 80021d8:	f003 030f 	and.w	r3, r3, #15
 80021dc:	4a0c      	ldr	r2, [pc, #48]	; (8002210 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80021de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e8:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	4a09      	ldr	r2, [pc, #36]	; (8002214 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80021ee:	fba2 2303 	umull	r2, r3, r2, r3
 80021f2:	0c9c      	lsrs	r4, r3, #18
 80021f4:	f7fe ff66 	bl	80010c4 <HAL_PWREx_GetVoltageRange>
 80021f8:	4603      	mov	r3, r0
 80021fa:	4619      	mov	r1, r3
 80021fc:	4620      	mov	r0, r4
 80021fe:	f000 f80b 	bl	8002218 <RCC_SetFlashLatency>
 8002202:	4603      	mov	r3, r0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	bd90      	pop	{r4, r7, pc}
 800220c:	080076d4 	.word	0x080076d4
 8002210:	08007674 	.word	0x08007674
 8002214:	431bde83 	.word	0x431bde83

08002218 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b08e      	sub	sp, #56	; 0x38
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002222:	4a3a      	ldr	r2, [pc, #232]	; (800230c <RCC_SetFlashLatency+0xf4>)
 8002224:	f107 0320 	add.w	r3, r7, #32
 8002228:	e892 0003 	ldmia.w	r2, {r0, r1}
 800222c:	6018      	str	r0, [r3, #0]
 800222e:	3304      	adds	r3, #4
 8002230:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002232:	4a37      	ldr	r2, [pc, #220]	; (8002310 <RCC_SetFlashLatency+0xf8>)
 8002234:	f107 0318 	add.w	r3, r7, #24
 8002238:	e892 0003 	ldmia.w	r2, {r0, r1}
 800223c:	6018      	str	r0, [r3, #0]
 800223e:	3304      	adds	r3, #4
 8002240:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002242:	4a34      	ldr	r2, [pc, #208]	; (8002314 <RCC_SetFlashLatency+0xfc>)
 8002244:	f107 030c 	add.w	r3, r7, #12
 8002248:	ca07      	ldmia	r2, {r0, r1, r2}
 800224a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800224e:	2300      	movs	r3, #0
 8002250:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002258:	d11b      	bne.n	8002292 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800225a:	2300      	movs	r3, #0
 800225c:	633b      	str	r3, [r7, #48]	; 0x30
 800225e:	e014      	b.n	800228a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	3338      	adds	r3, #56	; 0x38
 8002266:	443b      	add	r3, r7
 8002268:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800226c:	461a      	mov	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4293      	cmp	r3, r2
 8002272:	d807      	bhi.n	8002284 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	3338      	adds	r3, #56	; 0x38
 800227a:	443b      	add	r3, r7
 800227c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002280:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002282:	e021      	b.n	80022c8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002286:	3301      	adds	r3, #1
 8002288:	633b      	str	r3, [r7, #48]	; 0x30
 800228a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228c:	2b02      	cmp	r3, #2
 800228e:	d9e7      	bls.n	8002260 <RCC_SetFlashLatency+0x48>
 8002290:	e01a      	b.n	80022c8 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002292:	2300      	movs	r3, #0
 8002294:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002296:	e014      	b.n	80022c2 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	3338      	adds	r3, #56	; 0x38
 800229e:	443b      	add	r3, r7
 80022a0:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80022a4:	461a      	mov	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d807      	bhi.n	80022bc <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80022ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	3338      	adds	r3, #56	; 0x38
 80022b2:	443b      	add	r3, r7
 80022b4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80022b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80022ba:	e005      	b.n	80022c8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80022bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022be:	3301      	adds	r3, #1
 80022c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d9e7      	bls.n	8002298 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022c8:	4b13      	ldr	r3, [pc, #76]	; (8002318 <RCC_SetFlashLatency+0x100>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f023 0207 	bic.w	r2, r3, #7
 80022d0:	4911      	ldr	r1, [pc, #68]	; (8002318 <RCC_SetFlashLatency+0x100>)
 80022d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022d4:	4313      	orrs	r3, r2
 80022d6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80022d8:	f7fe fa6c 	bl	80007b4 <HAL_GetTick>
 80022dc:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80022de:	e008      	b.n	80022f2 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80022e0:	f7fe fa68 	bl	80007b4 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e007      	b.n	8002302 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80022f2:	4b09      	ldr	r3, [pc, #36]	; (8002318 <RCC_SetFlashLatency+0x100>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d1ef      	bne.n	80022e0 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3738      	adds	r7, #56	; 0x38
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	08007634 	.word	0x08007634
 8002310:	0800763c 	.word	0x0800763c
 8002314:	08007644 	.word	0x08007644
 8002318:	58004000 	.word	0x58004000

0800231c <LL_RCC_LSE_IsReady>:
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b02      	cmp	r3, #2
 800232e:	d101      	bne.n	8002334 <LL_RCC_LSE_IsReady+0x18>
 8002330:	2301      	movs	r3, #1
 8002332:	e000      	b.n	8002336 <LL_RCC_LSE_IsReady+0x1a>
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	bc80      	pop	{r7}
 800233c:	4770      	bx	lr

0800233e <LL_RCC_SetUSARTClockSource>:
{
 800233e:	b480      	push	{r7}
 8002340:	b083      	sub	sp, #12
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002346:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800234a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	0c1b      	lsrs	r3, r3, #16
 8002352:	43db      	mvns	r3, r3
 8002354:	401a      	ands	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	b29b      	uxth	r3, r3
 800235a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800235e:	4313      	orrs	r3, r2
 8002360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr

0800236e <LL_RCC_SetI2SClockSource>:
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800237a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002382:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4313      	orrs	r3, r2
 800238a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr

08002398 <LL_RCC_SetLPUARTClockSource>:
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80023a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr

080023c2 <LL_RCC_SetI2CClockSource>:
{
 80023c2:	b480      	push	{r7}
 80023c4:	b083      	sub	sp, #12
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80023ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	091b      	lsrs	r3, r3, #4
 80023d6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80023da:	43db      	mvns	r3, r3
 80023dc:	401a      	ands	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80023e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023ea:	4313      	orrs	r3, r2
 80023ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bc80      	pop	{r7}
 80023f8:	4770      	bx	lr

080023fa <LL_RCC_SetLPTIMClockSource>:
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002406:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	0c1b      	lsrs	r3, r3, #16
 800240e:	041b      	lsls	r3, r3, #16
 8002410:	43db      	mvns	r3, r3
 8002412:	401a      	ands	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	041b      	lsls	r3, r3, #16
 8002418:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800241c:	4313      	orrs	r3, r2
 800241e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr

0800242c <LL_RCC_SetRNGClockSource>:
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800243c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002440:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4313      	orrs	r3, r2
 8002448:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	bc80      	pop	{r7}
 8002454:	4770      	bx	lr

08002456 <LL_RCC_SetADCClockSource>:
{
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800245e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002466:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800246a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4313      	orrs	r3, r2
 8002472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr

08002480 <LL_RCC_SetRTCClockSource>:
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800248c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002490:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002494:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4313      	orrs	r3, r2
 800249c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr

080024aa <LL_RCC_GetRTCClockSource>:
{
 80024aa:	b480      	push	{r7}
 80024ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80024ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	46bd      	mov	sp, r7
 80024be:	bc80      	pop	{r7}
 80024c0:	4770      	bx	lr

080024c2 <LL_RCC_ForceBackupDomainReset>:
{
 80024c2:	b480      	push	{r7}
 80024c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80024c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80024da:	bf00      	nop
 80024dc:	46bd      	mov	sp, r7
 80024de:	bc80      	pop	{r7}
 80024e0:	4770      	bx	lr

080024e2 <LL_RCC_ReleaseBackupDomainReset>:
{
 80024e2:	b480      	push	{r7}
 80024e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80024e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80024fa:	bf00      	nop
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc80      	pop	{r7}
 8002500:	4770      	bx	lr
	...

08002504 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002510:	2300      	movs	r3, #0
 8002512:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002514:	2300      	movs	r3, #0
 8002516:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d058      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002524:	f7fe fdc0 	bl	80010a8 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002528:	f7fe f944 	bl	80007b4 <HAL_GetTick>
 800252c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800252e:	e009      	b.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002530:	f7fe f940 	bl	80007b4 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d902      	bls.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	74fb      	strb	r3, [r7, #19]
        break;
 8002542:	e006      	b.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002544:	4b7b      	ldr	r3, [pc, #492]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800254c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002550:	d1ee      	bne.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002552:	7cfb      	ldrb	r3, [r7, #19]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d13c      	bne.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002558:	f7ff ffa7 	bl	80024aa <LL_RCC_GetRTCClockSource>
 800255c:	4602      	mov	r2, r0
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002562:	429a      	cmp	r2, r3
 8002564:	d00f      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800256a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002572:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002574:	f7ff ffa5 	bl	80024c2 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002578:	f7ff ffb3 	bl	80024e2 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800257c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d014      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002590:	f7fe f910 	bl	80007b4 <HAL_GetTick>
 8002594:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002596:	e00b      	b.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002598:	f7fe f90c 	bl	80007b4 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d902      	bls.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	74fb      	strb	r3, [r7, #19]
            break;
 80025ae:	e004      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80025b0:	f7ff feb4 	bl	800231c <LL_RCC_LSE_IsReady>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d1ee      	bne.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80025ba:	7cfb      	ldrb	r3, [r7, #19]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d105      	bne.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff ff5b 	bl	8002480 <LL_RCC_SetRTCClockSource>
 80025ca:	e004      	b.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025cc:	7cfb      	ldrb	r3, [r7, #19]
 80025ce:	74bb      	strb	r3, [r7, #18]
 80025d0:	e001      	b.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025d2:	7cfb      	ldrb	r3, [r7, #19]
 80025d4:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d004      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff fea9 	bl	800233e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d004      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff fe9e 	bl	800233e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0320 	and.w	r3, r3, #32
 800260a:	2b00      	cmp	r3, #0
 800260c:	d004      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff fec0 	bl	8002398 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002620:	2b00      	cmp	r3, #0
 8002622:	d004      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff fee6 	bl	80023fa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002636:	2b00      	cmp	r3, #0
 8002638:	d004      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff fedb 	bl	80023fa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800264c:	2b00      	cmp	r3, #0
 800264e:	d004      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff fed0 	bl	80023fa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002662:	2b00      	cmp	r3, #0
 8002664:	d004      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff fea9 	bl	80023c2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002678:	2b00      	cmp	r3, #0
 800267a:	d004      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff fe9e 	bl	80023c2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268e:	2b00      	cmp	r3, #0
 8002690:	d004      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff fe93 	bl	80023c2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0310 	and.w	r3, r3, #16
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d011      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff fe5e 	bl	800236e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026ba:	d107      	bne.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80026bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026ca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d010      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff fea5 	bl	800242c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d107      	bne.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80026ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026f8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d011      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff fea3 	bl	8002456 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002714:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002718:	d107      	bne.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800271a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002728:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800272a:	7cbb      	ldrb	r3, [r7, #18]
}
 800272c:	4618      	mov	r0, r3
 800272e:	3718      	adds	r7, #24
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	58000400 	.word	0x58000400

08002738 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8002740:	4b06      	ldr	r3, [pc, #24]	; (800275c <LL_PWR_SetRadioBusyTrigger+0x24>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002748:	4904      	ldr	r1, [pc, #16]	; (800275c <LL_PWR_SetRadioBusyTrigger+0x24>)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4313      	orrs	r3, r2
 800274e:	608b      	str	r3, [r1, #8]
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	58000400 	.word	0x58000400

08002760 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8002764:	4b05      	ldr	r3, [pc, #20]	; (800277c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8002766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276a:	4a04      	ldr	r2, [pc, #16]	; (800277c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800276c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr
 800277c:	58000400 	.word	0x58000400

08002780 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8002784:	4b05      	ldr	r3, [pc, #20]	; (800279c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8002786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800278a:	4a04      	ldr	r2, [pc, #16]	; (800279c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800278c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002790:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002794:	bf00      	nop
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr
 800279c:	58000400 	.word	0x58000400

080027a0 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80027a4:	4b03      	ldr	r3, [pc, #12]	; (80027b4 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80027a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027aa:	619a      	str	r2, [r3, #24]
}
 80027ac:	bf00      	nop
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr
 80027b4:	58000400 	.word	0x58000400

080027b8 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80027bc:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d101      	bne.n	80027cc <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80027c8:	2301      	movs	r3, #1
 80027ca:	e000      	b.n	80027ce <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	58000400 	.word	0x58000400

080027dc <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80027e0:	4b06      	ldr	r3, [pc, #24]	; (80027fc <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	f003 0304 	and.w	r3, r3, #4
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d101      	bne.n	80027f0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80027ec:	2301      	movs	r3, #1
 80027ee:	e000      	b.n	80027f2 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	58000400 	.word	0x58000400

08002800 <LL_RCC_RF_DisableReset>:
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8002804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002808:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800280c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002810:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002814:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002818:	bf00      	nop
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr

08002820 <LL_RCC_IsRFUnderReset>:
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8002824:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002828:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800282c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002830:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002834:	d101      	bne.n	800283a <LL_RCC_IsRFUnderReset+0x1a>
 8002836:	2301      	movs	r3, #1
 8002838:	e000      	b.n	800283c <LL_RCC_IsRFUnderReset+0x1c>
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr

08002844 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800284c:	4b06      	ldr	r3, [pc, #24]	; (8002868 <LL_EXTI_EnableIT_32_63+0x24>)
 800284e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002852:	4905      	ldr	r1, [pc, #20]	; (8002868 <LL_EXTI_EnableIT_32_63+0x24>)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4313      	orrs	r3, r2
 8002858:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	58000800 	.word	0x58000800

0800286c <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d103      	bne.n	8002882 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	73fb      	strb	r3, [r7, #15]
    return status;
 800287e:	7bfb      	ldrb	r3, [r7, #15]
 8002880:	e04b      	b.n	800291a <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8002882:	2300      	movs	r3, #0
 8002884:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	799b      	ldrb	r3, [r3, #6]
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b00      	cmp	r3, #0
 800288e:	d105      	bne.n	800289c <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7fd ff72 	bl	8000780 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2202      	movs	r2, #2
 80028a0:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 80028a2:	f7ff ffad 	bl	8002800 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80028a6:	4b1f      	ldr	r3, [pc, #124]	; (8002924 <HAL_SUBGHZ_Init+0xb8>)
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	4613      	mov	r3, r2
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	1a9b      	subs	r3, r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	0cdb      	lsrs	r3, r3, #19
 80028b4:	2264      	movs	r2, #100	; 0x64
 80028b6:	fb02 f303 	mul.w	r3, r2, r3
 80028ba:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d105      	bne.n	80028ce <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	609a      	str	r2, [r3, #8]
      break;
 80028cc:	e007      	b.n	80028de <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	3b01      	subs	r3, #1
 80028d2:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 80028d4:	f7ff ffa4 	bl	8002820 <LL_RCC_IsRFUnderReset>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1ee      	bne.n	80028bc <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 80028de:	f7ff ff3f 	bl	8002760 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80028e2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80028e6:	f7ff ffad 	bl	8002844 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80028ea:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80028ee:	f7ff ff23 	bl	8002738 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80028f2:	f7ff ff55 	bl	80027a0 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10a      	bne.n	8002912 <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f000 faad 	bl	8002e60 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	719a      	strb	r2, [r3, #6]

  return status;
 8002918:	7bfb      	ldrb	r3, [r7, #15]
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	20000000 	.word	0x20000000

08002928 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	607a      	str	r2, [r7, #4]
 8002932:	461a      	mov	r2, r3
 8002934:	460b      	mov	r3, r1
 8002936:	817b      	strh	r3, [r7, #10]
 8002938:	4613      	mov	r3, r2
 800293a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	799b      	ldrb	r3, [r3, #6]
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b01      	cmp	r3, #1
 8002944:	d14a      	bne.n	80029dc <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	795b      	ldrb	r3, [r3, #5]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d101      	bne.n	8002952 <HAL_SUBGHZ_WriteRegisters+0x2a>
 800294e:	2302      	movs	r3, #2
 8002950:	e045      	b.n	80029de <HAL_SUBGHZ_WriteRegisters+0xb6>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2201      	movs	r2, #1
 8002956:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2202      	movs	r2, #2
 800295c:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f000 fb4c 	bl	8002ffc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002964:	f7ff ff0c 	bl	8002780 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8002968:	210d      	movs	r1, #13
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 fa98 	bl	8002ea0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8002970:	897b      	ldrh	r3, [r7, #10]
 8002972:	0a1b      	lsrs	r3, r3, #8
 8002974:	b29b      	uxth	r3, r3
 8002976:	b2db      	uxtb	r3, r3
 8002978:	4619      	mov	r1, r3
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f000 fa90 	bl	8002ea0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8002980:	897b      	ldrh	r3, [r7, #10]
 8002982:	b2db      	uxtb	r3, r3
 8002984:	4619      	mov	r1, r3
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 fa8a 	bl	8002ea0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800298c:	2300      	movs	r3, #0
 800298e:	82bb      	strh	r3, [r7, #20]
 8002990:	e00a      	b.n	80029a8 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8002992:	8abb      	ldrh	r3, [r7, #20]
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	4413      	add	r3, r2
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	4619      	mov	r1, r3
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f000 fa7f 	bl	8002ea0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80029a2:	8abb      	ldrh	r3, [r7, #20]
 80029a4:	3301      	adds	r3, #1
 80029a6:	82bb      	strh	r3, [r7, #20]
 80029a8:	8aba      	ldrh	r2, [r7, #20]
 80029aa:	893b      	ldrh	r3, [r7, #8]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d3f0      	bcc.n	8002992 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80029b0:	f7ff fed6 	bl	8002760 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 fb45 	bl	8003044 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d002      	beq.n	80029c8 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	75fb      	strb	r3, [r7, #23]
 80029c6:	e001      	b.n	80029cc <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80029c8:	2300      	movs	r3, #0
 80029ca:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2201      	movs	r2, #1
 80029d0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	715a      	strb	r2, [r3, #5]

    return status;
 80029d8:	7dfb      	ldrb	r3, [r7, #23]
 80029da:	e000      	b.n	80029de <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80029dc:	2302      	movs	r3, #2
  }
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3718      	adds	r7, #24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b088      	sub	sp, #32
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	60f8      	str	r0, [r7, #12]
 80029ee:	607a      	str	r2, [r7, #4]
 80029f0:	461a      	mov	r2, r3
 80029f2:	460b      	mov	r3, r1
 80029f4:	817b      	strh	r3, [r7, #10]
 80029f6:	4613      	mov	r3, r2
 80029f8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	799b      	ldrb	r3, [r3, #6]
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d14a      	bne.n	8002a9e <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	795b      	ldrb	r3, [r3, #5]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e045      	b.n	8002aa0 <HAL_SUBGHZ_ReadRegisters+0xba>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2201      	movs	r2, #1
 8002a18:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f000 faee 	bl	8002ffc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002a20:	f7ff feae 	bl	8002780 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8002a24:	211d      	movs	r1, #29
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f000 fa3a 	bl	8002ea0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8002a2c:	897b      	ldrh	r3, [r7, #10]
 8002a2e:	0a1b      	lsrs	r3, r3, #8
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	4619      	mov	r1, r3
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f000 fa32 	bl	8002ea0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8002a3c:	897b      	ldrh	r3, [r7, #10]
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	4619      	mov	r1, r3
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f000 fa2c 	bl	8002ea0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8002a48:	2100      	movs	r1, #0
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 fa28 	bl	8002ea0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8002a50:	2300      	movs	r3, #0
 8002a52:	82fb      	strh	r3, [r7, #22]
 8002a54:	e009      	b.n	8002a6a <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8002a56:	69b9      	ldr	r1, [r7, #24]
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f000 fa77 	bl	8002f4c <SUBGHZSPI_Receive>
      pData++;
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	3301      	adds	r3, #1
 8002a62:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8002a64:	8afb      	ldrh	r3, [r7, #22]
 8002a66:	3301      	adds	r3, #1
 8002a68:	82fb      	strh	r3, [r7, #22]
 8002a6a:	8afa      	ldrh	r2, [r7, #22]
 8002a6c:	893b      	ldrh	r3, [r7, #8]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d3f1      	bcc.n	8002a56 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002a72:	f7ff fe75 	bl	8002760 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 fae4 	bl	8003044 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d002      	beq.n	8002a8a <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	77fb      	strb	r3, [r7, #31]
 8002a88:	e001      	b.n	8002a8e <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2201      	movs	r2, #1
 8002a92:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	715a      	strb	r2, [r3, #5]

    return status;
 8002a9a:	7ffb      	ldrb	r3, [r7, #31]
 8002a9c:	e000      	b.n	8002aa0 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8002a9e:	2302      	movs	r3, #2
  }
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3720      	adds	r7, #32
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	607a      	str	r2, [r7, #4]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	72fb      	strb	r3, [r7, #11]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	799b      	ldrb	r3, [r3, #6]
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d14a      	bne.n	8002b5c <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	795b      	ldrb	r3, [r3, #5]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8002ace:	2302      	movs	r3, #2
 8002ad0:	e045      	b.n	8002b5e <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 fa8f 	bl	8002ffc <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8002ade:	7afb      	ldrb	r3, [r7, #11]
 8002ae0:	2b84      	cmp	r3, #132	; 0x84
 8002ae2:	d002      	beq.n	8002aea <HAL_SUBGHZ_ExecSetCmd+0x42>
 8002ae4:	7afb      	ldrb	r3, [r7, #11]
 8002ae6:	2b94      	cmp	r3, #148	; 0x94
 8002ae8:	d103      	bne.n	8002af2 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2201      	movs	r2, #1
 8002aee:	711a      	strb	r2, [r3, #4]
 8002af0:	e002      	b.n	8002af8 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002af8:	f7ff fe42 	bl	8002780 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8002afc:	7afb      	ldrb	r3, [r7, #11]
 8002afe:	4619      	mov	r1, r3
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 f9cd 	bl	8002ea0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8002b06:	2300      	movs	r3, #0
 8002b08:	82bb      	strh	r3, [r7, #20]
 8002b0a:	e00a      	b.n	8002b22 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8002b0c:	8abb      	ldrh	r3, [r7, #20]
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	4413      	add	r3, r2
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	4619      	mov	r1, r3
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 f9c2 	bl	8002ea0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8002b1c:	8abb      	ldrh	r3, [r7, #20]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	82bb      	strh	r3, [r7, #20]
 8002b22:	8aba      	ldrh	r2, [r7, #20]
 8002b24:	893b      	ldrh	r3, [r7, #8]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d3f0      	bcc.n	8002b0c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002b2a:	f7ff fe19 	bl	8002760 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8002b2e:	7afb      	ldrb	r3, [r7, #11]
 8002b30:	2b84      	cmp	r3, #132	; 0x84
 8002b32:	d002      	beq.n	8002b3a <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 fa85 	bl	8003044 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d002      	beq.n	8002b48 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	75fb      	strb	r3, [r7, #23]
 8002b46:	e001      	b.n	8002b4c <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	715a      	strb	r2, [r3, #5]

    return status;
 8002b58:	7dfb      	ldrb	r3, [r7, #23]
 8002b5a:	e000      	b.n	8002b5e <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8002b5c:	2302      	movs	r3, #2
  }
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b088      	sub	sp, #32
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	60f8      	str	r0, [r7, #12]
 8002b6e:	607a      	str	r2, [r7, #4]
 8002b70:	461a      	mov	r2, r3
 8002b72:	460b      	mov	r3, r1
 8002b74:	72fb      	strb	r3, [r7, #11]
 8002b76:	4613      	mov	r3, r2
 8002b78:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	799b      	ldrb	r3, [r3, #6]
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d13d      	bne.n	8002c04 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	795b      	ldrb	r3, [r3, #5]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d101      	bne.n	8002b94 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8002b90:	2302      	movs	r3, #2
 8002b92:	e038      	b.n	8002c06 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2201      	movs	r2, #1
 8002b98:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 fa2e 	bl	8002ffc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002ba0:	f7ff fdee 	bl	8002780 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8002ba4:	7afb      	ldrb	r3, [r7, #11]
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 f979 	bl	8002ea0 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8002bae:	2100      	movs	r1, #0
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f000 f975 	bl	8002ea0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	82fb      	strh	r3, [r7, #22]
 8002bba:	e009      	b.n	8002bd0 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8002bbc:	69b9      	ldr	r1, [r7, #24]
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f000 f9c4 	bl	8002f4c <SUBGHZSPI_Receive>
      pData++;
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8002bca:	8afb      	ldrh	r3, [r7, #22]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	82fb      	strh	r3, [r7, #22]
 8002bd0:	8afa      	ldrh	r2, [r7, #22]
 8002bd2:	893b      	ldrh	r3, [r7, #8]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d3f1      	bcc.n	8002bbc <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002bd8:	f7ff fdc2 	bl	8002760 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 fa31 	bl	8003044 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d002      	beq.n	8002bf0 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	77fb      	strb	r3, [r7, #31]
 8002bee:	e001      	b.n	8002bf4 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	715a      	strb	r2, [r3, #5]

    return status;
 8002c00:	7ffb      	ldrb	r3, [r7, #31]
 8002c02:	e000      	b.n	8002c06 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002c04:	2302      	movs	r3, #2
  }
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3720      	adds	r7, #32
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b086      	sub	sp, #24
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	60f8      	str	r0, [r7, #12]
 8002c16:	607a      	str	r2, [r7, #4]
 8002c18:	461a      	mov	r2, r3
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	72fb      	strb	r3, [r7, #11]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	799b      	ldrb	r3, [r3, #6]
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d13e      	bne.n	8002caa <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	795b      	ldrb	r3, [r3, #5]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d101      	bne.n	8002c38 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8002c34:	2302      	movs	r3, #2
 8002c36:	e039      	b.n	8002cac <HAL_SUBGHZ_WriteBuffer+0x9e>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 f9dc 	bl	8002ffc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002c44:	f7ff fd9c 	bl	8002780 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8002c48:	210e      	movs	r1, #14
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 f928 	bl	8002ea0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8002c50:	7afb      	ldrb	r3, [r7, #11]
 8002c52:	4619      	mov	r1, r3
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f000 f923 	bl	8002ea0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	82bb      	strh	r3, [r7, #20]
 8002c5e:	e00a      	b.n	8002c76 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8002c60:	8abb      	ldrh	r3, [r7, #20]
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	4413      	add	r3, r2
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	4619      	mov	r1, r3
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 f918 	bl	8002ea0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8002c70:	8abb      	ldrh	r3, [r7, #20]
 8002c72:	3301      	adds	r3, #1
 8002c74:	82bb      	strh	r3, [r7, #20]
 8002c76:	8aba      	ldrh	r2, [r7, #20]
 8002c78:	893b      	ldrh	r3, [r7, #8]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d3f0      	bcc.n	8002c60 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002c7e:	f7ff fd6f 	bl	8002760 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 f9de 	bl	8003044 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d002      	beq.n	8002c96 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	75fb      	strb	r3, [r7, #23]
 8002c94:	e001      	b.n	8002c9a <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	715a      	strb	r2, [r3, #5]

    return status;
 8002ca6:	7dfb      	ldrb	r3, [r7, #23]
 8002ca8:	e000      	b.n	8002cac <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002caa:	2302      	movs	r3, #2
  }
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b088      	sub	sp, #32
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	607a      	str	r2, [r7, #4]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	72fb      	strb	r3, [r7, #11]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	799b      	ldrb	r3, [r3, #6]
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d141      	bne.n	8002d5a <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	795b      	ldrb	r3, [r3, #5]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d101      	bne.n	8002ce2 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e03c      	b.n	8002d5c <HAL_SUBGHZ_ReadBuffer+0xa8>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 f987 	bl	8002ffc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002cee:	f7ff fd47 	bl	8002780 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8002cf2:	211e      	movs	r1, #30
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f000 f8d3 	bl	8002ea0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8002cfa:	7afb      	ldrb	r3, [r7, #11]
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f000 f8ce 	bl	8002ea0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8002d04:	2100      	movs	r1, #0
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 f8ca 	bl	8002ea0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	82fb      	strh	r3, [r7, #22]
 8002d10:	e009      	b.n	8002d26 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8002d12:	69b9      	ldr	r1, [r7, #24]
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f000 f919 	bl	8002f4c <SUBGHZSPI_Receive>
      pData++;
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8002d20:	8afb      	ldrh	r3, [r7, #22]
 8002d22:	3301      	adds	r3, #1
 8002d24:	82fb      	strh	r3, [r7, #22]
 8002d26:	8afa      	ldrh	r2, [r7, #22]
 8002d28:	893b      	ldrh	r3, [r7, #8]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d3f1      	bcc.n	8002d12 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002d2e:	f7ff fd17 	bl	8002760 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 f986 	bl	8003044 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d002      	beq.n	8002d46 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	77fb      	strb	r3, [r7, #31]
 8002d44:	e001      	b.n	8002d4a <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8002d46:	2300      	movs	r3, #0
 8002d48:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	715a      	strb	r2, [r3, #5]

    return status;
 8002d56:	7ffb      	ldrb	r3, [r7, #31]
 8002d58:	e000      	b.n	8002d5c <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8002d5a:	2302      	movs	r3, #2
  }
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3720      	adds	r7, #32
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8002d70:	f107 020c 	add.w	r2, r7, #12
 8002d74:	2302      	movs	r3, #2
 8002d76:	2112      	movs	r1, #18
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f7ff fef4 	bl	8002b66 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8002d7e:	7b3b      	ldrb	r3, [r7, #12]
 8002d80:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8002d82:	89fb      	ldrh	r3, [r7, #14]
 8002d84:	021b      	lsls	r3, r3, #8
 8002d86:	b21a      	sxth	r2, r3
 8002d88:	7b7b      	ldrb	r3, [r7, #13]
 8002d8a:	b21b      	sxth	r3, r3
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	b21b      	sxth	r3, r3
 8002d90:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8002d92:	89fb      	ldrh	r3, [r7, #14]
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d002      	beq.n	8002da2 <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f003 ff5f 	bl	8006c60 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8002da2:	89fb      	ldrh	r3, [r7, #14]
 8002da4:	085b      	lsrs	r3, r3, #1
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d002      	beq.n	8002db4 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f003 ff64 	bl	8006c7c <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8002db4:	89fb      	ldrh	r3, [r7, #14]
 8002db6:	089b      	lsrs	r3, r3, #2
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d002      	beq.n	8002dc6 <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f003 ffb3 	bl	8006d2c <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8002dc6:	89fb      	ldrh	r3, [r7, #14]
 8002dc8:	08db      	lsrs	r3, r3, #3
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d002      	beq.n	8002dd8 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f003 ffb8 	bl	8006d48 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8002dd8:	89fb      	ldrh	r3, [r7, #14]
 8002dda:	091b      	lsrs	r3, r3, #4
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d002      	beq.n	8002dea <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f003 ffbd 	bl	8006d64 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8002dea:	89fb      	ldrh	r3, [r7, #14]
 8002dec:	095b      	lsrs	r3, r3, #5
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d002      	beq.n	8002dfc <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f003 ff8a 	bl	8006d10 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8002dfc:	89fb      	ldrh	r3, [r7, #14]
 8002dfe:	099b      	lsrs	r3, r3, #6
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d002      	beq.n	8002e0e <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f003 ff45 	bl	8006c98 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8002e0e:	89fb      	ldrh	r3, [r7, #14]
 8002e10:	09db      	lsrs	r3, r3, #7
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00e      	beq.n	8002e38 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8002e1a:	89fb      	ldrh	r3, [r7, #14]
 8002e1c:	0a1b      	lsrs	r3, r3, #8
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d004      	beq.n	8002e30 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8002e26:	2101      	movs	r1, #1
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f003 ff43 	bl	8006cb4 <HAL_SUBGHZ_CADStatusCallback>
 8002e2e:	e003      	b.n	8002e38 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8002e30:	2100      	movs	r1, #0
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f003 ff3e 	bl	8006cb4 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8002e38:	89fb      	ldrh	r3, [r7, #14]
 8002e3a:	0a5b      	lsrs	r3, r3, #9
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d002      	beq.n	8002e4a <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f003 ff53 	bl	8006cf0 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8002e4a:	f107 020c 	add.w	r2, r7, #12
 8002e4e:	2302      	movs	r3, #2
 8002e50:	2102      	movs	r1, #2
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f7ff fe28 	bl	8002aa8 <HAL_SUBGHZ_ExecSetCmd>
}
 8002e58:	bf00      	nop
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8002e68:	4b0c      	ldr	r3, [pc, #48]	; (8002e9c <SUBGHZSPI_Init+0x3c>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a0b      	ldr	r2, [pc, #44]	; (8002e9c <SUBGHZSPI_Init+0x3c>)
 8002e6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e72:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8002e74:	4a09      	ldr	r2, [pc, #36]	; (8002e9c <SUBGHZSPI_Init+0x3c>)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8002e7c:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8002e7e:	4b07      	ldr	r3, [pc, #28]	; (8002e9c <SUBGHZSPI_Init+0x3c>)
 8002e80:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8002e84:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8002e86:	4b05      	ldr	r3, [pc, #20]	; (8002e9c <SUBGHZSPI_Init+0x3c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a04      	ldr	r2, [pc, #16]	; (8002e9c <SUBGHZSPI_Init+0x3c>)
 8002e8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e90:	6013      	str	r3, [r2, #0]
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr
 8002e9c:	58010000 	.word	0x58010000

08002ea0 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b087      	sub	sp, #28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002eac:	2300      	movs	r3, #0
 8002eae:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002eb0:	4b23      	ldr	r3, [pc, #140]	; (8002f40 <SUBGHZSPI_Transmit+0xa0>)
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	1a9b      	subs	r3, r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	0cdb      	lsrs	r3, r3, #19
 8002ebe:	2264      	movs	r2, #100	; 0x64
 8002ec0:	fb02 f303 	mul.w	r3, r2, r3
 8002ec4:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d105      	bne.n	8002ed8 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	609a      	str	r2, [r3, #8]
      break;
 8002ed6:	e008      	b.n	8002eea <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	3b01      	subs	r3, #1
 8002edc:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8002ede:	4b19      	ldr	r3, [pc, #100]	; (8002f44 <SUBGHZSPI_Transmit+0xa4>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d1ed      	bne.n	8002ec6 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8002eea:	4b17      	ldr	r3, [pc, #92]	; (8002f48 <SUBGHZSPI_Transmit+0xa8>)
 8002eec:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	78fa      	ldrb	r2, [r7, #3]
 8002ef2:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002ef4:	4b12      	ldr	r3, [pc, #72]	; (8002f40 <SUBGHZSPI_Transmit+0xa0>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	1a9b      	subs	r3, r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	0cdb      	lsrs	r3, r3, #19
 8002f02:	2264      	movs	r2, #100	; 0x64
 8002f04:	fb02 f303 	mul.w	r3, r2, r3
 8002f08:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d105      	bne.n	8002f1c <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	609a      	str	r2, [r3, #8]
      break;
 8002f1a:	e008      	b.n	8002f2e <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8002f22:	4b08      	ldr	r3, [pc, #32]	; (8002f44 <SUBGHZSPI_Transmit+0xa4>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d1ed      	bne.n	8002f0a <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8002f2e:	4b05      	ldr	r3, [pc, #20]	; (8002f44 <SUBGHZSPI_Transmit+0xa4>)
 8002f30:	68db      	ldr	r3, [r3, #12]

  return status;
 8002f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	371c      	adds	r7, #28
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	20000000 	.word	0x20000000
 8002f44:	58010000 	.word	0x58010000
 8002f48:	5801000c 	.word	0x5801000c

08002f4c <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b087      	sub	sp, #28
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f56:	2300      	movs	r3, #0
 8002f58:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002f5a:	4b25      	ldr	r3, [pc, #148]	; (8002ff0 <SUBGHZSPI_Receive+0xa4>)
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	1a9b      	subs	r3, r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	0cdb      	lsrs	r3, r3, #19
 8002f68:	2264      	movs	r2, #100	; 0x64
 8002f6a:	fb02 f303 	mul.w	r3, r2, r3
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d105      	bne.n	8002f82 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	609a      	str	r2, [r3, #8]
      break;
 8002f80:	e008      	b.n	8002f94 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	3b01      	subs	r3, #1
 8002f86:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8002f88:	4b1a      	ldr	r3, [pc, #104]	; (8002ff4 <SUBGHZSPI_Receive+0xa8>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d1ed      	bne.n	8002f70 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8002f94:	4b18      	ldr	r3, [pc, #96]	; (8002ff8 <SUBGHZSPI_Receive+0xac>)
 8002f96:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	22ff      	movs	r2, #255	; 0xff
 8002f9c:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002f9e:	4b14      	ldr	r3, [pc, #80]	; (8002ff0 <SUBGHZSPI_Receive+0xa4>)
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	1a9b      	subs	r3, r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	0cdb      	lsrs	r3, r3, #19
 8002fac:	2264      	movs	r2, #100	; 0x64
 8002fae:	fb02 f303 	mul.w	r3, r2, r3
 8002fb2:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d105      	bne.n	8002fc6 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	609a      	str	r2, [r3, #8]
      break;
 8002fc4:	e008      	b.n	8002fd8 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8002fcc:	4b09      	ldr	r3, [pc, #36]	; (8002ff4 <SUBGHZSPI_Receive+0xa8>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d1ed      	bne.n	8002fb4 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8002fd8:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <SUBGHZSPI_Receive+0xa8>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	b2da      	uxtb	r2, r3
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	701a      	strb	r2, [r3, #0]

  return status;
 8002fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	371c      	adds	r7, #28
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bc80      	pop	{r7}
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	20000000 	.word	0x20000000
 8002ff4:	58010000 	.word	0x58010000
 8002ff8:	5801000c 	.word	0x5801000c

08002ffc <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	791b      	ldrb	r3, [r3, #4]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d111      	bne.n	8003030 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 800300c:	4b0c      	ldr	r3, [pc, #48]	; (8003040 <SUBGHZ_CheckDeviceReady+0x44>)
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	4613      	mov	r3, r2
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	4413      	add	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	0c1b      	lsrs	r3, r3, #16
 800301a:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800301c:	f7ff fbb0 	bl	8002780 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	3b01      	subs	r3, #1
 8003024:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1f9      	bne.n	8003020 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800302c:	f7ff fb98 	bl	8002760 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 f807 	bl	8003044 <SUBGHZ_WaitOnBusy>
 8003036:	4603      	mov	r3, r0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	20000000 	.word	0x20000000

08003044 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 800304c:	2300      	movs	r3, #0
 800304e:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8003050:	4b12      	ldr	r3, [pc, #72]	; (800309c <SUBGHZ_WaitOnBusy+0x58>)
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	4613      	mov	r3, r2
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	4413      	add	r3, r2
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	0d1b      	lsrs	r3, r3, #20
 800305e:	2264      	movs	r2, #100	; 0x64
 8003060:	fb02 f303 	mul.w	r3, r2, r3
 8003064:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8003066:	f7ff fbb9 	bl	80027dc <LL_PWR_IsActiveFlag_RFBUSYMS>
 800306a:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d105      	bne.n	800307e <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2202      	movs	r2, #2
 800307a:	609a      	str	r2, [r3, #8]
      break;
 800307c:	e009      	b.n	8003092 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	3b01      	subs	r3, #1
 8003082:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8003084:	f7ff fb98 	bl	80027b8 <LL_PWR_IsActiveFlag_RFBUSYS>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	4013      	ands	r3, r2
 800308e:	2b01      	cmp	r3, #1
 8003090:	d0e9      	beq.n	8003066 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8003092:	7dfb      	ldrb	r3, [r7, #23]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	20000000 	.word	0x20000000

080030a0 <LL_RCC_GetUSARTClockSource>:
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80030a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	401a      	ands	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	041b      	lsls	r3, r3, #16
 80030b8:	4313      	orrs	r3, r2
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr

080030c4 <LL_RCC_GetLPUARTClockSource>:
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80030cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4013      	ands	r3, r2
}
 80030d8:	4618      	mov	r0, r3
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr

080030e2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b082      	sub	sp, #8
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e042      	b.n	800317a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d106      	bne.n	800310c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7fd fc6e 	bl	80009e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2224      	movs	r2, #36	; 0x24
 8003110:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0201 	bic.w	r2, r2, #1
 8003122:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 f82d 	bl	8003184 <UART_SetConfig>
 800312a:	4603      	mov	r3, r0
 800312c:	2b01      	cmp	r3, #1
 800312e:	d101      	bne.n	8003134 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e022      	b.n	800317a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003138:	2b00      	cmp	r3, #0
 800313a:	d002      	beq.n	8003142 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 fa95 	bl	800366c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003150:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003160:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f042 0201 	orr.w	r2, r2, #1
 8003170:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 fb1b 	bl	80037ae <UART_CheckIdleState>
 8003178:	4603      	mov	r3, r0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
	...

08003184 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003188:	b08c      	sub	sp, #48	; 0x30
 800318a:	af00      	add	r7, sp, #0
 800318c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800318e:	2300      	movs	r3, #0
 8003190:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	431a      	orrs	r2, r3
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	431a      	orrs	r2, r3
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	69db      	ldr	r3, [r3, #28]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	4b94      	ldr	r3, [pc, #592]	; (8003404 <UART_SetConfig+0x280>)
 80031b4:	4013      	ands	r3, r2
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	6812      	ldr	r2, [r2, #0]
 80031ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031bc:	430b      	orrs	r3, r1
 80031be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a89      	ldr	r2, [pc, #548]	; (8003408 <UART_SetConfig+0x284>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d004      	beq.n	80031f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031ec:	4313      	orrs	r3, r2
 80031ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80031fa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	6812      	ldr	r2, [r2, #0]
 8003202:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003204:	430b      	orrs	r3, r1
 8003206:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320e:	f023 010f 	bic.w	r1, r3, #15
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a7a      	ldr	r2, [pc, #488]	; (800340c <UART_SetConfig+0x288>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d127      	bne.n	8003278 <UART_SetConfig+0xf4>
 8003228:	2003      	movs	r0, #3
 800322a:	f7ff ff39 	bl	80030a0 <LL_RCC_GetUSARTClockSource>
 800322e:	4603      	mov	r3, r0
 8003230:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8003234:	2b03      	cmp	r3, #3
 8003236:	d81b      	bhi.n	8003270 <UART_SetConfig+0xec>
 8003238:	a201      	add	r2, pc, #4	; (adr r2, 8003240 <UART_SetConfig+0xbc>)
 800323a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323e:	bf00      	nop
 8003240:	08003251 	.word	0x08003251
 8003244:	08003261 	.word	0x08003261
 8003248:	08003259 	.word	0x08003259
 800324c:	08003269 	.word	0x08003269
 8003250:	2301      	movs	r3, #1
 8003252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003256:	e080      	b.n	800335a <UART_SetConfig+0x1d6>
 8003258:	2302      	movs	r3, #2
 800325a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800325e:	e07c      	b.n	800335a <UART_SetConfig+0x1d6>
 8003260:	2304      	movs	r3, #4
 8003262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003266:	e078      	b.n	800335a <UART_SetConfig+0x1d6>
 8003268:	2308      	movs	r3, #8
 800326a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800326e:	e074      	b.n	800335a <UART_SetConfig+0x1d6>
 8003270:	2310      	movs	r3, #16
 8003272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003276:	e070      	b.n	800335a <UART_SetConfig+0x1d6>
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a64      	ldr	r2, [pc, #400]	; (8003410 <UART_SetConfig+0x28c>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d138      	bne.n	80032f4 <UART_SetConfig+0x170>
 8003282:	200c      	movs	r0, #12
 8003284:	f7ff ff0c 	bl	80030a0 <LL_RCC_GetUSARTClockSource>
 8003288:	4603      	mov	r3, r0
 800328a:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800328e:	2b0c      	cmp	r3, #12
 8003290:	d82c      	bhi.n	80032ec <UART_SetConfig+0x168>
 8003292:	a201      	add	r2, pc, #4	; (adr r2, 8003298 <UART_SetConfig+0x114>)
 8003294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003298:	080032cd 	.word	0x080032cd
 800329c:	080032ed 	.word	0x080032ed
 80032a0:	080032ed 	.word	0x080032ed
 80032a4:	080032ed 	.word	0x080032ed
 80032a8:	080032dd 	.word	0x080032dd
 80032ac:	080032ed 	.word	0x080032ed
 80032b0:	080032ed 	.word	0x080032ed
 80032b4:	080032ed 	.word	0x080032ed
 80032b8:	080032d5 	.word	0x080032d5
 80032bc:	080032ed 	.word	0x080032ed
 80032c0:	080032ed 	.word	0x080032ed
 80032c4:	080032ed 	.word	0x080032ed
 80032c8:	080032e5 	.word	0x080032e5
 80032cc:	2300      	movs	r3, #0
 80032ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032d2:	e042      	b.n	800335a <UART_SetConfig+0x1d6>
 80032d4:	2302      	movs	r3, #2
 80032d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032da:	e03e      	b.n	800335a <UART_SetConfig+0x1d6>
 80032dc:	2304      	movs	r3, #4
 80032de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032e2:	e03a      	b.n	800335a <UART_SetConfig+0x1d6>
 80032e4:	2308      	movs	r3, #8
 80032e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032ea:	e036      	b.n	800335a <UART_SetConfig+0x1d6>
 80032ec:	2310      	movs	r3, #16
 80032ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032f2:	e032      	b.n	800335a <UART_SetConfig+0x1d6>
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a43      	ldr	r2, [pc, #268]	; (8003408 <UART_SetConfig+0x284>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d12a      	bne.n	8003354 <UART_SetConfig+0x1d0>
 80032fe:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003302:	f7ff fedf 	bl	80030c4 <LL_RCC_GetLPUARTClockSource>
 8003306:	4603      	mov	r3, r0
 8003308:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800330c:	d01a      	beq.n	8003344 <UART_SetConfig+0x1c0>
 800330e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003312:	d81b      	bhi.n	800334c <UART_SetConfig+0x1c8>
 8003314:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003318:	d00c      	beq.n	8003334 <UART_SetConfig+0x1b0>
 800331a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800331e:	d815      	bhi.n	800334c <UART_SetConfig+0x1c8>
 8003320:	2b00      	cmp	r3, #0
 8003322:	d003      	beq.n	800332c <UART_SetConfig+0x1a8>
 8003324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003328:	d008      	beq.n	800333c <UART_SetConfig+0x1b8>
 800332a:	e00f      	b.n	800334c <UART_SetConfig+0x1c8>
 800332c:	2300      	movs	r3, #0
 800332e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003332:	e012      	b.n	800335a <UART_SetConfig+0x1d6>
 8003334:	2302      	movs	r3, #2
 8003336:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800333a:	e00e      	b.n	800335a <UART_SetConfig+0x1d6>
 800333c:	2304      	movs	r3, #4
 800333e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003342:	e00a      	b.n	800335a <UART_SetConfig+0x1d6>
 8003344:	2308      	movs	r3, #8
 8003346:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800334a:	e006      	b.n	800335a <UART_SetConfig+0x1d6>
 800334c:	2310      	movs	r3, #16
 800334e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003352:	e002      	b.n	800335a <UART_SetConfig+0x1d6>
 8003354:	2310      	movs	r3, #16
 8003356:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a2a      	ldr	r2, [pc, #168]	; (8003408 <UART_SetConfig+0x284>)
 8003360:	4293      	cmp	r3, r2
 8003362:	f040 80a4 	bne.w	80034ae <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003366:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800336a:	2b08      	cmp	r3, #8
 800336c:	d823      	bhi.n	80033b6 <UART_SetConfig+0x232>
 800336e:	a201      	add	r2, pc, #4	; (adr r2, 8003374 <UART_SetConfig+0x1f0>)
 8003370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003374:	08003399 	.word	0x08003399
 8003378:	080033b7 	.word	0x080033b7
 800337c:	080033a1 	.word	0x080033a1
 8003380:	080033b7 	.word	0x080033b7
 8003384:	080033a7 	.word	0x080033a7
 8003388:	080033b7 	.word	0x080033b7
 800338c:	080033b7 	.word	0x080033b7
 8003390:	080033b7 	.word	0x080033b7
 8003394:	080033af 	.word	0x080033af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003398:	f7fe feea 	bl	8002170 <HAL_RCC_GetPCLK1Freq>
 800339c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800339e:	e010      	b.n	80033c2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033a0:	4b1c      	ldr	r3, [pc, #112]	; (8003414 <UART_SetConfig+0x290>)
 80033a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80033a4:	e00d      	b.n	80033c2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033a6:	f7fe fe2f 	bl	8002008 <HAL_RCC_GetSysClockFreq>
 80033aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80033ac:	e009      	b.n	80033c2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80033b4:	e005      	b.n	80033c2 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80033b6:	2300      	movs	r3, #0
 80033b8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80033c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 8137 	beq.w	8003638 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ce:	4a12      	ldr	r2, [pc, #72]	; (8003418 <UART_SetConfig+0x294>)
 80033d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033d4:	461a      	mov	r2, r3
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80033dc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	4613      	mov	r3, r2
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	4413      	add	r3, r2
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d305      	bcc.n	80033fa <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d910      	bls.n	800341c <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003400:	e11a      	b.n	8003638 <UART_SetConfig+0x4b4>
 8003402:	bf00      	nop
 8003404:	cfff69f3 	.word	0xcfff69f3
 8003408:	40008000 	.word	0x40008000
 800340c:	40013800 	.word	0x40013800
 8003410:	40004400 	.word	0x40004400
 8003414:	00f42400 	.word	0x00f42400
 8003418:	08007740 	.word	0x08007740
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341e:	2200      	movs	r2, #0
 8003420:	60bb      	str	r3, [r7, #8]
 8003422:	60fa      	str	r2, [r7, #12]
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	4a8e      	ldr	r2, [pc, #568]	; (8003664 <UART_SetConfig+0x4e0>)
 800342a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800342e:	b29b      	uxth	r3, r3
 8003430:	2200      	movs	r2, #0
 8003432:	603b      	str	r3, [r7, #0]
 8003434:	607a      	str	r2, [r7, #4]
 8003436:	e9d7 2300 	ldrd	r2, r3, [r7]
 800343a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800343e:	f7fc fe9b 	bl	8000178 <__aeabi_uldivmod>
 8003442:	4602      	mov	r2, r0
 8003444:	460b      	mov	r3, r1
 8003446:	4610      	mov	r0, r2
 8003448:	4619      	mov	r1, r3
 800344a:	f04f 0200 	mov.w	r2, #0
 800344e:	f04f 0300 	mov.w	r3, #0
 8003452:	020b      	lsls	r3, r1, #8
 8003454:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003458:	0202      	lsls	r2, r0, #8
 800345a:	6979      	ldr	r1, [r7, #20]
 800345c:	6849      	ldr	r1, [r1, #4]
 800345e:	0849      	lsrs	r1, r1, #1
 8003460:	2000      	movs	r0, #0
 8003462:	460c      	mov	r4, r1
 8003464:	4605      	mov	r5, r0
 8003466:	eb12 0804 	adds.w	r8, r2, r4
 800346a:	eb43 0905 	adc.w	r9, r3, r5
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	469a      	mov	sl, r3
 8003476:	4693      	mov	fp, r2
 8003478:	4652      	mov	r2, sl
 800347a:	465b      	mov	r3, fp
 800347c:	4640      	mov	r0, r8
 800347e:	4649      	mov	r1, r9
 8003480:	f7fc fe7a 	bl	8000178 <__aeabi_uldivmod>
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	4613      	mov	r3, r2
 800348a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003492:	d308      	bcc.n	80034a6 <UART_SetConfig+0x322>
 8003494:	6a3b      	ldr	r3, [r7, #32]
 8003496:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800349a:	d204      	bcs.n	80034a6 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6a3a      	ldr	r2, [r7, #32]
 80034a2:	60da      	str	r2, [r3, #12]
 80034a4:	e0c8      	b.n	8003638 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80034ac:	e0c4      	b.n	8003638 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034b6:	d168      	bne.n	800358a <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80034b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80034bc:	2b08      	cmp	r3, #8
 80034be:	d828      	bhi.n	8003512 <UART_SetConfig+0x38e>
 80034c0:	a201      	add	r2, pc, #4	; (adr r2, 80034c8 <UART_SetConfig+0x344>)
 80034c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c6:	bf00      	nop
 80034c8:	080034ed 	.word	0x080034ed
 80034cc:	080034f5 	.word	0x080034f5
 80034d0:	080034fd 	.word	0x080034fd
 80034d4:	08003513 	.word	0x08003513
 80034d8:	08003503 	.word	0x08003503
 80034dc:	08003513 	.word	0x08003513
 80034e0:	08003513 	.word	0x08003513
 80034e4:	08003513 	.word	0x08003513
 80034e8:	0800350b 	.word	0x0800350b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034ec:	f7fe fe40 	bl	8002170 <HAL_RCC_GetPCLK1Freq>
 80034f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80034f2:	e014      	b.n	800351e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034f4:	f7fe fe4e 	bl	8002194 <HAL_RCC_GetPCLK2Freq>
 80034f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80034fa:	e010      	b.n	800351e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034fc:	4b5a      	ldr	r3, [pc, #360]	; (8003668 <UART_SetConfig+0x4e4>)
 80034fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003500:	e00d      	b.n	800351e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003502:	f7fe fd81 	bl	8002008 <HAL_RCC_GetSysClockFreq>
 8003506:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003508:	e009      	b.n	800351e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800350a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800350e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003510:	e005      	b.n	800351e <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8003512:	2300      	movs	r3, #0
 8003514:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800351c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 8089 	beq.w	8003638 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	4a4e      	ldr	r2, [pc, #312]	; (8003664 <UART_SetConfig+0x4e0>)
 800352c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003530:	461a      	mov	r2, r3
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	fbb3 f3f2 	udiv	r3, r3, r2
 8003538:	005a      	lsls	r2, r3, #1
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	085b      	lsrs	r3, r3, #1
 8003540:	441a      	add	r2, r3
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	fbb2 f3f3 	udiv	r3, r2, r3
 800354a:	b29b      	uxth	r3, r3
 800354c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	2b0f      	cmp	r3, #15
 8003552:	d916      	bls.n	8003582 <UART_SetConfig+0x3fe>
 8003554:	6a3b      	ldr	r3, [r7, #32]
 8003556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800355a:	d212      	bcs.n	8003582 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800355c:	6a3b      	ldr	r3, [r7, #32]
 800355e:	b29b      	uxth	r3, r3
 8003560:	f023 030f 	bic.w	r3, r3, #15
 8003564:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	085b      	lsrs	r3, r3, #1
 800356a:	b29b      	uxth	r3, r3
 800356c:	f003 0307 	and.w	r3, r3, #7
 8003570:	b29a      	uxth	r2, r3
 8003572:	8bfb      	ldrh	r3, [r7, #30]
 8003574:	4313      	orrs	r3, r2
 8003576:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	8bfa      	ldrh	r2, [r7, #30]
 800357e:	60da      	str	r2, [r3, #12]
 8003580:	e05a      	b.n	8003638 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003588:	e056      	b.n	8003638 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800358a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800358e:	2b08      	cmp	r3, #8
 8003590:	d827      	bhi.n	80035e2 <UART_SetConfig+0x45e>
 8003592:	a201      	add	r2, pc, #4	; (adr r2, 8003598 <UART_SetConfig+0x414>)
 8003594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003598:	080035bd 	.word	0x080035bd
 800359c:	080035c5 	.word	0x080035c5
 80035a0:	080035cd 	.word	0x080035cd
 80035a4:	080035e3 	.word	0x080035e3
 80035a8:	080035d3 	.word	0x080035d3
 80035ac:	080035e3 	.word	0x080035e3
 80035b0:	080035e3 	.word	0x080035e3
 80035b4:	080035e3 	.word	0x080035e3
 80035b8:	080035db 	.word	0x080035db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035bc:	f7fe fdd8 	bl	8002170 <HAL_RCC_GetPCLK1Freq>
 80035c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80035c2:	e014      	b.n	80035ee <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035c4:	f7fe fde6 	bl	8002194 <HAL_RCC_GetPCLK2Freq>
 80035c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80035ca:	e010      	b.n	80035ee <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035cc:	4b26      	ldr	r3, [pc, #152]	; (8003668 <UART_SetConfig+0x4e4>)
 80035ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80035d0:	e00d      	b.n	80035ee <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035d2:	f7fe fd19 	bl	8002008 <HAL_RCC_GetSysClockFreq>
 80035d6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80035d8:	e009      	b.n	80035ee <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80035e0:	e005      	b.n	80035ee <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80035e2:	2300      	movs	r3, #0
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80035ec:	bf00      	nop
    }

    if (pclk != 0U)
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d021      	beq.n	8003638 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	4a1a      	ldr	r2, [pc, #104]	; (8003664 <UART_SetConfig+0x4e0>)
 80035fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035fe:	461a      	mov	r2, r3
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	fbb3 f2f2 	udiv	r2, r3, r2
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	085b      	lsrs	r3, r3, #1
 800360c:	441a      	add	r2, r3
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	fbb2 f3f3 	udiv	r3, r2, r3
 8003616:	b29b      	uxth	r3, r3
 8003618:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	2b0f      	cmp	r3, #15
 800361e:	d908      	bls.n	8003632 <UART_SetConfig+0x4ae>
 8003620:	6a3b      	ldr	r3, [r7, #32]
 8003622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003626:	d204      	bcs.n	8003632 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6a3a      	ldr	r2, [r7, #32]
 800362e:	60da      	str	r2, [r3, #12]
 8003630:	e002      	b.n	8003638 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	2201      	movs	r2, #1
 800363c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	2201      	movs	r2, #1
 8003644:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	2200      	movs	r2, #0
 800364c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	2200      	movs	r2, #0
 8003652:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003654:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003658:	4618      	mov	r0, r3
 800365a:	3730      	adds	r7, #48	; 0x30
 800365c:	46bd      	mov	sp, r7
 800365e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003662:	bf00      	nop
 8003664:	08007740 	.word	0x08007740
 8003668:	00f42400 	.word	0x00f42400

0800366c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00a      	beq.n	8003696 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00a      	beq.n	80036b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00a      	beq.n	80036da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036de:	f003 0308 	and.w	r3, r3, #8
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00a      	beq.n	80036fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	430a      	orrs	r2, r1
 80036fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003700:	f003 0310 	and.w	r3, r3, #16
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00a      	beq.n	800371e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003722:	f003 0320 	and.w	r3, r3, #32
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00a      	beq.n	8003740 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003748:	2b00      	cmp	r3, #0
 800374a:	d01a      	beq.n	8003782 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003766:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800376a:	d10a      	bne.n	8003782 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00a      	beq.n	80037a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	605a      	str	r2, [r3, #4]
  }
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bc80      	pop	{r7}
 80037ac:	4770      	bx	lr

080037ae <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b086      	sub	sp, #24
 80037b2:	af02      	add	r7, sp, #8
 80037b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037be:	f7fc fff9 	bl	80007b4 <HAL_GetTick>
 80037c2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0308 	and.w	r3, r3, #8
 80037ce:	2b08      	cmp	r3, #8
 80037d0:	d10e      	bne.n	80037f0 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 f82f 	bl	8003844 <UART_WaitOnFlagUntilTimeout>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e025      	b.n	800383c <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0304 	and.w	r3, r3, #4
 80037fa:	2b04      	cmp	r3, #4
 80037fc:	d10e      	bne.n	800381c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f819 	bl	8003844 <UART_WaitOnFlagUntilTimeout>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e00f      	b.n	800383c <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2220      	movs	r2, #32
 8003820:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2220      	movs	r2, #32
 8003828:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b09c      	sub	sp, #112	; 0x70
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	603b      	str	r3, [r7, #0]
 8003850:	4613      	mov	r3, r2
 8003852:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003854:	e0a9      	b.n	80039aa <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003856:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003858:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800385c:	f000 80a5 	beq.w	80039aa <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003860:	f7fc ffa8 	bl	80007b4 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800386c:	429a      	cmp	r2, r3
 800386e:	d302      	bcc.n	8003876 <UART_WaitOnFlagUntilTimeout+0x32>
 8003870:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003872:	2b00      	cmp	r3, #0
 8003874:	d140      	bne.n	80038f8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800387e:	e853 3f00 	ldrex	r3, [r3]
 8003882:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003886:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800388a:	667b      	str	r3, [r7, #100]	; 0x64
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	461a      	mov	r2, r3
 8003892:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003894:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003896:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003898:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800389a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800389c:	e841 2300 	strex	r3, r2, [r1]
 80038a0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80038a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1e6      	bne.n	8003876 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	3308      	adds	r3, #8
 80038ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038b2:	e853 3f00 	ldrex	r3, [r3]
 80038b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ba:	f023 0301 	bic.w	r3, r3, #1
 80038be:	663b      	str	r3, [r7, #96]	; 0x60
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	3308      	adds	r3, #8
 80038c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80038c8:	64ba      	str	r2, [r7, #72]	; 0x48
 80038ca:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80038ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038d0:	e841 2300 	strex	r3, r2, [r1]
 80038d4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80038d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1e5      	bne.n	80038a8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2220      	movs	r2, #32
 80038e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2220      	movs	r2, #32
 80038e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e069      	b.n	80039cc <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0304 	and.w	r3, r3, #4
 8003902:	2b00      	cmp	r3, #0
 8003904:	d051      	beq.n	80039aa <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	69db      	ldr	r3, [r3, #28]
 800390c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003910:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003914:	d149      	bne.n	80039aa <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800391e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003928:	e853 3f00 	ldrex	r3, [r3]
 800392c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003934:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	461a      	mov	r2, r3
 800393c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800393e:	637b      	str	r3, [r7, #52]	; 0x34
 8003940:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003942:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003944:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003946:	e841 2300 	strex	r3, r2, [r1]
 800394a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800394c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1e6      	bne.n	8003920 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	3308      	adds	r3, #8
 8003958:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	e853 3f00 	ldrex	r3, [r3]
 8003960:	613b      	str	r3, [r7, #16]
   return(result);
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	f023 0301 	bic.w	r3, r3, #1
 8003968:	66bb      	str	r3, [r7, #104]	; 0x68
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	3308      	adds	r3, #8
 8003970:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003972:	623a      	str	r2, [r7, #32]
 8003974:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003976:	69f9      	ldr	r1, [r7, #28]
 8003978:	6a3a      	ldr	r2, [r7, #32]
 800397a:	e841 2300 	strex	r3, r2, [r1]
 800397e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1e5      	bne.n	8003952 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2220      	movs	r2, #32
 800398a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2220      	movs	r2, #32
 8003992:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2220      	movs	r2, #32
 800399a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e010      	b.n	80039cc <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	69da      	ldr	r2, [r3, #28]
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	4013      	ands	r3, r2
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	bf0c      	ite	eq
 80039ba:	2301      	moveq	r3, #1
 80039bc:	2300      	movne	r3, #0
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	461a      	mov	r2, r3
 80039c2:	79fb      	ldrb	r3, [r7, #7]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	f43f af46 	beq.w	8003856 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3770      	adds	r7, #112	; 0x70
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d101      	bne.n	80039ea <HAL_UARTEx_DisableFifoMode+0x16>
 80039e6:	2302      	movs	r3, #2
 80039e8:	e027      	b.n	8003a3a <HAL_UARTEx_DisableFifoMode+0x66>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2224      	movs	r2, #36	; 0x24
 80039f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0201 	bic.w	r2, r2, #1
 8003a10:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003a18:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr

08003a44 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d101      	bne.n	8003a5c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003a58:	2302      	movs	r3, #2
 8003a5a:	e02d      	b.n	8003ab8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2224      	movs	r2, #36	; 0x24
 8003a68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 0201 	bic.w	r2, r2, #1
 8003a82:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	430a      	orrs	r2, r1
 8003a96:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 f84f 	bl	8003b3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d101      	bne.n	8003ad8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	e02d      	b.n	8003b34 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2224      	movs	r2, #36	; 0x24
 8003ae4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0201 	bic.w	r2, r2, #1
 8003afe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	683a      	ldr	r2, [r7, #0]
 8003b10:	430a      	orrs	r2, r1
 8003b12:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f811 	bl	8003b3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2220      	movs	r2, #32
 8003b26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d108      	bne.n	8003b5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003b5c:	e031      	b.n	8003bc2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003b5e:	2308      	movs	r3, #8
 8003b60:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003b62:	2308      	movs	r3, #8
 8003b64:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	0e5b      	lsrs	r3, r3, #25
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	f003 0307 	and.w	r3, r3, #7
 8003b74:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	0f5b      	lsrs	r3, r3, #29
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	f003 0307 	and.w	r3, r3, #7
 8003b84:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b86:	7bbb      	ldrb	r3, [r7, #14]
 8003b88:	7b3a      	ldrb	r2, [r7, #12]
 8003b8a:	4910      	ldr	r1, [pc, #64]	; (8003bcc <UARTEx_SetNbDataToProcess+0x90>)
 8003b8c:	5c8a      	ldrb	r2, [r1, r2]
 8003b8e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003b92:	7b3a      	ldrb	r2, [r7, #12]
 8003b94:	490e      	ldr	r1, [pc, #56]	; (8003bd0 <UARTEx_SetNbDataToProcess+0x94>)
 8003b96:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b98:	fb93 f3f2 	sdiv	r3, r3, r2
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003ba4:	7bfb      	ldrb	r3, [r7, #15]
 8003ba6:	7b7a      	ldrb	r2, [r7, #13]
 8003ba8:	4908      	ldr	r1, [pc, #32]	; (8003bcc <UARTEx_SetNbDataToProcess+0x90>)
 8003baa:	5c8a      	ldrb	r2, [r1, r2]
 8003bac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003bb0:	7b7a      	ldrb	r2, [r7, #13]
 8003bb2:	4907      	ldr	r1, [pc, #28]	; (8003bd0 <UARTEx_SetNbDataToProcess+0x94>)
 8003bb4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003bb6:	fb93 f3f2 	sdiv	r3, r3, r2
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003bc2:	bf00      	nop
 8003bc4:	3714      	adds	r7, #20
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bc80      	pop	{r7}
 8003bca:	4770      	bx	lr
 8003bcc:	08007758 	.word	0x08007758
 8003bd0:	08007760 	.word	0x08007760

08003bd4 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af02      	add	r7, sp, #8
 8003bda:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8003bdc:	4a24      	ldr	r2, [pc, #144]	; (8003c70 <RadioInit+0x9c>)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8003be2:	4b24      	ldr	r3, [pc, #144]	; (8003c74 <RadioInit+0xa0>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8003be8:	4b22      	ldr	r3, [pc, #136]	; (8003c74 <RadioInit+0xa0>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8003bee:	4b21      	ldr	r3, [pc, #132]	; (8003c74 <RadioInit+0xa0>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8003bf4:	4b1f      	ldr	r3, [pc, #124]	; (8003c74 <RadioInit+0xa0>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	659a      	str	r2, [r3, #88]	; 0x58

    SUBGRF_Init( RadioOnDioIrq );
 8003bfa:	481f      	ldr	r0, [pc, #124]	; (8003c78 <RadioInit+0xa4>)
 8003bfc:	f001 ff50 	bl	8005aa0 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8003c00:	4b1c      	ldr	r3, [pc, #112]	; (8003c74 <RadioInit+0xa0>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8003c06:	4b1b      	ldr	r3, [pc, #108]	; (8003c74 <RadioInit+0xa0>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8003c0c:	f002 f9de 	bl	8005fcc <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8003c10:	2100      	movs	r1, #0
 8003c12:	2000      	movs	r0, #0
 8003c14:	f002 fda6 	bl	8006764 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8003c18:	2204      	movs	r2, #4
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	2001      	movs	r0, #1
 8003c1e:	f002 fb63 	bl	80062e8 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8003c22:	2300      	movs	r3, #0
 8003c24:	2200      	movs	r2, #0
 8003c26:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003c2a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003c2e:	f002 fa93 	bl	8006158 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 8003c32:	f000 fe7d 	bl	8004930 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8003c36:	2300      	movs	r3, #0
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	4b10      	ldr	r3, [pc, #64]	; (8003c7c <RadioInit+0xa8>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003c42:	480f      	ldr	r0, [pc, #60]	; (8003c80 <RadioInit+0xac>)
 8003c44:	f003 fabe 	bl	80071c4 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8003c48:	2300      	movs	r3, #0
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	4b0d      	ldr	r3, [pc, #52]	; (8003c84 <RadioInit+0xb0>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003c54:	480c      	ldr	r0, [pc, #48]	; (8003c88 <RadioInit+0xb4>)
 8003c56:	f003 fab5 	bl	80071c4 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8003c5a:	4809      	ldr	r0, [pc, #36]	; (8003c80 <RadioInit+0xac>)
 8003c5c:	f003 fb56 	bl	800730c <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8003c60:	4809      	ldr	r0, [pc, #36]	; (8003c88 <RadioInit+0xb4>)
 8003c62:	f003 fb53 	bl	800730c <UTIL_TIMER_Stop>
}
 8003c66:	bf00      	nop
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	200001d0 	.word	0x200001d0
 8003c74:	200001d4 	.word	0x200001d4
 8003c78:	08004d1d 	.word	0x08004d1d
 8003c7c:	08004ca5 	.word	0x08004ca5
 8003c80:	20000230 	.word	0x20000230
 8003c84:	08004cb9 	.word	0x08004cb9
 8003c88:	20000248 	.word	0x20000248

08003c8c <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8003c90:	f001 ff48 	bl	8005b24 <SUBGRF_GetOperatingMode>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b07      	cmp	r3, #7
 8003c98:	d00a      	beq.n	8003cb0 <RadioGetStatus+0x24>
 8003c9a:	2b07      	cmp	r3, #7
 8003c9c:	dc0a      	bgt.n	8003cb4 <RadioGetStatus+0x28>
 8003c9e:	2b04      	cmp	r3, #4
 8003ca0:	d002      	beq.n	8003ca8 <RadioGetStatus+0x1c>
 8003ca2:	2b05      	cmp	r3, #5
 8003ca4:	d002      	beq.n	8003cac <RadioGetStatus+0x20>
 8003ca6:	e005      	b.n	8003cb4 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8003ca8:	2302      	movs	r3, #2
 8003caa:	e004      	b.n	8003cb6 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e002      	b.n	8003cb6 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e000      	b.n	8003cb6 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8003cb4:	2300      	movs	r3, #0
    }
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	bd80      	pop	{r7, pc}
	...

08003cbc <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8003cc6:	4a2a      	ldr	r2, [pc, #168]	; (8003d70 <RadioSetModem+0xb4>)
 8003cc8:	79fb      	ldrb	r3, [r7, #7]
 8003cca:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8003ccc:	79fb      	ldrb	r3, [r7, #7]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f003 f987 	bl	8006fe2 <RFW_SetRadioModem>
    switch( modem )
 8003cd4:	79fb      	ldrb	r3, [r7, #7]
 8003cd6:	2b05      	cmp	r3, #5
 8003cd8:	d80e      	bhi.n	8003cf8 <RadioSetModem+0x3c>
 8003cda:	a201      	add	r2, pc, #4	; (adr r2, 8003ce0 <RadioSetModem+0x24>)
 8003cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce0:	08003d07 	.word	0x08003d07
 8003ce4:	08003d15 	.word	0x08003d15
 8003ce8:	08003cf9 	.word	0x08003cf9
 8003cec:	08003d3b 	.word	0x08003d3b
 8003cf0:	08003d49 	.word	0x08003d49
 8003cf4:	08003d57 	.word	0x08003d57
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8003cf8:	2003      	movs	r0, #3
 8003cfa:	f002 facf 	bl	800629c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8003cfe:	4b1c      	ldr	r3, [pc, #112]	; (8003d70 <RadioSetModem+0xb4>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	735a      	strb	r2, [r3, #13]
        break;
 8003d04:	e02f      	b.n	8003d66 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8003d06:	2000      	movs	r0, #0
 8003d08:	f002 fac8 	bl	800629c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8003d0c:	4b18      	ldr	r3, [pc, #96]	; (8003d70 <RadioSetModem+0xb4>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	735a      	strb	r2, [r3, #13]
        break;
 8003d12:	e028      	b.n	8003d66 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8003d14:	2001      	movs	r0, #1
 8003d16:	f002 fac1 	bl	800629c <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8003d1a:	4b15      	ldr	r3, [pc, #84]	; (8003d70 <RadioSetModem+0xb4>)
 8003d1c:	7b5a      	ldrb	r2, [r3, #13]
 8003d1e:	4b14      	ldr	r3, [pc, #80]	; (8003d70 <RadioSetModem+0xb4>)
 8003d20:	7b1b      	ldrb	r3, [r3, #12]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d01e      	beq.n	8003d64 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8003d26:	4b12      	ldr	r3, [pc, #72]	; (8003d70 <RadioSetModem+0xb4>)
 8003d28:	7b1a      	ldrb	r2, [r3, #12]
 8003d2a:	4b11      	ldr	r3, [pc, #68]	; (8003d70 <RadioSetModem+0xb4>)
 8003d2c:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8003d2e:	4b10      	ldr	r3, [pc, #64]	; (8003d70 <RadioSetModem+0xb4>)
 8003d30:	7b5b      	ldrb	r3, [r3, #13]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 ff80 	bl	8004c38 <RadioSetPublicNetwork>
        }
        break;
 8003d38:	e014      	b.n	8003d64 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8003d3a:	2002      	movs	r0, #2
 8003d3c:	f002 faae 	bl	800629c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8003d40:	4b0b      	ldr	r3, [pc, #44]	; (8003d70 <RadioSetModem+0xb4>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	735a      	strb	r2, [r3, #13]
        break;
 8003d46:	e00e      	b.n	8003d66 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8003d48:	2002      	movs	r0, #2
 8003d4a:	f002 faa7 	bl	800629c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8003d4e:	4b08      	ldr	r3, [pc, #32]	; (8003d70 <RadioSetModem+0xb4>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	735a      	strb	r2, [r3, #13]
        break;
 8003d54:	e007      	b.n	8003d66 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8003d56:	2000      	movs	r0, #0
 8003d58:	f002 faa0 	bl	800629c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8003d5c:	4b04      	ldr	r3, [pc, #16]	; (8003d70 <RadioSetModem+0xb4>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	735a      	strb	r2, [r3, #13]
        break;
 8003d62:	e000      	b.n	8003d66 <RadioSetModem+0xaa>
        break;
 8003d64:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8003d66:	bf00      	nop
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	200001d4 	.word	0x200001d4

08003d74 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f002 fa47 	bl	8006210 <SUBGRF_SetRfFrequency>
}
 8003d82:	bf00      	nop
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b090      	sub	sp, #64	; 0x40
 8003d8e:	af0a      	add	r7, sp, #40	; 0x28
 8003d90:	60f8      	str	r0, [r7, #12]
 8003d92:	60b9      	str	r1, [r7, #8]
 8003d94:	603b      	str	r3, [r7, #0]
 8003d96:	4613      	mov	r3, r2
 8003d98:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8003da2:	2300      	movs	r3, #0
 8003da4:	613b      	str	r3, [r7, #16]

    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8003da6:	f000 fdd6 	bl	8004956 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8003daa:	2000      	movs	r0, #0
 8003dac:	f7ff ff86 	bl	8003cbc <RadioSetModem>

    RadioSetChannel( freq );
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f7ff ffdf 	bl	8003d74 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8003db6:	2301      	movs	r3, #1
 8003db8:	9309      	str	r3, [sp, #36]	; 0x24
 8003dba:	2300      	movs	r3, #0
 8003dbc:	9308      	str	r3, [sp, #32]
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	9307      	str	r3, [sp, #28]
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	9306      	str	r3, [sp, #24]
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	9305      	str	r3, [sp, #20]
 8003dca:	2300      	movs	r3, #0
 8003dcc:	9304      	str	r3, [sp, #16]
 8003dce:	2300      	movs	r3, #0
 8003dd0:	9303      	str	r3, [sp, #12]
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	9302      	str	r3, [sp, #8]
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	9301      	str	r3, [sp, #4]
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	2300      	movs	r3, #0
 8003de0:	f44f 7216 	mov.w	r2, #600	; 0x258
 8003de4:	68b9      	ldr	r1, [r7, #8]
 8003de6:	2000      	movs	r0, #0
 8003de8:	f000 f83c 	bl	8003e64 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8003dec:	2000      	movs	r0, #0
 8003dee:	f000 fdb9 	bl	8004964 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8003df2:	f000 ff4f 	bl	8004c94 <RadioGetWakeupTime>
 8003df6:	4603      	mov	r3, r0
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7fc fcef 	bl	80007dc <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8003dfe:	f003 fb1f 	bl	8007440 <UTIL_TIMER_GetCurrentTime>
 8003e02:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8003e04:	e00d      	b.n	8003e22 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8003e06:	2000      	movs	r0, #0
 8003e08:	f000 fe94 	bl	8004b34 <RadioRssi>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8003e10:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003e14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	dd02      	ble.n	8003e22 <RadioIsChannelFree+0x98>
        {
            status = false;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	75fb      	strb	r3, [r7, #23]
            break;
 8003e20:	e006      	b.n	8003e30 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8003e22:	6938      	ldr	r0, [r7, #16]
 8003e24:	f003 fb1e 	bl	8007464 <UTIL_TIMER_GetElapsedTime>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d8ea      	bhi.n	8003e06 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8003e30:	f000 fd91 	bl	8004956 <RadioStandby>

    return status;
 8003e34:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3718      	adds	r7, #24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b082      	sub	sp, #8
 8003e42:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8003e44:	2300      	movs	r3, #0
 8003e46:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8003e48:	2300      	movs	r3, #0
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	2000      	movs	r0, #0
 8003e50:	f002 f982 	bl	8006158 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8003e54:	f001 ff37 	bl	8005cc6 <SUBGRF_GetRandom>
 8003e58:	6078      	str	r0, [r7, #4]

    return rnd;
 8003e5a:	687b      	ldr	r3, [r7, #4]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b08a      	sub	sp, #40	; 0x28
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60b9      	str	r1, [r7, #8]
 8003e6c:	607a      	str	r2, [r7, #4]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	4603      	mov	r3, r0
 8003e72:	73fb      	strb	r3, [r7, #15]
 8003e74:	4613      	mov	r3, r2
 8003e76:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8003e78:	4ab9      	ldr	r2, [pc, #740]	; (8004160 <RadioSetRxConfig+0x2fc>)
 8003e7a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8003e7e:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8003e80:	f003 f86d 	bl	8006f5e <RFW_DeInit>
    if( rxContinuous == true )
 8003e84:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8003e90:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d004      	beq.n	8003ea2 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8003e98:	4ab2      	ldr	r2, [pc, #712]	; (8004164 <RadioSetRxConfig+0x300>)
 8003e9a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003e9e:	7013      	strb	r3, [r2, #0]
 8003ea0:	e002      	b.n	8003ea8 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8003ea2:	4bb0      	ldr	r3, [pc, #704]	; (8004164 <RadioSetRxConfig+0x300>)
 8003ea4:	22ff      	movs	r2, #255	; 0xff
 8003ea6:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8003ea8:	7bfb      	ldrb	r3, [r7, #15]
 8003eaa:	2b05      	cmp	r3, #5
 8003eac:	d009      	beq.n	8003ec2 <RadioSetRxConfig+0x5e>
 8003eae:	2b05      	cmp	r3, #5
 8003eb0:	f300 81ca 	bgt.w	8004248 <RadioSetRxConfig+0x3e4>
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f000 80bf 	beq.w	8004038 <RadioSetRxConfig+0x1d4>
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	f000 8124 	beq.w	8004108 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8003ec0:	e1c2      	b.n	8004248 <RadioSetRxConfig+0x3e4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8003ec2:	2001      	movs	r0, #1
 8003ec4:	f002 f844 	bl	8005f50 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8003ec8:	4ba5      	ldr	r3, [pc, #660]	; (8004160 <RadioSetRxConfig+0x2fc>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8003ed0:	4aa3      	ldr	r2, [pc, #652]	; (8004160 <RadioSetRxConfig+0x2fc>)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8003ed6:	4ba2      	ldr	r3, [pc, #648]	; (8004160 <RadioSetRxConfig+0x2fc>)
 8003ed8:	2209      	movs	r2, #9
 8003eda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8003ede:	4ba0      	ldr	r3, [pc, #640]	; (8004160 <RadioSetRxConfig+0x2fc>)
 8003ee0:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003ee4:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8003ee6:	68b8      	ldr	r0, [r7, #8]
 8003ee8:	f002 ff6c 	bl	8006dc4 <SUBGRF_GetFskBandwidthRegValue>
 8003eec:	4603      	mov	r3, r0
 8003eee:	461a      	mov	r2, r3
 8003ef0:	4b9b      	ldr	r3, [pc, #620]	; (8004160 <RadioSetRxConfig+0x2fc>)
 8003ef2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8003ef6:	4b9a      	ldr	r3, [pc, #616]	; (8004160 <RadioSetRxConfig+0x2fc>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8003efc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	4b97      	ldr	r3, [pc, #604]	; (8004160 <RadioSetRxConfig+0x2fc>)
 8003f04:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8003f06:	4b96      	ldr	r3, [pc, #600]	; (8004160 <RadioSetRxConfig+0x2fc>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8003f0c:	4b94      	ldr	r3, [pc, #592]	; (8004160 <RadioSetRxConfig+0x2fc>)
 8003f0e:	2210      	movs	r2, #16
 8003f10:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8003f12:	4b93      	ldr	r3, [pc, #588]	; (8004160 <RadioSetRxConfig+0x2fc>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8003f18:	4b91      	ldr	r3, [pc, #580]	; (8004160 <RadioSetRxConfig+0x2fc>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8003f1e:	4b91      	ldr	r3, [pc, #580]	; (8004164 <RadioSetRxConfig+0x300>)
 8003f20:	781a      	ldrb	r2, [r3, #0]
 8003f22:	4b8f      	ldr	r3, [pc, #572]	; (8004160 <RadioSetRxConfig+0x2fc>)
 8003f24:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8003f26:	4b8e      	ldr	r3, [pc, #568]	; (8004160 <RadioSetRxConfig+0x2fc>)
 8003f28:	2201      	movs	r2, #1
 8003f2a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8003f2c:	4b8c      	ldr	r3, [pc, #560]	; (8004160 <RadioSetRxConfig+0x2fc>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8003f32:	2005      	movs	r0, #5
 8003f34:	f7ff fec2 	bl	8003cbc <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8003f38:	488b      	ldr	r0, [pc, #556]	; (8004168 <RadioSetRxConfig+0x304>)
 8003f3a:	f002 faa3 	bl	8006484 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8003f3e:	488b      	ldr	r0, [pc, #556]	; (800416c <RadioSetRxConfig+0x308>)
 8003f40:	f002 fb72 	bl	8006628 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8003f44:	4a8a      	ldr	r2, [pc, #552]	; (8004170 <RadioSetRxConfig+0x30c>)
 8003f46:	f107 031c 	add.w	r3, r7, #28
 8003f4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f4e:	e883 0003 	stmia.w	r3, {r0, r1}
 8003f52:	f107 031c 	add.w	r3, r7, #28
 8003f56:	4618      	mov	r0, r3
 8003f58:	f001 fe33 	bl	8005bc2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8003f5c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003f60:	f001 fe7e 	bl	8005c60 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8003f64:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8003f68:	f000 fe03 	bl	8004b72 <RadioRead>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8003f72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f76:	f023 0310 	bic.w	r3, r3, #16
 8003f7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8003f7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f82:	4619      	mov	r1, r3
 8003f84:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8003f88:	f000 fde1 	bl	8004b4e <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8003f8c:	2104      	movs	r1, #4
 8003f8e:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8003f92:	f000 fddc 	bl	8004b4e <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8003f96:	f640 009b 	movw	r0, #2203	; 0x89b
 8003f9a:	f000 fdea 	bl	8004b72 <RadioRead>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8003fa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fa8:	f023 031c 	bic.w	r3, r3, #28
 8003fac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8003fb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fb4:	f043 0308 	orr.w	r3, r3, #8
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	4619      	mov	r1, r3
 8003fbc:	f640 009b 	movw	r0, #2203	; 0x89b
 8003fc0:	f000 fdc5 	bl	8004b4e <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8003fc4:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8003fc8:	f000 fdd3 	bl	8004b72 <RadioRead>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8003fd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fd6:	f023 0318 	bic.w	r3, r3, #24
 8003fda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8003fde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fe2:	f043 0318 	orr.w	r3, r3, #24
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	4619      	mov	r1, r3
 8003fea:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8003fee:	f000 fdae 	bl	8004b4e <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8003ff2:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8003ff6:	f000 fdbc 	bl	8004b72 <RadioRead>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8004000:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 800400c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004010:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8004014:	b2db      	uxtb	r3, r3
 8004016:	4619      	mov	r1, r3
 8004018:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800401c:	f000 fd97 	bl	8004b4e <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8004020:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004022:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8004026:	fb02 f303 	mul.w	r3, r2, r3
 800402a:	461a      	mov	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004032:	4a4b      	ldr	r2, [pc, #300]	; (8004160 <RadioSetRxConfig+0x2fc>)
 8004034:	6093      	str	r3, [r2, #8]
            break;
 8004036:	e108      	b.n	800424a <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8004038:	2000      	movs	r0, #0
 800403a:	f001 ff89 	bl	8005f50 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800403e:	4b48      	ldr	r3, [pc, #288]	; (8004160 <RadioSetRxConfig+0x2fc>)
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8004046:	4a46      	ldr	r2, [pc, #280]	; (8004160 <RadioSetRxConfig+0x2fc>)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800404c:	4b44      	ldr	r3, [pc, #272]	; (8004160 <RadioSetRxConfig+0x2fc>)
 800404e:	220b      	movs	r2, #11
 8004050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8004054:	68b8      	ldr	r0, [r7, #8]
 8004056:	f002 feb5 	bl	8006dc4 <SUBGRF_GetFskBandwidthRegValue>
 800405a:	4603      	mov	r3, r0
 800405c:	461a      	mov	r2, r3
 800405e:	4b40      	ldr	r3, [pc, #256]	; (8004160 <RadioSetRxConfig+0x2fc>)
 8004060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8004064:	4b3e      	ldr	r3, [pc, #248]	; (8004160 <RadioSetRxConfig+0x2fc>)
 8004066:	2200      	movs	r2, #0
 8004068:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800406a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	b29a      	uxth	r2, r3
 8004070:	4b3b      	ldr	r3, [pc, #236]	; (8004160 <RadioSetRxConfig+0x2fc>)
 8004072:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8004074:	4b3a      	ldr	r3, [pc, #232]	; (8004160 <RadioSetRxConfig+0x2fc>)
 8004076:	2204      	movs	r2, #4
 8004078:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800407a:	4b39      	ldr	r3, [pc, #228]	; (8004160 <RadioSetRxConfig+0x2fc>)
 800407c:	2218      	movs	r2, #24
 800407e:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8004080:	4b37      	ldr	r3, [pc, #220]	; (8004160 <RadioSetRxConfig+0x2fc>)
 8004082:	2200      	movs	r2, #0
 8004084:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8004086:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800408a:	f083 0301 	eor.w	r3, r3, #1
 800408e:	b2db      	uxtb	r3, r3
 8004090:	461a      	mov	r2, r3
 8004092:	4b33      	ldr	r3, [pc, #204]	; (8004160 <RadioSetRxConfig+0x2fc>)
 8004094:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8004096:	4b33      	ldr	r3, [pc, #204]	; (8004164 <RadioSetRxConfig+0x300>)
 8004098:	781a      	ldrb	r2, [r3, #0]
 800409a:	4b31      	ldr	r3, [pc, #196]	; (8004160 <RadioSetRxConfig+0x2fc>)
 800409c:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 800409e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80040a6:	4b2e      	ldr	r3, [pc, #184]	; (8004160 <RadioSetRxConfig+0x2fc>)
 80040a8:	22f2      	movs	r2, #242	; 0xf2
 80040aa:	75da      	strb	r2, [r3, #23]
 80040ac:	e002      	b.n	80040b4 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80040ae:	4b2c      	ldr	r3, [pc, #176]	; (8004160 <RadioSetRxConfig+0x2fc>)
 80040b0:	2201      	movs	r2, #1
 80040b2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80040b4:	4b2a      	ldr	r3, [pc, #168]	; (8004160 <RadioSetRxConfig+0x2fc>)
 80040b6:	2201      	movs	r2, #1
 80040b8:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80040ba:	f000 fc4c 	bl	8004956 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 80040be:	2000      	movs	r0, #0
 80040c0:	f7ff fdfc 	bl	8003cbc <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80040c4:	4828      	ldr	r0, [pc, #160]	; (8004168 <RadioSetRxConfig+0x304>)
 80040c6:	f002 f9dd 	bl	8006484 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80040ca:	4828      	ldr	r0, [pc, #160]	; (800416c <RadioSetRxConfig+0x308>)
 80040cc:	f002 faac 	bl	8006628 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80040d0:	4a28      	ldr	r2, [pc, #160]	; (8004174 <RadioSetRxConfig+0x310>)
 80040d2:	f107 0314 	add.w	r3, r7, #20
 80040d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80040da:	e883 0003 	stmia.w	r3, {r0, r1}
 80040de:	f107 0314 	add.w	r3, r7, #20
 80040e2:	4618      	mov	r0, r3
 80040e4:	f001 fd6d 	bl	8005bc2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80040e8:	f240 10ff 	movw	r0, #511	; 0x1ff
 80040ec:	f001 fdb8 	bl	8005c60 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80040f0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80040f2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80040f6:	fb02 f303 	mul.w	r3, r2, r3
 80040fa:	461a      	mov	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004102:	4a17      	ldr	r2, [pc, #92]	; (8004160 <RadioSetRxConfig+0x2fc>)
 8004104:	6093      	str	r3, [r2, #8]
            break;
 8004106:	e0a0      	b.n	800424a <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8004108:	2000      	movs	r0, #0
 800410a:	f001 ff21 	bl	8005f50 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800410e:	4b14      	ldr	r3, [pc, #80]	; (8004160 <RadioSetRxConfig+0x2fc>)
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	b2da      	uxtb	r2, r3
 800411a:	4b11      	ldr	r3, [pc, #68]	; (8004160 <RadioSetRxConfig+0x2fc>)
 800411c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8004120:	4a15      	ldr	r2, [pc, #84]	; (8004178 <RadioSetRxConfig+0x314>)
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	4413      	add	r3, r2
 8004126:	781a      	ldrb	r2, [r3, #0]
 8004128:	4b0d      	ldr	r3, [pc, #52]	; (8004160 <RadioSetRxConfig+0x2fc>)
 800412a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800412e:	4a0c      	ldr	r2, [pc, #48]	; (8004160 <RadioSetRxConfig+0x2fc>)
 8004130:	7bbb      	ldrb	r3, [r7, #14]
 8004132:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d105      	bne.n	8004148 <RadioSetRxConfig+0x2e4>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b0b      	cmp	r3, #11
 8004140:	d008      	beq.n	8004154 <RadioSetRxConfig+0x2f0>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b0c      	cmp	r3, #12
 8004146:	d005      	beq.n	8004154 <RadioSetRxConfig+0x2f0>
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d116      	bne.n	800417c <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2b0c      	cmp	r3, #12
 8004152:	d113      	bne.n	800417c <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8004154:	4b02      	ldr	r3, [pc, #8]	; (8004160 <RadioSetRxConfig+0x2fc>)
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800415c:	e012      	b.n	8004184 <RadioSetRxConfig+0x320>
 800415e:	bf00      	nop
 8004160:	200001d4 	.word	0x200001d4
 8004164:	20000009 	.word	0x20000009
 8004168:	2000020c 	.word	0x2000020c
 800416c:	200001e2 	.word	0x200001e2
 8004170:	08007650 	.word	0x08007650
 8004174:	08007658 	.word	0x08007658
 8004178:	080077ec 	.word	0x080077ec
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800417c:	4b35      	ldr	r3, [pc, #212]	; (8004254 <RadioSetRxConfig+0x3f0>)
 800417e:	2200      	movs	r2, #0
 8004180:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8004184:	4b33      	ldr	r3, [pc, #204]	; (8004254 <RadioSetRxConfig+0x3f0>)
 8004186:	2201      	movs	r2, #1
 8004188:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800418a:	4b32      	ldr	r3, [pc, #200]	; (8004254 <RadioSetRxConfig+0x3f0>)
 800418c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004190:	2b05      	cmp	r3, #5
 8004192:	d004      	beq.n	800419e <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8004194:	4b2f      	ldr	r3, [pc, #188]	; (8004254 <RadioSetRxConfig+0x3f0>)
 8004196:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800419a:	2b06      	cmp	r3, #6
 800419c:	d10a      	bne.n	80041b4 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 800419e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80041a0:	2b0b      	cmp	r3, #11
 80041a2:	d803      	bhi.n	80041ac <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80041a4:	4b2b      	ldr	r3, [pc, #172]	; (8004254 <RadioSetRxConfig+0x3f0>)
 80041a6:	220c      	movs	r2, #12
 80041a8:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80041aa:	e006      	b.n	80041ba <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80041ac:	4a29      	ldr	r2, [pc, #164]	; (8004254 <RadioSetRxConfig+0x3f0>)
 80041ae:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80041b0:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80041b2:	e002      	b.n	80041ba <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80041b4:	4a27      	ldr	r2, [pc, #156]	; (8004254 <RadioSetRxConfig+0x3f0>)
 80041b6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80041b8:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80041ba:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80041be:	4b25      	ldr	r3, [pc, #148]	; (8004254 <RadioSetRxConfig+0x3f0>)
 80041c0:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80041c2:	4b25      	ldr	r3, [pc, #148]	; (8004258 <RadioSetRxConfig+0x3f4>)
 80041c4:	781a      	ldrb	r2, [r3, #0]
 80041c6:	4b23      	ldr	r3, [pc, #140]	; (8004254 <RadioSetRxConfig+0x3f0>)
 80041c8:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80041ca:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80041ce:	4b21      	ldr	r3, [pc, #132]	; (8004254 <RadioSetRxConfig+0x3f0>)
 80041d0:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80041d4:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80041d8:	4b1e      	ldr	r3, [pc, #120]	; (8004254 <RadioSetRxConfig+0x3f0>)
 80041da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80041de:	f000 fbba 	bl	8004956 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80041e2:	2001      	movs	r0, #1
 80041e4:	f7ff fd6a 	bl	8003cbc <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80041e8:	481c      	ldr	r0, [pc, #112]	; (800425c <RadioSetRxConfig+0x3f8>)
 80041ea:	f002 f94b 	bl	8006484 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80041ee:	481c      	ldr	r0, [pc, #112]	; (8004260 <RadioSetRxConfig+0x3fc>)
 80041f0:	f002 fa1a 	bl	8006628 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80041f4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	4618      	mov	r0, r3
 80041fa:	f001 feb8 	bl	8005f6e <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80041fe:	4b15      	ldr	r3, [pc, #84]	; (8004254 <RadioSetRxConfig+0x3f0>)
 8004200:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004204:	2b01      	cmp	r3, #1
 8004206:	d10d      	bne.n	8004224 <RadioSetRxConfig+0x3c0>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8004208:	f240 7036 	movw	r0, #1846	; 0x736
 800420c:	f002 fbe4 	bl	80069d8 <SUBGRF_ReadRegister>
 8004210:	4603      	mov	r3, r0
 8004212:	f023 0304 	bic.w	r3, r3, #4
 8004216:	b2db      	uxtb	r3, r3
 8004218:	4619      	mov	r1, r3
 800421a:	f240 7036 	movw	r0, #1846	; 0x736
 800421e:	f002 fbc7 	bl	80069b0 <SUBGRF_WriteRegister>
 8004222:	e00c      	b.n	800423e <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8004224:	f240 7036 	movw	r0, #1846	; 0x736
 8004228:	f002 fbd6 	bl	80069d8 <SUBGRF_ReadRegister>
 800422c:	4603      	mov	r3, r0
 800422e:	f043 0304 	orr.w	r3, r3, #4
 8004232:	b2db      	uxtb	r3, r3
 8004234:	4619      	mov	r1, r3
 8004236:	f240 7036 	movw	r0, #1846	; 0x736
 800423a:	f002 fbb9 	bl	80069b0 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 800423e:	4b05      	ldr	r3, [pc, #20]	; (8004254 <RadioSetRxConfig+0x3f0>)
 8004240:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004244:	609a      	str	r2, [r3, #8]
            break;
 8004246:	e000      	b.n	800424a <RadioSetRxConfig+0x3e6>
            break;
 8004248:	bf00      	nop
    }
}
 800424a:	bf00      	nop
 800424c:	3728      	adds	r7, #40	; 0x28
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	200001d4 	.word	0x200001d4
 8004258:	20000009 	.word	0x20000009
 800425c:	2000020c 	.word	0x2000020c
 8004260:	200001e2 	.word	0x200001e2

08004264 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	60ba      	str	r2, [r7, #8]
 800426c:	607b      	str	r3, [r7, #4]
 800426e:	4603      	mov	r3, r0
 8004270:	73fb      	strb	r3, [r7, #15]
 8004272:	460b      	mov	r3, r1
 8004274:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8004276:	f002 fe72 	bl	8006f5e <RFW_DeInit>
    switch( modem )
 800427a:	7bfb      	ldrb	r3, [r7, #15]
 800427c:	2b04      	cmp	r3, #4
 800427e:	f000 80c7 	beq.w	8004410 <RadioSetTxConfig+0x1ac>
 8004282:	2b04      	cmp	r3, #4
 8004284:	f300 80d6 	bgt.w	8004434 <RadioSetTxConfig+0x1d0>
 8004288:	2b00      	cmp	r3, #0
 800428a:	d002      	beq.n	8004292 <RadioSetTxConfig+0x2e>
 800428c:	2b01      	cmp	r3, #1
 800428e:	d059      	beq.n	8004344 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8004290:	e0d0      	b.n	8004434 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8004292:	4b74      	ldr	r3, [pc, #464]	; (8004464 <RadioSetTxConfig+0x200>)
 8004294:	2200      	movs	r2, #0
 8004296:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800429a:	4a72      	ldr	r2, [pc, #456]	; (8004464 <RadioSetTxConfig+0x200>)
 800429c:	6a3b      	ldr	r3, [r7, #32]
 800429e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80042a0:	4b70      	ldr	r3, [pc, #448]	; (8004464 <RadioSetTxConfig+0x200>)
 80042a2:	220b      	movs	r2, #11
 80042a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f002 fd8b 	bl	8006dc4 <SUBGRF_GetFskBandwidthRegValue>
 80042ae:	4603      	mov	r3, r0
 80042b0:	461a      	mov	r2, r3
 80042b2:	4b6c      	ldr	r3, [pc, #432]	; (8004464 <RadioSetTxConfig+0x200>)
 80042b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 80042b8:	4a6a      	ldr	r2, [pc, #424]	; (8004464 <RadioSetTxConfig+0x200>)
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80042be:	4b69      	ldr	r3, [pc, #420]	; (8004464 <RadioSetTxConfig+0x200>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80042c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80042c6:	00db      	lsls	r3, r3, #3
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	4b66      	ldr	r3, [pc, #408]	; (8004464 <RadioSetTxConfig+0x200>)
 80042cc:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80042ce:	4b65      	ldr	r3, [pc, #404]	; (8004464 <RadioSetTxConfig+0x200>)
 80042d0:	2204      	movs	r2, #4
 80042d2:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 80042d4:	4b63      	ldr	r3, [pc, #396]	; (8004464 <RadioSetTxConfig+0x200>)
 80042d6:	2218      	movs	r2, #24
 80042d8:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80042da:	4b62      	ldr	r3, [pc, #392]	; (8004464 <RadioSetTxConfig+0x200>)
 80042dc:	2200      	movs	r2, #0
 80042de:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80042e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80042e4:	f083 0301 	eor.w	r3, r3, #1
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	461a      	mov	r2, r3
 80042ec:	4b5d      	ldr	r3, [pc, #372]	; (8004464 <RadioSetTxConfig+0x200>)
 80042ee:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 80042f0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d003      	beq.n	8004300 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80042f8:	4b5a      	ldr	r3, [pc, #360]	; (8004464 <RadioSetTxConfig+0x200>)
 80042fa:	22f2      	movs	r2, #242	; 0xf2
 80042fc:	75da      	strb	r2, [r3, #23]
 80042fe:	e002      	b.n	8004306 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8004300:	4b58      	ldr	r3, [pc, #352]	; (8004464 <RadioSetTxConfig+0x200>)
 8004302:	2201      	movs	r2, #1
 8004304:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8004306:	4b57      	ldr	r3, [pc, #348]	; (8004464 <RadioSetTxConfig+0x200>)
 8004308:	2201      	movs	r2, #1
 800430a:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800430c:	f000 fb23 	bl	8004956 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8004310:	2000      	movs	r0, #0
 8004312:	f7ff fcd3 	bl	8003cbc <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8004316:	4854      	ldr	r0, [pc, #336]	; (8004468 <RadioSetTxConfig+0x204>)
 8004318:	f002 f8b4 	bl	8006484 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800431c:	4853      	ldr	r0, [pc, #332]	; (800446c <RadioSetTxConfig+0x208>)
 800431e:	f002 f983 	bl	8006628 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8004322:	4a53      	ldr	r2, [pc, #332]	; (8004470 <RadioSetTxConfig+0x20c>)
 8004324:	f107 0310 	add.w	r3, r7, #16
 8004328:	e892 0003 	ldmia.w	r2, {r0, r1}
 800432c:	e883 0003 	stmia.w	r3, {r0, r1}
 8004330:	f107 0310 	add.w	r3, r7, #16
 8004334:	4618      	mov	r0, r3
 8004336:	f001 fc44 	bl	8005bc2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800433a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800433e:	f001 fc8f 	bl	8005c60 <SUBGRF_SetWhiteningSeed>
            break;
 8004342:	e078      	b.n	8004436 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8004344:	4b47      	ldr	r3, [pc, #284]	; (8004464 <RadioSetTxConfig+0x200>)
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800434c:	6a3b      	ldr	r3, [r7, #32]
 800434e:	b2da      	uxtb	r2, r3
 8004350:	4b44      	ldr	r3, [pc, #272]	; (8004464 <RadioSetTxConfig+0x200>)
 8004352:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8004356:	4a47      	ldr	r2, [pc, #284]	; (8004474 <RadioSetTxConfig+0x210>)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4413      	add	r3, r2
 800435c:	781a      	ldrb	r2, [r3, #0]
 800435e:	4b41      	ldr	r3, [pc, #260]	; (8004464 <RadioSetTxConfig+0x200>)
 8004360:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8004364:	4a3f      	ldr	r2, [pc, #252]	; (8004464 <RadioSetTxConfig+0x200>)
 8004366:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800436a:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d105      	bne.n	8004380 <RadioSetTxConfig+0x11c>
 8004374:	6a3b      	ldr	r3, [r7, #32]
 8004376:	2b0b      	cmp	r3, #11
 8004378:	d008      	beq.n	800438c <RadioSetTxConfig+0x128>
 800437a:	6a3b      	ldr	r3, [r7, #32]
 800437c:	2b0c      	cmp	r3, #12
 800437e:	d005      	beq.n	800438c <RadioSetTxConfig+0x128>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d107      	bne.n	8004396 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8004386:	6a3b      	ldr	r3, [r7, #32]
 8004388:	2b0c      	cmp	r3, #12
 800438a:	d104      	bne.n	8004396 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800438c:	4b35      	ldr	r3, [pc, #212]	; (8004464 <RadioSetTxConfig+0x200>)
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8004394:	e003      	b.n	800439e <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8004396:	4b33      	ldr	r3, [pc, #204]	; (8004464 <RadioSetTxConfig+0x200>)
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800439e:	4b31      	ldr	r3, [pc, #196]	; (8004464 <RadioSetTxConfig+0x200>)
 80043a0:	2201      	movs	r2, #1
 80043a2:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80043a4:	4b2f      	ldr	r3, [pc, #188]	; (8004464 <RadioSetTxConfig+0x200>)
 80043a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043aa:	2b05      	cmp	r3, #5
 80043ac:	d004      	beq.n	80043b8 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80043ae:	4b2d      	ldr	r3, [pc, #180]	; (8004464 <RadioSetTxConfig+0x200>)
 80043b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80043b4:	2b06      	cmp	r3, #6
 80043b6:	d10a      	bne.n	80043ce <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 80043b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80043ba:	2b0b      	cmp	r3, #11
 80043bc:	d803      	bhi.n	80043c6 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80043be:	4b29      	ldr	r3, [pc, #164]	; (8004464 <RadioSetTxConfig+0x200>)
 80043c0:	220c      	movs	r2, #12
 80043c2:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80043c4:	e006      	b.n	80043d4 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80043c6:	4a27      	ldr	r2, [pc, #156]	; (8004464 <RadioSetTxConfig+0x200>)
 80043c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80043ca:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80043cc:	e002      	b.n	80043d4 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80043ce:	4a25      	ldr	r2, [pc, #148]	; (8004464 <RadioSetTxConfig+0x200>)
 80043d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80043d2:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80043d4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80043d8:	4b22      	ldr	r3, [pc, #136]	; (8004464 <RadioSetTxConfig+0x200>)
 80043da:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80043dc:	4b26      	ldr	r3, [pc, #152]	; (8004478 <RadioSetTxConfig+0x214>)
 80043de:	781a      	ldrb	r2, [r3, #0]
 80043e0:	4b20      	ldr	r3, [pc, #128]	; (8004464 <RadioSetTxConfig+0x200>)
 80043e2:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80043e4:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80043e8:	4b1e      	ldr	r3, [pc, #120]	; (8004464 <RadioSetTxConfig+0x200>)
 80043ea:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80043ee:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80043f2:	4b1c      	ldr	r3, [pc, #112]	; (8004464 <RadioSetTxConfig+0x200>)
 80043f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80043f8:	f000 faad 	bl	8004956 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80043fc:	2001      	movs	r0, #1
 80043fe:	f7ff fc5d 	bl	8003cbc <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8004402:	4819      	ldr	r0, [pc, #100]	; (8004468 <RadioSetTxConfig+0x204>)
 8004404:	f002 f83e 	bl	8006484 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8004408:	4818      	ldr	r0, [pc, #96]	; (800446c <RadioSetTxConfig+0x208>)
 800440a:	f002 f90d 	bl	8006628 <SUBGRF_SetPacketParams>
            break;
 800440e:	e012      	b.n	8004436 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8004410:	2004      	movs	r0, #4
 8004412:	f7ff fc53 	bl	8003cbc <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8004416:	4b13      	ldr	r3, [pc, #76]	; (8004464 <RadioSetTxConfig+0x200>)
 8004418:	2202      	movs	r2, #2
 800441a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 800441e:	4a11      	ldr	r2, [pc, #68]	; (8004464 <RadioSetTxConfig+0x200>)
 8004420:	6a3b      	ldr	r3, [r7, #32]
 8004422:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8004424:	4b0f      	ldr	r3, [pc, #60]	; (8004464 <RadioSetTxConfig+0x200>)
 8004426:	2216      	movs	r2, #22
 8004428:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800442c:	480e      	ldr	r0, [pc, #56]	; (8004468 <RadioSetTxConfig+0x204>)
 800442e:	f002 f829 	bl	8006484 <SUBGRF_SetModulationParams>
            break;
 8004432:	e000      	b.n	8004436 <RadioSetTxConfig+0x1d2>
            break;
 8004434:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8004436:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800443a:	4618      	mov	r0, r3
 800443c:	f002 fbd4 	bl	8006be8 <SUBGRF_SetRfTxPower>
 8004440:	4603      	mov	r3, r0
 8004442:	461a      	mov	r2, r3
 8004444:	4b07      	ldr	r3, [pc, #28]	; (8004464 <RadioSetTxConfig+0x200>)
 8004446:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 800444a:	4b06      	ldr	r3, [pc, #24]	; (8004464 <RadioSetTxConfig+0x200>)
 800444c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004450:	4618      	mov	r0, r3
 8004452:	f002 fd98 	bl	8006f86 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8004456:	4a03      	ldr	r2, [pc, #12]	; (8004464 <RadioSetTxConfig+0x200>)
 8004458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800445a:	6053      	str	r3, [r2, #4]
}
 800445c:	bf00      	nop
 800445e:	3718      	adds	r7, #24
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	200001d4 	.word	0x200001d4
 8004468:	2000020c 	.word	0x2000020c
 800446c:	200001e2 	.word	0x200001e2
 8004470:	08007658 	.word	0x08007658
 8004474:	080077ec 	.word	0x080077ec
 8004478:	20000009 	.word	0x20000009

0800447c <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
    return true;
 8004484:	2301      	movs	r3, #1
}
 8004486:	4618      	mov	r0, r3
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	bc80      	pop	{r7}
 800448e:	4770      	bx	lr

08004490 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	4603      	mov	r3, r0
 8004498:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 800449a:	2300      	movs	r3, #0
 800449c:	60fb      	str	r3, [r7, #12]

    switch( bw )
 800449e:	79fb      	ldrb	r3, [r7, #7]
 80044a0:	2b0a      	cmp	r3, #10
 80044a2:	d83e      	bhi.n	8004522 <RadioGetLoRaBandwidthInHz+0x92>
 80044a4:	a201      	add	r2, pc, #4	; (adr r2, 80044ac <RadioGetLoRaBandwidthInHz+0x1c>)
 80044a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044aa:	bf00      	nop
 80044ac:	080044d9 	.word	0x080044d9
 80044b0:	080044e9 	.word	0x080044e9
 80044b4:	080044f9 	.word	0x080044f9
 80044b8:	08004509 	.word	0x08004509
 80044bc:	08004511 	.word	0x08004511
 80044c0:	08004517 	.word	0x08004517
 80044c4:	0800451d 	.word	0x0800451d
 80044c8:	08004523 	.word	0x08004523
 80044cc:	080044e1 	.word	0x080044e1
 80044d0:	080044f1 	.word	0x080044f1
 80044d4:	08004501 	.word	0x08004501
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 80044d8:	f641 6384 	movw	r3, #7812	; 0x1e84
 80044dc:	60fb      	str	r3, [r7, #12]
        break;
 80044de:	e020      	b.n	8004522 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 80044e0:	f642 03b1 	movw	r3, #10417	; 0x28b1
 80044e4:	60fb      	str	r3, [r7, #12]
        break;
 80044e6:	e01c      	b.n	8004522 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 80044e8:	f643 5309 	movw	r3, #15625	; 0x3d09
 80044ec:	60fb      	str	r3, [r7, #12]
        break;
 80044ee:	e018      	b.n	8004522 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 80044f0:	f245 1361 	movw	r3, #20833	; 0x5161
 80044f4:	60fb      	str	r3, [r7, #12]
        break;
 80044f6:	e014      	b.n	8004522 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80044f8:	f647 2312 	movw	r3, #31250	; 0x7a12
 80044fc:	60fb      	str	r3, [r7, #12]
        break;
 80044fe:	e010      	b.n	8004522 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8004500:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8004504:	60fb      	str	r3, [r7, #12]
        break;
 8004506:	e00c      	b.n	8004522 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8004508:	f24f 4324 	movw	r3, #62500	; 0xf424
 800450c:	60fb      	str	r3, [r7, #12]
        break;
 800450e:	e008      	b.n	8004522 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8004510:	4b07      	ldr	r3, [pc, #28]	; (8004530 <RadioGetLoRaBandwidthInHz+0xa0>)
 8004512:	60fb      	str	r3, [r7, #12]
        break;
 8004514:	e005      	b.n	8004522 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8004516:	4b07      	ldr	r3, [pc, #28]	; (8004534 <RadioGetLoRaBandwidthInHz+0xa4>)
 8004518:	60fb      	str	r3, [r7, #12]
        break;
 800451a:	e002      	b.n	8004522 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 800451c:	4b06      	ldr	r3, [pc, #24]	; (8004538 <RadioGetLoRaBandwidthInHz+0xa8>)
 800451e:	60fb      	str	r3, [r7, #12]
        break;
 8004520:	bf00      	nop
    }

    return bandwidthInHz;
 8004522:	68fb      	ldr	r3, [r7, #12]
}
 8004524:	4618      	mov	r0, r3
 8004526:	3714      	adds	r7, #20
 8004528:	46bd      	mov	sp, r7
 800452a:	bc80      	pop	{r7}
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	0001e848 	.word	0x0001e848
 8004534:	0003d090 	.word	0x0003d090
 8004538:	0007a120 	.word	0x0007a120

0800453c <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	4608      	mov	r0, r1
 8004546:	4611      	mov	r1, r2
 8004548:	461a      	mov	r2, r3
 800454a:	4603      	mov	r3, r0
 800454c:	70fb      	strb	r3, [r7, #3]
 800454e:	460b      	mov	r3, r1
 8004550:	803b      	strh	r3, [r7, #0]
 8004552:	4613      	mov	r3, r2
 8004554:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8004556:	883b      	ldrh	r3, [r7, #0]
 8004558:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800455a:	78ba      	ldrb	r2, [r7, #2]
 800455c:	f082 0201 	eor.w	r2, r2, #1
 8004560:	b2d2      	uxtb	r2, r2
 8004562:	2a00      	cmp	r2, #0
 8004564:	d001      	beq.n	800456a <RadioGetGfskTimeOnAirNumerator+0x2e>
 8004566:	2208      	movs	r2, #8
 8004568:	e000      	b.n	800456c <RadioGetGfskTimeOnAirNumerator+0x30>
 800456a:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 800456c:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800456e:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8004572:	7c3b      	ldrb	r3, [r7, #16]
 8004574:	7d39      	ldrb	r1, [r7, #20]
 8004576:	2900      	cmp	r1, #0
 8004578:	d001      	beq.n	800457e <RadioGetGfskTimeOnAirNumerator+0x42>
 800457a:	2102      	movs	r1, #2
 800457c:	e000      	b.n	8004580 <RadioGetGfskTimeOnAirNumerator+0x44>
 800457e:	2100      	movs	r1, #0
 8004580:	440b      	add	r3, r1
 8004582:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8004584:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 8004586:	4618      	mov	r0, r3
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	bc80      	pop	{r7}
 800458e:	4770      	bx	lr

08004590 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8004590:	b480      	push	{r7}
 8004592:	b08b      	sub	sp, #44	; 0x2c
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	4611      	mov	r1, r2
 800459c:	461a      	mov	r2, r3
 800459e:	460b      	mov	r3, r1
 80045a0:	71fb      	strb	r3, [r7, #7]
 80045a2:	4613      	mov	r3, r2
 80045a4:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 80045a6:	79fb      	ldrb	r3, [r7, #7]
 80045a8:	3304      	adds	r3, #4
 80045aa:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 80045ac:	2300      	movs	r3, #0
 80045ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	2b05      	cmp	r3, #5
 80045b6:	d002      	beq.n	80045be <RadioGetLoRaTimeOnAirNumerator+0x2e>
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	2b06      	cmp	r3, #6
 80045bc:	d104      	bne.n	80045c8 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 80045be:	88bb      	ldrh	r3, [r7, #4]
 80045c0:	2b0b      	cmp	r3, #11
 80045c2:	d801      	bhi.n	80045c8 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 80045c4:	230c      	movs	r3, #12
 80045c6:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d105      	bne.n	80045da <RadioGetLoRaTimeOnAirNumerator+0x4a>
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	2b0b      	cmp	r3, #11
 80045d2:	d008      	beq.n	80045e6 <RadioGetLoRaTimeOnAirNumerator+0x56>
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	2b0c      	cmp	r3, #12
 80045d8:	d005      	beq.n	80045e6 <RadioGetLoRaTimeOnAirNumerator+0x56>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d105      	bne.n	80045ec <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	2b0c      	cmp	r3, #12
 80045e4:	d102      	bne.n	80045ec <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 80045e6:	2301      	movs	r3, #1
 80045e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80045ec:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80045f0:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 80045f2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80045f6:	2a00      	cmp	r2, #0
 80045f8:	d001      	beq.n	80045fe <RadioGetLoRaTimeOnAirNumerator+0x6e>
 80045fa:	2210      	movs	r2, #16
 80045fc:	e000      	b.n	8004600 <RadioGetLoRaTimeOnAirNumerator+0x70>
 80045fe:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8004600:	4413      	add	r3, r2
 8004602:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8004608:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 800460a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800460e:	2a00      	cmp	r2, #0
 8004610:	d001      	beq.n	8004616 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8004612:	2200      	movs	r2, #0
 8004614:	e000      	b.n	8004618 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8004616:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8004618:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800461a:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	2b06      	cmp	r3, #6
 8004620:	d803      	bhi.n	800462a <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	623b      	str	r3, [r7, #32]
 8004628:	e00e      	b.n	8004648 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	3308      	adds	r3, #8
 800462e:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8004630:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004634:	2b00      	cmp	r3, #0
 8004636:	d004      	beq.n	8004642 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	3b02      	subs	r3, #2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	623b      	str	r3, [r7, #32]
 8004640:	e002      	b.n	8004648 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	2b00      	cmp	r3, #0
 800464c:	da01      	bge.n	8004652 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 800464e:	2300      	movs	r3, #0
 8004650:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8004652:	69fa      	ldr	r2, [r7, #28]
 8004654:	6a3b      	ldr	r3, [r7, #32]
 8004656:	4413      	add	r3, r2
 8004658:	1e5a      	subs	r2, r3, #1
 800465a:	6a3b      	ldr	r3, [r7, #32]
 800465c:	fb92 f3f3 	sdiv	r3, r2, r3
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	fb03 f202 	mul.w	r2, r3, r2
 8004666:	88bb      	ldrh	r3, [r7, #4]
 8004668:	4413      	add	r3, r2
    int32_t intermediate =
 800466a:	330c      	adds	r3, #12
 800466c:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	2b06      	cmp	r3, #6
 8004672:	d802      	bhi.n	800467a <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	3302      	adds	r3, #2
 8004678:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	1c5a      	adds	r2, r3, #1
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	3b02      	subs	r3, #2
 8004684:	fa02 f303 	lsl.w	r3, r2, r3
}
 8004688:	4618      	mov	r0, r3
 800468a:	372c      	adds	r7, #44	; 0x2c
 800468c:	46bd      	mov	sp, r7
 800468e:	bc80      	pop	{r7}
 8004690:	4770      	bx	lr
	...

08004694 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b08a      	sub	sp, #40	; 0x28
 8004698:	af04      	add	r7, sp, #16
 800469a:	60b9      	str	r1, [r7, #8]
 800469c:	607a      	str	r2, [r7, #4]
 800469e:	461a      	mov	r2, r3
 80046a0:	4603      	mov	r3, r0
 80046a2:	73fb      	strb	r3, [r7, #15]
 80046a4:	4613      	mov	r3, r2
 80046a6:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 80046a8:	2300      	movs	r3, #0
 80046aa:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 80046ac:	2301      	movs	r3, #1
 80046ae:	613b      	str	r3, [r7, #16]

    switch( modem )
 80046b0:	7bfb      	ldrb	r3, [r7, #15]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d002      	beq.n	80046bc <RadioTimeOnAir+0x28>
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d017      	beq.n	80046ea <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 80046ba:	e035      	b.n	8004728 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 80046bc:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 80046c0:	8c3a      	ldrh	r2, [r7, #32]
 80046c2:	7bb9      	ldrb	r1, [r7, #14]
 80046c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80046c8:	9301      	str	r3, [sp, #4]
 80046ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	4603      	mov	r3, r0
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7ff ff32 	bl	800453c <RadioGetGfskTimeOnAirNumerator>
 80046d8:	4603      	mov	r3, r0
 80046da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80046de:	fb02 f303 	mul.w	r3, r2, r3
 80046e2:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	613b      	str	r3, [r7, #16]
        break;
 80046e8:	e01e      	b.n	8004728 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 80046ea:	8c39      	ldrh	r1, [r7, #32]
 80046ec:	7bba      	ldrb	r2, [r7, #14]
 80046ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80046f2:	9302      	str	r3, [sp, #8]
 80046f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80046f8:	9301      	str	r3, [sp, #4]
 80046fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	460b      	mov	r3, r1
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	68b8      	ldr	r0, [r7, #8]
 8004706:	f7ff ff43 	bl	8004590 <RadioGetLoRaTimeOnAirNumerator>
 800470a:	4603      	mov	r3, r0
 800470c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004710:	fb02 f303 	mul.w	r3, r2, r3
 8004714:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8004716:	4a0a      	ldr	r2, [pc, #40]	; (8004740 <RadioTimeOnAir+0xac>)
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	4413      	add	r3, r2
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	4618      	mov	r0, r3
 8004720:	f7ff feb6 	bl	8004490 <RadioGetLoRaBandwidthInHz>
 8004724:	6138      	str	r0, [r7, #16]
        break;
 8004726:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	4413      	add	r3, r2
 800472e:	1e5a      	subs	r2, r3, #1
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8004736:	4618      	mov	r0, r3
 8004738:	3718      	adds	r7, #24
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	080077ec 	.word	0x080077ec

08004744 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	460b      	mov	r3, r1
 800474e:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8004750:	2300      	movs	r3, #0
 8004752:	2200      	movs	r2, #0
 8004754:	f240 2101 	movw	r1, #513	; 0x201
 8004758:	f240 2001 	movw	r0, #513	; 0x201
 800475c:	f001 fcfc 	bl	8006158 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8004760:	4b6f      	ldr	r3, [pc, #444]	; (8004920 <RadioSend+0x1dc>)
 8004762:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004766:	2101      	movs	r1, #1
 8004768:	4618      	mov	r0, r3
 800476a:	f002 fa15 	bl	8006b98 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 800476e:	4b6c      	ldr	r3, [pc, #432]	; (8004920 <RadioSend+0x1dc>)
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d112      	bne.n	800479c <RadioSend+0x58>
 8004776:	4b6a      	ldr	r3, [pc, #424]	; (8004920 <RadioSend+0x1dc>)
 8004778:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800477c:	2b06      	cmp	r3, #6
 800477e:	d10d      	bne.n	800479c <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8004780:	f640 0089 	movw	r0, #2185	; 0x889
 8004784:	f002 f928 	bl	80069d8 <SUBGRF_ReadRegister>
 8004788:	4603      	mov	r3, r0
 800478a:	f023 0304 	bic.w	r3, r3, #4
 800478e:	b2db      	uxtb	r3, r3
 8004790:	4619      	mov	r1, r3
 8004792:	f640 0089 	movw	r0, #2185	; 0x889
 8004796:	f002 f90b 	bl	80069b0 <SUBGRF_WriteRegister>
 800479a:	e00c      	b.n	80047b6 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800479c:	f640 0089 	movw	r0, #2185	; 0x889
 80047a0:	f002 f91a 	bl	80069d8 <SUBGRF_ReadRegister>
 80047a4:	4603      	mov	r3, r0
 80047a6:	f043 0304 	orr.w	r3, r3, #4
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	4619      	mov	r1, r3
 80047ae:	f640 0089 	movw	r0, #2185	; 0x889
 80047b2:	f002 f8fd 	bl	80069b0 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch( SubgRf.Modem )
 80047b6:	4b5a      	ldr	r3, [pc, #360]	; (8004920 <RadioSend+0x1dc>)
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	f200 80a1 	bhi.w	8004902 <RadioSend+0x1be>
 80047c0:	a201      	add	r2, pc, #4	; (adr r2, 80047c8 <RadioSend+0x84>)
 80047c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c6:	bf00      	nop
 80047c8:	080047f7 	.word	0x080047f7
 80047cc:	080047dd 	.word	0x080047dd
 80047d0:	080047f7 	.word	0x080047f7
 80047d4:	0800484b 	.word	0x0800484b
 80047d8:	0800486b 	.word	0x0800486b
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 80047dc:	4a50      	ldr	r2, [pc, #320]	; (8004920 <RadioSend+0x1dc>)
 80047de:	78fb      	ldrb	r3, [r7, #3]
 80047e0:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80047e2:	4850      	ldr	r0, [pc, #320]	; (8004924 <RadioSend+0x1e0>)
 80047e4:	f001 ff20 	bl	8006628 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80047e8:	78fb      	ldrb	r3, [r7, #3]
 80047ea:	2200      	movs	r2, #0
 80047ec:	4619      	mov	r1, r3
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f001 f9d4 	bl	8005b9c <SUBGRF_SendPayload>
            break;
 80047f4:	e086      	b.n	8004904 <RadioSend+0x1c0>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 80047f6:	f002 fbb8 	bl	8006f6a <RFW_Is_Init>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d117      	bne.n	8004830 <RadioSend+0xec>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8004800:	f107 020d 	add.w	r2, r7, #13
 8004804:	78fb      	ldrb	r3, [r7, #3]
 8004806:	4619      	mov	r1, r3
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f002 fbc6 	bl	8006f9a <RFW_TransmitInit>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	f040 8081 	bne.w	8004918 <RadioSend+0x1d4>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8004816:	7b7a      	ldrb	r2, [r7, #13]
 8004818:	4b41      	ldr	r3, [pc, #260]	; (8004920 <RadioSend+0x1dc>)
 800481a:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800481c:	4841      	ldr	r0, [pc, #260]	; (8004924 <RadioSend+0x1e0>)
 800481e:	f001 ff03 	bl	8006628 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8004822:	7b7b      	ldrb	r3, [r7, #13]
 8004824:	2200      	movs	r2, #0
 8004826:	4619      	mov	r1, r3
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f001 f9b7 	bl	8005b9c <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 800482e:	e069      	b.n	8004904 <RadioSend+0x1c0>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8004830:	4a3b      	ldr	r2, [pc, #236]	; (8004920 <RadioSend+0x1dc>)
 8004832:	78fb      	ldrb	r3, [r7, #3]
 8004834:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8004836:	483b      	ldr	r0, [pc, #236]	; (8004924 <RadioSend+0x1e0>)
 8004838:	f001 fef6 	bl	8006628 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 800483c:	78fb      	ldrb	r3, [r7, #3]
 800483e:	2200      	movs	r2, #0
 8004840:	4619      	mov	r1, r3
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f001 f9aa 	bl	8005b9c <SUBGRF_SendPayload>
            break;
 8004848:	e05c      	b.n	8004904 <RadioSend+0x1c0>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800484a:	4b35      	ldr	r3, [pc, #212]	; (8004920 <RadioSend+0x1dc>)
 800484c:	2202      	movs	r2, #2
 800484e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8004850:	4a33      	ldr	r2, [pc, #204]	; (8004920 <RadioSend+0x1dc>)
 8004852:	78fb      	ldrb	r3, [r7, #3]
 8004854:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8004856:	4833      	ldr	r0, [pc, #204]	; (8004924 <RadioSend+0x1e0>)
 8004858:	f001 fee6 	bl	8006628 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800485c:	78fb      	ldrb	r3, [r7, #3]
 800485e:	2200      	movs	r2, #0
 8004860:	4619      	mov	r1, r3
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f001 f99a 	bl	8005b9c <SUBGRF_SendPayload>
            break;
 8004868:	e04c      	b.n	8004904 <RadioSend+0x1c0>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 800486a:	78fb      	ldrb	r3, [r7, #3]
 800486c:	461a      	mov	r2, r3
 800486e:	6879      	ldr	r1, [r7, #4]
 8004870:	482d      	ldr	r0, [pc, #180]	; (8004928 <RadioSend+0x1e4>)
 8004872:	f000 fc8a 	bl	800518a <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8004876:	4b2a      	ldr	r3, [pc, #168]	; (8004920 <RadioSend+0x1dc>)
 8004878:	2202      	movs	r2, #2
 800487a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 800487c:	78fb      	ldrb	r3, [r7, #3]
 800487e:	3301      	adds	r3, #1
 8004880:	b2da      	uxtb	r2, r3
 8004882:	4b27      	ldr	r3, [pc, #156]	; (8004920 <RadioSend+0x1dc>)
 8004884:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8004886:	4827      	ldr	r0, [pc, #156]	; (8004924 <RadioSend+0x1e0>)
 8004888:	f001 fece 	bl	8006628 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 800488c:	2100      	movs	r1, #0
 800488e:	20f1      	movs	r0, #241	; 0xf1
 8004890:	f000 f95d 	bl	8004b4e <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8004894:	2100      	movs	r1, #0
 8004896:	20f0      	movs	r0, #240	; 0xf0
 8004898:	f000 f959 	bl	8004b4e <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 800489c:	4b20      	ldr	r3, [pc, #128]	; (8004920 <RadioSend+0x1dc>)
 800489e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048a0:	2b64      	cmp	r3, #100	; 0x64
 80048a2:	d108      	bne.n	80048b6 <RadioSend+0x172>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 80048a4:	2170      	movs	r1, #112	; 0x70
 80048a6:	20f3      	movs	r0, #243	; 0xf3
 80048a8:	f000 f951 	bl	8004b4e <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 80048ac:	211d      	movs	r1, #29
 80048ae:	20f2      	movs	r0, #242	; 0xf2
 80048b0:	f000 f94d 	bl	8004b4e <RadioWrite>
 80048b4:	e007      	b.n	80048c6 <RadioSend+0x182>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 80048b6:	21e1      	movs	r1, #225	; 0xe1
 80048b8:	20f3      	movs	r0, #243	; 0xf3
 80048ba:	f000 f948 	bl	8004b4e <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 80048be:	2104      	movs	r1, #4
 80048c0:	20f2      	movs	r0, #242	; 0xf2
 80048c2:	f000 f944 	bl	8004b4e <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 80048c6:	78fb      	ldrb	r3, [r7, #3]
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	00db      	lsls	r3, r3, #3
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	3302      	adds	r3, #2
 80048d0:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 80048d2:	89fb      	ldrh	r3, [r7, #14]
 80048d4:	0a1b      	lsrs	r3, r3, #8
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	4619      	mov	r1, r3
 80048dc:	20f4      	movs	r0, #244	; 0xf4
 80048de:	f000 f936 	bl	8004b4e <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 80048e2:	89fb      	ldrh	r3, [r7, #14]
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	4619      	mov	r1, r3
 80048e8:	20f5      	movs	r0, #245	; 0xf5
 80048ea:	f000 f930 	bl	8004b4e <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 80048ee:	78fb      	ldrb	r3, [r7, #3]
 80048f0:	3301      	adds	r3, #1
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80048f8:	4619      	mov	r1, r3
 80048fa:	480b      	ldr	r0, [pc, #44]	; (8004928 <RadioSend+0x1e4>)
 80048fc:	f001 f94e 	bl	8005b9c <SUBGRF_SendPayload>
            break;
 8004900:	e000      	b.n	8004904 <RadioSend+0x1c0>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8004902:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8004904:	4b06      	ldr	r3, [pc, #24]	; (8004920 <RadioSend+0x1dc>)
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	4619      	mov	r1, r3
 800490a:	4808      	ldr	r0, [pc, #32]	; (800492c <RadioSend+0x1e8>)
 800490c:	f002 fd6e 	bl	80073ec <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8004910:	4806      	ldr	r0, [pc, #24]	; (800492c <RadioSend+0x1e8>)
 8004912:	f002 fc8d 	bl	8007230 <UTIL_TIMER_Start>
 8004916:	e000      	b.n	800491a <RadioSend+0x1d6>
                return;
 8004918:	bf00      	nop
}
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	200001d4 	.word	0x200001d4
 8004924:	200001e2 	.word	0x200001e2
 8004928:	200000d0 	.word	0x200000d0
 800492c:	20000230 	.word	0x20000230

08004930 <RadioSleep>:

static void RadioSleep( void )
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8004936:	2300      	movs	r3, #0
 8004938:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 800493a:	793b      	ldrb	r3, [r7, #4]
 800493c:	f043 0304 	orr.w	r3, r3, #4
 8004940:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8004942:	7938      	ldrb	r0, [r7, #4]
 8004944:	f001 fa06 	bl	8005d54 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8004948:	2002      	movs	r0, #2
 800494a:	f7fb ff47 	bl	80007dc <HAL_Delay>
}
 800494e:	bf00      	nop
 8004950:	3708      	adds	r7, #8
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <RadioStandby>:

static void RadioStandby( void )
{
 8004956:	b580      	push	{r7, lr}
 8004958:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 800495a:	2000      	movs	r0, #0
 800495c:	f001 fa2c 	bl	8005db8 <SUBGRF_SetStandby>
}
 8004960:	bf00      	nop
 8004962:	bd80      	pop	{r7, pc}

08004964 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init( ) )
 800496c:	f002 fafd 	bl	8006f6a <RFW_Is_Init>
 8004970:	4603      	mov	r3, r0
 8004972:	2b01      	cmp	r3, #1
 8004974:	d102      	bne.n	800497c <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8004976:	f002 fb20 	bl	8006fba <RFW_ReceiveInit>
 800497a:	e007      	b.n	800498c <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800497c:	2300      	movs	r3, #0
 800497e:	2200      	movs	r2, #0
 8004980:	f240 2162 	movw	r1, #610	; 0x262
 8004984:	f240 2062 	movw	r0, #610	; 0x262
 8004988:	f001 fbe6 	bl	8006158 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d006      	beq.n	80049a0 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8004992:	6879      	ldr	r1, [r7, #4]
 8004994:	4811      	ldr	r0, [pc, #68]	; (80049dc <RadioRx+0x78>)
 8004996:	f002 fd29 	bl	80073ec <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800499a:	4810      	ldr	r0, [pc, #64]	; (80049dc <RadioRx+0x78>)
 800499c:	f002 fc48 	bl	8007230 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80049a0:	4b0f      	ldr	r3, [pc, #60]	; (80049e0 <RadioRx+0x7c>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80049a6:	4b0e      	ldr	r3, [pc, #56]	; (80049e0 <RadioRx+0x7c>)
 80049a8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80049ac:	2100      	movs	r1, #0
 80049ae:	4618      	mov	r0, r3
 80049b0:	f002 f8f2 	bl	8006b98 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 80049b4:	4b0a      	ldr	r3, [pc, #40]	; (80049e0 <RadioRx+0x7c>)
 80049b6:	785b      	ldrb	r3, [r3, #1]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d004      	beq.n	80049c6 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80049bc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80049c0:	f001 fa36 	bl	8005e30 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 80049c4:	e005      	b.n	80049d2 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 80049c6:	4b06      	ldr	r3, [pc, #24]	; (80049e0 <RadioRx+0x7c>)
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	019b      	lsls	r3, r3, #6
 80049cc:	4618      	mov	r0, r3
 80049ce:	f001 fa2f 	bl	8005e30 <SUBGRF_SetRx>
}
 80049d2:	bf00      	nop
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	20000248 	.word	0x20000248
 80049e0:	200001d4 	.word	0x200001d4

080049e4 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init() )
 80049ec:	f002 fabd 	bl	8006f6a <RFW_Is_Init>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d102      	bne.n	80049fc <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 80049f6:	f002 fae0 	bl	8006fba <RFW_ReceiveInit>
 80049fa:	e007      	b.n	8004a0c <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80049fc:	2300      	movs	r3, #0
 80049fe:	2200      	movs	r2, #0
 8004a00:	f240 2162 	movw	r1, #610	; 0x262
 8004a04:	f240 2062 	movw	r0, #610	; 0x262
 8004a08:	f001 fba6 	bl	8006158 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d006      	beq.n	8004a20 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8004a12:	6879      	ldr	r1, [r7, #4]
 8004a14:	4811      	ldr	r0, [pc, #68]	; (8004a5c <RadioRxBoosted+0x78>)
 8004a16:	f002 fce9 	bl	80073ec <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8004a1a:	4810      	ldr	r0, [pc, #64]	; (8004a5c <RadioRxBoosted+0x78>)
 8004a1c:	f002 fc08 	bl	8007230 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8004a20:	4b0f      	ldr	r3, [pc, #60]	; (8004a60 <RadioRxBoosted+0x7c>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8004a26:	4b0e      	ldr	r3, [pc, #56]	; (8004a60 <RadioRxBoosted+0x7c>)
 8004a28:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f002 f8b2 	bl	8006b98 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8004a34:	4b0a      	ldr	r3, [pc, #40]	; (8004a60 <RadioRxBoosted+0x7c>)
 8004a36:	785b      	ldrb	r3, [r3, #1]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d004      	beq.n	8004a46 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8004a3c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8004a40:	f001 fa16 	bl	8005e70 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8004a44:	e005      	b.n	8004a52 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8004a46:	4b06      	ldr	r3, [pc, #24]	; (8004a60 <RadioRxBoosted+0x7c>)
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	019b      	lsls	r3, r3, #6
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f001 fa0f 	bl	8005e70 <SUBGRF_SetRxBoosted>
}
 8004a52:	bf00      	nop
 8004a54:	3708      	adds	r7, #8
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	20000248 	.word	0x20000248
 8004a60:	200001d4 	.word	0x200001d4

08004a64 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	005a      	lsls	r2, r3, #1
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	4413      	add	r3, r2
 8004a76:	4a0c      	ldr	r2, [pc, #48]	; (8004aa8 <RadioSetRxDutyCycle+0x44>)
 8004a78:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004a82:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004a86:	f001 fb67 	bl	8006158 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8004a8a:	4b07      	ldr	r3, [pc, #28]	; (8004aa8 <RadioSetRxDutyCycle+0x44>)
 8004a8c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004a90:	2100      	movs	r1, #0
 8004a92:	4618      	mov	r0, r3
 8004a94:	f002 f880 	bl	8006b98 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8004a98:	6839      	ldr	r1, [r7, #0]
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f001 fa0c 	bl	8005eb8 <SUBGRF_SetRxDutyCycle>
}
 8004aa0:	bf00      	nop
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	200001d4 	.word	0x200001d4

08004aac <RadioStartCad>:

static void RadioStartCad( void )
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8004ab0:	4b09      	ldr	r3, [pc, #36]	; (8004ad8 <RadioStartCad+0x2c>)
 8004ab2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f002 f86d 	bl	8006b98 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8004abe:	2300      	movs	r3, #0
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8004ac6:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8004aca:	f001 fb45 	bl	8006158 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8004ace:	f001 fa1f 	bl	8005f10 <SUBGRF_SetCad>
}
 8004ad2:	bf00      	nop
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	200001d4 	.word	0x200001d4

08004adc <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	70fb      	strb	r3, [r7, #3]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8004aec:	883b      	ldrh	r3, [r7, #0]
 8004aee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004af2:	fb02 f303 	mul.w	r3, r2, r3
 8004af6:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f001 fb89 	bl	8006210 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8004afe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f002 f870 	bl	8006be8 <SUBGRF_SetRfTxPower>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8004b0c:	7afb      	ldrb	r3, [r7, #11]
 8004b0e:	2101      	movs	r1, #1
 8004b10:	4618      	mov	r0, r3
 8004b12:	f002 f841 	bl	8006b98 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8004b16:	f001 fa09 	bl	8005f2c <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8004b1a:	68f9      	ldr	r1, [r7, #12]
 8004b1c:	4804      	ldr	r0, [pc, #16]	; (8004b30 <RadioSetTxContinuousWave+0x54>)
 8004b1e:	f002 fc65 	bl	80073ec <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8004b22:	4803      	ldr	r0, [pc, #12]	; (8004b30 <RadioSetTxContinuousWave+0x54>)
 8004b24:	f002 fb84 	bl	8007230 <UTIL_TIMER_Start>
}
 8004b28:	bf00      	nop
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	20000230 	.word	0x20000230

08004b34 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8004b3e:	f001 fe4c 	bl	80067da <SUBGRF_GetRssiInst>
 8004b42:	4603      	mov	r3, r0
 8004b44:	b21b      	sxth	r3, r3
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b082      	sub	sp, #8
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	4603      	mov	r3, r0
 8004b56:	460a      	mov	r2, r1
 8004b58:	80fb      	strh	r3, [r7, #6]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8004b5e:	797a      	ldrb	r2, [r7, #5]
 8004b60:	88fb      	ldrh	r3, [r7, #6]
 8004b62:	4611      	mov	r1, r2
 8004b64:	4618      	mov	r0, r3
 8004b66:	f001 ff23 	bl	80069b0 <SUBGRF_WriteRegister>
}
 8004b6a:	bf00      	nop
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8004b72:	b580      	push	{r7, lr}
 8004b74:	b082      	sub	sp, #8
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	4603      	mov	r3, r0
 8004b7a:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8004b7c:	88fb      	ldrh	r3, [r7, #6]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f001 ff2a 	bl	80069d8 <SUBGRF_ReadRegister>
 8004b84:	4603      	mov	r3, r0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3708      	adds	r7, #8
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b082      	sub	sp, #8
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	4603      	mov	r3, r0
 8004b96:	6039      	str	r1, [r7, #0]
 8004b98:	80fb      	strh	r3, [r7, #6]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8004b9e:	797b      	ldrb	r3, [r7, #5]
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	88fb      	ldrh	r3, [r7, #6]
 8004ba4:	6839      	ldr	r1, [r7, #0]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f001 ff2a 	bl	8006a00 <SUBGRF_WriteRegisters>
}
 8004bac:	bf00      	nop
 8004bae:	3708      	adds	r7, #8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	4603      	mov	r3, r0
 8004bbc:	6039      	str	r1, [r7, #0]
 8004bbe:	80fb      	strh	r3, [r7, #6]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8004bc4:	797b      	ldrb	r3, [r7, #5]
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	88fb      	ldrh	r3, [r7, #6]
 8004bca:	6839      	ldr	r1, [r7, #0]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f001 ff39 	bl	8006a44 <SUBGRF_ReadRegisters>
}
 8004bd2:	bf00      	nop
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
	...

08004bdc <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	4603      	mov	r3, r0
 8004be4:	460a      	mov	r2, r1
 8004be6:	71fb      	strb	r3, [r7, #7]
 8004be8:	4613      	mov	r3, r2
 8004bea:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8004bec:	79fb      	ldrb	r3, [r7, #7]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d10a      	bne.n	8004c08 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8004bf2:	4a0e      	ldr	r2, [pc, #56]	; (8004c2c <RadioSetMaxPayloadLength+0x50>)
 8004bf4:	79bb      	ldrb	r3, [r7, #6]
 8004bf6:	7013      	strb	r3, [r2, #0]
 8004bf8:	4b0c      	ldr	r3, [pc, #48]	; (8004c2c <RadioSetMaxPayloadLength+0x50>)
 8004bfa:	781a      	ldrb	r2, [r3, #0]
 8004bfc:	4b0c      	ldr	r3, [pc, #48]	; (8004c30 <RadioSetMaxPayloadLength+0x54>)
 8004bfe:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8004c00:	480c      	ldr	r0, [pc, #48]	; (8004c34 <RadioSetMaxPayloadLength+0x58>)
 8004c02:	f001 fd11 	bl	8006628 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8004c06:	e00d      	b.n	8004c24 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8004c08:	4b09      	ldr	r3, [pc, #36]	; (8004c30 <RadioSetMaxPayloadLength+0x54>)
 8004c0a:	7d5b      	ldrb	r3, [r3, #21]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d109      	bne.n	8004c24 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8004c10:	4a06      	ldr	r2, [pc, #24]	; (8004c2c <RadioSetMaxPayloadLength+0x50>)
 8004c12:	79bb      	ldrb	r3, [r7, #6]
 8004c14:	7013      	strb	r3, [r2, #0]
 8004c16:	4b05      	ldr	r3, [pc, #20]	; (8004c2c <RadioSetMaxPayloadLength+0x50>)
 8004c18:	781a      	ldrb	r2, [r3, #0]
 8004c1a:	4b05      	ldr	r3, [pc, #20]	; (8004c30 <RadioSetMaxPayloadLength+0x54>)
 8004c1c:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8004c1e:	4805      	ldr	r0, [pc, #20]	; (8004c34 <RadioSetMaxPayloadLength+0x58>)
 8004c20:	f001 fd02 	bl	8006628 <SUBGRF_SetPacketParams>
}
 8004c24:	bf00      	nop
 8004c26:	3708      	adds	r7, #8
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	20000009 	.word	0x20000009
 8004c30:	200001d4 	.word	0x200001d4
 8004c34:	200001e2 	.word	0x200001e2

08004c38 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	4603      	mov	r3, r0
 8004c40:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8004c42:	4a13      	ldr	r2, [pc, #76]	; (8004c90 <RadioSetPublicNetwork+0x58>)
 8004c44:	79fb      	ldrb	r3, [r7, #7]
 8004c46:	7313      	strb	r3, [r2, #12]
 8004c48:	4b11      	ldr	r3, [pc, #68]	; (8004c90 <RadioSetPublicNetwork+0x58>)
 8004c4a:	7b1a      	ldrb	r2, [r3, #12]
 8004c4c:	4b10      	ldr	r3, [pc, #64]	; (8004c90 <RadioSetPublicNetwork+0x58>)
 8004c4e:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8004c50:	2001      	movs	r0, #1
 8004c52:	f7ff f833 	bl	8003cbc <RadioSetModem>
    if( enable == true )
 8004c56:	79fb      	ldrb	r3, [r7, #7]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00a      	beq.n	8004c72 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8004c5c:	2134      	movs	r1, #52	; 0x34
 8004c5e:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8004c62:	f001 fea5 	bl	80069b0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8004c66:	2144      	movs	r1, #68	; 0x44
 8004c68:	f240 7041 	movw	r0, #1857	; 0x741
 8004c6c:	f001 fea0 	bl	80069b0 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8004c70:	e009      	b.n	8004c86 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8004c72:	2114      	movs	r1, #20
 8004c74:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8004c78:	f001 fe9a 	bl	80069b0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8004c7c:	2124      	movs	r1, #36	; 0x24
 8004c7e:	f240 7041 	movw	r0, #1857	; 0x741
 8004c82:	f001 fe95 	bl	80069b0 <SUBGRF_WriteRegister>
}
 8004c86:	bf00      	nop
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	200001d4 	.word	0x200001d4

08004c94 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8004c98:	f001 ffda 	bl	8006c50 <SUBGRF_GetRadioWakeUpTime>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	3303      	adds	r3, #3
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8004cac:	f000 f80e 	bl	8004ccc <RadioOnTxTimeoutProcess>
}
 8004cb0:	bf00      	nop
 8004cb2:	3708      	adds	r7, #8
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8004cc0:	f000 f818 	bl	8004cf4 <RadioOnRxTimeoutProcess>
}
 8004cc4:	bf00      	nop
 8004cc6:	3708      	adds	r7, #8
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8004cd0:	4b07      	ldr	r3, [pc, #28]	; (8004cf0 <RadioOnTxTimeoutProcess+0x24>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d008      	beq.n	8004cea <RadioOnTxTimeoutProcess+0x1e>
 8004cd8:	4b05      	ldr	r3, [pc, #20]	; (8004cf0 <RadioOnTxTimeoutProcess+0x24>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d003      	beq.n	8004cea <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8004ce2:	4b03      	ldr	r3, [pc, #12]	; (8004cf0 <RadioOnTxTimeoutProcess+0x24>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	4798      	blx	r3
    }
}
 8004cea:	bf00      	nop
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	200001d0 	.word	0x200001d0

08004cf4 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8004cf8:	4b07      	ldr	r3, [pc, #28]	; (8004d18 <RadioOnRxTimeoutProcess+0x24>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d008      	beq.n	8004d12 <RadioOnRxTimeoutProcess+0x1e>
 8004d00:	4b05      	ldr	r3, [pc, #20]	; (8004d18 <RadioOnRxTimeoutProcess+0x24>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d003      	beq.n	8004d12 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8004d0a:	4b03      	ldr	r3, [pc, #12]	; (8004d18 <RadioOnRxTimeoutProcess+0x24>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	4798      	blx	r3
    }
}
 8004d12:	bf00      	nop
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	200001d0 	.word	0x200001d0

08004d1c <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	4603      	mov	r3, r0
 8004d24:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8004d26:	4a05      	ldr	r2, [pc, #20]	; (8004d3c <RadioOnDioIrq+0x20>)
 8004d28:	88fb      	ldrh	r3, [r7, #6]
 8004d2a:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 8004d2e:	f000 f807 	bl	8004d40 <RadioIrqProcess>
}
 8004d32:	bf00      	nop
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	200001d4 	.word	0x200001d4

08004d40 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8004d40:	b590      	push	{r4, r7, lr}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8004d46:	2300      	movs	r3, #0
 8004d48:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8004d4e:	4ba5      	ldr	r3, [pc, #660]	; (8004fe4 <RadioIrqProcess+0x2a4>)
 8004d50:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004d54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d58:	f000 810c 	beq.w	8004f74 <RadioIrqProcess+0x234>
 8004d5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d60:	f300 81c0 	bgt.w	80050e4 <RadioIrqProcess+0x3a4>
 8004d64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d68:	f000 80f0 	beq.w	8004f4c <RadioIrqProcess+0x20c>
 8004d6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d70:	f300 81b8 	bgt.w	80050e4 <RadioIrqProcess+0x3a4>
 8004d74:	2b80      	cmp	r3, #128	; 0x80
 8004d76:	f000 80d5 	beq.w	8004f24 <RadioIrqProcess+0x1e4>
 8004d7a:	2b80      	cmp	r3, #128	; 0x80
 8004d7c:	f300 81b2 	bgt.w	80050e4 <RadioIrqProcess+0x3a4>
 8004d80:	2b20      	cmp	r3, #32
 8004d82:	dc49      	bgt.n	8004e18 <RadioIrqProcess+0xd8>
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f340 81ad 	ble.w	80050e4 <RadioIrqProcess+0x3a4>
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	2b1f      	cmp	r3, #31
 8004d8e:	f200 81a9 	bhi.w	80050e4 <RadioIrqProcess+0x3a4>
 8004d92:	a201      	add	r2, pc, #4	; (adr r2, 8004d98 <RadioIrqProcess+0x58>)
 8004d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d98:	08004e21 	.word	0x08004e21
 8004d9c:	08004e5b 	.word	0x08004e5b
 8004da0:	080050e5 	.word	0x080050e5
 8004da4:	08005001 	.word	0x08005001
 8004da8:	080050e5 	.word	0x080050e5
 8004dac:	080050e5 	.word	0x080050e5
 8004db0:	080050e5 	.word	0x080050e5
 8004db4:	0800506f 	.word	0x0800506f
 8004db8:	080050e5 	.word	0x080050e5
 8004dbc:	080050e5 	.word	0x080050e5
 8004dc0:	080050e5 	.word	0x080050e5
 8004dc4:	080050e5 	.word	0x080050e5
 8004dc8:	080050e5 	.word	0x080050e5
 8004dcc:	080050e5 	.word	0x080050e5
 8004dd0:	080050e5 	.word	0x080050e5
 8004dd4:	080050e5 	.word	0x080050e5
 8004dd8:	080050e5 	.word	0x080050e5
 8004ddc:	080050e5 	.word	0x080050e5
 8004de0:	080050e5 	.word	0x080050e5
 8004de4:	080050e5 	.word	0x080050e5
 8004de8:	080050e5 	.word	0x080050e5
 8004dec:	080050e5 	.word	0x080050e5
 8004df0:	080050e5 	.word	0x080050e5
 8004df4:	080050e5 	.word	0x080050e5
 8004df8:	080050e5 	.word	0x080050e5
 8004dfc:	080050e5 	.word	0x080050e5
 8004e00:	080050e5 	.word	0x080050e5
 8004e04:	080050e5 	.word	0x080050e5
 8004e08:	080050e5 	.word	0x080050e5
 8004e0c:	080050e5 	.word	0x080050e5
 8004e10:	080050e5 	.word	0x080050e5
 8004e14:	0800507f 	.word	0x0800507f
 8004e18:	2b40      	cmp	r3, #64	; 0x40
 8004e1a:	f000 814b 	beq.w	80050b4 <RadioIrqProcess+0x374>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 8004e1e:	e161      	b.n	80050e4 <RadioIrqProcess+0x3a4>
        TimerStop( &TxTimeoutTimer );
 8004e20:	4871      	ldr	r0, [pc, #452]	; (8004fe8 <RadioIrqProcess+0x2a8>)
 8004e22:	f002 fa73 	bl	800730c <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8004e26:	2000      	movs	r0, #0
 8004e28:	f000 ffc6 	bl	8005db8 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8004e2c:	f002 f8a4 	bl	8006f78 <RFW_Is_LongPacketModeEnabled>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d101      	bne.n	8004e3a <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8004e36:	f002 f8c8 	bl	8006fca <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8004e3a:	4b6c      	ldr	r3, [pc, #432]	; (8004fec <RadioIrqProcess+0x2ac>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f000 8152 	beq.w	80050e8 <RadioIrqProcess+0x3a8>
 8004e44:	4b69      	ldr	r3, [pc, #420]	; (8004fec <RadioIrqProcess+0x2ac>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f000 814c 	beq.w	80050e8 <RadioIrqProcess+0x3a8>
            RadioEvents->TxDone( );
 8004e50:	4b66      	ldr	r3, [pc, #408]	; (8004fec <RadioIrqProcess+0x2ac>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4798      	blx	r3
        break;
 8004e58:	e146      	b.n	80050e8 <RadioIrqProcess+0x3a8>
        TimerStop( &RxTimeoutTimer );
 8004e5a:	4865      	ldr	r0, [pc, #404]	; (8004ff0 <RadioIrqProcess+0x2b0>)
 8004e5c:	f002 fa56 	bl	800730c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8004e60:	4b60      	ldr	r3, [pc, #384]	; (8004fe4 <RadioIrqProcess+0x2a4>)
 8004e62:	785b      	ldrb	r3, [r3, #1]
 8004e64:	f083 0301 	eor.w	r3, r3, #1
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d014      	beq.n	8004e98 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8004e6e:	2000      	movs	r0, #0
 8004e70:	f000 ffa2 	bl	8005db8 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8004e74:	2100      	movs	r1, #0
 8004e76:	f640 1002 	movw	r0, #2306	; 0x902
 8004e7a:	f001 fd99 	bl	80069b0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8004e7e:	f640 1044 	movw	r0, #2372	; 0x944
 8004e82:	f001 fda9 	bl	80069d8 <SUBGRF_ReadRegister>
 8004e86:	4603      	mov	r3, r0
 8004e88:	f043 0302 	orr.w	r3, r3, #2
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	4619      	mov	r1, r3
 8004e90:	f640 1044 	movw	r0, #2372	; 0x944
 8004e94:	f001 fd8c 	bl	80069b0 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8004e98:	1dfb      	adds	r3, r7, #7
 8004e9a:	22ff      	movs	r2, #255	; 0xff
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	4855      	ldr	r0, [pc, #340]	; (8004ff4 <RadioIrqProcess+0x2b4>)
 8004ea0:	f000 fe5a 	bl	8005b58 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8004ea4:	4854      	ldr	r0, [pc, #336]	; (8004ff8 <RadioIrqProcess+0x2b8>)
 8004ea6:	f001 fcd9 	bl	800685c <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8004eaa:	4b50      	ldr	r3, [pc, #320]	; (8004fec <RadioIrqProcess+0x2ac>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d036      	beq.n	8004f20 <RadioIrqProcess+0x1e0>
 8004eb2:	4b4e      	ldr	r3, [pc, #312]	; (8004fec <RadioIrqProcess+0x2ac>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d031      	beq.n	8004f20 <RadioIrqProcess+0x1e0>
            switch( SubgRf.PacketStatus.packetType )
 8004ebc:	4b49      	ldr	r3, [pc, #292]	; (8004fe4 <RadioIrqProcess+0x2a4>)
 8004ebe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d10e      	bne.n	8004ee4 <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8004ec6:	4b49      	ldr	r3, [pc, #292]	; (8004fec <RadioIrqProcess+0x2ac>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	689c      	ldr	r4, [r3, #8]
 8004ecc:	79fb      	ldrb	r3, [r7, #7]
 8004ece:	b299      	uxth	r1, r3
 8004ed0:	4b44      	ldr	r3, [pc, #272]	; (8004fe4 <RadioIrqProcess+0x2a4>)
 8004ed2:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8004ed6:	b21a      	sxth	r2, r3
 8004ed8:	4b42      	ldr	r3, [pc, #264]	; (8004fe4 <RadioIrqProcess+0x2a4>)
 8004eda:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8004ede:	4845      	ldr	r0, [pc, #276]	; (8004ff4 <RadioIrqProcess+0x2b4>)
 8004ee0:	47a0      	blx	r4
                break;
 8004ee2:	e01e      	b.n	8004f22 <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8004ee4:	4b3f      	ldr	r3, [pc, #252]	; (8004fe4 <RadioIrqProcess+0x2a4>)
 8004ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee8:	463a      	mov	r2, r7
 8004eea:	4611      	mov	r1, r2
 8004eec:	4618      	mov	r0, r3
 8004eee:	f001 ff91 	bl	8006e14 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 8004ef2:	4b3e      	ldr	r3, [pc, #248]	; (8004fec <RadioIrqProcess+0x2ac>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	689c      	ldr	r4, [r3, #8]
 8004ef8:	79fb      	ldrb	r3, [r7, #7]
 8004efa:	b299      	uxth	r1, r3
 8004efc:	4b39      	ldr	r3, [pc, #228]	; (8004fe4 <RadioIrqProcess+0x2a4>)
 8004efe:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8004f02:	b218      	sxth	r0, r3
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004f0a:	4a3c      	ldr	r2, [pc, #240]	; (8004ffc <RadioIrqProcess+0x2bc>)
 8004f0c:	fb82 c203 	smull	ip, r2, r2, r3
 8004f10:	1192      	asrs	r2, r2, #6
 8004f12:	17db      	asrs	r3, r3, #31
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	b25b      	sxtb	r3, r3
 8004f18:	4602      	mov	r2, r0
 8004f1a:	4836      	ldr	r0, [pc, #216]	; (8004ff4 <RadioIrqProcess+0x2b4>)
 8004f1c:	47a0      	blx	r4
                break;
 8004f1e:	e000      	b.n	8004f22 <RadioIrqProcess+0x1e2>
        }
 8004f20:	bf00      	nop
        break;
 8004f22:	e0f0      	b.n	8005106 <RadioIrqProcess+0x3c6>
        SUBGRF_SetStandby( STDBY_RC );
 8004f24:	2000      	movs	r0, #0
 8004f26:	f000 ff47 	bl	8005db8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8004f2a:	4b30      	ldr	r3, [pc, #192]	; (8004fec <RadioIrqProcess+0x2ac>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f000 80dc 	beq.w	80050ec <RadioIrqProcess+0x3ac>
 8004f34:	4b2d      	ldr	r3, [pc, #180]	; (8004fec <RadioIrqProcess+0x2ac>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f000 80d6 	beq.w	80050ec <RadioIrqProcess+0x3ac>
            RadioEvents->CadDone( false );
 8004f40:	4b2a      	ldr	r3, [pc, #168]	; (8004fec <RadioIrqProcess+0x2ac>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	2000      	movs	r0, #0
 8004f48:	4798      	blx	r3
        break;
 8004f4a:	e0cf      	b.n	80050ec <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 8004f4c:	2000      	movs	r0, #0
 8004f4e:	f000 ff33 	bl	8005db8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8004f52:	4b26      	ldr	r3, [pc, #152]	; (8004fec <RadioIrqProcess+0x2ac>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f000 80ca 	beq.w	80050f0 <RadioIrqProcess+0x3b0>
 8004f5c:	4b23      	ldr	r3, [pc, #140]	; (8004fec <RadioIrqProcess+0x2ac>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f000 80c4 	beq.w	80050f0 <RadioIrqProcess+0x3b0>
            RadioEvents->CadDone( true );
 8004f68:	4b20      	ldr	r3, [pc, #128]	; (8004fec <RadioIrqProcess+0x2ac>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	2001      	movs	r0, #1
 8004f70:	4798      	blx	r3
        break;
 8004f72:	e0bd      	b.n	80050f0 <RadioIrqProcess+0x3b0>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8004f74:	f000 fdd6 	bl	8005b24 <SUBGRF_GetOperatingMode>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b04      	cmp	r3, #4
 8004f7c:	d115      	bne.n	8004faa <RadioIrqProcess+0x26a>
            TimerStop( &TxTimeoutTimer );
 8004f7e:	481a      	ldr	r0, [pc, #104]	; (8004fe8 <RadioIrqProcess+0x2a8>)
 8004f80:	f002 f9c4 	bl	800730c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8004f84:	2000      	movs	r0, #0
 8004f86:	f000 ff17 	bl	8005db8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8004f8a:	4b18      	ldr	r3, [pc, #96]	; (8004fec <RadioIrqProcess+0x2ac>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f000 80b0 	beq.w	80050f4 <RadioIrqProcess+0x3b4>
 8004f94:	4b15      	ldr	r3, [pc, #84]	; (8004fec <RadioIrqProcess+0x2ac>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	f000 80aa 	beq.w	80050f4 <RadioIrqProcess+0x3b4>
                RadioEvents->TxTimeout( );
 8004fa0:	4b12      	ldr	r3, [pc, #72]	; (8004fec <RadioIrqProcess+0x2ac>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	4798      	blx	r3
        break;
 8004fa8:	e0a4      	b.n	80050f4 <RadioIrqProcess+0x3b4>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8004faa:	f000 fdbb 	bl	8005b24 <SUBGRF_GetOperatingMode>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b05      	cmp	r3, #5
 8004fb2:	f040 809f 	bne.w	80050f4 <RadioIrqProcess+0x3b4>
            TimerStop( &RxTimeoutTimer );
 8004fb6:	480e      	ldr	r0, [pc, #56]	; (8004ff0 <RadioIrqProcess+0x2b0>)
 8004fb8:	f002 f9a8 	bl	800730c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8004fbc:	2000      	movs	r0, #0
 8004fbe:	f000 fefb 	bl	8005db8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8004fc2:	4b0a      	ldr	r3, [pc, #40]	; (8004fec <RadioIrqProcess+0x2ac>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f000 8094 	beq.w	80050f4 <RadioIrqProcess+0x3b4>
 8004fcc:	4b07      	ldr	r3, [pc, #28]	; (8004fec <RadioIrqProcess+0x2ac>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f000 808e 	beq.w	80050f4 <RadioIrqProcess+0x3b4>
                RadioEvents->RxTimeout( );
 8004fd8:	4b04      	ldr	r3, [pc, #16]	; (8004fec <RadioIrqProcess+0x2ac>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	4798      	blx	r3
        break;
 8004fe0:	e088      	b.n	80050f4 <RadioIrqProcess+0x3b4>
 8004fe2:	bf00      	nop
 8004fe4:	200001d4 	.word	0x200001d4
 8004fe8:	20000230 	.word	0x20000230
 8004fec:	200001d0 	.word	0x200001d0
 8004ff0:	20000248 	.word	0x20000248
 8004ff4:	200000d0 	.word	0x200000d0
 8004ff8:	200001f8 	.word	0x200001f8
 8004ffc:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8005000:	4b43      	ldr	r3, [pc, #268]	; (8005110 <RadioIrqProcess+0x3d0>)
 8005002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005004:	2b00      	cmp	r3, #0
 8005006:	d077      	beq.n	80050f8 <RadioIrqProcess+0x3b8>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 8005008:	4a42      	ldr	r2, [pc, #264]	; (8005114 <RadioIrqProcess+0x3d4>)
 800500a:	4b41      	ldr	r3, [pc, #260]	; (8005110 <RadioIrqProcess+0x3d0>)
 800500c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800500e:	0c1b      	lsrs	r3, r3, #16
 8005010:	b2db      	uxtb	r3, r3
 8005012:	4619      	mov	r1, r3
 8005014:	f640 1003 	movw	r0, #2307	; 0x903
 8005018:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 800501a:	4a3e      	ldr	r2, [pc, #248]	; (8005114 <RadioIrqProcess+0x3d4>)
 800501c:	4b3c      	ldr	r3, [pc, #240]	; (8005110 <RadioIrqProcess+0x3d0>)
 800501e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005020:	0a1b      	lsrs	r3, r3, #8
 8005022:	b2db      	uxtb	r3, r3
 8005024:	4619      	mov	r1, r3
 8005026:	f640 1004 	movw	r0, #2308	; 0x904
 800502a:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 800502c:	4a39      	ldr	r2, [pc, #228]	; (8005114 <RadioIrqProcess+0x3d4>)
 800502e:	4b38      	ldr	r3, [pc, #224]	; (8005110 <RadioIrqProcess+0x3d0>)
 8005030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005032:	b2db      	uxtb	r3, r3
 8005034:	4619      	mov	r1, r3
 8005036:	f640 1005 	movw	r0, #2309	; 0x905
 800503a:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 800503c:	4c35      	ldr	r4, [pc, #212]	; (8005114 <RadioIrqProcess+0x3d4>)
 800503e:	4b36      	ldr	r3, [pc, #216]	; (8005118 <RadioIrqProcess+0x3d8>)
 8005040:	f640 1002 	movw	r0, #2306	; 0x902
 8005044:	4798      	blx	r3
 8005046:	4603      	mov	r3, r0
 8005048:	f043 0301 	orr.w	r3, r3, #1
 800504c:	b2db      	uxtb	r3, r3
 800504e:	4619      	mov	r1, r3
 8005050:	f640 1002 	movw	r0, #2306	; 0x902
 8005054:	47a0      	blx	r4
          SubgRf.RxDcPreambleDetectTimeout = 0;
 8005056:	4b2e      	ldr	r3, [pc, #184]	; (8005110 <RadioIrqProcess+0x3d0>)
 8005058:	2200      	movs	r2, #0
 800505a:	659a      	str	r2, [r3, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800505c:	2300      	movs	r3, #0
 800505e:	2200      	movs	r2, #0
 8005060:	f240 2162 	movw	r1, #610	; 0x262
 8005064:	f240 2062 	movw	r0, #610	; 0x262
 8005068:	f001 f876 	bl	8006158 <SUBGRF_SetDioIrqParams>
        break;
 800506c:	e044      	b.n	80050f8 <RadioIrqProcess+0x3b8>
        if( 1UL == RFW_Is_Init( ) )
 800506e:	f001 ff7c 	bl	8006f6a <RFW_Is_Init>
 8005072:	4603      	mov	r3, r0
 8005074:	2b01      	cmp	r3, #1
 8005076:	d141      	bne.n	80050fc <RadioIrqProcess+0x3bc>
            RFW_ReceivePayload( );
 8005078:	f001 ffad 	bl	8006fd6 <RFW_ReceivePayload>
        break;
 800507c:	e03e      	b.n	80050fc <RadioIrqProcess+0x3bc>
        TimerStop( &RxTimeoutTimer );
 800507e:	4827      	ldr	r0, [pc, #156]	; (800511c <RadioIrqProcess+0x3dc>)
 8005080:	f002 f944 	bl	800730c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8005084:	4b22      	ldr	r3, [pc, #136]	; (8005110 <RadioIrqProcess+0x3d0>)
 8005086:	785b      	ldrb	r3, [r3, #1]
 8005088:	f083 0301 	eor.w	r3, r3, #1
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d002      	beq.n	8005098 <RadioIrqProcess+0x358>
            SUBGRF_SetStandby( STDBY_RC );
 8005092:	2000      	movs	r0, #0
 8005094:	f000 fe90 	bl	8005db8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8005098:	4b21      	ldr	r3, [pc, #132]	; (8005120 <RadioIrqProcess+0x3e0>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d02f      	beq.n	8005100 <RadioIrqProcess+0x3c0>
 80050a0:	4b1f      	ldr	r3, [pc, #124]	; (8005120 <RadioIrqProcess+0x3e0>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d02a      	beq.n	8005100 <RadioIrqProcess+0x3c0>
            RadioEvents->RxTimeout( );
 80050aa:	4b1d      	ldr	r3, [pc, #116]	; (8005120 <RadioIrqProcess+0x3e0>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	4798      	blx	r3
        break;
 80050b2:	e025      	b.n	8005100 <RadioIrqProcess+0x3c0>
        if( SubgRf.RxContinuous == false )
 80050b4:	4b16      	ldr	r3, [pc, #88]	; (8005110 <RadioIrqProcess+0x3d0>)
 80050b6:	785b      	ldrb	r3, [r3, #1]
 80050b8:	f083 0301 	eor.w	r3, r3, #1
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d002      	beq.n	80050c8 <RadioIrqProcess+0x388>
            SUBGRF_SetStandby( STDBY_RC );
 80050c2:	2000      	movs	r0, #0
 80050c4:	f000 fe78 	bl	8005db8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80050c8:	4b15      	ldr	r3, [pc, #84]	; (8005120 <RadioIrqProcess+0x3e0>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d019      	beq.n	8005104 <RadioIrqProcess+0x3c4>
 80050d0:	4b13      	ldr	r3, [pc, #76]	; (8005120 <RadioIrqProcess+0x3e0>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d014      	beq.n	8005104 <RadioIrqProcess+0x3c4>
            RadioEvents->RxError( );
 80050da:	4b11      	ldr	r3, [pc, #68]	; (8005120 <RadioIrqProcess+0x3e0>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	4798      	blx	r3
        break;
 80050e2:	e00f      	b.n	8005104 <RadioIrqProcess+0x3c4>
        break;
 80050e4:	bf00      	nop
 80050e6:	e00e      	b.n	8005106 <RadioIrqProcess+0x3c6>
        break;
 80050e8:	bf00      	nop
 80050ea:	e00c      	b.n	8005106 <RadioIrqProcess+0x3c6>
        break;
 80050ec:	bf00      	nop
 80050ee:	e00a      	b.n	8005106 <RadioIrqProcess+0x3c6>
        break;
 80050f0:	bf00      	nop
 80050f2:	e008      	b.n	8005106 <RadioIrqProcess+0x3c6>
        break;
 80050f4:	bf00      	nop
 80050f6:	e006      	b.n	8005106 <RadioIrqProcess+0x3c6>
        break;
 80050f8:	bf00      	nop
 80050fa:	e004      	b.n	8005106 <RadioIrqProcess+0x3c6>
        break;
 80050fc:	bf00      	nop
 80050fe:	e002      	b.n	8005106 <RadioIrqProcess+0x3c6>
        break;
 8005100:	bf00      	nop
 8005102:	e000      	b.n	8005106 <RadioIrqProcess+0x3c6>
        break;
 8005104:	bf00      	nop
    }
}
 8005106:	bf00      	nop
 8005108:	370c      	adds	r7, #12
 800510a:	46bd      	mov	sp, r7
 800510c:	bd90      	pop	{r4, r7, pc}
 800510e:	bf00      	nop
 8005110:	200001d4 	.word	0x200001d4
 8005114:	08004b4f 	.word	0x08004b4f
 8005118:	08004b73 	.word	0x08004b73
 800511c:	20000248 	.word	0x20000248
 8005120:	200001d0 	.word	0x200001d0

08005124 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8005124:	b580      	push	{r7, lr}
 8005126:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8005128:	4b09      	ldr	r3, [pc, #36]	; (8005150 <RadioTxPrbs+0x2c>)
 800512a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800512e:	2101      	movs	r1, #1
 8005130:	4618      	mov	r0, r3
 8005132:	f001 fd31 	bl	8006b98 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8005136:	4b07      	ldr	r3, [pc, #28]	; (8005154 <RadioTxPrbs+0x30>)
 8005138:	212d      	movs	r1, #45	; 0x2d
 800513a:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800513e:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8005140:	f000 fefd 	bl	8005f3e <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8005144:	4804      	ldr	r0, [pc, #16]	; (8005158 <RadioTxPrbs+0x34>)
 8005146:	f000 fe53 	bl	8005df0 <SUBGRF_SetTx>
}
 800514a:	bf00      	nop
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	200001d4 	.word	0x200001d4
 8005154:	08004b4f 	.word	0x08004b4f
 8005158:	000fffff 	.word	0x000fffff

0800515c <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	4603      	mov	r3, r0
 8005164:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8005166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800516a:	4618      	mov	r0, r3
 800516c:	f001 fd3c 	bl	8006be8 <SUBGRF_SetRfTxPower>
 8005170:	4603      	mov	r3, r0
 8005172:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8005174:	7bfb      	ldrb	r3, [r7, #15]
 8005176:	2101      	movs	r1, #1
 8005178:	4618      	mov	r0, r3
 800517a:	f001 fd0d 	bl	8006b98 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800517e:	f000 fed5 	bl	8005f2c <SUBGRF_SetTxContinuousWave>
}
 8005182:	bf00      	nop
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 800518a:	b480      	push	{r7}
 800518c:	b089      	sub	sp, #36	; 0x24
 800518e:	af00      	add	r7, sp, #0
 8005190:	60f8      	str	r0, [r7, #12]
 8005192:	60b9      	str	r1, [r7, #8]
 8005194:	4613      	mov	r3, r2
 8005196:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8005198:	2300      	movs	r3, #0
 800519a:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 800519c:	2300      	movs	r3, #0
 800519e:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 80051a0:	2300      	movs	r3, #0
 80051a2:	61bb      	str	r3, [r7, #24]
 80051a4:	e011      	b.n	80051ca <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	4413      	add	r3, r2
 80051ac:	781a      	ldrb	r2, [r3, #0]
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	68b9      	ldr	r1, [r7, #8]
 80051b2:	440b      	add	r3, r1
 80051b4:	43d2      	mvns	r2, r2
 80051b6:	b2d2      	uxtb	r2, r2
 80051b8:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	4413      	add	r3, r2
 80051c0:	2200      	movs	r2, #0
 80051c2:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	3301      	adds	r3, #1
 80051c8:	61bb      	str	r3, [r7, #24]
 80051ca:	79fb      	ldrb	r3, [r7, #7]
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	dbe9      	blt.n	80051a6 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 80051d2:	2300      	movs	r3, #0
 80051d4:	61bb      	str	r3, [r7, #24]
 80051d6:	e049      	b.n	800526c <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	425a      	negs	r2, r3
 80051dc:	f003 0307 	and.w	r3, r3, #7
 80051e0:	f002 0207 	and.w	r2, r2, #7
 80051e4:	bf58      	it	pl
 80051e6:	4253      	negpl	r3, r2
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	f1c3 0307 	rsb	r3, r3, #7
 80051ee:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	da00      	bge.n	80051f8 <payload_integration+0x6e>
 80051f6:	3307      	adds	r3, #7
 80051f8:	10db      	asrs	r3, r3, #3
 80051fa:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	3301      	adds	r3, #1
 8005200:	425a      	negs	r2, r3
 8005202:	f003 0307 	and.w	r3, r3, #7
 8005206:	f002 0207 	and.w	r2, r2, #7
 800520a:	bf58      	it	pl
 800520c:	4253      	negpl	r3, r2
 800520e:	b2db      	uxtb	r3, r3
 8005210:	f1c3 0307 	rsb	r3, r3, #7
 8005214:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	3301      	adds	r3, #1
 800521a:	2b00      	cmp	r3, #0
 800521c:	da00      	bge.n	8005220 <payload_integration+0x96>
 800521e:	3307      	adds	r3, #7
 8005220:	10db      	asrs	r3, r3, #3
 8005222:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8005224:	7dbb      	ldrb	r3, [r7, #22]
 8005226:	68ba      	ldr	r2, [r7, #8]
 8005228:	4413      	add	r3, r2
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	461a      	mov	r2, r3
 800522e:	7dfb      	ldrb	r3, [r7, #23]
 8005230:	fa42 f303 	asr.w	r3, r2, r3
 8005234:	b2db      	uxtb	r3, r3
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 800523c:	7ffa      	ldrb	r2, [r7, #31]
 800523e:	7cfb      	ldrb	r3, [r7, #19]
 8005240:	4053      	eors	r3, r2
 8005242:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8005244:	7d3b      	ldrb	r3, [r7, #20]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	4413      	add	r3, r2
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	b25a      	sxtb	r2, r3
 800524e:	7ff9      	ldrb	r1, [r7, #31]
 8005250:	7d7b      	ldrb	r3, [r7, #21]
 8005252:	fa01 f303 	lsl.w	r3, r1, r3
 8005256:	b25b      	sxtb	r3, r3
 8005258:	4313      	orrs	r3, r2
 800525a:	b259      	sxtb	r1, r3
 800525c:	7d3b      	ldrb	r3, [r7, #20]
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	4413      	add	r3, r2
 8005262:	b2ca      	uxtb	r2, r1
 8005264:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	3301      	adds	r3, #1
 800526a:	61bb      	str	r3, [r7, #24]
 800526c:	79fb      	ldrb	r3, [r7, #7]
 800526e:	00db      	lsls	r3, r3, #3
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	429a      	cmp	r2, r3
 8005274:	dbb0      	blt.n	80051d8 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8005276:	7ffb      	ldrb	r3, [r7, #31]
 8005278:	01db      	lsls	r3, r3, #7
 800527a:	b25a      	sxtb	r2, r3
 800527c:	7ffb      	ldrb	r3, [r7, #31]
 800527e:	019b      	lsls	r3, r3, #6
 8005280:	b25b      	sxtb	r3, r3
 8005282:	4313      	orrs	r3, r2
 8005284:	b25b      	sxtb	r3, r3
 8005286:	7ffa      	ldrb	r2, [r7, #31]
 8005288:	2a00      	cmp	r2, #0
 800528a:	d101      	bne.n	8005290 <payload_integration+0x106>
 800528c:	2220      	movs	r2, #32
 800528e:	e000      	b.n	8005292 <payload_integration+0x108>
 8005290:	2200      	movs	r2, #0
 8005292:	4313      	orrs	r3, r2
 8005294:	b259      	sxtb	r1, r3
 8005296:	79fb      	ldrb	r3, [r7, #7]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	4413      	add	r3, r2
 800529c:	b2ca      	uxtb	r2, r1
 800529e:	701a      	strb	r2, [r3, #0]
}
 80052a0:	bf00      	nop
 80052a2:	3724      	adds	r7, #36	; 0x24
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bc80      	pop	{r7}
 80052a8:	4770      	bx	lr
	...

080052ac <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b08c      	sub	sp, #48	; 0x30
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60b9      	str	r1, [r7, #8]
 80052b4:	607a      	str	r2, [r7, #4]
 80052b6:	603b      	str	r3, [r7, #0]
 80052b8:	4603      	mov	r3, r0
 80052ba:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 80052bc:	2300      	movs	r3, #0
 80052be:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 80052c0:	2300      	movs	r3, #0
 80052c2:	623b      	str	r3, [r7, #32]
 80052c4:	2300      	movs	r3, #0
 80052c6:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80052c8:	f001 fe49 	bl	8006f5e <RFW_DeInit>

    if( rxContinuous != 0 )
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 80052d2:	2300      	movs	r3, #0
 80052d4:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	bf14      	ite	ne
 80052dc:	2301      	movne	r3, #1
 80052de:	2300      	moveq	r3, #0
 80052e0:	b2da      	uxtb	r2, r3
 80052e2:	4ba3      	ldr	r3, [pc, #652]	; (8005570 <RadioSetRxGenericConfig+0x2c4>)
 80052e4:	705a      	strb	r2, [r3, #1]

    switch( modem )
 80052e6:	7bfb      	ldrb	r3, [r7, #15]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d003      	beq.n	80052f4 <RadioSetRxGenericConfig+0x48>
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	f000 80dc 	beq.w	80054aa <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 80052f2:	e194      	b.n	800561e <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d003      	beq.n	8005304 <RadioSetRxGenericConfig+0x58>
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d102      	bne.n	800530a <RadioSetRxGenericConfig+0x5e>
            return -1;
 8005304:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005308:	e18a      	b.n	8005620 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	7f9b      	ldrb	r3, [r3, #30]
 800530e:	2b08      	cmp	r3, #8
 8005310:	d902      	bls.n	8005318 <RadioSetRxGenericConfig+0x6c>
            return -1;
 8005312:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005316:	e183      	b.n	8005620 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	6919      	ldr	r1, [r3, #16]
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	7f9b      	ldrb	r3, [r3, #30]
 8005320:	b29a      	uxth	r2, r3
 8005322:	f107 0320 	add.w	r3, r7, #32
 8005326:	4618      	mov	r0, r3
 8005328:	f001 ff12 	bl	8007150 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	bf14      	ite	ne
 8005334:	2301      	movne	r3, #1
 8005336:	2300      	moveq	r3, #0
 8005338:	b2db      	uxtb	r3, r3
 800533a:	4618      	mov	r0, r3
 800533c:	f000 fe08 	bl	8005f50 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8005340:	4b8b      	ldr	r3, [pc, #556]	; (8005570 <RadioSetRxGenericConfig+0x2c4>)
 8005342:	2200      	movs	r2, #0
 8005344:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	4a88      	ldr	r2, [pc, #544]	; (8005570 <RadioSetRxGenericConfig+0x2c4>)
 800534e:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	f893 2020 	ldrb.w	r2, [r3, #32]
 8005356:	4b86      	ldr	r3, [pc, #536]	; (8005570 <RadioSetRxGenericConfig+0x2c4>)
 8005358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	4618      	mov	r0, r3
 8005362:	f001 fd2f 	bl	8006dc4 <SUBGRF_GetFskBandwidthRegValue>
 8005366:	4603      	mov	r3, r0
 8005368:	461a      	mov	r2, r3
 800536a:	4b81      	ldr	r3, [pc, #516]	; (8005570 <RadioSetRxGenericConfig+0x2c4>)
 800536c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8005370:	4b7f      	ldr	r3, [pc, #508]	; (8005570 <RadioSetRxGenericConfig+0x2c4>)
 8005372:	2200      	movs	r2, #0
 8005374:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	b29b      	uxth	r3, r3
 800537c:	00db      	lsls	r3, r3, #3
 800537e:	b29a      	uxth	r2, r3
 8005380:	4b7b      	ldr	r3, [pc, #492]	; (8005570 <RadioSetRxGenericConfig+0x2c4>)
 8005382:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	7fda      	ldrb	r2, [r3, #31]
 8005388:	4b79      	ldr	r3, [pc, #484]	; (8005570 <RadioSetRxGenericConfig+0x2c4>)
 800538a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	7f9b      	ldrb	r3, [r3, #30]
 8005390:	00db      	lsls	r3, r3, #3
 8005392:	b2da      	uxtb	r2, r3
 8005394:	4b76      	ldr	r3, [pc, #472]	; (8005570 <RadioSetRxGenericConfig+0x2c4>)
 8005396:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800539e:	4b74      	ldr	r3, [pc, #464]	; (8005570 <RadioSetRxGenericConfig+0x2c4>)
 80053a0:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d105      	bne.n	80053b8 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	695b      	ldr	r3, [r3, #20]
 80053b0:	b2da      	uxtb	r2, r3
 80053b2:	4b6f      	ldr	r3, [pc, #444]	; (8005570 <RadioSetRxGenericConfig+0x2c4>)
 80053b4:	759a      	strb	r2, [r3, #22]
 80053b6:	e00b      	b.n	80053d0 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d103      	bne.n	80053ca <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80053c2:	4b6b      	ldr	r3, [pc, #428]	; (8005570 <RadioSetRxGenericConfig+0x2c4>)
 80053c4:	22ff      	movs	r2, #255	; 0xff
 80053c6:	759a      	strb	r2, [r3, #22]
 80053c8:	e002      	b.n	80053d0 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80053ca:	4b69      	ldr	r3, [pc, #420]	; (8005570 <RadioSetRxGenericConfig+0x2c4>)
 80053cc:	22ff      	movs	r2, #255	; 0xff
 80053ce:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d004      	beq.n	80053e4 <RadioSetRxGenericConfig+0x138>
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d12d      	bne.n	8005440 <RadioSetRxGenericConfig+0x194>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80053ea:	2bf1      	cmp	r3, #241	; 0xf1
 80053ec:	d00c      	beq.n	8005408 <RadioSetRxGenericConfig+0x15c>
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80053f4:	2bf2      	cmp	r3, #242	; 0xf2
 80053f6:	d007      	beq.n	8005408 <RadioSetRxGenericConfig+0x15c>
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d002      	beq.n	8005408 <RadioSetRxGenericConfig+0x15c>
            return -1;
 8005402:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005406:	e10b      	b.n	8005620 <RadioSetRxGenericConfig+0x374>
          ConfigGeneric.rtx = CONFIG_RX;
 8005408:	2300      	movs	r3, #0
 800540a:	773b      	strb	r3, [r7, #28]
          ConfigGeneric.RxConfig = config;
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	61bb      	str	r3, [r7, #24]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8005410:	4b58      	ldr	r3, [pc, #352]	; (8005574 <RadioSetRxGenericConfig+0x2c8>)
 8005412:	6819      	ldr	r1, [r3, #0]
 8005414:	f107 0314 	add.w	r3, r7, #20
 8005418:	4a57      	ldr	r2, [pc, #348]	; (8005578 <RadioSetRxGenericConfig+0x2cc>)
 800541a:	4618      	mov	r0, r3
 800541c:	f001 fd92 	bl	8006f44 <RFW_Init>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d002      	beq.n	800542c <RadioSetRxGenericConfig+0x180>
            return -1;
 8005426:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800542a:	e0f9      	b.n	8005620 <RadioSetRxGenericConfig+0x374>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800542c:	4b50      	ldr	r3, [pc, #320]	; (8005570 <RadioSetRxGenericConfig+0x2c4>)
 800542e:	2200      	movs	r2, #0
 8005430:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8005432:	4b4f      	ldr	r3, [pc, #316]	; (8005570 <RadioSetRxGenericConfig+0x2c4>)
 8005434:	2201      	movs	r2, #1
 8005436:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8005438:	4b4d      	ldr	r3, [pc, #308]	; (8005570 <RadioSetRxGenericConfig+0x2c4>)
 800543a:	2200      	movs	r2, #0
 800543c:	755a      	strb	r2, [r3, #21]
        {
 800543e:	e00e      	b.n	800545e <RadioSetRxGenericConfig+0x1b2>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8005446:	4b4a      	ldr	r3, [pc, #296]	; (8005570 <RadioSetRxGenericConfig+0x2c4>)
 8005448:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8005450:	4b47      	ldr	r3, [pc, #284]	; (8005570 <RadioSetRxGenericConfig+0x2c4>)
 8005452:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800545a:	4b45      	ldr	r3, [pc, #276]	; (8005570 <RadioSetRxGenericConfig+0x2c4>)
 800545c:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800545e:	f7ff fa7a 	bl	8004956 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8005462:	2000      	movs	r0, #0
 8005464:	f7fe fc2a 	bl	8003cbc <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005468:	4844      	ldr	r0, [pc, #272]	; (800557c <RadioSetRxGenericConfig+0x2d0>)
 800546a:	f001 f80b 	bl	8006484 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800546e:	4844      	ldr	r0, [pc, #272]	; (8005580 <RadioSetRxGenericConfig+0x2d4>)
 8005470:	f001 f8da 	bl	8006628 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8005474:	f107 0320 	add.w	r3, r7, #32
 8005478:	4618      	mov	r0, r3
 800547a:	f000 fba2 	bl	8005bc2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	8b9b      	ldrh	r3, [r3, #28]
 8005482:	4618      	mov	r0, r3
 8005484:	f000 fbec 	bl	8005c60 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	8b1b      	ldrh	r3, [r3, #24]
 800548c:	4618      	mov	r0, r3
 800548e:	f000 fbc7 	bl	8005c20 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005498:	fb03 f202 	mul.w	r2, r3, r2
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a4:	4a32      	ldr	r2, [pc, #200]	; (8005570 <RadioSetRxGenericConfig+0x2c4>)
 80054a6:	6093      	str	r3, [r2, #8]
        break;
 80054a8:	e0b9      	b.n	800561e <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d102      	bne.n	80054b8 <RadioSetRxGenericConfig+0x20c>
            return -1;
 80054b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054b6:	e0b3      	b.n	8005620 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d104      	bne.n	80054cc <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80054ca:	e002      	b.n	80054d2 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 80054cc:	23ff      	movs	r3, #255	; 0xff
 80054ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	bf14      	ite	ne
 80054da:	2301      	movne	r3, #1
 80054dc:	2300      	moveq	r3, #0
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	4618      	mov	r0, r3
 80054e2:	f000 fd35 	bl	8005f50 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	4618      	mov	r0, r3
 80054ec:	f000 fd3f 	bl	8005f6e <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80054f0:	4b1f      	ldr	r3, [pc, #124]	; (8005570 <RadioSetRxGenericConfig+0x2c4>)
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80054fe:	4b1c      	ldr	r3, [pc, #112]	; (8005570 <RadioSetRxGenericConfig+0x2c4>)
 8005500:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800550a:	4b19      	ldr	r3, [pc, #100]	; (8005570 <RadioSetRxGenericConfig+0x2c4>)
 800550c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8005516:	4b16      	ldr	r3, [pc, #88]	; (8005570 <RadioSetRxGenericConfig+0x2c4>)
 8005518:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005522:	2b02      	cmp	r3, #2
 8005524:	d010      	beq.n	8005548 <RadioSetRxGenericConfig+0x29c>
 8005526:	2b02      	cmp	r3, #2
 8005528:	dc2c      	bgt.n	8005584 <RadioSetRxGenericConfig+0x2d8>
 800552a:	2b00      	cmp	r3, #0
 800552c:	d002      	beq.n	8005534 <RadioSetRxGenericConfig+0x288>
 800552e:	2b01      	cmp	r3, #1
 8005530:	d005      	beq.n	800553e <RadioSetRxGenericConfig+0x292>
            break;
 8005532:	e027      	b.n	8005584 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8005534:	4b0e      	ldr	r3, [pc, #56]	; (8005570 <RadioSetRxGenericConfig+0x2c4>)
 8005536:	2200      	movs	r2, #0
 8005538:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800553c:	e023      	b.n	8005586 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800553e:	4b0c      	ldr	r3, [pc, #48]	; (8005570 <RadioSetRxGenericConfig+0x2c4>)
 8005540:	2201      	movs	r2, #1
 8005542:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8005546:	e01e      	b.n	8005586 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800554e:	2b0b      	cmp	r3, #11
 8005550:	d004      	beq.n	800555c <RadioSetRxGenericConfig+0x2b0>
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005558:	2b0c      	cmp	r3, #12
 800555a:	d104      	bne.n	8005566 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800555c:	4b04      	ldr	r3, [pc, #16]	; (8005570 <RadioSetRxGenericConfig+0x2c4>)
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8005564:	e00f      	b.n	8005586 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8005566:	4b02      	ldr	r3, [pc, #8]	; (8005570 <RadioSetRxGenericConfig+0x2c4>)
 8005568:	2200      	movs	r2, #0
 800556a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800556e:	e00a      	b.n	8005586 <RadioSetRxGenericConfig+0x2da>
 8005570:	200001d4 	.word	0x200001d4
 8005574:	200001d0 	.word	0x200001d0
 8005578:	20000248 	.word	0x20000248
 800557c:	2000020c 	.word	0x2000020c
 8005580:	200001e2 	.word	0x200001e2
            break;
 8005584:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8005586:	4b28      	ldr	r3, [pc, #160]	; (8005628 <RadioSetRxGenericConfig+0x37c>)
 8005588:	2201      	movs	r2, #1
 800558a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8005590:	4b25      	ldr	r3, [pc, #148]	; (8005628 <RadioSetRxGenericConfig+0x37c>)
 8005592:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 800559a:	4b23      	ldr	r3, [pc, #140]	; (8005628 <RadioSetRxGenericConfig+0x37c>)
 800559c:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800559e:	4a22      	ldr	r2, [pc, #136]	; (8005628 <RadioSetRxGenericConfig+0x37c>)
 80055a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80055a4:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80055ac:	4b1e      	ldr	r3, [pc, #120]	; (8005628 <RadioSetRxGenericConfig+0x37c>)
 80055ae:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80055b8:	4b1b      	ldr	r3, [pc, #108]	; (8005628 <RadioSetRxGenericConfig+0x37c>)
 80055ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 80055be:	f7ff f9ca 	bl	8004956 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80055c2:	2001      	movs	r0, #1
 80055c4:	f7fe fb7a 	bl	8003cbc <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80055c8:	4818      	ldr	r0, [pc, #96]	; (800562c <RadioSetRxGenericConfig+0x380>)
 80055ca:	f000 ff5b 	bl	8006484 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80055ce:	4818      	ldr	r0, [pc, #96]	; (8005630 <RadioSetRxGenericConfig+0x384>)
 80055d0:	f001 f82a 	bl	8006628 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80055d4:	4b14      	ldr	r3, [pc, #80]	; (8005628 <RadioSetRxGenericConfig+0x37c>)
 80055d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d10d      	bne.n	80055fa <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80055de:	f240 7036 	movw	r0, #1846	; 0x736
 80055e2:	f001 f9f9 	bl	80069d8 <SUBGRF_ReadRegister>
 80055e6:	4603      	mov	r3, r0
 80055e8:	f023 0304 	bic.w	r3, r3, #4
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	4619      	mov	r1, r3
 80055f0:	f240 7036 	movw	r0, #1846	; 0x736
 80055f4:	f001 f9dc 	bl	80069b0 <SUBGRF_WriteRegister>
 80055f8:	e00c      	b.n	8005614 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80055fa:	f240 7036 	movw	r0, #1846	; 0x736
 80055fe:	f001 f9eb 	bl	80069d8 <SUBGRF_ReadRegister>
 8005602:	4603      	mov	r3, r0
 8005604:	f043 0304 	orr.w	r3, r3, #4
 8005608:	b2db      	uxtb	r3, r3
 800560a:	4619      	mov	r1, r3
 800560c:	f240 7036 	movw	r0, #1846	; 0x736
 8005610:	f001 f9ce 	bl	80069b0 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8005614:	4b04      	ldr	r3, [pc, #16]	; (8005628 <RadioSetRxGenericConfig+0x37c>)
 8005616:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800561a:	609a      	str	r2, [r3, #8]
        break;
 800561c:	bf00      	nop
    }
    return status;
 800561e:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8005620:	4618      	mov	r0, r3
 8005622:	3730      	adds	r7, #48	; 0x30
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	200001d4 	.word	0x200001d4
 800562c:	2000020c 	.word	0x2000020c
 8005630:	200001e2 	.word	0x200001e2

08005634 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b08e      	sub	sp, #56	; 0x38
 8005638:	af00      	add	r7, sp, #0
 800563a:	60b9      	str	r1, [r7, #8]
 800563c:	607b      	str	r3, [r7, #4]
 800563e:	4603      	mov	r3, r0
 8005640:	73fb      	strb	r3, [r7, #15]
 8005642:	4613      	mov	r3, r2
 8005644:	73bb      	strb	r3, [r7, #14]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8005646:	2300      	movs	r3, #0
 8005648:	62fb      	str	r3, [r7, #44]	; 0x2c
 800564a:	2300      	movs	r3, #0
 800564c:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800564e:	f001 fc86 	bl	8006f5e <RFW_DeInit>
    switch( modem )
 8005652:	7bfb      	ldrb	r3, [r7, #15]
 8005654:	2b03      	cmp	r3, #3
 8005656:	f200 8204 	bhi.w	8005a62 <RadioSetTxGenericConfig+0x42e>
 800565a:	a201      	add	r2, pc, #4	; (adr r2, 8005660 <RadioSetTxGenericConfig+0x2c>)
 800565c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005660:	080057e5 	.word	0x080057e5
 8005664:	0800592d 	.word	0x0800592d
 8005668:	08005a25 	.word	0x08005a25
 800566c:	08005671 	.word	0x08005671
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	7c9b      	ldrb	r3, [r3, #18]
 8005674:	2b08      	cmp	r3, #8
 8005676:	d902      	bls.n	800567e <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8005678:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800567c:	e206      	b.n	8005a8c <RadioSetTxGenericConfig+0x458>
        }
        else
        {
          RADIO_MEMCPY8(syncword, config->msk.SyncWord, config->msk.SyncWordLength);
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	6899      	ldr	r1, [r3, #8]
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	7c9b      	ldrb	r3, [r3, #18]
 8005686:	b29a      	uxth	r2, r3
 8005688:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800568c:	4618      	mov	r0, r3
 800568e:	f001 fd5f 	bl	8007150 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d102      	bne.n	80056a0 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 800569a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800569e:	e1f5      	b.n	8005a8c <RadioSetTxGenericConfig+0x458>
        }
        else if (config->msk.BitRate<= 10000)
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f242 7210 	movw	r2, #10000	; 0x2710
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d813      	bhi.n	80056d4 <RadioSetTxGenericConfig+0xa0>
        {
          /*max msk modulator datarate is 10kbps*/
          radio_modem= MODEM_MSK;
 80056ac:	2302      	movs	r3, #2
 80056ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 80056b2:	4b99      	ldr	r3, [pc, #612]	; (8005918 <RadioSetTxGenericConfig+0x2e4>)
 80056b4:	2203      	movs	r2, #3
 80056b6:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 80056b8:	4b97      	ldr	r3, [pc, #604]	; (8005918 <RadioSetTxGenericConfig+0x2e4>)
 80056ba:	2203      	movs	r2, #3
 80056bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a94      	ldr	r2, [pc, #592]	; (8005918 <RadioSetTxGenericConfig+0x2e4>)
 80056c6:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	7cda      	ldrb	r2, [r3, #19]
 80056cc:	4b92      	ldr	r3, [pc, #584]	; (8005918 <RadioSetTxGenericConfig+0x2e4>)
 80056ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056d2:	e017      	b.n	8005704 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
          radio_modem= MODEM_FSK;
 80056d4:	2300      	movs	r3, #0
 80056d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80056da:	4b8f      	ldr	r3, [pc, #572]	; (8005918 <RadioSetTxGenericConfig+0x2e4>)
 80056dc:	2200      	movs	r2, #0
 80056de:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80056e0:	4b8d      	ldr	r3, [pc, #564]	; (8005918 <RadioSetTxGenericConfig+0x2e4>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a8a      	ldr	r2, [pc, #552]	; (8005918 <RadioSetTxGenericConfig+0x2e4>)
 80056ee:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	7cda      	ldrb	r2, [r3, #19]
 80056f4:	4b88      	ldr	r3, [pc, #544]	; (8005918 <RadioSetTxGenericConfig+0x2e4>)
 80056f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
          /*do msk with gfsk modulator*/
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	089b      	lsrs	r3, r3, #2
 8005700:	4a85      	ldr	r2, [pc, #532]	; (8005918 <RadioSetTxGenericConfig+0x2e4>)
 8005702:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	b29b      	uxth	r3, r3
 800570a:	00db      	lsls	r3, r3, #3
 800570c:	b29a      	uxth	r2, r3
 800570e:	4b82      	ldr	r3, [pc, #520]	; (8005918 <RadioSetTxGenericConfig+0x2e4>)
 8005710:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8005712:	4b81      	ldr	r3, [pc, #516]	; (8005918 <RadioSetTxGenericConfig+0x2e4>)
 8005714:	2204      	movs	r2, #4
 8005716:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	7c9b      	ldrb	r3, [r3, #18]
 800571c:	00db      	lsls	r3, r3, #3
 800571e:	b2da      	uxtb	r2, r3
 8005720:	4b7d      	ldr	r3, [pc, #500]	; (8005918 <RadioSetTxGenericConfig+0x2e4>)
 8005722:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8005724:	4b7c      	ldr	r3, [pc, #496]	; (8005918 <RadioSetTxGenericConfig+0x2e4>)
 8005726:	2200      	movs	r2, #0
 8005728:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	7d9b      	ldrb	r3, [r3, #22]
 800572e:	2b02      	cmp	r3, #2
 8005730:	d003      	beq.n	800573a <RadioSetTxGenericConfig+0x106>
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	7d1b      	ldrb	r3, [r3, #20]
 8005736:	2b02      	cmp	r3, #2
 8005738:	d12b      	bne.n	8005792 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	7d5b      	ldrb	r3, [r3, #21]
 800573e:	2bf1      	cmp	r3, #241	; 0xf1
 8005740:	d00a      	beq.n	8005758 <RadioSetTxGenericConfig+0x124>
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	7d5b      	ldrb	r3, [r3, #21]
 8005746:	2bf2      	cmp	r3, #242	; 0xf2
 8005748:	d006      	beq.n	8005758 <RadioSetTxGenericConfig+0x124>
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	7d5b      	ldrb	r3, [r3, #21]
 800574e:	2b01      	cmp	r3, #1
 8005750:	d002      	beq.n	8005758 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 8005752:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005756:	e199      	b.n	8005a8c <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig= config;
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 800575c:	2301      	movs	r3, #1
 800575e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8005762:	4b6e      	ldr	r3, [pc, #440]	; (800591c <RadioSetTxGenericConfig+0x2e8>)
 8005764:	6819      	ldr	r1, [r3, #0]
 8005766:	f107 0320 	add.w	r3, r7, #32
 800576a:	4a6d      	ldr	r2, [pc, #436]	; (8005920 <RadioSetTxGenericConfig+0x2ec>)
 800576c:	4618      	mov	r0, r3
 800576e:	f001 fbe9 	bl	8006f44 <RFW_Init>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d002      	beq.n	800577e <RadioSetTxGenericConfig+0x14a>
            {
              return -1;
 8005778:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800577c:	e186      	b.n	8005a8c <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800577e:	4b66      	ldr	r3, [pc, #408]	; (8005918 <RadioSetTxGenericConfig+0x2e4>)
 8005780:	2200      	movs	r2, #0
 8005782:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8005784:	4b64      	ldr	r3, [pc, #400]	; (8005918 <RadioSetTxGenericConfig+0x2e4>)
 8005786:	2201      	movs	r2, #1
 8005788:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800578a:	4b63      	ldr	r3, [pc, #396]	; (8005918 <RadioSetTxGenericConfig+0x2e4>)
 800578c:	2200      	movs	r2, #0
 800578e:	755a      	strb	r2, [r3, #21]
        {
 8005790:	e00b      	b.n	80057aa <RadioSetTxGenericConfig+0x176>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	7d5a      	ldrb	r2, [r3, #21]
 8005796:	4b60      	ldr	r3, [pc, #384]	; (8005918 <RadioSetTxGenericConfig+0x2e4>)
 8005798:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	7d9a      	ldrb	r2, [r3, #22]
 800579e:	4b5e      	ldr	r3, [pc, #376]	; (8005918 <RadioSetTxGenericConfig+0x2e4>)
 80057a0:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	7d1a      	ldrb	r2, [r3, #20]
 80057a6:	4b5c      	ldr	r3, [pc, #368]	; (8005918 <RadioSetTxGenericConfig+0x2e4>)
 80057a8:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 80057aa:	f7ff f8d4 	bl	8004956 <RadioStandby>
        RadioSetModem( radio_modem );
 80057ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7fe fa82 	bl	8003cbc <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80057b8:	485a      	ldr	r0, [pc, #360]	; (8005924 <RadioSetTxGenericConfig+0x2f0>)
 80057ba:	f000 fe63 	bl	8006484 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80057be:	485a      	ldr	r0, [pc, #360]	; (8005928 <RadioSetTxGenericConfig+0x2f4>)
 80057c0:	f000 ff32 	bl	8006628 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80057c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80057c8:	4618      	mov	r0, r3
 80057ca:	f000 f9fa 	bl	8005bc2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	8a1b      	ldrh	r3, [r3, #16]
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 fa44 	bl	8005c60 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->msk.CrcPolynomial );
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	899b      	ldrh	r3, [r3, #12]
 80057dc:	4618      	mov	r0, r3
 80057de:	f000 fa1f 	bl	8005c20 <SUBGRF_SetCrcPolynomial>
        break;
 80057e2:	e13f      	b.n	8005a64 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d102      	bne.n	80057f2 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 80057ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057f0:	e14c      	b.n	8005a8c <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	7c9b      	ldrb	r3, [r3, #18]
 80057f6:	2b08      	cmp	r3, #8
 80057f8:	d902      	bls.n	8005800 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 80057fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057fe:	e145      	b.n	8005a8c <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8(syncword, config->fsk.SyncWord, config->fsk.SyncWordLength);
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	6899      	ldr	r1, [r3, #8]
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	7c9b      	ldrb	r3, [r3, #18]
 8005808:	b29a      	uxth	r2, r3
 800580a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800580e:	4618      	mov	r0, r3
 8005810:	f001 fc9e 	bl	8007150 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8005814:	4b40      	ldr	r3, [pc, #256]	; (8005918 <RadioSetTxGenericConfig+0x2e4>)
 8005816:	2200      	movs	r2, #0
 8005818:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a3d      	ldr	r2, [pc, #244]	; (8005918 <RadioSetTxGenericConfig+0x2e4>)
 8005822:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	7cda      	ldrb	r2, [r3, #19]
 8005828:	4b3b      	ldr	r3, [pc, #236]	; (8005918 <RadioSetTxGenericConfig+0x2e4>)
 800582a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	4a39      	ldr	r2, [pc, #228]	; (8005918 <RadioSetTxGenericConfig+0x2e4>)
 8005834:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8005836:	4b38      	ldr	r3, [pc, #224]	; (8005918 <RadioSetTxGenericConfig+0x2e4>)
 8005838:	2200      	movs	r2, #0
 800583a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	b29b      	uxth	r3, r3
 8005842:	00db      	lsls	r3, r3, #3
 8005844:	b29a      	uxth	r2, r3
 8005846:	4b34      	ldr	r3, [pc, #208]	; (8005918 <RadioSetTxGenericConfig+0x2e4>)
 8005848:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800584a:	4b33      	ldr	r3, [pc, #204]	; (8005918 <RadioSetTxGenericConfig+0x2e4>)
 800584c:	2204      	movs	r2, #4
 800584e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	7c9b      	ldrb	r3, [r3, #18]
 8005854:	00db      	lsls	r3, r3, #3
 8005856:	b2da      	uxtb	r2, r3
 8005858:	4b2f      	ldr	r3, [pc, #188]	; (8005918 <RadioSetTxGenericConfig+0x2e4>)
 800585a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800585c:	4b2e      	ldr	r3, [pc, #184]	; (8005918 <RadioSetTxGenericConfig+0x2e4>)
 800585e:	2200      	movs	r2, #0
 8005860:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	7d9b      	ldrb	r3, [r3, #22]
 8005866:	2b02      	cmp	r3, #2
 8005868:	d003      	beq.n	8005872 <RadioSetTxGenericConfig+0x23e>
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	7d1b      	ldrb	r3, [r3, #20]
 800586e:	2b02      	cmp	r3, #2
 8005870:	d12a      	bne.n	80058c8 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	7d5b      	ldrb	r3, [r3, #21]
 8005876:	2bf1      	cmp	r3, #241	; 0xf1
 8005878:	d00a      	beq.n	8005890 <RadioSetTxGenericConfig+0x25c>
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	7d5b      	ldrb	r3, [r3, #21]
 800587e:	2bf2      	cmp	r3, #242	; 0xf2
 8005880:	d006      	beq.n	8005890 <RadioSetTxGenericConfig+0x25c>
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	7d5b      	ldrb	r3, [r3, #21]
 8005886:	2b01      	cmp	r3, #1
 8005888:	d002      	beq.n	8005890 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 800588a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800588e:	e0fd      	b.n	8005a8c <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 8005890:	2301      	movs	r3, #1
 8005892:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8005898:	4b20      	ldr	r3, [pc, #128]	; (800591c <RadioSetTxGenericConfig+0x2e8>)
 800589a:	6819      	ldr	r1, [r3, #0]
 800589c:	f107 0314 	add.w	r3, r7, #20
 80058a0:	4a1f      	ldr	r2, [pc, #124]	; (8005920 <RadioSetTxGenericConfig+0x2ec>)
 80058a2:	4618      	mov	r0, r3
 80058a4:	f001 fb4e 	bl	8006f44 <RFW_Init>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d002      	beq.n	80058b4 <RadioSetTxGenericConfig+0x280>
            {
              return -1;
 80058ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058b2:	e0eb      	b.n	8005a8c <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80058b4:	4b18      	ldr	r3, [pc, #96]	; (8005918 <RadioSetTxGenericConfig+0x2e4>)
 80058b6:	2200      	movs	r2, #0
 80058b8:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 80058ba:	4b17      	ldr	r3, [pc, #92]	; (8005918 <RadioSetTxGenericConfig+0x2e4>)
 80058bc:	2201      	movs	r2, #1
 80058be:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80058c0:	4b15      	ldr	r3, [pc, #84]	; (8005918 <RadioSetTxGenericConfig+0x2e4>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	755a      	strb	r2, [r3, #21]
        {
 80058c6:	e00b      	b.n	80058e0 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	7d5a      	ldrb	r2, [r3, #21]
 80058cc:	4b12      	ldr	r3, [pc, #72]	; (8005918 <RadioSetTxGenericConfig+0x2e4>)
 80058ce:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	7d9a      	ldrb	r2, [r3, #22]
 80058d4:	4b10      	ldr	r3, [pc, #64]	; (8005918 <RadioSetTxGenericConfig+0x2e4>)
 80058d6:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	7d1a      	ldrb	r2, [r3, #20]
 80058dc:	4b0e      	ldr	r3, [pc, #56]	; (8005918 <RadioSetTxGenericConfig+0x2e4>)
 80058de:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 80058e0:	f7ff f839 	bl	8004956 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80058e4:	2000      	movs	r0, #0
 80058e6:	f7fe f9e9 	bl	8003cbc <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80058ea:	480e      	ldr	r0, [pc, #56]	; (8005924 <RadioSetTxGenericConfig+0x2f0>)
 80058ec:	f000 fdca 	bl	8006484 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80058f0:	480d      	ldr	r0, [pc, #52]	; (8005928 <RadioSetTxGenericConfig+0x2f4>)
 80058f2:	f000 fe99 	bl	8006628 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80058f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 f961 	bl	8005bc2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	8a1b      	ldrh	r3, [r3, #16]
 8005904:	4618      	mov	r0, r3
 8005906:	f000 f9ab 	bl	8005c60 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	899b      	ldrh	r3, [r3, #12]
 800590e:	4618      	mov	r0, r3
 8005910:	f000 f986 	bl	8005c20 <SUBGRF_SetCrcPolynomial>
        break;
 8005914:	e0a6      	b.n	8005a64 <RadioSetTxGenericConfig+0x430>
 8005916:	bf00      	nop
 8005918:	200001d4 	.word	0x200001d4
 800591c:	200001d0 	.word	0x200001d0
 8005920:	20000230 	.word	0x20000230
 8005924:	2000020c 	.word	0x2000020c
 8005928:	200001e2 	.word	0x200001e2
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800592c:	4b59      	ldr	r3, [pc, #356]	; (8005a94 <RadioSetTxGenericConfig+0x460>)
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	781a      	ldrb	r2, [r3, #0]
 8005938:	4b56      	ldr	r3, [pc, #344]	; (8005a94 <RadioSetTxGenericConfig+0x460>)
 800593a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	785a      	ldrb	r2, [r3, #1]
 8005942:	4b54      	ldr	r3, [pc, #336]	; (8005a94 <RadioSetTxGenericConfig+0x460>)
 8005944:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	789a      	ldrb	r2, [r3, #2]
 800594c:	4b51      	ldr	r3, [pc, #324]	; (8005a94 <RadioSetTxGenericConfig+0x460>)
 800594e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	78db      	ldrb	r3, [r3, #3]
 8005956:	2b02      	cmp	r3, #2
 8005958:	d010      	beq.n	800597c <RadioSetTxGenericConfig+0x348>
 800595a:	2b02      	cmp	r3, #2
 800595c:	dc20      	bgt.n	80059a0 <RadioSetTxGenericConfig+0x36c>
 800595e:	2b00      	cmp	r3, #0
 8005960:	d002      	beq.n	8005968 <RadioSetTxGenericConfig+0x334>
 8005962:	2b01      	cmp	r3, #1
 8005964:	d005      	beq.n	8005972 <RadioSetTxGenericConfig+0x33e>
            {
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
          default:
            break;
 8005966:	e01b      	b.n	80059a0 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8005968:	4b4a      	ldr	r3, [pc, #296]	; (8005a94 <RadioSetTxGenericConfig+0x460>)
 800596a:	2200      	movs	r2, #0
 800596c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8005970:	e017      	b.n	80059a2 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8005972:	4b48      	ldr	r3, [pc, #288]	; (8005a94 <RadioSetTxGenericConfig+0x460>)
 8005974:	2201      	movs	r2, #1
 8005976:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800597a:	e012      	b.n	80059a2 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	2b0b      	cmp	r3, #11
 8005982:	d003      	beq.n	800598c <RadioSetTxGenericConfig+0x358>
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	2b0c      	cmp	r3, #12
 800598a:	d104      	bne.n	8005996 <RadioSetTxGenericConfig+0x362>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800598c:	4b41      	ldr	r3, [pc, #260]	; (8005a94 <RadioSetTxGenericConfig+0x460>)
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8005994:	e005      	b.n	80059a2 <RadioSetTxGenericConfig+0x36e>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8005996:	4b3f      	ldr	r3, [pc, #252]	; (8005a94 <RadioSetTxGenericConfig+0x460>)
 8005998:	2200      	movs	r2, #0
 800599a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800599e:	e000      	b.n	80059a2 <RadioSetTxGenericConfig+0x36e>
            break;
 80059a0:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80059a2:	4b3c      	ldr	r3, [pc, #240]	; (8005a94 <RadioSetTxGenericConfig+0x460>)
 80059a4:	2201      	movs	r2, #1
 80059a6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	889a      	ldrh	r2, [r3, #4]
 80059ac:	4b39      	ldr	r3, [pc, #228]	; (8005a94 <RadioSetTxGenericConfig+0x460>)
 80059ae:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	799a      	ldrb	r2, [r3, #6]
 80059b4:	4b37      	ldr	r3, [pc, #220]	; (8005a94 <RadioSetTxGenericConfig+0x460>)
 80059b6:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	79da      	ldrb	r2, [r3, #7]
 80059bc:	4b35      	ldr	r3, [pc, #212]	; (8005a94 <RadioSetTxGenericConfig+0x460>)
 80059be:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	7a1a      	ldrb	r2, [r3, #8]
 80059c6:	4b33      	ldr	r3, [pc, #204]	; (8005a94 <RadioSetTxGenericConfig+0x460>)
 80059c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 80059cc:	f7fe ffc3 	bl	8004956 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80059d0:	2001      	movs	r0, #1
 80059d2:	f7fe f973 	bl	8003cbc <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80059d6:	4830      	ldr	r0, [pc, #192]	; (8005a98 <RadioSetTxGenericConfig+0x464>)
 80059d8:	f000 fd54 	bl	8006484 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80059dc:	482f      	ldr	r0, [pc, #188]	; (8005a9c <RadioSetTxGenericConfig+0x468>)
 80059de:	f000 fe23 	bl	8006628 <SUBGRF_SetPacketParams>

        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 80059e2:	4b2c      	ldr	r3, [pc, #176]	; (8005a94 <RadioSetTxGenericConfig+0x460>)
 80059e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059e8:	2b06      	cmp	r3, #6
 80059ea:	d10d      	bne.n	8005a08 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 80059ec:	f640 0089 	movw	r0, #2185	; 0x889
 80059f0:	f000 fff2 	bl	80069d8 <SUBGRF_ReadRegister>
 80059f4:	4603      	mov	r3, r0
 80059f6:	f023 0304 	bic.w	r3, r3, #4
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	4619      	mov	r1, r3
 80059fe:	f640 0089 	movw	r0, #2185	; 0x889
 8005a02:	f000 ffd5 	bl	80069b0 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        // WORKAROUND END
        break;
 8005a06:	e02d      	b.n	8005a64 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8005a08:	f640 0089 	movw	r0, #2185	; 0x889
 8005a0c:	f000 ffe4 	bl	80069d8 <SUBGRF_ReadRegister>
 8005a10:	4603      	mov	r3, r0
 8005a12:	f043 0304 	orr.w	r3, r3, #4
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	4619      	mov	r1, r3
 8005a1a:	f640 0089 	movw	r0, #2185	; 0x889
 8005a1e:	f000 ffc7 	bl	80069b0 <SUBGRF_WriteRegister>
        break;
 8005a22:	e01f      	b.n	8005a64 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d004      	beq.n	8005a36 <RadioSetTxGenericConfig+0x402>
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a34:	d902      	bls.n	8005a3c <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 8005a36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a3a:	e027      	b.n	8005a8c <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 8005a3c:	2003      	movs	r0, #3
 8005a3e:	f7fe f93d 	bl	8003cbc <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8005a42:	4b14      	ldr	r3, [pc, #80]	; (8005a94 <RadioSetTxGenericConfig+0x460>)
 8005a44:	2202      	movs	r2, #2
 8005a46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a11      	ldr	r2, [pc, #68]	; (8005a94 <RadioSetTxGenericConfig+0x460>)
 8005a50:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8005a52:	4b10      	ldr	r3, [pc, #64]	; (8005a94 <RadioSetTxGenericConfig+0x460>)
 8005a54:	2216      	movs	r2, #22
 8005a56:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8005a5a:	480f      	ldr	r0, [pc, #60]	; (8005a98 <RadioSetTxGenericConfig+0x464>)
 8005a5c:	f000 fd12 	bl	8006484 <SUBGRF_SetModulationParams>
        break;
 8005a60:	e000      	b.n	8005a64 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 8005a62:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8005a64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f001 f8bd 	bl	8006be8 <SUBGRF_SetRfTxPower>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	461a      	mov	r2, r3
 8005a72:	4b08      	ldr	r3, [pc, #32]	; (8005a94 <RadioSetTxGenericConfig+0x460>)
 8005a74:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8005a78:	4b06      	ldr	r3, [pc, #24]	; (8005a94 <RadioSetTxGenericConfig+0x460>)
 8005a7a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f001 fa81 	bl	8006f86 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8005a84:	4a03      	ldr	r2, [pc, #12]	; (8005a94 <RadioSetTxGenericConfig+0x460>)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6053      	str	r3, [r2, #4]
    return 0;
 8005a8a:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3738      	adds	r7, #56	; 0x38
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	200001d4 	.word	0x200001d4
 8005a98:	2000020c 	.word	0x2000020c
 8005a9c:	200001e2 	.word	0x200001e2

08005aa0 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d002      	beq.n	8005ab4 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8005aae:	4a1a      	ldr	r2, [pc, #104]	; (8005b18 <SUBGRF_Init+0x78>)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8005ab4:	f7fa fe52 	bl	800075c <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8005ab8:	2002      	movs	r0, #2
 8005aba:	f001 f961 	bl	8006d80 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8005abe:	4b17      	ldr	r3, [pc, #92]	; (8005b1c <SUBGRF_Init+0x7c>)
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8005ac4:	2000      	movs	r0, #0
 8005ac6:	f000 f977 	bl	8005db8 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8005aca:	f001 fb16 	bl	80070fa <RBI_IsTCXO>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d10e      	bne.n	8005af2 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8005ad4:	2140      	movs	r1, #64	; 0x40
 8005ad6:	2001      	movs	r0, #1
 8005ad8:	f000 fb78 	bl	80061cc <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8005adc:	2100      	movs	r1, #0
 8005ade:	f640 1011 	movw	r0, #2321	; 0x911
 8005ae2:	f000 ff65 	bl	80069b0 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8005ae6:	237f      	movs	r3, #127	; 0x7f
 8005ae8:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8005aea:	7b38      	ldrb	r0, [r7, #12]
 8005aec:	f000 fa85 	bl	8005ffa <SUBGRF_Calibrate>
 8005af0:	e009      	b.n	8005b06 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8005af2:	2120      	movs	r1, #32
 8005af4:	f640 1011 	movw	r0, #2321	; 0x911
 8005af8:	f000 ff5a 	bl	80069b0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8005afc:	2120      	movs	r1, #32
 8005afe:	f640 1012 	movw	r0, #2322	; 0x912
 8005b02:	f000 ff55 	bl	80069b0 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 8005b06:	f001 fad5 	bl	80070b4 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8005b0a:	4b05      	ldr	r3, [pc, #20]	; (8005b20 <SUBGRF_Init+0x80>)
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	701a      	strb	r2, [r3, #0]
}
 8005b10:	bf00      	nop
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	2000026c 	.word	0x2000026c
 8005b1c:	20000268 	.word	0x20000268
 8005b20:	20000260 	.word	0x20000260

08005b24 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8005b24:	b480      	push	{r7}
 8005b26:	af00      	add	r7, sp, #0
    return OperatingMode;
 8005b28:	4b02      	ldr	r3, [pc, #8]	; (8005b34 <SUBGRF_GetOperatingMode+0x10>)
 8005b2a:	781b      	ldrb	r3, [r3, #0]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bc80      	pop	{r7}
 8005b32:	4770      	bx	lr
 8005b34:	20000260 	.word	0x20000260

08005b38 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	460b      	mov	r3, r1
 8005b42:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8005b44:	78fb      	ldrb	r3, [r7, #3]
 8005b46:	461a      	mov	r2, r3
 8005b48:	6879      	ldr	r1, [r7, #4]
 8005b4a:	2000      	movs	r0, #0
 8005b4c:	f000 ff9c 	bl	8006a88 <SUBGRF_WriteBuffer>
}
 8005b50:	bf00      	nop
 8005b52:	3708      	adds	r7, #8
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b086      	sub	sp, #24
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	4613      	mov	r3, r2
 8005b64:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8005b66:	2300      	movs	r3, #0
 8005b68:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8005b6a:	f107 0317 	add.w	r3, r7, #23
 8005b6e:	4619      	mov	r1, r3
 8005b70:	68b8      	ldr	r0, [r7, #8]
 8005b72:	f000 fe47 	bl	8006804 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	79fa      	ldrb	r2, [r7, #7]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d201      	bcs.n	8005b84 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e007      	b.n	8005b94 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8005b84:	7df8      	ldrb	r0, [r7, #23]
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	68f9      	ldr	r1, [r7, #12]
 8005b8e:	f000 ff9d 	bl	8006acc <SUBGRF_ReadBuffer>

    return 0;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3718      	adds	r7, #24
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	607a      	str	r2, [r7, #4]
 8005ba8:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8005baa:	7afb      	ldrb	r3, [r7, #11]
 8005bac:	4619      	mov	r1, r3
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f7ff ffc2 	bl	8005b38 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 f91b 	bl	8005df0 <SUBGRF_SetTx>
}
 8005bba:	bf00      	nop
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b082      	sub	sp, #8
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8005bca:	2208      	movs	r2, #8
 8005bcc:	6879      	ldr	r1, [r7, #4]
 8005bce:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8005bd2:	f000 ff15 	bl	8006a00 <SUBGRF_WriteRegisters>
    return 0;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3708      	adds	r7, #8
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	4603      	mov	r3, r0
 8005be8:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8005bea:	88fb      	ldrh	r3, [r7, #6]
 8005bec:	0a1b      	lsrs	r3, r3, #8
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8005bf4:	88fb      	ldrh	r3, [r7, #6]
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8005bfa:	f000 fb6b 	bl	80062d4 <SUBGRF_GetPacketType>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d108      	bne.n	8005c16 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8005c04:	f107 030c 	add.w	r3, r7, #12
 8005c08:	2202      	movs	r2, #2
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8005c10:	f000 fef6 	bl	8006a00 <SUBGRF_WriteRegisters>
            break;
 8005c14:	e000      	b.n	8005c18 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8005c16:	bf00      	nop
    }
}
 8005c18:	bf00      	nop
 8005c1a:	3710      	adds	r7, #16
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	4603      	mov	r3, r0
 8005c28:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8005c2a:	88fb      	ldrh	r3, [r7, #6]
 8005c2c:	0a1b      	lsrs	r3, r3, #8
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8005c34:	88fb      	ldrh	r3, [r7, #6]
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8005c3a:	f000 fb4b 	bl	80062d4 <SUBGRF_GetPacketType>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d108      	bne.n	8005c56 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8005c44:	f107 030c 	add.w	r3, r7, #12
 8005c48:	2202      	movs	r2, #2
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	f240 60be 	movw	r0, #1726	; 0x6be
 8005c50:	f000 fed6 	bl	8006a00 <SUBGRF_WriteRegisters>
            break;
 8005c54:	e000      	b.n	8005c58 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8005c56:	bf00      	nop
    }
}
 8005c58:	bf00      	nop
 8005c5a:	3710      	adds	r7, #16
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	4603      	mov	r3, r0
 8005c68:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8005c6e:	f000 fb31 	bl	80062d4 <SUBGRF_GetPacketType>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d121      	bne.n	8005cbc <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8005c78:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8005c7c:	f000 feac 	bl	80069d8 <SUBGRF_ReadRegister>
 8005c80:	4603      	mov	r3, r0
 8005c82:	f023 0301 	bic.w	r3, r3, #1
 8005c86:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8005c88:	88fb      	ldrh	r3, [r7, #6]
 8005c8a:	0a1b      	lsrs	r3, r3, #8
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	b25b      	sxtb	r3, r3
 8005c90:	f003 0301 	and.w	r3, r3, #1
 8005c94:	b25a      	sxtb	r2, r3
 8005c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	b25b      	sxtb	r3, r3
 8005c9e:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8005ca0:	7bfb      	ldrb	r3, [r7, #15]
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8005ca8:	f000 fe82 	bl	80069b0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8005cac:	88fb      	ldrh	r3, [r7, #6]
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8005cb6:	f000 fe7b 	bl	80069b0 <SUBGRF_WriteRegister>
            break;
 8005cba:	e000      	b.n	8005cbe <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8005cbc:	bf00      	nop
    }
}
 8005cbe:	bf00      	nop
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b082      	sub	sp, #8
 8005cca:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8005cd8:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8005cdc:	f000 fe7c 	bl	80069d8 <SUBGRF_ReadRegister>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8005ce4:	79fb      	ldrb	r3, [r7, #7]
 8005ce6:	f023 0301 	bic.w	r3, r3, #1
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	4619      	mov	r1, r3
 8005cee:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8005cf2:	f000 fe5d 	bl	80069b0 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8005cf6:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8005cfa:	f000 fe6d 	bl	80069d8 <SUBGRF_ReadRegister>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8005d02:	79bb      	ldrb	r3, [r7, #6]
 8005d04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8005d10:	f000 fe4e 	bl	80069b0 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8005d14:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8005d18:	f000 f88a 	bl	8005e30 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8005d1c:	463b      	mov	r3, r7
 8005d1e:	2204      	movs	r2, #4
 8005d20:	4619      	mov	r1, r3
 8005d22:	f640 0019 	movw	r0, #2073	; 0x819
 8005d26:	f000 fe8d 	bl	8006a44 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8005d2a:	2000      	movs	r0, #0
 8005d2c:	f000 f844 	bl	8005db8 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8005d30:	79fb      	ldrb	r3, [r7, #7]
 8005d32:	4619      	mov	r1, r3
 8005d34:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8005d38:	f000 fe3a 	bl	80069b0 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8005d3c:	79bb      	ldrb	r3, [r7, #6]
 8005d3e:	4619      	mov	r1, r3
 8005d40:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8005d44:	f000 fe34 	bl	80069b0 <SUBGRF_WriteRegister>

    return number;
 8005d48:	683b      	ldr	r3, [r7, #0]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3708      	adds	r7, #8
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
	...

08005d54 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8005d5c:	2000      	movs	r0, #0
 8005d5e:	f001 f9b4 	bl	80070ca <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8005d62:	2002      	movs	r0, #2
 8005d64:	f001 f80c 	bl	8006d80 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8005d68:	793b      	ldrb	r3, [r7, #4]
 8005d6a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8005d74:	793b      	ldrb	r3, [r7, #4]
 8005d76:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8005d7e:	b25b      	sxtb	r3, r3
 8005d80:	4313      	orrs	r3, r2
 8005d82:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8005d84:	793b      	ldrb	r3, [r7, #4]
 8005d86:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	b25b      	sxtb	r3, r3
 8005d92:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8005d94:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8005d96:	f107 030f 	add.w	r3, r7, #15
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	2084      	movs	r0, #132	; 0x84
 8005da0:	f000 feb6 	bl	8006b10 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8005da4:	4b03      	ldr	r3, [pc, #12]	; (8005db4 <SUBGRF_SetSleep+0x60>)
 8005da6:	2200      	movs	r2, #0
 8005da8:	701a      	strb	r2, [r3, #0]
}
 8005daa:	bf00      	nop
 8005dac:	3710      	adds	r7, #16
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	20000260 	.word	0x20000260

08005db8 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8005dc2:	1dfb      	adds	r3, r7, #7
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	2080      	movs	r0, #128	; 0x80
 8005dca:	f000 fea1 	bl	8006b10 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8005dce:	79fb      	ldrb	r3, [r7, #7]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d103      	bne.n	8005ddc <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8005dd4:	4b05      	ldr	r3, [pc, #20]	; (8005dec <SUBGRF_SetStandby+0x34>)
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8005dda:	e002      	b.n	8005de2 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8005ddc:	4b03      	ldr	r3, [pc, #12]	; (8005dec <SUBGRF_SetStandby+0x34>)
 8005dde:	2202      	movs	r2, #2
 8005de0:	701a      	strb	r2, [r3, #0]
}
 8005de2:	bf00      	nop
 8005de4:	3708      	adds	r7, #8
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	20000260 	.word	0x20000260

08005df0 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8005df8:	4b0c      	ldr	r3, [pc, #48]	; (8005e2c <SUBGRF_SetTx+0x3c>)
 8005dfa:	2204      	movs	r2, #4
 8005dfc:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	0c1b      	lsrs	r3, r3, #16
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	0a1b      	lsrs	r3, r3, #8
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8005e14:	f107 030c 	add.w	r3, r7, #12
 8005e18:	2203      	movs	r2, #3
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	2083      	movs	r0, #131	; 0x83
 8005e1e:	f000 fe77 	bl	8006b10 <SUBGRF_WriteCommand>
}
 8005e22:	bf00      	nop
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	20000260 	.word	0x20000260

08005e30 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8005e38:	4b0c      	ldr	r3, [pc, #48]	; (8005e6c <SUBGRF_SetRx+0x3c>)
 8005e3a:	2205      	movs	r2, #5
 8005e3c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	0c1b      	lsrs	r3, r3, #16
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	0a1b      	lsrs	r3, r3, #8
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8005e54:	f107 030c 	add.w	r3, r7, #12
 8005e58:	2203      	movs	r2, #3
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	2082      	movs	r0, #130	; 0x82
 8005e5e:	f000 fe57 	bl	8006b10 <SUBGRF_WriteCommand>
}
 8005e62:	bf00      	nop
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	20000260 	.word	0x20000260

08005e70 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8005e78:	4b0e      	ldr	r3, [pc, #56]	; (8005eb4 <SUBGRF_SetRxBoosted+0x44>)
 8005e7a:	2205      	movs	r2, #5
 8005e7c:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8005e7e:	2197      	movs	r1, #151	; 0x97
 8005e80:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8005e84:	f000 fd94 	bl	80069b0 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	0c1b      	lsrs	r3, r3, #16
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	0a1b      	lsrs	r3, r3, #8
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8005e9e:	f107 030c 	add.w	r3, r7, #12
 8005ea2:	2203      	movs	r2, #3
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	2082      	movs	r0, #130	; 0x82
 8005ea8:	f000 fe32 	bl	8006b10 <SUBGRF_WriteCommand>
}
 8005eac:	bf00      	nop
 8005eae:	3710      	adds	r7, #16
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	20000260 	.word	0x20000260

08005eb8 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	0c1b      	lsrs	r3, r3, #16
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	0a1b      	lsrs	r3, r3, #8
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	0c1b      	lsrs	r3, r3, #16
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	0a1b      	lsrs	r3, r3, #8
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8005eee:	f107 0308 	add.w	r3, r7, #8
 8005ef2:	2206      	movs	r2, #6
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	2094      	movs	r0, #148	; 0x94
 8005ef8:	f000 fe0a 	bl	8006b10 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8005efc:	4b03      	ldr	r3, [pc, #12]	; (8005f0c <SUBGRF_SetRxDutyCycle+0x54>)
 8005efe:	2206      	movs	r2, #6
 8005f00:	701a      	strb	r2, [r3, #0]
}
 8005f02:	bf00      	nop
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	20000260 	.word	0x20000260

08005f10 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8005f14:	2200      	movs	r2, #0
 8005f16:	2100      	movs	r1, #0
 8005f18:	20c5      	movs	r0, #197	; 0xc5
 8005f1a:	f000 fdf9 	bl	8006b10 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8005f1e:	4b02      	ldr	r3, [pc, #8]	; (8005f28 <SUBGRF_SetCad+0x18>)
 8005f20:	2207      	movs	r2, #7
 8005f22:	701a      	strb	r2, [r3, #0]
}
 8005f24:	bf00      	nop
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	20000260 	.word	0x20000260

08005f2c <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8005f30:	2200      	movs	r2, #0
 8005f32:	2100      	movs	r1, #0
 8005f34:	20d1      	movs	r0, #209	; 0xd1
 8005f36:	f000 fdeb 	bl	8006b10 <SUBGRF_WriteCommand>
}
 8005f3a:	bf00      	nop
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8005f42:	2200      	movs	r2, #0
 8005f44:	2100      	movs	r1, #0
 8005f46:	20d2      	movs	r0, #210	; 0xd2
 8005f48:	f000 fde2 	bl	8006b10 <SUBGRF_WriteCommand>
}
 8005f4c:	bf00      	nop
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	4603      	mov	r3, r0
 8005f58:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8005f5a:	1dfb      	adds	r3, r7, #7
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	4619      	mov	r1, r3
 8005f60:	209f      	movs	r0, #159	; 0x9f
 8005f62:	f000 fdd5 	bl	8006b10 <SUBGRF_WriteCommand>
}
 8005f66:	bf00      	nop
 8005f68:	3708      	adds	r7, #8
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b084      	sub	sp, #16
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	4603      	mov	r3, r0
 8005f76:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8005f78:	1dfb      	adds	r3, r7, #7
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	20a0      	movs	r0, #160	; 0xa0
 8005f80:	f000 fdc6 	bl	8006b10 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8005f84:	79fb      	ldrb	r3, [r7, #7]
 8005f86:	2b3f      	cmp	r3, #63	; 0x3f
 8005f88:	d91c      	bls.n	8005fc4 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8005f8a:	79fb      	ldrb	r3, [r7, #7]
 8005f8c:	085b      	lsrs	r3, r3, #1
 8005f8e:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8005f90:	2300      	movs	r3, #0
 8005f92:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8005f94:	2300      	movs	r3, #0
 8005f96:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8005f98:	e005      	b.n	8005fa6 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8005f9a:	7bfb      	ldrb	r3, [r7, #15]
 8005f9c:	089b      	lsrs	r3, r3, #2
 8005f9e:	73fb      	strb	r3, [r7, #15]
            exp++;
 8005fa0:	7bbb      	ldrb	r3, [r7, #14]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8005fa6:	7bfb      	ldrb	r3, [r7, #15]
 8005fa8:	2b1f      	cmp	r3, #31
 8005faa:	d8f6      	bhi.n	8005f9a <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8005fac:	7bfb      	ldrb	r3, [r7, #15]
 8005fae:	00db      	lsls	r3, r3, #3
 8005fb0:	b2da      	uxtb	r2, r3
 8005fb2:	7bbb      	ldrb	r3, [r7, #14]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8005fb8:	7b7b      	ldrb	r3, [r7, #13]
 8005fba:	4619      	mov	r1, r3
 8005fbc:	f240 7006 	movw	r0, #1798	; 0x706
 8005fc0:	f000 fcf6 	bl	80069b0 <SUBGRF_WriteRegister>
    }
}
 8005fc4:	bf00      	nop
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8005fd2:	f001 f89d 	bl	8007110 <RBI_IsDCDC>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d102      	bne.n	8005fe2 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	71fb      	strb	r3, [r7, #7]
 8005fe0:	e001      	b.n	8005fe6 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8005fe6:	1dfb      	adds	r3, r7, #7
 8005fe8:	2201      	movs	r2, #1
 8005fea:	4619      	mov	r1, r3
 8005fec:	2096      	movs	r0, #150	; 0x96
 8005fee:	f000 fd8f 	bl	8006b10 <SUBGRF_WriteCommand>
}
 8005ff2:	bf00      	nop
 8005ff4:	3708      	adds	r7, #8
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b084      	sub	sp, #16
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8006002:	793b      	ldrb	r3, [r7, #4]
 8006004:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006008:	b2db      	uxtb	r3, r3
 800600a:	019b      	lsls	r3, r3, #6
 800600c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800600e:	793b      	ldrb	r3, [r7, #4]
 8006010:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006014:	b2db      	uxtb	r3, r3
 8006016:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8006018:	b25b      	sxtb	r3, r3
 800601a:	4313      	orrs	r3, r2
 800601c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800601e:	793b      	ldrb	r3, [r7, #4]
 8006020:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006024:	b2db      	uxtb	r3, r3
 8006026:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8006028:	b25b      	sxtb	r3, r3
 800602a:	4313      	orrs	r3, r2
 800602c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800602e:	793b      	ldrb	r3, [r7, #4]
 8006030:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006034:	b2db      	uxtb	r3, r3
 8006036:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8006038:	b25b      	sxtb	r3, r3
 800603a:	4313      	orrs	r3, r2
 800603c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800603e:	793b      	ldrb	r3, [r7, #4]
 8006040:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006044:	b2db      	uxtb	r3, r3
 8006046:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8006048:	b25b      	sxtb	r3, r3
 800604a:	4313      	orrs	r3, r2
 800604c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800604e:	793b      	ldrb	r3, [r7, #4]
 8006050:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006054:	b2db      	uxtb	r3, r3
 8006056:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8006058:	b25b      	sxtb	r3, r3
 800605a:	4313      	orrs	r3, r2
 800605c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800605e:	793b      	ldrb	r3, [r7, #4]
 8006060:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006064:	b2db      	uxtb	r3, r3
 8006066:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8006068:	4313      	orrs	r3, r2
 800606a:	b25b      	sxtb	r3, r3
 800606c:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800606e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8006070:	f107 030f 	add.w	r3, r7, #15
 8006074:	2201      	movs	r2, #1
 8006076:	4619      	mov	r1, r3
 8006078:	2089      	movs	r0, #137	; 0x89
 800607a:	f000 fd49 	bl	8006b10 <SUBGRF_WriteCommand>
}
 800607e:	bf00      	nop
 8006080:	3710      	adds	r7, #16
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
	...

08006088 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a1b      	ldr	r2, [pc, #108]	; (8006100 <SUBGRF_CalibrateImage+0x78>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d904      	bls.n	80060a2 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8006098:	23e1      	movs	r3, #225	; 0xe1
 800609a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 800609c:	23e9      	movs	r3, #233	; 0xe9
 800609e:	737b      	strb	r3, [r7, #13]
 80060a0:	e022      	b.n	80060e8 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a17      	ldr	r2, [pc, #92]	; (8006104 <SUBGRF_CalibrateImage+0x7c>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d904      	bls.n	80060b4 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 80060aa:	23d7      	movs	r3, #215	; 0xd7
 80060ac:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 80060ae:	23db      	movs	r3, #219	; 0xdb
 80060b0:	737b      	strb	r3, [r7, #13]
 80060b2:	e019      	b.n	80060e8 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a14      	ldr	r2, [pc, #80]	; (8006108 <SUBGRF_CalibrateImage+0x80>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d904      	bls.n	80060c6 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 80060bc:	23c1      	movs	r3, #193	; 0xc1
 80060be:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 80060c0:	23c5      	movs	r3, #197	; 0xc5
 80060c2:	737b      	strb	r3, [r7, #13]
 80060c4:	e010      	b.n	80060e8 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a10      	ldr	r2, [pc, #64]	; (800610c <SUBGRF_CalibrateImage+0x84>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d904      	bls.n	80060d8 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 80060ce:	2375      	movs	r3, #117	; 0x75
 80060d0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 80060d2:	2381      	movs	r3, #129	; 0x81
 80060d4:	737b      	strb	r3, [r7, #13]
 80060d6:	e007      	b.n	80060e8 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a0d      	ldr	r2, [pc, #52]	; (8006110 <SUBGRF_CalibrateImage+0x88>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d903      	bls.n	80060e8 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 80060e0:	236b      	movs	r3, #107	; 0x6b
 80060e2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 80060e4:	236f      	movs	r3, #111	; 0x6f
 80060e6:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80060e8:	f107 030c 	add.w	r3, r7, #12
 80060ec:	2202      	movs	r2, #2
 80060ee:	4619      	mov	r1, r3
 80060f0:	2098      	movs	r0, #152	; 0x98
 80060f2:	f000 fd0d 	bl	8006b10 <SUBGRF_WriteCommand>
}
 80060f6:	bf00      	nop
 80060f8:	3710      	adds	r7, #16
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	35a4e900 	.word	0x35a4e900
 8006104:	32a9f880 	.word	0x32a9f880
 8006108:	2de54480 	.word	0x2de54480
 800610c:	1b6b0b00 	.word	0x1b6b0b00
 8006110:	1954fc40 	.word	0x1954fc40

08006114 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8006114:	b590      	push	{r4, r7, lr}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	4604      	mov	r4, r0
 800611c:	4608      	mov	r0, r1
 800611e:	4611      	mov	r1, r2
 8006120:	461a      	mov	r2, r3
 8006122:	4623      	mov	r3, r4
 8006124:	71fb      	strb	r3, [r7, #7]
 8006126:	4603      	mov	r3, r0
 8006128:	71bb      	strb	r3, [r7, #6]
 800612a:	460b      	mov	r3, r1
 800612c:	717b      	strb	r3, [r7, #5]
 800612e:	4613      	mov	r3, r2
 8006130:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8006132:	79fb      	ldrb	r3, [r7, #7]
 8006134:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8006136:	79bb      	ldrb	r3, [r7, #6]
 8006138:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800613a:	797b      	ldrb	r3, [r7, #5]
 800613c:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800613e:	793b      	ldrb	r3, [r7, #4]
 8006140:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8006142:	f107 030c 	add.w	r3, r7, #12
 8006146:	2204      	movs	r2, #4
 8006148:	4619      	mov	r1, r3
 800614a:	2095      	movs	r0, #149	; 0x95
 800614c:	f000 fce0 	bl	8006b10 <SUBGRF_WriteCommand>
}
 8006150:	bf00      	nop
 8006152:	3714      	adds	r7, #20
 8006154:	46bd      	mov	sp, r7
 8006156:	bd90      	pop	{r4, r7, pc}

08006158 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8006158:	b590      	push	{r4, r7, lr}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	4604      	mov	r4, r0
 8006160:	4608      	mov	r0, r1
 8006162:	4611      	mov	r1, r2
 8006164:	461a      	mov	r2, r3
 8006166:	4623      	mov	r3, r4
 8006168:	80fb      	strh	r3, [r7, #6]
 800616a:	4603      	mov	r3, r0
 800616c:	80bb      	strh	r3, [r7, #4]
 800616e:	460b      	mov	r3, r1
 8006170:	807b      	strh	r3, [r7, #2]
 8006172:	4613      	mov	r3, r2
 8006174:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8006176:	88fb      	ldrh	r3, [r7, #6]
 8006178:	0a1b      	lsrs	r3, r3, #8
 800617a:	b29b      	uxth	r3, r3
 800617c:	b2db      	uxtb	r3, r3
 800617e:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8006180:	88fb      	ldrh	r3, [r7, #6]
 8006182:	b2db      	uxtb	r3, r3
 8006184:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8006186:	88bb      	ldrh	r3, [r7, #4]
 8006188:	0a1b      	lsrs	r3, r3, #8
 800618a:	b29b      	uxth	r3, r3
 800618c:	b2db      	uxtb	r3, r3
 800618e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8006190:	88bb      	ldrh	r3, [r7, #4]
 8006192:	b2db      	uxtb	r3, r3
 8006194:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8006196:	887b      	ldrh	r3, [r7, #2]
 8006198:	0a1b      	lsrs	r3, r3, #8
 800619a:	b29b      	uxth	r3, r3
 800619c:	b2db      	uxtb	r3, r3
 800619e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80061a0:	887b      	ldrh	r3, [r7, #2]
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80061a6:	883b      	ldrh	r3, [r7, #0]
 80061a8:	0a1b      	lsrs	r3, r3, #8
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 80061b0:	883b      	ldrh	r3, [r7, #0]
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 80061b6:	f107 0308 	add.w	r3, r7, #8
 80061ba:	2208      	movs	r2, #8
 80061bc:	4619      	mov	r1, r3
 80061be:	2008      	movs	r0, #8
 80061c0:	f000 fca6 	bl	8006b10 <SUBGRF_WriteCommand>
}
 80061c4:	bf00      	nop
 80061c6:	3714      	adds	r7, #20
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd90      	pop	{r4, r7, pc}

080061cc <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	4603      	mov	r3, r0
 80061d4:	6039      	str	r1, [r7, #0]
 80061d6:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 80061d8:	79fb      	ldrb	r3, [r7, #7]
 80061da:	f003 0307 	and.w	r3, r3, #7
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	0c1b      	lsrs	r3, r3, #16
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	0a1b      	lsrs	r3, r3, #8
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80061f8:	f107 030c 	add.w	r3, r7, #12
 80061fc:	2204      	movs	r2, #4
 80061fe:	4619      	mov	r1, r3
 8006200:	2097      	movs	r0, #151	; 0x97
 8006202:	f000 fc85 	bl	8006b10 <SUBGRF_WriteCommand>
}
 8006206:	bf00      	nop
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
	...

08006210 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8006210:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006214:	b084      	sub	sp, #16
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800621a:	2300      	movs	r3, #0
 800621c:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800621e:	4b1d      	ldr	r3, [pc, #116]	; (8006294 <SUBGRF_SetRfFrequency+0x84>)
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	f083 0301 	eor.w	r3, r3, #1
 8006226:	b2db      	uxtb	r3, r3
 8006228:	2b00      	cmp	r3, #0
 800622a:	d005      	beq.n	8006238 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f7ff ff2b 	bl	8006088 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8006232:	4b18      	ldr	r3, [pc, #96]	; (8006294 <SUBGRF_SetRfFrequency+0x84>)
 8006234:	2201      	movs	r2, #1
 8006236:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	461c      	mov	r4, r3
 800623e:	4615      	mov	r5, r2
 8006240:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8006244:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8006248:	4a13      	ldr	r2, [pc, #76]	; (8006298 <SUBGRF_SetRfFrequency+0x88>)
 800624a:	f04f 0300 	mov.w	r3, #0
 800624e:	4640      	mov	r0, r8
 8006250:	4649      	mov	r1, r9
 8006252:	f7f9 ff91 	bl	8000178 <__aeabi_uldivmod>
 8006256:	4602      	mov	r2, r0
 8006258:	460b      	mov	r3, r1
 800625a:	4613      	mov	r3, r2
 800625c:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	0e1b      	lsrs	r3, r3, #24
 8006262:	b2db      	uxtb	r3, r3
 8006264:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	0c1b      	lsrs	r3, r3, #16
 800626a:	b2db      	uxtb	r3, r3
 800626c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	0a1b      	lsrs	r3, r3, #8
 8006272:	b2db      	uxtb	r3, r3
 8006274:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	b2db      	uxtb	r3, r3
 800627a:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800627c:	f107 0308 	add.w	r3, r7, #8
 8006280:	2204      	movs	r2, #4
 8006282:	4619      	mov	r1, r3
 8006284:	2086      	movs	r0, #134	; 0x86
 8006286:	f000 fc43 	bl	8006b10 <SUBGRF_WriteCommand>
}
 800628a:	bf00      	nop
 800628c:	3710      	adds	r7, #16
 800628e:	46bd      	mov	sp, r7
 8006290:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006294:	20000268 	.word	0x20000268
 8006298:	01e84800 	.word	0x01e84800

0800629c <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	4603      	mov	r3, r0
 80062a4:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 80062a6:	79fa      	ldrb	r2, [r7, #7]
 80062a8:	4b09      	ldr	r3, [pc, #36]	; (80062d0 <SUBGRF_SetPacketType+0x34>)
 80062aa:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 80062ac:	79fb      	ldrb	r3, [r7, #7]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d104      	bne.n	80062bc <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 80062b2:	2100      	movs	r1, #0
 80062b4:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80062b8:	f000 fb7a 	bl	80069b0 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 80062bc:	1dfb      	adds	r3, r7, #7
 80062be:	2201      	movs	r2, #1
 80062c0:	4619      	mov	r1, r3
 80062c2:	208a      	movs	r0, #138	; 0x8a
 80062c4:	f000 fc24 	bl	8006b10 <SUBGRF_WriteCommand>
}
 80062c8:	bf00      	nop
 80062ca:	3708      	adds	r7, #8
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	20000261 	.word	0x20000261

080062d4 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 80062d4:	b480      	push	{r7}
 80062d6:	af00      	add	r7, sp, #0
    return PacketType;
 80062d8:	4b02      	ldr	r3, [pc, #8]	; (80062e4 <SUBGRF_GetPacketType+0x10>)
 80062da:	781b      	ldrb	r3, [r3, #0]
}
 80062dc:	4618      	mov	r0, r3
 80062de:	46bd      	mov	sp, r7
 80062e0:	bc80      	pop	{r7}
 80062e2:	4770      	bx	lr
 80062e4:	20000261 	.word	0x20000261

080062e8 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	4603      	mov	r3, r0
 80062f0:	71fb      	strb	r3, [r7, #7]
 80062f2:	460b      	mov	r3, r1
 80062f4:	71bb      	strb	r3, [r7, #6]
 80062f6:	4613      	mov	r3, r2
 80062f8:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 80062fa:	79fb      	ldrb	r3, [r7, #7]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d149      	bne.n	8006394 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8006300:	2000      	movs	r0, #0
 8006302:	f000 ff10 	bl	8007126 <RBI_GetRFOMaxPowerConfig>
 8006306:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8006308:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	429a      	cmp	r2, r3
 8006310:	da01      	bge.n	8006316 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2b0e      	cmp	r3, #14
 800631a:	d10e      	bne.n	800633a <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 800631c:	2301      	movs	r3, #1
 800631e:	2201      	movs	r2, #1
 8006320:	2100      	movs	r1, #0
 8006322:	2004      	movs	r0, #4
 8006324:	f7ff fef6 	bl	8006114 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8006328:	79ba      	ldrb	r2, [r7, #6]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	b2db      	uxtb	r3, r3
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	b2db      	uxtb	r3, r3
 8006332:	330e      	adds	r3, #14
 8006334:	b2db      	uxtb	r3, r3
 8006336:	71bb      	strb	r3, [r7, #6]
 8006338:	e01f      	b.n	800637a <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2b0a      	cmp	r3, #10
 800633e:	d10e      	bne.n	800635e <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8006340:	2301      	movs	r3, #1
 8006342:	2201      	movs	r2, #1
 8006344:	2100      	movs	r1, #0
 8006346:	2001      	movs	r0, #1
 8006348:	f7ff fee4 	bl	8006114 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800634c:	79ba      	ldrb	r2, [r7, #6]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	b2db      	uxtb	r3, r3
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	b2db      	uxtb	r3, r3
 8006356:	330d      	adds	r3, #13
 8006358:	b2db      	uxtb	r3, r3
 800635a:	71bb      	strb	r3, [r7, #6]
 800635c:	e00d      	b.n	800637a <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 800635e:	2301      	movs	r3, #1
 8006360:	2201      	movs	r2, #1
 8006362:	2100      	movs	r1, #0
 8006364:	2006      	movs	r0, #6
 8006366:	f7ff fed5 	bl	8006114 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800636a:	79ba      	ldrb	r2, [r7, #6]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	b2db      	uxtb	r3, r3
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	b2db      	uxtb	r3, r3
 8006374:	330e      	adds	r3, #14
 8006376:	b2db      	uxtb	r3, r3
 8006378:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 800637a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800637e:	f113 0f11 	cmn.w	r3, #17
 8006382:	da01      	bge.n	8006388 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8006384:	23ef      	movs	r3, #239	; 0xef
 8006386:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8006388:	2118      	movs	r1, #24
 800638a:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800638e:	f000 fb0f 	bl	80069b0 <SUBGRF_WriteRegister>
 8006392:	e067      	b.n	8006464 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8006394:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8006398:	f000 fb1e 	bl	80069d8 <SUBGRF_ReadRegister>
 800639c:	4603      	mov	r3, r0
 800639e:	f043 031e 	orr.w	r3, r3, #30
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	4619      	mov	r1, r3
 80063a6:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80063aa:	f000 fb01 	bl	80069b0 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 80063ae:	2001      	movs	r0, #1
 80063b0:	f000 feb9 	bl	8007126 <RBI_GetRFOMaxPowerConfig>
 80063b4:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 80063b6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	429a      	cmp	r2, r3
 80063be:	da01      	bge.n	80063c4 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2b14      	cmp	r3, #20
 80063c8:	d10e      	bne.n	80063e8 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 80063ca:	2301      	movs	r3, #1
 80063cc:	2200      	movs	r2, #0
 80063ce:	2105      	movs	r1, #5
 80063d0:	2003      	movs	r0, #3
 80063d2:	f7ff fe9f 	bl	8006114 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80063d6:	79ba      	ldrb	r2, [r7, #6]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	3316      	adds	r3, #22
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	71bb      	strb	r3, [r7, #6]
 80063e6:	e031      	b.n	800644c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2b11      	cmp	r3, #17
 80063ec:	d10e      	bne.n	800640c <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 80063ee:	2301      	movs	r3, #1
 80063f0:	2200      	movs	r2, #0
 80063f2:	2103      	movs	r1, #3
 80063f4:	2002      	movs	r0, #2
 80063f6:	f7ff fe8d 	bl	8006114 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80063fa:	79ba      	ldrb	r2, [r7, #6]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	b2db      	uxtb	r3, r3
 8006404:	3316      	adds	r3, #22
 8006406:	b2db      	uxtb	r3, r3
 8006408:	71bb      	strb	r3, [r7, #6]
 800640a:	e01f      	b.n	800644c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2b0e      	cmp	r3, #14
 8006410:	d10e      	bne.n	8006430 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8006412:	2301      	movs	r3, #1
 8006414:	2200      	movs	r2, #0
 8006416:	2102      	movs	r1, #2
 8006418:	2002      	movs	r0, #2
 800641a:	f7ff fe7b 	bl	8006114 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800641e:	79ba      	ldrb	r2, [r7, #6]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	b2db      	uxtb	r3, r3
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	b2db      	uxtb	r3, r3
 8006428:	330e      	adds	r3, #14
 800642a:	b2db      	uxtb	r3, r3
 800642c:	71bb      	strb	r3, [r7, #6]
 800642e:	e00d      	b.n	800644c <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8006430:	2301      	movs	r3, #1
 8006432:	2200      	movs	r2, #0
 8006434:	2107      	movs	r1, #7
 8006436:	2004      	movs	r0, #4
 8006438:	f7ff fe6c 	bl	8006114 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800643c:	79ba      	ldrb	r2, [r7, #6]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	b2db      	uxtb	r3, r3
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	b2db      	uxtb	r3, r3
 8006446:	3316      	adds	r3, #22
 8006448:	b2db      	uxtb	r3, r3
 800644a:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 800644c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006450:	f113 0f09 	cmn.w	r3, #9
 8006454:	da01      	bge.n	800645a <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8006456:	23f7      	movs	r3, #247	; 0xf7
 8006458:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800645a:	2138      	movs	r1, #56	; 0x38
 800645c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8006460:	f000 faa6 	bl	80069b0 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8006464:	79bb      	ldrb	r3, [r7, #6]
 8006466:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8006468:	797b      	ldrb	r3, [r7, #5]
 800646a:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 800646c:	f107 0308 	add.w	r3, r7, #8
 8006470:	2202      	movs	r2, #2
 8006472:	4619      	mov	r1, r3
 8006474:	208e      	movs	r0, #142	; 0x8e
 8006476:	f000 fb4b 	bl	8006b10 <SUBGRF_WriteCommand>
}
 800647a:	bf00      	nop
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
	...

08006484 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8006484:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006488:	b086      	sub	sp, #24
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800648e:	2300      	movs	r3, #0
 8006490:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8006492:	4a61      	ldr	r2, [pc, #388]	; (8006618 <SUBGRF_SetModulationParams+0x194>)
 8006494:	f107 0308 	add.w	r3, r7, #8
 8006498:	e892 0003 	ldmia.w	r2, {r0, r1}
 800649c:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	781a      	ldrb	r2, [r3, #0]
 80064a4:	4b5d      	ldr	r3, [pc, #372]	; (800661c <SUBGRF_SetModulationParams+0x198>)
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d004      	beq.n	80064b6 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	4618      	mov	r0, r3
 80064b2:	f7ff fef3 	bl	800629c <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	2b03      	cmp	r3, #3
 80064bc:	f200 80a5 	bhi.w	800660a <SUBGRF_SetModulationParams+0x186>
 80064c0:	a201      	add	r2, pc, #4	; (adr r2, 80064c8 <SUBGRF_SetModulationParams+0x44>)
 80064c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c6:	bf00      	nop
 80064c8:	080064d9 	.word	0x080064d9
 80064cc:	08006599 	.word	0x08006599
 80064d0:	0800655b 	.word	0x0800655b
 80064d4:	080065c7 	.word	0x080065c7
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 80064d8:	2308      	movs	r3, #8
 80064da:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	4a4f      	ldr	r2, [pc, #316]	; (8006620 <SUBGRF_SetModulationParams+0x19c>)
 80064e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80064e6:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	0c1b      	lsrs	r3, r3, #16
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	0a1b      	lsrs	r3, r3, #8
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	7b1b      	ldrb	r3, [r3, #12]
 8006502:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	7b5b      	ldrb	r3, [r3, #13]
 8006508:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	2200      	movs	r2, #0
 8006510:	461c      	mov	r4, r3
 8006512:	4615      	mov	r5, r2
 8006514:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8006518:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800651c:	4a41      	ldr	r2, [pc, #260]	; (8006624 <SUBGRF_SetModulationParams+0x1a0>)
 800651e:	f04f 0300 	mov.w	r3, #0
 8006522:	4640      	mov	r0, r8
 8006524:	4649      	mov	r1, r9
 8006526:	f7f9 fe27 	bl	8000178 <__aeabi_uldivmod>
 800652a:	4602      	mov	r2, r0
 800652c:	460b      	mov	r3, r1
 800652e:	4613      	mov	r3, r2
 8006530:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	0c1b      	lsrs	r3, r3, #16
 8006536:	b2db      	uxtb	r3, r3
 8006538:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	0a1b      	lsrs	r3, r3, #8
 800653e:	b2db      	uxtb	r3, r3
 8006540:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	b2db      	uxtb	r3, r3
 8006546:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8006548:	7cfb      	ldrb	r3, [r7, #19]
 800654a:	b29a      	uxth	r2, r3
 800654c:	f107 0308 	add.w	r3, r7, #8
 8006550:	4619      	mov	r1, r3
 8006552:	208b      	movs	r0, #139	; 0x8b
 8006554:	f000 fadc 	bl	8006b10 <SUBGRF_WriteCommand>
        break;
 8006558:	e058      	b.n	800660c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 800655a:	2304      	movs	r3, #4
 800655c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	4a2f      	ldr	r2, [pc, #188]	; (8006620 <SUBGRF_SetModulationParams+0x19c>)
 8006564:	fbb2 f3f3 	udiv	r3, r2, r3
 8006568:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	0c1b      	lsrs	r3, r3, #16
 800656e:	b2db      	uxtb	r3, r3
 8006570:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	0a1b      	lsrs	r3, r3, #8
 8006576:	b2db      	uxtb	r3, r3
 8006578:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	b2db      	uxtb	r3, r3
 800657e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	7d1b      	ldrb	r3, [r3, #20]
 8006584:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8006586:	7cfb      	ldrb	r3, [r7, #19]
 8006588:	b29a      	uxth	r2, r3
 800658a:	f107 0308 	add.w	r3, r7, #8
 800658e:	4619      	mov	r1, r3
 8006590:	208b      	movs	r0, #139	; 0x8b
 8006592:	f000 fabd 	bl	8006b10 <SUBGRF_WriteCommand>
        break;
 8006596:	e039      	b.n	800660c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 8006598:	2304      	movs	r3, #4
 800659a:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	7e1b      	ldrb	r3, [r3, #24]
 80065a0:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	7e5b      	ldrb	r3, [r3, #25]
 80065a6:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	7e9b      	ldrb	r3, [r3, #26]
 80065ac:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	7edb      	ldrb	r3, [r3, #27]
 80065b2:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80065b4:	7cfb      	ldrb	r3, [r7, #19]
 80065b6:	b29a      	uxth	r2, r3
 80065b8:	f107 0308 	add.w	r3, r7, #8
 80065bc:	4619      	mov	r1, r3
 80065be:	208b      	movs	r0, #139	; 0x8b
 80065c0:	f000 faa6 	bl	8006b10 <SUBGRF_WriteCommand>

        break;
 80065c4:	e022      	b.n	800660c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 80065c6:	2305      	movs	r3, #5
 80065c8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	4a14      	ldr	r2, [pc, #80]	; (8006620 <SUBGRF_SetModulationParams+0x19c>)
 80065d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065d4:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	0c1b      	lsrs	r3, r3, #16
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	0a1b      	lsrs	r3, r3, #8
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	7b1b      	ldrb	r3, [r3, #12]
 80065f0:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	7b5b      	ldrb	r3, [r3, #13]
 80065f6:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80065f8:	7cfb      	ldrb	r3, [r7, #19]
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	f107 0308 	add.w	r3, r7, #8
 8006600:	4619      	mov	r1, r3
 8006602:	208b      	movs	r0, #139	; 0x8b
 8006604:	f000 fa84 	bl	8006b10 <SUBGRF_WriteCommand>
        break;
 8006608:	e000      	b.n	800660c <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 800660a:	bf00      	nop
    }
}
 800660c:	bf00      	nop
 800660e:	3718      	adds	r7, #24
 8006610:	46bd      	mov	sp, r7
 8006612:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006616:	bf00      	nop
 8006618:	08007660 	.word	0x08007660
 800661c:	20000261 	.word	0x20000261
 8006620:	3d090000 	.word	0x3d090000
 8006624:	01e84800 	.word	0x01e84800

08006628 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8006630:	2300      	movs	r3, #0
 8006632:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8006634:	4a48      	ldr	r2, [pc, #288]	; (8006758 <SUBGRF_SetPacketParams+0x130>)
 8006636:	f107 030c 	add.w	r3, r7, #12
 800663a:	ca07      	ldmia	r2, {r0, r1, r2}
 800663c:	c303      	stmia	r3!, {r0, r1}
 800663e:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	781a      	ldrb	r2, [r3, #0]
 8006644:	4b45      	ldr	r3, [pc, #276]	; (800675c <SUBGRF_SetPacketParams+0x134>)
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	429a      	cmp	r2, r3
 800664a:	d004      	beq.n	8006656 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	4618      	mov	r0, r3
 8006652:	f7ff fe23 	bl	800629c <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	2b03      	cmp	r3, #3
 800665c:	d878      	bhi.n	8006750 <SUBGRF_SetPacketParams+0x128>
 800665e:	a201      	add	r2, pc, #4	; (adr r2, 8006664 <SUBGRF_SetPacketParams+0x3c>)
 8006660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006664:	08006675 	.word	0x08006675
 8006668:	08006705 	.word	0x08006705
 800666c:	080066f9 	.word	0x080066f9
 8006670:	08006675 	.word	0x08006675
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	7a5b      	ldrb	r3, [r3, #9]
 8006678:	2bf1      	cmp	r3, #241	; 0xf1
 800667a:	d10a      	bne.n	8006692 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800667c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006680:	f7ff faae 	bl	8005be0 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8006684:	f248 0005 	movw	r0, #32773	; 0x8005
 8006688:	f7ff faca 	bl	8005c20 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800668c:	2302      	movs	r3, #2
 800668e:	75bb      	strb	r3, [r7, #22]
 8006690:	e011      	b.n	80066b6 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	7a5b      	ldrb	r3, [r3, #9]
 8006696:	2bf2      	cmp	r3, #242	; 0xf2
 8006698:	d10a      	bne.n	80066b0 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800669a:	f641 500f 	movw	r0, #7439	; 0x1d0f
 800669e:	f7ff fa9f 	bl	8005be0 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 80066a2:	f241 0021 	movw	r0, #4129	; 0x1021
 80066a6:	f7ff fabb 	bl	8005c20 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 80066aa:	2306      	movs	r3, #6
 80066ac:	75bb      	strb	r3, [r7, #22]
 80066ae:	e002      	b.n	80066b6 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	7a5b      	ldrb	r3, [r3, #9]
 80066b4:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 80066b6:	2309      	movs	r3, #9
 80066b8:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	885b      	ldrh	r3, [r3, #2]
 80066be:	0a1b      	lsrs	r3, r3, #8
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	885b      	ldrh	r3, [r3, #2]
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	791b      	ldrb	r3, [r3, #4]
 80066d2:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	795b      	ldrb	r3, [r3, #5]
 80066d8:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	799b      	ldrb	r3, [r3, #6]
 80066de:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	79db      	ldrb	r3, [r3, #7]
 80066e4:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	7a1b      	ldrb	r3, [r3, #8]
 80066ea:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 80066ec:	7dbb      	ldrb	r3, [r7, #22]
 80066ee:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	7a9b      	ldrb	r3, [r3, #10]
 80066f4:	753b      	strb	r3, [r7, #20]
        break;
 80066f6:	e022      	b.n	800673e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 80066f8:	2301      	movs	r3, #1
 80066fa:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	7b1b      	ldrb	r3, [r3, #12]
 8006700:	733b      	strb	r3, [r7, #12]
        break;
 8006702:	e01c      	b.n	800673e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8006704:	2306      	movs	r3, #6
 8006706:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	89db      	ldrh	r3, [r3, #14]
 800670c:	0a1b      	lsrs	r3, r3, #8
 800670e:	b29b      	uxth	r3, r3
 8006710:	b2db      	uxtb	r3, r3
 8006712:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	89db      	ldrh	r3, [r3, #14]
 8006718:	b2db      	uxtb	r3, r3
 800671a:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	7c1a      	ldrb	r2, [r3, #16]
 8006720:	4b0f      	ldr	r3, [pc, #60]	; (8006760 <SUBGRF_SetPacketParams+0x138>)
 8006722:	4611      	mov	r1, r2
 8006724:	7019      	strb	r1, [r3, #0]
 8006726:	4613      	mov	r3, r2
 8006728:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	7c5b      	ldrb	r3, [r3, #17]
 800672e:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	7c9b      	ldrb	r3, [r3, #18]
 8006734:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	7cdb      	ldrb	r3, [r3, #19]
 800673a:	747b      	strb	r3, [r7, #17]
        break;
 800673c:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800673e:	7dfb      	ldrb	r3, [r7, #23]
 8006740:	b29a      	uxth	r2, r3
 8006742:	f107 030c 	add.w	r3, r7, #12
 8006746:	4619      	mov	r1, r3
 8006748:	208c      	movs	r0, #140	; 0x8c
 800674a:	f000 f9e1 	bl	8006b10 <SUBGRF_WriteCommand>
 800674e:	e000      	b.n	8006752 <SUBGRF_SetPacketParams+0x12a>
        return;
 8006750:	bf00      	nop
}
 8006752:	3718      	adds	r7, #24
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	08007668 	.word	0x08007668
 800675c:	20000261 	.word	0x20000261
 8006760:	20000262 	.word	0x20000262

08006764 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	4603      	mov	r3, r0
 800676c:	460a      	mov	r2, r1
 800676e:	71fb      	strb	r3, [r7, #7]
 8006770:	4613      	mov	r3, r2
 8006772:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8006774:	79fb      	ldrb	r3, [r7, #7]
 8006776:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8006778:	79bb      	ldrb	r3, [r7, #6]
 800677a:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800677c:	f107 030c 	add.w	r3, r7, #12
 8006780:	2202      	movs	r2, #2
 8006782:	4619      	mov	r1, r3
 8006784:	208f      	movs	r0, #143	; 0x8f
 8006786:	f000 f9c3 	bl	8006b10 <SUBGRF_WriteCommand>
}
 800678a:	bf00      	nop
 800678c:	3710      	adds	r7, #16
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <SUBGRF_GetStatus>:

RadioStatus_t SUBGRF_GetStatus( void )
{
 8006792:	b580      	push	{r7, lr}
 8006794:	b082      	sub	sp, #8
 8006796:	af00      	add	r7, sp, #0
    uint8_t stat = 0;
 8006798:	2300      	movs	r3, #0
 800679a:	71fb      	strb	r3, [r7, #7]
    RadioStatus_t status = { .Value = 0 };
 800679c:	2300      	movs	r3, #0
 800679e:	713b      	strb	r3, [r7, #4]

    /* ST_WORKAROUND_BEGIN: Read the Device Status by the GET_STATUS command (HAL limitations) */
    SUBGRF_ReadCommand( RADIO_GET_STATUS, &stat, 1 );
 80067a0:	1dfb      	adds	r3, r7, #7
 80067a2:	2201      	movs	r2, #1
 80067a4:	4619      	mov	r1, r3
 80067a6:	20c0      	movs	r0, #192	; 0xc0
 80067a8:	f000 f9d4 	bl	8006b54 <SUBGRF_ReadCommand>
    /* ST_WORKAROUND_END */
    status.Fields.CmdStatus = ( stat & ( 0x07 << 1 ) ) >> 1;
 80067ac:	79fb      	ldrb	r3, [r7, #7]
 80067ae:	105b      	asrs	r3, r3, #1
 80067b0:	f003 0307 	and.w	r3, r3, #7
 80067b4:	b2da      	uxtb	r2, r3
 80067b6:	793b      	ldrb	r3, [r7, #4]
 80067b8:	f362 0343 	bfi	r3, r2, #1, #3
 80067bc:	713b      	strb	r3, [r7, #4]
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
 80067be:	79fb      	ldrb	r3, [r7, #7]
 80067c0:	111b      	asrs	r3, r3, #4
 80067c2:	f003 0307 	and.w	r3, r3, #7
 80067c6:	b2da      	uxtb	r2, r3
 80067c8:	793b      	ldrb	r3, [r7, #4]
 80067ca:	f362 1306 	bfi	r3, r2, #4, #3
 80067ce:	713b      	strb	r3, [r7, #4]
    return status;
 80067d0:	793b      	ldrb	r3, [r7, #4]
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3708      	adds	r7, #8
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}

080067da <SUBGRF_GetRssiInst>:

int8_t SUBGRF_GetRssiInst( void )
{
 80067da:	b580      	push	{r7, lr}
 80067dc:	b082      	sub	sp, #8
 80067de:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 80067e0:	2300      	movs	r3, #0
 80067e2:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 80067e4:	1d3b      	adds	r3, r7, #4
 80067e6:	2201      	movs	r2, #1
 80067e8:	4619      	mov	r1, r3
 80067ea:	2015      	movs	r0, #21
 80067ec:	f000 f9b2 	bl	8006b54 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 80067f0:	793b      	ldrb	r3, [r7, #4]
 80067f2:	425b      	negs	r3, r3
 80067f4:	105b      	asrs	r3, r3, #1
 80067f6:	71fb      	strb	r3, [r7, #7]
    return rssi;
 80067f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3708      	adds	r7, #8
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800680e:	f107 030c 	add.w	r3, r7, #12
 8006812:	2202      	movs	r2, #2
 8006814:	4619      	mov	r1, r3
 8006816:	2013      	movs	r0, #19
 8006818:	f000 f99c 	bl	8006b54 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800681c:	f7ff fd5a 	bl	80062d4 <SUBGRF_GetPacketType>
 8006820:	4603      	mov	r3, r0
 8006822:	2b01      	cmp	r3, #1
 8006824:	d10d      	bne.n	8006842 <SUBGRF_GetRxBufferStatus+0x3e>
 8006826:	4b0c      	ldr	r3, [pc, #48]	; (8006858 <SUBGRF_GetRxBufferStatus+0x54>)
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b01      	cmp	r3, #1
 800682e:	d108      	bne.n	8006842 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8006830:	f240 7002 	movw	r0, #1794	; 0x702
 8006834:	f000 f8d0 	bl	80069d8 <SUBGRF_ReadRegister>
 8006838:	4603      	mov	r3, r0
 800683a:	461a      	mov	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	701a      	strb	r2, [r3, #0]
 8006840:	e002      	b.n	8006848 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8006842:	7b3a      	ldrb	r2, [r7, #12]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8006848:	7b7a      	ldrb	r2, [r7, #13]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	701a      	strb	r2, [r3, #0]
}
 800684e:	bf00      	nop
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	20000262 	.word	0x20000262

0800685c <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8006864:	f107 030c 	add.w	r3, r7, #12
 8006868:	2203      	movs	r2, #3
 800686a:	4619      	mov	r1, r3
 800686c:	2014      	movs	r0, #20
 800686e:	f000 f971 	bl	8006b54 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8006872:	f7ff fd2f 	bl	80062d4 <SUBGRF_GetPacketType>
 8006876:	4603      	mov	r3, r0
 8006878:	461a      	mov	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d002      	beq.n	800688c <SUBGRF_GetPacketStatus+0x30>
 8006886:	2b01      	cmp	r3, #1
 8006888:	d013      	beq.n	80068b2 <SUBGRF_GetPacketStatus+0x56>
 800688a:	e02a      	b.n	80068e2 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800688c:	7b3a      	ldrb	r2, [r7, #12]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8006892:	7b7b      	ldrb	r3, [r7, #13]
 8006894:	425b      	negs	r3, r3
 8006896:	105b      	asrs	r3, r3, #1
 8006898:	b25a      	sxtb	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800689e:	7bbb      	ldrb	r3, [r7, #14]
 80068a0:	425b      	negs	r3, r3
 80068a2:	105b      	asrs	r3, r3, #1
 80068a4:	b25a      	sxtb	r2, r3
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	609a      	str	r2, [r3, #8]
            break;
 80068b0:	e020      	b.n	80068f4 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 80068b2:	7b3b      	ldrb	r3, [r7, #12]
 80068b4:	425b      	negs	r3, r3
 80068b6:	105b      	asrs	r3, r3, #1
 80068b8:	b25a      	sxtb	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 80068be:	7b7b      	ldrb	r3, [r7, #13]
 80068c0:	b25b      	sxtb	r3, r3
 80068c2:	3302      	adds	r3, #2
 80068c4:	109b      	asrs	r3, r3, #2
 80068c6:	b25a      	sxtb	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 80068cc:	7bbb      	ldrb	r3, [r7, #14]
 80068ce:	425b      	negs	r3, r3
 80068d0:	105b      	asrs	r3, r3, #1
 80068d2:	b25a      	sxtb	r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 80068d8:	4b08      	ldr	r3, [pc, #32]	; (80068fc <SUBGRF_GetPacketStatus+0xa0>)
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	611a      	str	r2, [r3, #16]
            break;
 80068e0:	e008      	b.n	80068f4 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 80068e2:	2214      	movs	r2, #20
 80068e4:	2100      	movs	r1, #0
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 fc51 	bl	800718e <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	220f      	movs	r2, #15
 80068f0:	701a      	strb	r2, [r3, #0]
            break;
 80068f2:	bf00      	nop
    }
}
 80068f4:	bf00      	nop
 80068f6:	3710      	adds	r7, #16
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	20000264 	.word	0x20000264

08006900 <SUBGRF_GetDeviceErrors>:

RadioError_t SUBGRF_GetDeviceErrors( void )
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
    uint8_t err[] = { 0, 0 };
 8006906:	2300      	movs	r3, #0
 8006908:	80bb      	strh	r3, [r7, #4]
    RadioError_t error = { .Value = 0 };
 800690a:	2300      	movs	r3, #0
 800690c:	803b      	strh	r3, [r7, #0]

    SUBGRF_ReadCommand( RADIO_GET_ERROR, ( uint8_t * )err, 2 );
 800690e:	1d3b      	adds	r3, r7, #4
 8006910:	2202      	movs	r2, #2
 8006912:	4619      	mov	r1, r3
 8006914:	2017      	movs	r0, #23
 8006916:	f000 f91d 	bl	8006b54 <SUBGRF_ReadCommand>
    error.Fields.PaRamp     = ( err[0] & ( 1 << 0 ) ) >> 0;
 800691a:	793b      	ldrb	r3, [r7, #4]
 800691c:	f003 0301 	and.w	r3, r3, #1
 8006920:	b2da      	uxtb	r2, r3
 8006922:	787b      	ldrb	r3, [r7, #1]
 8006924:	f362 0300 	bfi	r3, r2, #0, #1
 8006928:	707b      	strb	r3, [r7, #1]
    error.Fields.PllLock    = ( err[1] & ( 1 << 6 ) ) >> 6;
 800692a:	797b      	ldrb	r3, [r7, #5]
 800692c:	119b      	asrs	r3, r3, #6
 800692e:	f003 0301 	and.w	r3, r3, #1
 8006932:	b2da      	uxtb	r2, r3
 8006934:	783b      	ldrb	r3, [r7, #0]
 8006936:	f362 1386 	bfi	r3, r2, #6, #1
 800693a:	703b      	strb	r3, [r7, #0]
    error.Fields.XoscStart  = ( err[1] & ( 1 << 5 ) ) >> 5;
 800693c:	797b      	ldrb	r3, [r7, #5]
 800693e:	115b      	asrs	r3, r3, #5
 8006940:	f003 0301 	and.w	r3, r3, #1
 8006944:	b2da      	uxtb	r2, r3
 8006946:	783b      	ldrb	r3, [r7, #0]
 8006948:	f362 1345 	bfi	r3, r2, #5, #1
 800694c:	703b      	strb	r3, [r7, #0]
    error.Fields.ImgCalib   = ( err[1] & ( 1 << 4 ) ) >> 4;
 800694e:	797b      	ldrb	r3, [r7, #5]
 8006950:	111b      	asrs	r3, r3, #4
 8006952:	f003 0301 	and.w	r3, r3, #1
 8006956:	b2da      	uxtb	r2, r3
 8006958:	783b      	ldrb	r3, [r7, #0]
 800695a:	f362 1304 	bfi	r3, r2, #4, #1
 800695e:	703b      	strb	r3, [r7, #0]
    error.Fields.AdcCalib   = ( err[1] & ( 1 << 3 ) ) >> 3;
 8006960:	797b      	ldrb	r3, [r7, #5]
 8006962:	10db      	asrs	r3, r3, #3
 8006964:	f003 0301 	and.w	r3, r3, #1
 8006968:	b2da      	uxtb	r2, r3
 800696a:	783b      	ldrb	r3, [r7, #0]
 800696c:	f362 03c3 	bfi	r3, r2, #3, #1
 8006970:	703b      	strb	r3, [r7, #0]
    error.Fields.PllCalib   = ( err[1] & ( 1 << 2 ) ) >> 2;
 8006972:	797b      	ldrb	r3, [r7, #5]
 8006974:	109b      	asrs	r3, r3, #2
 8006976:	f003 0301 	and.w	r3, r3, #1
 800697a:	b2da      	uxtb	r2, r3
 800697c:	783b      	ldrb	r3, [r7, #0]
 800697e:	f362 0382 	bfi	r3, r2, #2, #1
 8006982:	703b      	strb	r3, [r7, #0]
    error.Fields.Rc13mCalib = ( err[1] & ( 1 << 1 ) ) >> 1;
 8006984:	797b      	ldrb	r3, [r7, #5]
 8006986:	105b      	asrs	r3, r3, #1
 8006988:	f003 0301 	and.w	r3, r3, #1
 800698c:	b2da      	uxtb	r2, r3
 800698e:	783b      	ldrb	r3, [r7, #0]
 8006990:	f362 0341 	bfi	r3, r2, #1, #1
 8006994:	703b      	strb	r3, [r7, #0]
    error.Fields.Rc64kCalib = ( err[1] & ( 1 << 0 ) ) >> 0;
 8006996:	797b      	ldrb	r3, [r7, #5]
 8006998:	f003 0301 	and.w	r3, r3, #1
 800699c:	b2da      	uxtb	r2, r3
 800699e:	783b      	ldrb	r3, [r7, #0]
 80069a0:	f362 0300 	bfi	r3, r2, #0, #1
 80069a4:	703b      	strb	r3, [r7, #0]
    return error;
 80069a6:	883b      	ldrh	r3, [r7, #0]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3708      	adds	r7, #8
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	4603      	mov	r3, r0
 80069b8:	460a      	mov	r2, r1
 80069ba:	80fb      	strh	r3, [r7, #6]
 80069bc:	4613      	mov	r3, r2
 80069be:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 80069c0:	1d7a      	adds	r2, r7, #5
 80069c2:	88f9      	ldrh	r1, [r7, #6]
 80069c4:	2301      	movs	r3, #1
 80069c6:	4803      	ldr	r0, [pc, #12]	; (80069d4 <SUBGRF_WriteRegister+0x24>)
 80069c8:	f7fb ffae 	bl	8002928 <HAL_SUBGHZ_WriteRegisters>
}
 80069cc:	bf00      	nop
 80069ce:	3708      	adds	r7, #8
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	20000028 	.word	0x20000028

080069d8 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	4603      	mov	r3, r0
 80069e0:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 80069e2:	f107 020f 	add.w	r2, r7, #15
 80069e6:	88f9      	ldrh	r1, [r7, #6]
 80069e8:	2301      	movs	r3, #1
 80069ea:	4804      	ldr	r0, [pc, #16]	; (80069fc <SUBGRF_ReadRegister+0x24>)
 80069ec:	f7fb fffb 	bl	80029e6 <HAL_SUBGHZ_ReadRegisters>
    return data;
 80069f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3710      	adds	r7, #16
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	20000028 	.word	0x20000028

08006a00 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b086      	sub	sp, #24
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	4603      	mov	r3, r0
 8006a08:	6039      	str	r1, [r7, #0]
 8006a0a:	80fb      	strh	r3, [r7, #6]
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a10:	f3ef 8310 	mrs	r3, PRIMASK
 8006a14:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a16:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8006a18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006a1a:	b672      	cpsid	i
}
 8006a1c:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8006a1e:	88bb      	ldrh	r3, [r7, #4]
 8006a20:	88f9      	ldrh	r1, [r7, #6]
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	4806      	ldr	r0, [pc, #24]	; (8006a40 <SUBGRF_WriteRegisters+0x40>)
 8006a26:	f7fb ff7f 	bl	8002928 <HAL_SUBGHZ_WriteRegisters>
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	f383 8810 	msr	PRIMASK, r3
}
 8006a34:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8006a36:	bf00      	nop
 8006a38:	3718      	adds	r7, #24
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	20000028 	.word	0x20000028

08006a44 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b086      	sub	sp, #24
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	6039      	str	r1, [r7, #0]
 8006a4e:	80fb      	strh	r3, [r7, #6]
 8006a50:	4613      	mov	r3, r2
 8006a52:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a54:	f3ef 8310 	mrs	r3, PRIMASK
 8006a58:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8006a5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006a5e:	b672      	cpsid	i
}
 8006a60:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8006a62:	88bb      	ldrh	r3, [r7, #4]
 8006a64:	88f9      	ldrh	r1, [r7, #6]
 8006a66:	683a      	ldr	r2, [r7, #0]
 8006a68:	4806      	ldr	r0, [pc, #24]	; (8006a84 <SUBGRF_ReadRegisters+0x40>)
 8006a6a:	f7fb ffbc 	bl	80029e6 <HAL_SUBGHZ_ReadRegisters>
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	f383 8810 	msr	PRIMASK, r3
}
 8006a78:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8006a7a:	bf00      	nop
 8006a7c:	3718      	adds	r7, #24
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	20000028 	.word	0x20000028

08006a88 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b086      	sub	sp, #24
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	4603      	mov	r3, r0
 8006a90:	6039      	str	r1, [r7, #0]
 8006a92:	71fb      	strb	r3, [r7, #7]
 8006a94:	4613      	mov	r3, r2
 8006a96:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a98:	f3ef 8310 	mrs	r3, PRIMASK
 8006a9c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8006aa0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006aa2:	b672      	cpsid	i
}
 8006aa4:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8006aa6:	79bb      	ldrb	r3, [r7, #6]
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	79f9      	ldrb	r1, [r7, #7]
 8006aac:	683a      	ldr	r2, [r7, #0]
 8006aae:	4806      	ldr	r0, [pc, #24]	; (8006ac8 <SUBGRF_WriteBuffer+0x40>)
 8006ab0:	f7fc f8ad 	bl	8002c0e <HAL_SUBGHZ_WriteBuffer>
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	f383 8810 	msr	PRIMASK, r3
}
 8006abe:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8006ac0:	bf00      	nop
 8006ac2:	3718      	adds	r7, #24
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	20000028 	.word	0x20000028

08006acc <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b086      	sub	sp, #24
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	6039      	str	r1, [r7, #0]
 8006ad6:	71fb      	strb	r3, [r7, #7]
 8006ad8:	4613      	mov	r3, r2
 8006ada:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006adc:	f3ef 8310 	mrs	r3, PRIMASK
 8006ae0:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8006ae4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006ae6:	b672      	cpsid	i
}
 8006ae8:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8006aea:	79bb      	ldrb	r3, [r7, #6]
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	79f9      	ldrb	r1, [r7, #7]
 8006af0:	683a      	ldr	r2, [r7, #0]
 8006af2:	4806      	ldr	r0, [pc, #24]	; (8006b0c <SUBGRF_ReadBuffer+0x40>)
 8006af4:	f7fc f8de 	bl	8002cb4 <HAL_SUBGHZ_ReadBuffer>
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	f383 8810 	msr	PRIMASK, r3
}
 8006b02:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8006b04:	bf00      	nop
 8006b06:	3718      	adds	r7, #24
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	20000028 	.word	0x20000028

08006b10 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b086      	sub	sp, #24
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	4603      	mov	r3, r0
 8006b18:	6039      	str	r1, [r7, #0]
 8006b1a:	71fb      	strb	r3, [r7, #7]
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b20:	f3ef 8310 	mrs	r3, PRIMASK
 8006b24:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b26:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8006b28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006b2a:	b672      	cpsid	i
}
 8006b2c:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8006b2e:	88bb      	ldrh	r3, [r7, #4]
 8006b30:	79f9      	ldrb	r1, [r7, #7]
 8006b32:	683a      	ldr	r2, [r7, #0]
 8006b34:	4806      	ldr	r0, [pc, #24]	; (8006b50 <SUBGRF_WriteCommand+0x40>)
 8006b36:	f7fb ffb7 	bl	8002aa8 <HAL_SUBGHZ_ExecSetCmd>
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	f383 8810 	msr	PRIMASK, r3
}
 8006b44:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8006b46:	bf00      	nop
 8006b48:	3718      	adds	r7, #24
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	20000028 	.word	0x20000028

08006b54 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b086      	sub	sp, #24
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	6039      	str	r1, [r7, #0]
 8006b5e:	71fb      	strb	r3, [r7, #7]
 8006b60:	4613      	mov	r3, r2
 8006b62:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b64:	f3ef 8310 	mrs	r3, PRIMASK
 8006b68:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8006b6c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006b6e:	b672      	cpsid	i
}
 8006b70:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8006b72:	88bb      	ldrh	r3, [r7, #4]
 8006b74:	79f9      	ldrb	r1, [r7, #7]
 8006b76:	683a      	ldr	r2, [r7, #0]
 8006b78:	4806      	ldr	r0, [pc, #24]	; (8006b94 <SUBGRF_ReadCommand+0x40>)
 8006b7a:	f7fb fff4 	bl	8002b66 <HAL_SUBGHZ_ExecGetCmd>
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	f383 8810 	msr	PRIMASK, r3
}
 8006b88:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8006b8a:	bf00      	nop
 8006b8c:	3718      	adds	r7, #24
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	20000028 	.word	0x20000028

08006b98 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	460a      	mov	r2, r1
 8006ba2:	71fb      	strb	r3, [r7, #7]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8006bac:	79bb      	ldrb	r3, [r7, #6]
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d10d      	bne.n	8006bce <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8006bb2:	79fb      	ldrb	r3, [r7, #7]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d104      	bne.n	8006bc2 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8006bb8:	2302      	movs	r3, #2
 8006bba:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8006bbc:	2004      	movs	r0, #4
 8006bbe:	f000 f8df 	bl	8006d80 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8006bc2:	79fb      	ldrb	r3, [r7, #7]
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	d107      	bne.n	8006bd8 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	73fb      	strb	r3, [r7, #15]
 8006bcc:	e004      	b.n	8006bd8 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8006bce:	79bb      	ldrb	r3, [r7, #6]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d101      	bne.n	8006bd8 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8006bd8:	7bfb      	ldrb	r3, [r7, #15]
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f000 fa75 	bl	80070ca <RBI_ConfigRFSwitch>
}
 8006be0:	bf00      	nop
 8006be2:	3710      	adds	r7, #16
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	4603      	mov	r3, r0
 8006bf0:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8006bf6:	f000 fa75 	bl	80070e4 <RBI_GetTxConfig>
 8006bfa:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d016      	beq.n	8006c30 <SUBGRF_SetRfTxPower+0x48>
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	dc16      	bgt.n	8006c36 <SUBGRF_SetRfTxPower+0x4e>
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d003      	beq.n	8006c16 <SUBGRF_SetRfTxPower+0x2e>
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d00a      	beq.n	8006c2a <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8006c14:	e00f      	b.n	8006c36 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8006c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c1a:	2b0f      	cmp	r3, #15
 8006c1c:	dd02      	ble.n	8006c24 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8006c1e:	2302      	movs	r3, #2
 8006c20:	73fb      	strb	r3, [r7, #15]
            break;
 8006c22:	e009      	b.n	8006c38 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8006c24:	2301      	movs	r3, #1
 8006c26:	73fb      	strb	r3, [r7, #15]
            break;
 8006c28:	e006      	b.n	8006c38 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	73fb      	strb	r3, [r7, #15]
            break;
 8006c2e:	e003      	b.n	8006c38 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8006c30:	2302      	movs	r3, #2
 8006c32:	73fb      	strb	r3, [r7, #15]
            break;
 8006c34:	e000      	b.n	8006c38 <SUBGRF_SetRfTxPower+0x50>
            break;
 8006c36:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8006c38:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8006c3c:	7bfb      	ldrb	r3, [r7, #15]
 8006c3e:	2202      	movs	r2, #2
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7ff fb51 	bl	80062e8 <SUBGRF_SetTxParams>

    return paSelect;
 8006c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3710      	adds	r7, #16
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 8006c50:	b480      	push	{r7}
 8006c52:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 8006c54:	2301      	movs	r3, #1
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bc80      	pop	{r7}
 8006c5c:	4770      	bx	lr
	...

08006c60 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8006c68:	4b03      	ldr	r3, [pc, #12]	; (8006c78 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2001      	movs	r0, #1
 8006c6e:	4798      	blx	r3
}
 8006c70:	bf00      	nop
 8006c72:	3708      	adds	r7, #8
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	2000026c 	.word	0x2000026c

08006c7c <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8006c84:	4b03      	ldr	r3, [pc, #12]	; (8006c94 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2002      	movs	r0, #2
 8006c8a:	4798      	blx	r3
}
 8006c8c:	bf00      	nop
 8006c8e:	3708      	adds	r7, #8
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	2000026c 	.word	0x2000026c

08006c98 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8006ca0:	4b03      	ldr	r3, [pc, #12]	; (8006cb0 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2040      	movs	r0, #64	; 0x40
 8006ca6:	4798      	blx	r3
}
 8006ca8:	bf00      	nop
 8006caa:	3708      	adds	r7, #8
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	2000026c 	.word	0x2000026c

08006cb4 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8006cc0:	78fb      	ldrb	r3, [r7, #3]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d002      	beq.n	8006ccc <HAL_SUBGHZ_CADStatusCallback+0x18>
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d005      	beq.n	8006cd6 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8006cca:	e00a      	b.n	8006ce2 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8006ccc:	4b07      	ldr	r3, [pc, #28]	; (8006cec <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2080      	movs	r0, #128	; 0x80
 8006cd2:	4798      	blx	r3
            break;
 8006cd4:	e005      	b.n	8006ce2 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8006cd6:	4b05      	ldr	r3, [pc, #20]	; (8006cec <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006cde:	4798      	blx	r3
            break;
 8006ce0:	bf00      	nop
    }
}
 8006ce2:	bf00      	nop
 8006ce4:	3708      	adds	r7, #8
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	2000026c 	.word	0x2000026c

08006cf0 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8006cf8:	4b04      	ldr	r3, [pc, #16]	; (8006d0c <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006d00:	4798      	blx	r3
}
 8006d02:	bf00      	nop
 8006d04:	3708      	adds	r7, #8
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	2000026c 	.word	0x2000026c

08006d10 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8006d18:	4b03      	ldr	r3, [pc, #12]	; (8006d28 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2020      	movs	r0, #32
 8006d1e:	4798      	blx	r3
}
 8006d20:	bf00      	nop
 8006d22:	3708      	adds	r7, #8
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	2000026c 	.word	0x2000026c

08006d2c <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8006d34:	4b03      	ldr	r3, [pc, #12]	; (8006d44 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2004      	movs	r0, #4
 8006d3a:	4798      	blx	r3
}
 8006d3c:	bf00      	nop
 8006d3e:	3708      	adds	r7, #8
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	2000026c 	.word	0x2000026c

08006d48 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8006d50:	4b03      	ldr	r3, [pc, #12]	; (8006d60 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2008      	movs	r0, #8
 8006d56:	4798      	blx	r3
}
 8006d58:	bf00      	nop
 8006d5a:	3708      	adds	r7, #8
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	2000026c 	.word	0x2000026c

08006d64 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8006d6c:	4b03      	ldr	r3, [pc, #12]	; (8006d7c <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2010      	movs	r0, #16
 8006d72:	4798      	blx	r3
}
 8006d74:	bf00      	nop
 8006d76:	3708      	adds	r7, #8
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	2000026c 	.word	0x2000026c

08006d80 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	4603      	mov	r3, r0
 8006d88:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8006d8a:	f000 f9c1 	bl	8007110 <RBI_IsDCDC>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d112      	bne.n	8006dba <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8006d94:	f640 1023 	movw	r0, #2339	; 0x923
 8006d98:	f7ff fe1e 	bl	80069d8 <SUBGRF_ReadRegister>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8006da0:	7bfb      	ldrb	r3, [r7, #15]
 8006da2:	f023 0306 	bic.w	r3, r3, #6
 8006da6:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8006da8:	7bfa      	ldrb	r2, [r7, #15]
 8006daa:	79fb      	ldrb	r3, [r7, #7]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	4619      	mov	r1, r3
 8006db2:	f640 1023 	movw	r0, #2339	; 0x923
 8006db6:	f7ff fdfb 	bl	80069b0 <SUBGRF_WriteRegister>
  }
}
 8006dba:	bf00      	nop
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
	...

08006dc4 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d101      	bne.n	8006dd6 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 8006dd2:	231f      	movs	r3, #31
 8006dd4:	e016      	b.n	8006e04 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	73fb      	strb	r3, [r7, #15]
 8006dda:	e00f      	b.n	8006dfc <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8006ddc:	7bfb      	ldrb	r3, [r7, #15]
 8006dde:	4a0c      	ldr	r2, [pc, #48]	; (8006e10 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8006de0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d205      	bcs.n	8006df6 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 8006dea:	7bfb      	ldrb	r3, [r7, #15]
 8006dec:	4a08      	ldr	r2, [pc, #32]	; (8006e10 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8006dee:	00db      	lsls	r3, r3, #3
 8006df0:	4413      	add	r3, r2
 8006df2:	791b      	ldrb	r3, [r3, #4]
 8006df4:	e006      	b.n	8006e04 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8006df6:	7bfb      	ldrb	r3, [r7, #15]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	73fb      	strb	r3, [r7, #15]
 8006dfc:	7bfb      	ldrb	r3, [r7, #15]
 8006dfe:	2b15      	cmp	r3, #21
 8006e00:	d9ec      	bls.n	8006ddc <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 8006e02:	e7fe      	b.n	8006e02 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3714      	adds	r7, #20
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bc80      	pop	{r7}
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	080077f0 	.word	0x080077f0

08006e14 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b08a      	sub	sp, #40	; 0x28
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 8006e1e:	4b35      	ldr	r3, [pc, #212]	; (8006ef4 <SUBGRF_GetCFO+0xe0>)
 8006e20:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8006e22:	f640 0007 	movw	r0, #2055	; 0x807
 8006e26:	f7ff fdd7 	bl	80069d8 <SUBGRF_ReadRegister>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8006e2e:	7ffb      	ldrb	r3, [r7, #31]
 8006e30:	08db      	lsrs	r3, r3, #3
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	f003 0303 	and.w	r3, r3, #3
 8006e38:	3328      	adds	r3, #40	; 0x28
 8006e3a:	443b      	add	r3, r7
 8006e3c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8006e40:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 8006e42:	7ffb      	ldrb	r3, [r7, #31]
 8006e44:	f003 0307 	and.w	r3, r3, #7
 8006e48:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 8006e4a:	7fba      	ldrb	r2, [r7, #30]
 8006e4c:	7f7b      	ldrb	r3, [r7, #29]
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	fa02 f303 	lsl.w	r3, r2, r3
 8006e54:	461a      	mov	r2, r3
 8006e56:	4b28      	ldr	r3, [pc, #160]	; (8006ef8 <SUBGRF_GetCFO+0xe4>)
 8006e58:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e5c:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 8006e5e:	69ba      	ldr	r2, [r7, #24]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e66:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8006e6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	fb02 f303 	mul.w	r3, r2, r3
 8006e78:	2b07      	cmp	r3, #7
 8006e7a:	d802      	bhi.n	8006e82 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 8006e7c:	2302      	movs	r3, #2
 8006e7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 8006e82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e86:	697a      	ldr	r2, [r7, #20]
 8006e88:	fb02 f303 	mul.w	r3, r2, r3
 8006e8c:	2b03      	cmp	r3, #3
 8006e8e:	d802      	bhi.n	8006e96 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 8006e90:	2304      	movs	r3, #4
 8006e92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8006e96:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	fb02 f303 	mul.w	r3, r2, r3
 8006ea0:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8006ea2:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8006ea6:	f7ff fd97 	bl	80069d8 <SUBGRF_ReadRegister>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	021b      	lsls	r3, r3, #8
 8006eae:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006eb2:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8006eb4:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8006eb8:	f7ff fd8e 	bl	80069d8 <SUBGRF_ReadRegister>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	6a3b      	ldr	r3, [r7, #32]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8006ec6:	6a3b      	ldr	r3, [r7, #32]
 8006ec8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d005      	beq.n	8006edc <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 8006ed0:	6a3b      	ldr	r3, [r7, #32]
 8006ed2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8006ed6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8006eda:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	095b      	lsrs	r3, r3, #5
 8006ee0:	6a3a      	ldr	r2, [r7, #32]
 8006ee2:	fb02 f303 	mul.w	r3, r2, r3
 8006ee6:	11da      	asrs	r2, r3, #7
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	601a      	str	r2, [r3, #0]
}
 8006eec:	bf00      	nop
 8006eee:	3728      	adds	r7, #40	; 0x28
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	0c0a0804 	.word	0x0c0a0804
 8006ef8:	01e84800 	.word	0x01e84800

08006efc <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 8006efc:	b480      	push	{r7}
 8006efe:	b087      	sub	sp, #28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	4603      	mov	r3, r0
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]
 8006f08:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 8006f0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f12:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8006f14:	697b      	ldr	r3, [r7, #20]
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	371c      	adds	r7, #28
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bc80      	pop	{r7}
 8006f1e:	4770      	bx	lr

08006f20 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 8006f20:	b480      	push	{r7}
 8006f22:	b087      	sub	sp, #28
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	4603      	mov	r3, r0
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]
 8006f2c:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 8006f32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f36:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8006f38:	697b      	ldr	r3, [r7, #20]
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	371c      	adds	r7, #28
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bc80      	pop	{r7}
 8006f42:	4770      	bx	lr

08006f44 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 8006f50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3714      	adds	r7, #20
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bc80      	pop	{r7}
 8006f5c:	4770      	bx	lr

08006f5e <RFW_DeInit>:

void RFW_DeInit( void)
{
 8006f5e:	b480      	push	{r7}
 8006f60:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 8006f62:	bf00      	nop
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bc80      	pop	{r7}
 8006f68:	4770      	bx	lr

08006f6a <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 8006f6a:	b480      	push	{r7}
 8006f6c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 8006f6e:	2300      	movs	r3, #0
#endif
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bc80      	pop	{r7}
 8006f76:	4770      	bx	lr

08006f78 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 8006f7c:	2300      	movs	r3, #0
#endif
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bc80      	pop	{r7}
 8006f84:	4770      	bx	lr

08006f86 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 8006f86:	b480      	push	{r7}
 8006f88:	b083      	sub	sp, #12
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 8006f90:	bf00      	nop
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bc80      	pop	{r7}
 8006f98:	4770      	bx	lr

08006f9a <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 8006f9a:	b480      	push	{r7}
 8006f9c:	b087      	sub	sp, #28
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	60f8      	str	r0, [r7, #12]
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	607a      	str	r2, [r7, #4]
 8006fa6:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 8006fa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006fac:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;

    status= 0;
  }
#endif
  return status;
 8006fae:	697b      	ldr	r3, [r7, #20]
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	371c      	adds	r7, #28
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bc80      	pop	{r7}
 8006fb8:	4770      	bx	lr

08006fba <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 8006fba:	b480      	push	{r7}
 8006fbc:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;

  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 8006fbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bc80      	pop	{r7}
 8006fc8:	4770      	bx	lr

08006fca <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 8006fca:	b480      	push	{r7}
 8006fcc:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 8006fce:	bf00      	nop
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bc80      	pop	{r7}
 8006fd4:	4770      	bx	lr

08006fd6 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 8006fd6:	b480      	push	{r7}
 8006fd8:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 8006fda:	bf00      	nop
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bc80      	pop	{r7}
 8006fe0:	4770      	bx	lr

08006fe2 <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	b083      	sub	sp, #12
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	4603      	mov	r3, r0
 8006fea:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 8006fec:	bf00      	nop
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bc80      	pop	{r7}
 8006ff4:	4770      	bx	lr

08006ff6 <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 8006ffa:	f7f9 fbd4 	bl	80007a6 <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 8006ffe:	f000 f809 	bl	8007014 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 8007002:	bf00      	nop
 8007004:	bd80      	pop	{r7, pc}

08007006 <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 8007006:	b480      	push	{r7}
 8007008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
}
 800700a:	bf00      	nop
 800700c:	46bd      	mov	sp, r7
 800700e:	bc80      	pop	{r7}
 8007010:	4770      	bx	lr
	...

08007014 <SubghzApp_Init>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SubghzApp_Init_1 */

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 8007018:	4b0a      	ldr	r3, [pc, #40]	; (8007044 <SubghzApp_Init+0x30>)
 800701a:	4a0b      	ldr	r2, [pc, #44]	; (8007048 <SubghzApp_Init+0x34>)
 800701c:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800701e:	4b09      	ldr	r3, [pc, #36]	; (8007044 <SubghzApp_Init+0x30>)
 8007020:	4a0a      	ldr	r2, [pc, #40]	; (800704c <SubghzApp_Init+0x38>)
 8007022:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 8007024:	4b07      	ldr	r3, [pc, #28]	; (8007044 <SubghzApp_Init+0x30>)
 8007026:	4a0a      	ldr	r2, [pc, #40]	; (8007050 <SubghzApp_Init+0x3c>)
 8007028:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800702a:	4b06      	ldr	r3, [pc, #24]	; (8007044 <SubghzApp_Init+0x30>)
 800702c:	4a09      	ldr	r2, [pc, #36]	; (8007054 <SubghzApp_Init+0x40>)
 800702e:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 8007030:	4b04      	ldr	r3, [pc, #16]	; (8007044 <SubghzApp_Init+0x30>)
 8007032:	4a09      	ldr	r2, [pc, #36]	; (8007058 <SubghzApp_Init+0x44>)
 8007034:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 8007036:	4b09      	ldr	r3, [pc, #36]	; (800705c <SubghzApp_Init+0x48>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4802      	ldr	r0, [pc, #8]	; (8007044 <SubghzApp_Init+0x30>)
 800703c:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */

  /* USER CODE END SubghzApp_Init_2 */
}
 800703e:	bf00      	nop
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	20000270 	.word	0x20000270
 8007048:	08007061 	.word	0x08007061
 800704c:	0800706d 	.word	0x0800706d
 8007050:	08007091 	.word	0x08007091
 8007054:	0800709d 	.word	0x0800709d
 8007058:	080070a9 	.word	0x080070a9
 800705c:	08007768 	.word	0x08007768

08007060 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 8007060:	b480      	push	{r7}
 8007062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  /* USER CODE END OnTxDone */
}
 8007064:	bf00      	nop
 8007066:	46bd      	mov	sp, r7
 8007068:	bc80      	pop	{r7}
 800706a:	4770      	bx	lr

0800706c <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800706c:	b480      	push	{r7}
 800706e:	b085      	sub	sp, #20
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	4608      	mov	r0, r1
 8007076:	4611      	mov	r1, r2
 8007078:	461a      	mov	r2, r3
 800707a:	4603      	mov	r3, r0
 800707c:	817b      	strh	r3, [r7, #10]
 800707e:	460b      	mov	r3, r1
 8007080:	813b      	strh	r3, [r7, #8]
 8007082:	4613      	mov	r3, r2
 8007084:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  /* USER CODE END OnRxDone */
}
 8007086:	bf00      	nop
 8007088:	3714      	adds	r7, #20
 800708a:	46bd      	mov	sp, r7
 800708c:	bc80      	pop	{r7}
 800708e:	4770      	bx	lr

08007090 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 8007090:	b480      	push	{r7}
 8007092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  /* USER CODE END OnTxTimeout */
}
 8007094:	bf00      	nop
 8007096:	46bd      	mov	sp, r7
 8007098:	bc80      	pop	{r7}
 800709a:	4770      	bx	lr

0800709c <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800709c:	b480      	push	{r7}
 800709e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  /* USER CODE END OnRxTimeout */
}
 80070a0:	bf00      	nop
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bc80      	pop	{r7}
 80070a6:	4770      	bx	lr

080070a8 <OnRxError>:

static void OnRxError(void)
{
 80070a8:	b480      	push	{r7}
 80070aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  /* USER CODE END OnRxError */
}
 80070ac:	bf00      	nop
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bc80      	pop	{r7}
 80070b2:	4770      	bx	lr

080070b4 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 80070ba:	2300      	movs	r3, #0
 80070bc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
 80070be:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bc80      	pop	{r7}
 80070c8:	4770      	bx	lr

080070ca <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 80070ca:	b480      	push	{r7}
 80070cc:	b085      	sub	sp, #20
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	4603      	mov	r3, r0
 80070d2:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 80070d4:	2300      	movs	r3, #0
 80070d6:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 80070d8:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3714      	adds	r7, #20
 80070de:	46bd      	mov	sp, r7
 80070e0:	bc80      	pop	{r7}
 80070e2:	4770      	bx	lr

080070e4 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 80070ea:	2300      	movs	r3, #0
 80070ec:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
 80070ee:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER */
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bc80      	pop	{r7}
 80070f8:	4770      	bx	lr

080070fa <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 80070fa:	b480      	push	{r7}
 80070fc:	b083      	sub	sp, #12
 80070fe:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 8007100:	2301      	movs	r3, #1
 8007102:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
 8007104:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 8007106:	4618      	mov	r0, r3
 8007108:	370c      	adds	r7, #12
 800710a:	46bd      	mov	sp, r7
 800710c:	bc80      	pop	{r7}
 800710e:	4770      	bx	lr

08007110 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 8007116:	2301      	movs	r3, #1
 8007118:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
 800711a:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800711c:	4618      	mov	r0, r3
 800711e:	370c      	adds	r7, #12
 8007120:	46bd      	mov	sp, r7
 8007122:	bc80      	pop	{r7}
 8007124:	4770      	bx	lr

08007126 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8007126:	b480      	push	{r7}
 8007128:	b085      	sub	sp, #20
 800712a:	af00      	add	r7, sp, #0
 800712c:	4603      	mov	r3, r0
 800712e:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 8007130:	2300      	movs	r3, #0
 8007132:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
#warning user to provide its board code or to call his board driver functions
  if (Config == RBI_RFO_LP_MAXPOWER)
 8007134:	79fb      	ldrb	r3, [r7, #7]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d102      	bne.n	8007140 <RBI_GetRFOMaxPowerConfig+0x1a>
  {
    ret = 15; /*dBm*/
 800713a:	230f      	movs	r3, #15
 800713c:	60fb      	str	r3, [r7, #12]
 800713e:	e001      	b.n	8007144 <RBI_GetRFOMaxPowerConfig+0x1e>
  }
  else
  {
    ret = 22; /*dBm*/
 8007140:	2316      	movs	r3, #22
 8007142:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 8007144:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 8007146:	4618      	mov	r0, r3
 8007148:	3714      	adds	r7, #20
 800714a:	46bd      	mov	sp, r7
 800714c:	bc80      	pop	{r7}
 800714e:	4770      	bx	lr

08007150 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 8007150:	b480      	push	{r7}
 8007152:	b087      	sub	sp, #28
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	4613      	mov	r3, r2
 800715c:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	613b      	str	r3, [r7, #16]

  while( size-- )
 8007166:	e007      	b.n	8007178 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 8007168:	693a      	ldr	r2, [r7, #16]
 800716a:	1c53      	adds	r3, r2, #1
 800716c:	613b      	str	r3, [r7, #16]
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	1c59      	adds	r1, r3, #1
 8007172:	6179      	str	r1, [r7, #20]
 8007174:	7812      	ldrb	r2, [r2, #0]
 8007176:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8007178:	88fb      	ldrh	r3, [r7, #6]
 800717a:	1e5a      	subs	r2, r3, #1
 800717c:	80fa      	strh	r2, [r7, #6]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1f2      	bne.n	8007168 <UTIL_MEM_cpy_8+0x18>
    }
}
 8007182:	bf00      	nop
 8007184:	bf00      	nop
 8007186:	371c      	adds	r7, #28
 8007188:	46bd      	mov	sp, r7
 800718a:	bc80      	pop	{r7}
 800718c:	4770      	bx	lr

0800718e <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800718e:	b480      	push	{r7}
 8007190:	b085      	sub	sp, #20
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
 8007196:	460b      	mov	r3, r1
 8007198:	70fb      	strb	r3, [r7, #3]
 800719a:	4613      	mov	r3, r2
 800719c:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	60fb      	str	r3, [r7, #12]
  while( size-- )
 80071a2:	e004      	b.n	80071ae <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	1c5a      	adds	r2, r3, #1
 80071a8:	60fa      	str	r2, [r7, #12]
 80071aa:	78fa      	ldrb	r2, [r7, #3]
 80071ac:	701a      	strb	r2, [r3, #0]
  while( size-- )
 80071ae:	883b      	ldrh	r3, [r7, #0]
 80071b0:	1e5a      	subs	r2, r3, #1
 80071b2:	803a      	strh	r2, [r7, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d1f5      	bne.n	80071a4 <UTIL_MEM_set_8+0x16>
  }
}
 80071b8:	bf00      	nop
 80071ba:	bf00      	nop
 80071bc:	3714      	adds	r7, #20
 80071be:	46bd      	mov	sp, r7
 80071c0:	bc80      	pop	{r7}
 80071c2:	4770      	bx	lr

080071c4 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	603b      	str	r3, [r7, #0]
 80071d0:	4613      	mov	r3, r2
 80071d2:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d023      	beq.n	8007222 <UTIL_TIMER_Create+0x5e>
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d020      	beq.n	8007222 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 80071e6:	4b11      	ldr	r3, [pc, #68]	; (800722c <UTIL_TIMER_Create+0x68>)
 80071e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ea:	68b8      	ldr	r0, [r7, #8]
 80071ec:	4798      	blx	r3
 80071ee:	4602      	mov	r2, r0
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2200      	movs	r2, #0
 8007204:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	683a      	ldr	r2, [r7, #0]
 800720a:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	69ba      	ldr	r2, [r7, #24]
 8007210:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	79fa      	ldrb	r2, [r7, #7]
 8007216:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2200      	movs	r2, #0
 800721c:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800721e:	2300      	movs	r3, #0
 8007220:	e000      	b.n	8007224 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 8007222:	2301      	movs	r3, #1
  }
}
 8007224:	4618      	mov	r0, r3
 8007226:	3710      	adds	r7, #16
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	08007714 	.word	0x08007714

08007230 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b08a      	sub	sp, #40	; 0x28
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8007238:	2300      	movs	r3, #0
 800723a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d056      	beq.n	80072f2 <UTIL_TIMER_Start+0xc2>
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f929 	bl	800749c <TimerExists>
 800724a:	4603      	mov	r3, r0
 800724c:	f083 0301 	eor.w	r3, r3, #1
 8007250:	b2db      	uxtb	r3, r3
 8007252:	2b00      	cmp	r3, #0
 8007254:	d04d      	beq.n	80072f2 <UTIL_TIMER_Start+0xc2>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	7a5b      	ldrb	r3, [r3, #9]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d149      	bne.n	80072f2 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800725e:	f3ef 8310 	mrs	r3, PRIMASK
 8007262:	613b      	str	r3, [r7, #16]
  return(result);
 8007264:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 8007266:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8007268:	b672      	cpsid	i
}
 800726a:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8007272:	4b24      	ldr	r3, [pc, #144]	; (8007304 <UTIL_TIMER_Start+0xd4>)
 8007274:	6a1b      	ldr	r3, [r3, #32]
 8007276:	4798      	blx	r3
 8007278:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800727a:	6a3a      	ldr	r2, [r7, #32]
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	429a      	cmp	r2, r3
 8007280:	d201      	bcs.n	8007286 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a3a      	ldr	r2, [r7, #32]
 800728a:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2201      	movs	r2, #1
 8007296:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800729e:	4b1a      	ldr	r3, [pc, #104]	; (8007308 <UTIL_TIMER_Start+0xd8>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d106      	bne.n	80072b4 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 80072a6:	4b17      	ldr	r3, [pc, #92]	; (8007304 <UTIL_TIMER_Start+0xd4>)
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 f96b 	bl	8007588 <TimerInsertNewHeadTimer>
 80072b2:	e017      	b.n	80072e4 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 80072b4:	4b13      	ldr	r3, [pc, #76]	; (8007304 <UTIL_TIMER_Start+0xd4>)
 80072b6:	699b      	ldr	r3, [r3, #24]
 80072b8:	4798      	blx	r3
 80072ba:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	441a      	add	r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	4b0e      	ldr	r3, [pc, #56]	; (8007308 <UTIL_TIMER_Start+0xd8>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d203      	bcs.n	80072de <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 f956 	bl	8007588 <TimerInsertNewHeadTimer>
 80072dc:	e002      	b.n	80072e4 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f922 	bl	8007528 <TimerInsertTimer>
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f383 8810 	msr	PRIMASK, r3
}
 80072ee:	bf00      	nop
  {
 80072f0:	e002      	b.n	80072f8 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 80072f2:	2301      	movs	r3, #1
 80072f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 80072f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3728      	adds	r7, #40	; 0x28
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	08007714 	.word	0x08007714
 8007308:	2000028c 	.word	0x2000028c

0800730c <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b088      	sub	sp, #32
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8007314:	2300      	movs	r3, #0
 8007316:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d05b      	beq.n	80073d6 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800731e:	f3ef 8310 	mrs	r3, PRIMASK
 8007322:	60fb      	str	r3, [r7, #12]
  return(result);
 8007324:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 8007326:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007328:	b672      	cpsid	i
}
 800732a:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800732c:	4b2d      	ldr	r3, [pc, #180]	; (80073e4 <UTIL_TIMER_Stop+0xd8>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8007332:	4b2c      	ldr	r3, [pc, #176]	; (80073e4 <UTIL_TIMER_Stop+0xd8>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800733e:	4b29      	ldr	r3, [pc, #164]	; (80073e4 <UTIL_TIMER_Stop+0xd8>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d041      	beq.n	80073ca <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800734c:	4b25      	ldr	r3, [pc, #148]	; (80073e4 <UTIL_TIMER_Stop+0xd8>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	429a      	cmp	r2, r3
 8007354:	d134      	bne.n	80073c0 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 8007356:	4b23      	ldr	r3, [pc, #140]	; (80073e4 <UTIL_TIMER_Stop+0xd8>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2200      	movs	r2, #0
 800735c:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800735e:	4b21      	ldr	r3, [pc, #132]	; (80073e4 <UTIL_TIMER_Stop+0xd8>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	695b      	ldr	r3, [r3, #20]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00a      	beq.n	800737e <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 8007368:	4b1e      	ldr	r3, [pc, #120]	; (80073e4 <UTIL_TIMER_Stop+0xd8>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	695b      	ldr	r3, [r3, #20]
 800736e:	4a1d      	ldr	r2, [pc, #116]	; (80073e4 <UTIL_TIMER_Stop+0xd8>)
 8007370:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 8007372:	4b1c      	ldr	r3, [pc, #112]	; (80073e4 <UTIL_TIMER_Stop+0xd8>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4618      	mov	r0, r3
 8007378:	f000 f8ac 	bl	80074d4 <TimerSetTimeout>
 800737c:	e023      	b.n	80073c6 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800737e:	4b1a      	ldr	r3, [pc, #104]	; (80073e8 <UTIL_TIMER_Stop+0xdc>)
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	4798      	blx	r3
            TimerListHead = NULL;
 8007384:	4b17      	ldr	r3, [pc, #92]	; (80073e4 <UTIL_TIMER_Stop+0xd8>)
 8007386:	2200      	movs	r2, #0
 8007388:	601a      	str	r2, [r3, #0]
 800738a:	e01c      	b.n	80073c6 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800738c:	697a      	ldr	r2, [r7, #20]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	429a      	cmp	r2, r3
 8007392:	d110      	bne.n	80073b6 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	695b      	ldr	r3, [r3, #20]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d006      	beq.n	80073aa <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	695b      	ldr	r3, [r3, #20]
 80073a0:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	697a      	ldr	r2, [r7, #20]
 80073a6:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 80073a8:	e00d      	b.n	80073c6 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 80073aa:	2300      	movs	r3, #0
 80073ac:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	697a      	ldr	r2, [r7, #20]
 80073b2:	615a      	str	r2, [r3, #20]
            break;
 80073b4:	e007      	b.n	80073c6 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	695b      	ldr	r3, [r3, #20]
 80073be:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1e2      	bne.n	800738c <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 80073c6:	2300      	movs	r3, #0
 80073c8:	77fb      	strb	r3, [r7, #31]
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	f383 8810 	msr	PRIMASK, r3
}
 80073d4:	e001      	b.n	80073da <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 80073d6:	2301      	movs	r3, #1
 80073d8:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 80073da:	7ffb      	ldrb	r3, [r7, #31]
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3720      	adds	r7, #32
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	2000028c 	.word	0x2000028c
 80073e8:	08007714 	.word	0x08007714

080073ec <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 80073f6:	2300      	movs	r3, #0
 80073f8:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d102      	bne.n	8007406 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 8007400:	2301      	movs	r3, #1
 8007402:	73fb      	strb	r3, [r7, #15]
 8007404:	e014      	b.n	8007430 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8007406:	4b0d      	ldr	r3, [pc, #52]	; (800743c <UTIL_TIMER_SetPeriod+0x50>)
 8007408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740a:	6838      	ldr	r0, [r7, #0]
 800740c:	4798      	blx	r3
 800740e:	4602      	mov	r2, r0
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 f841 	bl	800749c <TimerExists>
 800741a:	4603      	mov	r3, r0
 800741c:	2b00      	cmp	r3, #0
 800741e:	d007      	beq.n	8007430 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f7ff ff73 	bl	800730c <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f7ff ff02 	bl	8007230 <UTIL_TIMER_Start>
 800742c:	4603      	mov	r3, r0
 800742e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8007430:	7bfb      	ldrb	r3, [r7, #15]
}
 8007432:	4618      	mov	r0, r3
 8007434:	3710      	adds	r7, #16
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	08007714 	.word	0x08007714

08007440 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8007446:	4b06      	ldr	r3, [pc, #24]	; (8007460 <UTIL_TIMER_GetCurrentTime+0x20>)
 8007448:	69db      	ldr	r3, [r3, #28]
 800744a:	4798      	blx	r3
 800744c:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800744e:	4b04      	ldr	r3, [pc, #16]	; (8007460 <UTIL_TIMER_GetCurrentTime+0x20>)
 8007450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	4798      	blx	r3
 8007456:	4603      	mov	r3, r0
}
 8007458:	4618      	mov	r0, r3
 800745a:	3708      	adds	r7, #8
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	08007714 	.word	0x08007714

08007464 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800746c:	4b0a      	ldr	r3, [pc, #40]	; (8007498 <UTIL_TIMER_GetElapsedTime+0x34>)
 800746e:	69db      	ldr	r3, [r3, #28]
 8007470:	4798      	blx	r3
 8007472:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8007474:	4b08      	ldr	r3, [pc, #32]	; (8007498 <UTIL_TIMER_GetElapsedTime+0x34>)
 8007476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	4798      	blx	r3
 800747c:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800747e:	4b06      	ldr	r3, [pc, #24]	; (8007498 <UTIL_TIMER_GetElapsedTime+0x34>)
 8007480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007482:	68f9      	ldr	r1, [r7, #12]
 8007484:	68ba      	ldr	r2, [r7, #8]
 8007486:	1a8a      	subs	r2, r1, r2
 8007488:	4610      	mov	r0, r2
 800748a:	4798      	blx	r3
 800748c:	4603      	mov	r3, r0
}
 800748e:	4618      	mov	r0, r3
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	08007714 	.word	0x08007714

0800749c <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800749c:	b480      	push	{r7}
 800749e:	b085      	sub	sp, #20
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80074a4:	4b0a      	ldr	r3, [pc, #40]	; (80074d0 <TimerExists+0x34>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 80074aa:	e008      	b.n	80074be <TimerExists+0x22>
  {
    if( cur == TimerObject )
 80074ac:	68fa      	ldr	r2, [r7, #12]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d101      	bne.n	80074b8 <TimerExists+0x1c>
    {
      return true;
 80074b4:	2301      	movs	r3, #1
 80074b6:	e006      	b.n	80074c6 <TimerExists+0x2a>
    }
    cur = cur->Next;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	695b      	ldr	r3, [r3, #20]
 80074bc:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1f3      	bne.n	80074ac <TimerExists+0x10>
  }
  return false;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3714      	adds	r7, #20
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bc80      	pop	{r7}
 80074ce:	4770      	bx	lr
 80074d0:	2000028c 	.word	0x2000028c

080074d4 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 80074d4:	b590      	push	{r4, r7, lr}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 80074dc:	4b11      	ldr	r3, [pc, #68]	; (8007524 <TimerSetTimeout+0x50>)
 80074de:	6a1b      	ldr	r3, [r3, #32]
 80074e0:	4798      	blx	r3
 80074e2:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681c      	ldr	r4, [r3, #0]
 80074ee:	4b0d      	ldr	r3, [pc, #52]	; (8007524 <TimerSetTimeout+0x50>)
 80074f0:	699b      	ldr	r3, [r3, #24]
 80074f2:	4798      	blx	r3
 80074f4:	4602      	mov	r2, r0
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	4413      	add	r3, r2
 80074fa:	429c      	cmp	r4, r3
 80074fc:	d207      	bcs.n	800750e <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 80074fe:	4b09      	ldr	r3, [pc, #36]	; (8007524 <TimerSetTimeout+0x50>)
 8007500:	699b      	ldr	r3, [r3, #24]
 8007502:	4798      	blx	r3
 8007504:	4602      	mov	r2, r0
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	441a      	add	r2, r3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800750e:	4b05      	ldr	r3, [pc, #20]	; (8007524 <TimerSetTimeout+0x50>)
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	6812      	ldr	r2, [r2, #0]
 8007516:	4610      	mov	r0, r2
 8007518:	4798      	blx	r3
}
 800751a:	bf00      	nop
 800751c:	3714      	adds	r7, #20
 800751e:	46bd      	mov	sp, r7
 8007520:	bd90      	pop	{r4, r7, pc}
 8007522:	bf00      	nop
 8007524:	08007714 	.word	0x08007714

08007528 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8007530:	4b14      	ldr	r3, [pc, #80]	; (8007584 <TimerInsertTimer+0x5c>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8007536:	4b13      	ldr	r3, [pc, #76]	; (8007584 <TimerInsertTimer+0x5c>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	695b      	ldr	r3, [r3, #20]
 800753c:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800753e:	e012      	b.n	8007566 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	429a      	cmp	r2, r3
 800754a:	d905      	bls.n	8007558 <TimerInsertTimer+0x30>
    {
        cur = next;
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	695b      	ldr	r3, [r3, #20]
 8007554:	60bb      	str	r3, [r7, #8]
 8007556:	e006      	b.n	8007566 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	68ba      	ldr	r2, [r7, #8]
 8007562:	615a      	str	r2, [r3, #20]
        return;
 8007564:	e009      	b.n	800757a <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	695b      	ldr	r3, [r3, #20]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d1e8      	bne.n	8007540 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	615a      	str	r2, [r3, #20]
}
 800757a:	3714      	adds	r7, #20
 800757c:	46bd      	mov	sp, r7
 800757e:	bc80      	pop	{r7}
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop
 8007584:	2000028c 	.word	0x2000028c

08007588 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8007590:	4b0b      	ldr	r3, [pc, #44]	; (80075c0 <TimerInsertNewHeadTimer+0x38>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d002      	beq.n	80075a2 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 80075a8:	4a05      	ldr	r2, [pc, #20]	; (80075c0 <TimerInsertNewHeadTimer+0x38>)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 80075ae:	4b04      	ldr	r3, [pc, #16]	; (80075c0 <TimerInsertNewHeadTimer+0x38>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7ff ff8e 	bl	80074d4 <TimerSetTimeout>
}
 80075b8:	bf00      	nop
 80075ba:	3710      	adds	r7, #16
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	2000028c 	.word	0x2000028c

080075c4 <__libc_init_array>:
 80075c4:	b570      	push	{r4, r5, r6, lr}
 80075c6:	4d0d      	ldr	r5, [pc, #52]	; (80075fc <__libc_init_array+0x38>)
 80075c8:	4c0d      	ldr	r4, [pc, #52]	; (8007600 <__libc_init_array+0x3c>)
 80075ca:	1b64      	subs	r4, r4, r5
 80075cc:	10a4      	asrs	r4, r4, #2
 80075ce:	2600      	movs	r6, #0
 80075d0:	42a6      	cmp	r6, r4
 80075d2:	d109      	bne.n	80075e8 <__libc_init_array+0x24>
 80075d4:	4d0b      	ldr	r5, [pc, #44]	; (8007604 <__libc_init_array+0x40>)
 80075d6:	4c0c      	ldr	r4, [pc, #48]	; (8007608 <__libc_init_array+0x44>)
 80075d8:	f000 f820 	bl	800761c <_init>
 80075dc:	1b64      	subs	r4, r4, r5
 80075de:	10a4      	asrs	r4, r4, #2
 80075e0:	2600      	movs	r6, #0
 80075e2:	42a6      	cmp	r6, r4
 80075e4:	d105      	bne.n	80075f2 <__libc_init_array+0x2e>
 80075e6:	bd70      	pop	{r4, r5, r6, pc}
 80075e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80075ec:	4798      	blx	r3
 80075ee:	3601      	adds	r6, #1
 80075f0:	e7ee      	b.n	80075d0 <__libc_init_array+0xc>
 80075f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80075f6:	4798      	blx	r3
 80075f8:	3601      	adds	r6, #1
 80075fa:	e7f2      	b.n	80075e2 <__libc_init_array+0x1e>
 80075fc:	080078a8 	.word	0x080078a8
 8007600:	080078a8 	.word	0x080078a8
 8007604:	080078a8 	.word	0x080078a8
 8007608:	080078ac 	.word	0x080078ac

0800760c <memset>:
 800760c:	4402      	add	r2, r0
 800760e:	4603      	mov	r3, r0
 8007610:	4293      	cmp	r3, r2
 8007612:	d100      	bne.n	8007616 <memset+0xa>
 8007614:	4770      	bx	lr
 8007616:	f803 1b01 	strb.w	r1, [r3], #1
 800761a:	e7f9      	b.n	8007610 <memset+0x4>

0800761c <_init>:
 800761c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800761e:	bf00      	nop
 8007620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007622:	bc08      	pop	{r3}
 8007624:	469e      	mov	lr, r3
 8007626:	4770      	bx	lr

08007628 <_fini>:
 8007628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800762a:	bf00      	nop
 800762c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800762e:	bc08      	pop	{r3}
 8007630:	469e      	mov	lr, r3
 8007632:	4770      	bx	lr
